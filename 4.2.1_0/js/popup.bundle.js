/******/
(function(modules) { // webpackBootstrap
  /******/ // The module cache
  /******/
  var installedModules = {};

  /******/ // The require function
  /******/
  function __webpack_require__(moduleId) {

    /******/ // Check if module is in cache
    /******/
    if (installedModules[moduleId])
      /******/
      return installedModules[moduleId].exports;

    /******/ // Create a new module (and put it into the cache)
    /******/
    var module = installedModules[moduleId] = {
      /******/
      exports: {},
      /******/
      id: moduleId,
      /******/
      loaded: false
      /******/
    };

    /******/ // Execute the module function
    /******/
    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

    /******/ // Flag the module as loaded
    /******/
    module.loaded = true;

    /******/ // Return the exports of the module
    /******/
    return module.exports;
    /******/
  }

  /******/ // expose the modules object (__webpack_modules__)
  /******/
  __webpack_require__.m = modules;

  /******/ // expose the module cache
  /******/
  __webpack_require__.c = installedModules;

  /******/ // __webpack_public_path__
  /******/
  __webpack_require__.p = "";

  /******/ // Load entry module and return exports
  /******/
  return __webpack_require__(0);
  /******/
})
/************************************************************************/
/******/
((function(modules) {
  // Check all modules for deduplicated modules
  for (var i in modules) {
    if (Object.prototype.hasOwnProperty.call(modules, i)) {
      switch (typeof modules[i]) {
        case "function":
          break;
        case "object":
          // Module can be created from a template
          modules[i] = (function(_m) {
            var args = _m.slice(1),
              fn = modules[_m[0]];
            return function(a, b, c) {
              fn.apply(this, [a, b, c].concat(args));
            };
          }(modules[i]));
          break;
        default:
          // Module is a copy of another module
          modules[i] = modules[modules[i]];
          break;
      }
    }
  }
  return modules;
}([
  /* 0 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(438);

    /***/
  }),
  /* 1 */
  ,
  /* 2 */
  ,
  /* 3 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(4);

    /***/
  }),
  /* 4 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(5);

    /***/
  }),
  /* 5 */
  /***/
  (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */
    (function(global) {
      "use strict";

      __webpack_require__(6);

      __webpack_require__(193);

      if (global._babelPolyfill) {
        throw new Error("only one instance of babel/polyfill is allowed");
      }
      global._babelPolyfill = true;
      /* WEBPACK VAR INJECTION */
    }.call(exports, (function() { return this; }())))

    /***/
  }),
  /* 6 */
  /***/
  (function(module, exports, __webpack_require__) {

    __webpack_require__(7);
    __webpack_require__(40);
    __webpack_require__(46);
    __webpack_require__(48);
    __webpack_require__(50);
    __webpack_require__(52);
    __webpack_require__(54);
    __webpack_require__(56);
    __webpack_require__(57);
    __webpack_require__(58);
    __webpack_require__(59);
    __webpack_require__(60);
    __webpack_require__(61);
    __webpack_require__(62);
    __webpack_require__(63);
    __webpack_require__(64);
    __webpack_require__(65);
    __webpack_require__(66);
    __webpack_require__(67);
    __webpack_require__(70);
    __webpack_require__(71);
    __webpack_require__(72);
    __webpack_require__(74);
    __webpack_require__(75);
    __webpack_require__(76);
    __webpack_require__(77);
    __webpack_require__(78);
    __webpack_require__(79);
    __webpack_require__(80);
    __webpack_require__(82);
    __webpack_require__(83);
    __webpack_require__(84);
    __webpack_require__(86);
    __webpack_require__(87);
    __webpack_require__(88);
    __webpack_require__(90);
    __webpack_require__(91);
    __webpack_require__(92);
    __webpack_require__(93);
    __webpack_require__(94);
    __webpack_require__(95);
    __webpack_require__(96);
    __webpack_require__(97);
    __webpack_require__(98);
    __webpack_require__(99);
    __webpack_require__(100);
    __webpack_require__(101);
    __webpack_require__(102);
    __webpack_require__(103);
    __webpack_require__(108);
    __webpack_require__(109);
    __webpack_require__(113);
    __webpack_require__(114);
    __webpack_require__(116);
    __webpack_require__(117);
    __webpack_require__(122);
    __webpack_require__(123);
    __webpack_require__(126);
    __webpack_require__(128);
    __webpack_require__(130);
    __webpack_require__(132);
    __webpack_require__(133);
    __webpack_require__(134);
    __webpack_require__(136);
    __webpack_require__(137);
    __webpack_require__(139);
    __webpack_require__(140);
    __webpack_require__(141);
    __webpack_require__(142);
    __webpack_require__(149);
    __webpack_require__(152);
    __webpack_require__(153);
    __webpack_require__(155);
    __webpack_require__(156);
    __webpack_require__(157);
    __webpack_require__(158);
    __webpack_require__(159);
    __webpack_require__(160);
    __webpack_require__(161);
    __webpack_require__(162);
    __webpack_require__(163);
    __webpack_require__(164);
    __webpack_require__(165);
    __webpack_require__(166);
    __webpack_require__(168);
    __webpack_require__(169);
    __webpack_require__(170);
    __webpack_require__(171);
    __webpack_require__(172);
    __webpack_require__(173);
    __webpack_require__(175);
    __webpack_require__(176);
    __webpack_require__(177);
    __webpack_require__(178);
    __webpack_require__(180);
    __webpack_require__(181);
    __webpack_require__(183);
    __webpack_require__(184);
    __webpack_require__(186);
    __webpack_require__(187);
    __webpack_require__(188);
    __webpack_require__(191);
    __webpack_require__(192);
    module.exports = __webpack_require__(11);

    /***/
  }),
  /* 7 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $ = __webpack_require__(8),
      $export = __webpack_require__(9),
      DESCRIPTORS = __webpack_require__(14),
      createDesc = __webpack_require__(13),
      html = __webpack_require__(20),
      cel = __webpack_require__(21),
      has = __webpack_require__(23),
      cof = __webpack_require__(24),
      invoke = __webpack_require__(25),
      fails = __webpack_require__(15),
      anObject = __webpack_require__(26),
      aFunction = __webpack_require__(19),
      isObject = __webpack_require__(22),
      toObject = __webpack_require__(27),
      toIObject = __webpack_require__(29),
      toInteger = __webpack_require__(31),
      toIndex = __webpack_require__(32),
      toLength = __webpack_require__(33),
      IObject = __webpack_require__(30),
      IE_PROTO = __webpack_require__(17)('__proto__'),
      createArrayMethod = __webpack_require__(34),
      arrayIndexOf = __webpack_require__(39)(false),
      ObjectProto = Object.prototype,
      ArrayProto = Array.prototype,
      arraySlice = ArrayProto.slice,
      arrayJoin = ArrayProto.join,
      defineProperty = $.setDesc,
      getOwnDescriptor = $.getDesc,
      defineProperties = $.setDescs,
      factories = {},
      IE8_DOM_DEFINE;

    if (!DESCRIPTORS) {
      IE8_DOM_DEFINE = !fails(function() {
        return defineProperty(cel('div'), 'a', { get: function() { return 7; } }).a != 7;
      });
      $.setDesc = function(O, P, Attributes) {
        if (IE8_DOM_DEFINE) try {
          return defineProperty(O, P, Attributes);
        } catch (e) { /* empty */ }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
        if ('value' in Attributes) anObject(O)[P] = Attributes.value;
        return O;
      };
      $.getDesc = function(O, P) {
        if (IE8_DOM_DEFINE) try {
          return getOwnDescriptor(O, P);
        } catch (e) { /* empty */ }
        if (has(O, P)) return createDesc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
      };
      $.setDescs = defineProperties = function(O, Properties) {
        anObject(O);
        var keys = $.getKeys(Properties),
          length = keys.length,
          i = 0,
          P;
        while (length > i) $.setDesc(O, P = keys[i++], Properties[P]);
        return O;
      };
    }
    $export($export.S + $export.F * !DESCRIPTORS, 'Object', {
      // 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
      getOwnPropertyDescriptor: $.getDesc,
      // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
      defineProperty: $.setDesc,
      // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
      defineProperties: defineProperties
    });

    // IE 8- don't enum bug keys
    var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' +
        'toLocaleString,toString,valueOf').split(',')
      // Additional keys for getOwnPropertyNames
      ,
      keys2 = keys1.concat('length', 'prototype'),
      keysLen1 = keys1.length;

    // Create object with `null` prototype: use iframe Object with cleared prototype
    var createDict = function() {
      // Thrash, waste and sodomy: IE GC bug
      var iframe = cel('iframe'),
        i = keysLen1,
        gt = '>',
        iframeDocument;
      iframe.style.display = 'none';
      html.appendChild(iframe);
      iframe.src = 'javascript:'; // eslint-disable-line no-script-url
      // createDict = iframe.contentWindow.Object;
      // html.removeChild(iframe);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write('<script>document.F=Object</script' + gt);
      iframeDocument.close();
      createDict = iframeDocument.F;
      while (i--) delete createDict.prototype[keys1[i]];
      return createDict();
    };
    var createGetKeys = function(names, length) {
      return function(object) {
        var O = toIObject(object),
          i = 0,
          result = [],
          key;
        for (key in O)
          if (key != IE_PROTO) has(O, key) && result.push(key);
        // Don't enum bug & hidden keys
        while (length > i)
          if (has(O, key = names[i++])) {
            ~arrayIndexOf(result, key) || result.push(key);
          }
        return result;
      };
    };
    var Empty = function() {};
    $export($export.S, 'Object', {
      // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
      getPrototypeOf: $.getProto = $.getProto || function(O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];
        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }
        return O instanceof Object ? ObjectProto : null;
      },
      // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
      getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
      // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
      create: $.create = $.create || function(O, /*?*/ Properties) {
        var result;
        if (O !== null) {
          Empty.prototype = anObject(O);
          result = new Empty();
          Empty.prototype = null;
          // add "__proto__" for Object.getPrototypeOf shim
          result[IE_PROTO] = O;
        } else result = createDict();
        return Properties === undefined ? result : defineProperties(result, Properties);
      },
      // 19.1.2.14 / 15.2.3.14 Object.keys(O)
      keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false)
    });

    var construct = function(F, len, args) {
      if (!(len in factories)) {
        for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
        factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
      }
      return factories[len](F, args);
    };

    // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
    $export($export.P, 'Function', {
      bind: function bind(that /*, args... */ ) {
        var fn = aFunction(this),
          partArgs = arraySlice.call(arguments, 1);
        var bound = function( /* args... */ ) {
          var args = partArgs.concat(arraySlice.call(arguments));
          return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
        };
        if (isObject(fn.prototype)) bound.prototype = fn.prototype;
        return bound;
      }
    });

    // fallback for not array-like ES3 strings and DOM objects
    $export($export.P + $export.F * fails(function() {
      if (html) arraySlice.call(html);
    }), 'Array', {
      slice: function(begin, end) {
        var len = toLength(this.length),
          klass = cof(this);
        end = end === undefined ? len : end;
        if (klass == 'Array') return arraySlice.call(this, begin, end);
        var start = toIndex(begin, len),
          upTo = toIndex(end, len),
          size = toLength(upTo - start),
          cloned = Array(size),
          i = 0;
        for (; i < size; i++) cloned[i] = klass == 'String' ?
          this.charAt(start + i) :
          this[start + i];
        return cloned;
      }
    });
    $export($export.P + $export.F * (IObject != Object), 'Array', {
      join: function join(separator) {
        return arrayJoin.call(IObject(this), separator === undefined ? ',' : separator);
      }
    });

    // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
    $export($export.S, 'Array', { isArray: __webpack_require__(36) });

    var createArrayReduce = function(isRight) {
      return function(callbackfn, memo) {
        aFunction(callbackfn);
        var O = IObject(this),
          length = toLength(O.length),
          index = isRight ? length - 1 : 0,
          i = isRight ? -1 : 1;
        if (arguments.length < 2)
          for (;;) {
            if (index in O) {
              memo = O[index];
              index += i;
              break;
            }
            index += i;
            if (isRight ? index < 0 : length <= index) {
              throw TypeError('Reduce of empty array with no initial value');
            }
          }
        for (; isRight ? index >= 0 : length > index; index += i)
          if (index in O) {
            memo = callbackfn(memo, O[index], index, this);
          }
        return memo;
      };
    };

    var methodize = function($fn) {
      return function(arg1 /*, arg2 = undefined */ ) {
        return $fn(this, arg1, arguments[1]);
      };
    };

    $export($export.P, 'Array', {
      // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
      forEach: $.each = $.each || methodize(createArrayMethod(0)),
      // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
      map: methodize(createArrayMethod(1)),
      // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
      filter: methodize(createArrayMethod(2)),
      // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
      some: methodize(createArrayMethod(3)),
      // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
      every: methodize(createArrayMethod(4)),
      // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
      reduce: createArrayReduce(false),
      // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
      reduceRight: createArrayReduce(true),
      // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
      indexOf: methodize(arrayIndexOf),
      // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
      lastIndexOf: function(el, fromIndex /* = @[*-1] */ ) {
        var O = toIObject(this),
          length = toLength(O.length),
          index = length - 1;
        if (arguments.length > 1) index = Math.min(index, toInteger(fromIndex));
        if (index < 0) index = toLength(length + index);
        for (; index >= 0; index--)
          if (index in O)
            if (O[index] === el) return index;
        return -1;
      }
    });

    // 20.3.3.1 / 15.9.4.4 Date.now()
    $export($export.S, 'Date', { now: function() { return +new Date; } });

    var lz = function(num) {
      return num > 9 ? num : '0' + num;
    };

    // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
    // PhantomJS / old WebKit has a broken implementations
    $export($export.P + $export.F * (fails(function() {
      return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
    }) || !fails(function() {
      new Date(NaN).toISOString();
    })), 'Date', {
      toISOString: function toISOString() {
        if (!isFinite(this)) throw RangeError('Invalid time value');
        var d = this,
          y = d.getUTCFullYear(),
          m = d.getUTCMilliseconds(),
          s = y < 0 ? '-' : y > 9999 ? '+' : '';
        return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
          '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
          'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
          ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
      }
    });

    /***/
  }),
  /* 8 */
  /***/
  (function(module, exports) {

    var $Object = Object;
    module.exports = {
      create: $Object.create,
      getProto: $Object.getPrototypeOf,
      isEnum: {}.propertyIsEnumerable,
      getDesc: $Object.getOwnPropertyDescriptor,
      setDesc: $Object.defineProperty,
      setDescs: $Object.defineProperties,
      getKeys: $Object.keys,
      getNames: $Object.getOwnPropertyNames,
      getSymbols: $Object.getOwnPropertySymbols,
      each: [].forEach
    };

    /***/
  }),
  /* 9 */
  /***/
  (function(module, exports, __webpack_require__) {

    var global = __webpack_require__(10),
      core = __webpack_require__(11),
      hide = __webpack_require__(12),
      redefine = __webpack_require__(16),
      ctx = __webpack_require__(18),
      PROTOTYPE = 'prototype';

    var $export = function(type, name, source) {
      var IS_FORCED = type & $export.F,
        IS_GLOBAL = type & $export.G,
        IS_STATIC = type & $export.S,
        IS_PROTO = type & $export.P,
        IS_BIND = type & $export.B,
        target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE],
        exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
        expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {}),
        key, own, out, exp;
      if (IS_GLOBAL) source = name;
      for (key in source) {
        // contains in native
        own = !IS_FORCED && target && key in target;
        // export native or passed
        out = (own ? target : source)[key];
        // bind timers to global for call from export context
        exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
        // extend global
        if (target && !own) redefine(target, key, out);
        // export
        if (exports[key] != out) hide(exports, key, exp);
        if (IS_PROTO && expProto[key] != out) expProto[key] = out;
      }
    };
    global.core = core;
    // type bitmap
    $export.F = 1; // forced
    $export.G = 2; // global
    $export.S = 4; // static
    $export.P = 8; // proto
    $export.B = 16; // bind
    $export.W = 32; // wrap
    module.exports = $export;

    /***/
  }),
  /* 10 */
  /***/
  (function(module, exports) {

    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math ?
      window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

    /***/
  }),
  /* 11 */
  /***/
  (function(module, exports) {

    var core = module.exports = { version: '1.2.6' };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

    /***/
  }),
  /* 12 */
  [624, 8, 13, 14],
  /* 13 */
  /***/
  (function(module, exports) {

    module.exports = function(bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };

    /***/
  }),
  /* 14 */
  [625, 15],
  /* 15 */
  /***/
  (function(module, exports) {

    module.exports = function(exec) {
      try {
        return !!exec();
      } catch (e) {
        return true;
      }
    };

    /***/
  }),
  /* 16 */
  /***/
  (function(module, exports, __webpack_require__) {

    // add fake Function#toString
    // for correct work wrapped methods / constructors with methods like LoDash isNative
    var global = __webpack_require__(10),
      hide = __webpack_require__(12),
      SRC = __webpack_require__(17)('src'),
      TO_STRING = 'toString',
      $toString = Function[TO_STRING],
      TPL = ('' + $toString).split(TO_STRING);

    __webpack_require__(11).inspectSource = function(it) {
      return $toString.call(it);
    };

    (module.exports = function(O, key, val, safe) {
      if (typeof val == 'function') {
        val.hasOwnProperty(SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
        val.hasOwnProperty('name') || hide(val, 'name', key);
      }
      if (O === global) {
        O[key] = val;
      } else {
        if (!safe) delete O[key];
        hide(O, key, val);
      }
    })(Function.prototype, TO_STRING, function toString() {
      return typeof this == 'function' && this[SRC] || $toString.call(this);
    });

    /***/
  }),
  /* 17 */
  /***/
  (function(module, exports) {

    var id = 0,
      px = Math.random();
    module.exports = function(key) {
      return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
    };

    /***/
  }),
  /* 18 */
  [626, 19],
  /* 19 */
  /***/
  (function(module, exports) {

    module.exports = function(it) {
      if (typeof it != 'function') throw TypeError(it + ' is not a function!');
      return it;
    };

    /***/
  }),
  /* 20 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(10).document && document.documentElement;

    /***/
  }),
  /* 21 */
  /***/
  (function(module, exports, __webpack_require__) {

    var isObject = __webpack_require__(22),
      document = __webpack_require__(10).document
      // in old IE typeof document.createElement is 'object'
      ,
      is = isObject(document) && isObject(document.createElement);
    module.exports = function(it) {
      return is ? document.createElement(it) : {};
    };

    /***/
  }),
  /* 22 */
  /***/
  (function(module, exports) {

    module.exports = function(it) {
      return typeof it === 'object' ? it !== null : typeof it === 'function';
    };

    /***/
  }),
  /* 23 */
  /***/
  (function(module, exports) {

    var hasOwnProperty = {}.hasOwnProperty;
    module.exports = function(it, key) {
      return hasOwnProperty.call(it, key);
    };

    /***/
  }),
  /* 24 */
  /***/
  (function(module, exports) {

    var toString = {}.toString;

    module.exports = function(it) {
      return toString.call(it).slice(8, -1);
    };

    /***/
  }),
  /* 25 */
  /***/
  (function(module, exports) {

    // fast apply, http://jsperf.lnkit.com/fast-apply/5
    module.exports = function(fn, args, that) {
      var un = that === undefined;
      switch (args.length) {
        case 0:
          return un ? fn() :
            fn.call(that);
        case 1:
          return un ? fn(args[0]) :
            fn.call(that, args[0]);
        case 2:
          return un ? fn(args[0], args[1]) :
            fn.call(that, args[0], args[1]);
        case 3:
          return un ? fn(args[0], args[1], args[2]) :
            fn.call(that, args[0], args[1], args[2]);
        case 4:
          return un ? fn(args[0], args[1], args[2], args[3]) :
            fn.call(that, args[0], args[1], args[2], args[3]);
      }
      return fn.apply(that, args);
    };

    /***/
  }),
  /* 26 */
  [627, 22],
  /* 27 */
  [628, 28],
  /* 28 */
  /***/
  (function(module, exports) {

    // 7.2.1 RequireObjectCoercible(argument)
    module.exports = function(it) {
      if (it == undefined) throw TypeError("Can't call method on  " + it);
      return it;
    };

    /***/
  }),
  /* 29 */
  [629, 30, 28],
  /* 30 */
  [630, 24],
  /* 31 */
  /***/
  (function(module, exports) {

    // 7.1.4 ToInteger
    var ceil = Math.ceil,
      floor = Math.floor;
    module.exports = function(it) {
      return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    };

    /***/
  }),
  /* 32 */
  /***/
  (function(module, exports, __webpack_require__) {

    var toInteger = __webpack_require__(31),
      max = Math.max,
      min = Math.min;
    module.exports = function(index, length) {
      index = toInteger(index);
      return index < 0 ? max(index + length, 0) : min(index, length);
    };

    /***/
  }),
  /* 33 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 7.1.15 ToLength
    var toInteger = __webpack_require__(31),
      min = Math.min;
    module.exports = function(it) {
      return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
    };

    /***/
  }),
  /* 34 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 0 -> Array#forEach
    // 1 -> Array#map
    // 2 -> Array#filter
    // 3 -> Array#some
    // 4 -> Array#every
    // 5 -> Array#find
    // 6 -> Array#findIndex
    var ctx = __webpack_require__(18),
      IObject = __webpack_require__(30),
      toObject = __webpack_require__(27),
      toLength = __webpack_require__(33),
      asc = __webpack_require__(35);
    module.exports = function(TYPE) {
      var IS_MAP = TYPE == 1,
        IS_FILTER = TYPE == 2,
        IS_SOME = TYPE == 3,
        IS_EVERY = TYPE == 4,
        IS_FIND_INDEX = TYPE == 6,
        NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      return function($this, callbackfn, that) {
        var O = toObject($this),
          self = IObject(O),
          f = ctx(callbackfn, that, 3),
          length = toLength(self.length),
          index = 0,
          result = IS_MAP ? asc($this, length) : IS_FILTER ? asc($this, 0) : undefined,
          val, res;
        for (; length > index; index++)
          if (NO_HOLES || index in self) {
            val = self[index];
            res = f(val, index, O);
            if (TYPE) {
              if (IS_MAP) result[index] = res; // map
              else if (res) switch (TYPE) {
                case 3:
                  return true; // some
                case 5:
                  return val; // find
                case 6:
                  return index; // findIndex
                case 2:
                  result.push(val); // filter
              } else if (IS_EVERY) return false; // every
            }
          }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
      };
    };

    /***/
  }),
  /* 35 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
    var isObject = __webpack_require__(22),
      isArray = __webpack_require__(36),
      SPECIES = __webpack_require__(37)('species');
    module.exports = function(original, length) {
      var C;
      if (isArray(original)) {
        C = original.constructor;
        // cross-realm fallback
        if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
        if (isObject(C)) {
          C = C[SPECIES];
          if (C === null) C = undefined;
        }
      }
      return new(C === undefined ? Array : C)(length);
    };

    /***/
  }),
  /* 36 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 7.2.2 IsArray(argument)
    var cof = __webpack_require__(24);
    module.exports = Array.isArray || function(arg) {
      return cof(arg) == 'Array';
    };

    /***/
  }),
  /* 37 */
  [631, 38, 17, 10],
  /* 38 */
  [632, 10],
  /* 39 */
  /***/
  (function(module, exports, __webpack_require__) {

    // false -> Array#indexOf
    // true  -> Array#includes
    var toIObject = __webpack_require__(29),
      toLength = __webpack_require__(33),
      toIndex = __webpack_require__(32);
    module.exports = function(IS_INCLUDES) {
      return function($this, el, fromIndex) {
        var O = toIObject($this),
          length = toLength(O.length),
          index = toIndex(fromIndex, length),
          value;
        // Array#includes uses SameValueZero equality algorithm
        if (IS_INCLUDES && el != el)
          while (length > index) {
            value = O[index++];
            if (value != value) return true;
            // Array#toIndex ignores holes, Array#includes - not
          } else
            for (; length > index; index++)
              if (IS_INCLUDES || index in O) {
                if (O[index] === el) return IS_INCLUDES || index;
              } return !IS_INCLUDES && -1;
      };
    };

    /***/
  }),
  /* 40 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    // ECMAScript 6 symbols shim
    var $ = __webpack_require__(8),
      global = __webpack_require__(10),
      has = __webpack_require__(23),
      DESCRIPTORS = __webpack_require__(14),
      $export = __webpack_require__(9),
      redefine = __webpack_require__(16),
      $fails = __webpack_require__(15),
      shared = __webpack_require__(38),
      setToStringTag = __webpack_require__(41),
      uid = __webpack_require__(17),
      wks = __webpack_require__(37),
      keyOf = __webpack_require__(42),
      $names = __webpack_require__(43),
      enumKeys = __webpack_require__(44),
      isArray = __webpack_require__(36),
      anObject = __webpack_require__(26),
      toIObject = __webpack_require__(29),
      createDesc = __webpack_require__(13),
      getDesc = $.getDesc,
      setDesc = $.setDesc,
      _create = $.create,
      getNames = $names.get,
      $Symbol = global.Symbol,
      $JSON = global.JSON,
      _stringify = $JSON && $JSON.stringify,
      setter = false,
      HIDDEN = wks('_hidden'),
      isEnum = $.isEnum,
      SymbolRegistry = shared('symbol-registry'),
      AllSymbols = shared('symbols'),
      useNative = typeof $Symbol == 'function',
      ObjectProto = Object.prototype;

    // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    var setSymbolDesc = DESCRIPTORS && $fails(function() {
      return _create(setDesc({}, 'a', {
        get: function() { return setDesc(this, 'a', { value: 7 }).a; }
      })).a != 7;
    }) ? function(it, key, D) {
      var protoDesc = getDesc(ObjectProto, key);
      if (protoDesc) delete ObjectProto[key];
      setDesc(it, key, D);
      if (protoDesc && it !== ObjectProto) setDesc(ObjectProto, key, protoDesc);
    } : setDesc;

    var wrap = function(tag) {
      var sym = AllSymbols[tag] = _create($Symbol.prototype);
      sym._k = tag;
      DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
        configurable: true,
        set: function(value) {
          if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
          setSymbolDesc(this, tag, createDesc(1, value));
        }
      });
      return sym;
    };

    var isSymbol = function(it) {
      return typeof it == 'symbol';
    };

    var $defineProperty = function defineProperty(it, key, D) {
      if (D && has(AllSymbols, key)) {
        if (!D.enumerable) {
          if (!has(it, HIDDEN)) setDesc(it, HIDDEN, createDesc(1, {}));
          it[HIDDEN][key] = true;
        } else {
          if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
          D = _create(D, { enumerable: createDesc(0, false) });
        }
        return setSymbolDesc(it, key, D);
      }
      return setDesc(it, key, D);
    };
    var $defineProperties = function defineProperties(it, P) {
      anObject(it);
      var keys = enumKeys(P = toIObject(P)),
        i = 0,
        l = keys.length,
        key;
      while (l > i) $defineProperty(it, key = keys[i++], P[key]);
      return it;
    };
    var $create = function create(it, P) {
      return P === undefined ? _create(it) : $defineProperties(_create(it), P);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable(key) {
      var E = isEnum.call(this, key);
      return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ?
        E : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
      var D = getDesc(it = toIObject(it), key);
      if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
      return D;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(it) {
      var names = getNames(toIObject(it)),
        result = [],
        i = 0,
        key;
      while (names.length > i)
        if (!has(AllSymbols, key = names[i++]) && key != HIDDEN) result.push(key);
      return result;
    };
    var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
      var names = getNames(toIObject(it)),
        result = [],
        i = 0,
        key;
      while (names.length > i)
        if (has(AllSymbols, key = names[i++])) result.push(AllSymbols[key]);
      return result;
    };
    var $stringify = function stringify(it) {
      if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      var args = [it],
        i = 1,
        $$ = arguments,
        replacer, $replacer;
      while ($$.length > i) args.push($$[i++]);
      replacer = args[1];
      if (typeof replacer == 'function') $replacer = replacer;
      if ($replacer || !isArray(replacer)) replacer = function(key, value) {
        if ($replacer) value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    };
    var buggyJSON = $fails(function() {
      var S = $Symbol();
      // MS Edge converts symbol values to JSON as {}
      // WebKit converts symbol values to JSON as null
      // V8 throws on boxed symbols
      return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
    });

    // 19.4.1.1 Symbol([description])
    if (!useNative) {
      $Symbol = function Symbol() {
        if (isSymbol(this)) throw TypeError('Symbol is not a constructor');
        return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
      };
      redefine($Symbol.prototype, 'toString', function toString() {
        return this._k;
      });

      isSymbol = function(it) {
        return it instanceof $Symbol;
      };

      $.create = $create;
      $.isEnum = $propertyIsEnumerable;
      $.getDesc = $getOwnPropertyDescriptor;
      $.setDesc = $defineProperty;
      $.setDescs = $defineProperties;
      $.getNames = $names.get = $getOwnPropertyNames;
      $.getSymbols = $getOwnPropertySymbols;

      if (DESCRIPTORS && !__webpack_require__(45)) {
        redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
      }
    }

    var symbolStatics = {
      // 19.4.2.1 Symbol.for(key)
      'for': function(key) {
        return has(SymbolRegistry, key += '') ?
          SymbolRegistry[key] :
          SymbolRegistry[key] = $Symbol(key);
      },
      // 19.4.2.5 Symbol.keyFor(sym)
      keyFor: function keyFor(key) {
        return keyOf(SymbolRegistry, key);
      },
      useSetter: function() { setter = true; },
      useSimple: function() { setter = false; }
    };
    // 19.4.2.2 Symbol.hasInstance
    // 19.4.2.3 Symbol.isConcatSpreadable
    // 19.4.2.4 Symbol.iterator
    // 19.4.2.6 Symbol.match
    // 19.4.2.8 Symbol.replace
    // 19.4.2.9 Symbol.search
    // 19.4.2.10 Symbol.species
    // 19.4.2.11 Symbol.split
    // 19.4.2.12 Symbol.toPrimitive
    // 19.4.2.13 Symbol.toStringTag
    // 19.4.2.14 Symbol.unscopables
    $.each.call((
      'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
      'species,split,toPrimitive,toStringTag,unscopables'
    ).split(','), function(it) {
      var sym = wks(it);
      symbolStatics[it] = useNative ? sym : wrap(sym);
    });

    setter = true;

    $export($export.G + $export.W, { Symbol: $Symbol });

    $export($export.S, 'Symbol', symbolStatics);

    $export($export.S + $export.F * !useNative, 'Object', {
      // 19.1.2.2 Object.create(O [, Properties])
      create: $create,
      // 19.1.2.4 Object.defineProperty(O, P, Attributes)
      defineProperty: $defineProperty,
      // 19.1.2.3 Object.defineProperties(O, Properties)
      defineProperties: $defineProperties,
      // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
      // 19.1.2.7 Object.getOwnPropertyNames(O)
      getOwnPropertyNames: $getOwnPropertyNames,
      // 19.1.2.8 Object.getOwnPropertySymbols(O)
      getOwnPropertySymbols: $getOwnPropertySymbols
    });

    // 24.3.2 JSON.stringify(value [, replacer [, space]])
    $JSON && $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', { stringify: $stringify });

    // 19.4.3.5 Symbol.prototype[@@toStringTag]
    setToStringTag($Symbol, 'Symbol');
    // 20.2.1.9 Math[@@toStringTag]
    setToStringTag(Math, 'Math', true);
    // 24.3.3 JSON[@@toStringTag]
    setToStringTag(global.JSON, 'JSON', true);

    /***/
  }),
  /* 41 */
  [633, 8, 23, 37],
  /* 42 */
  /***/
  (function(module, exports, __webpack_require__) {

    var $ = __webpack_require__(8),
      toIObject = __webpack_require__(29);
    module.exports = function(object, el) {
      var O = toIObject(object),
        keys = $.getKeys(O),
        length = keys.length,
        index = 0,
        key;
      while (length > index)
        if (O[key = keys[index++]] === el) return key;
    };

    /***/
  }),
  /* 43 */
  /***/
  (function(module, exports, __webpack_require__) {

    // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    var toIObject = __webpack_require__(29),
      getNames = __webpack_require__(8).getNames,
      toString = {}.toString;

    var windowNames = typeof window == 'object' && Object.getOwnPropertyNames ?
      Object.getOwnPropertyNames(window) : [];

    var getWindowNames = function(it) {
      try {
        return getNames(it);
      } catch (e) {
        return windowNames.slice();
      }
    };

    module.exports.get = function getOwnPropertyNames(it) {
      if (windowNames && toString.call(it) == '[object Window]') return getWindowNames(it);
      return getNames(toIObject(it));
    };

    /***/
  }),
  /* 44 */
  /***/
  (function(module, exports, __webpack_require__) {

    // all enumerable object keys, includes symbols
    var $ = __webpack_require__(8);
    module.exports = function(it) {
      var keys = $.getKeys(it),
        getSymbols = $.getSymbols;
      if (getSymbols) {
        var symbols = getSymbols(it),
          isEnum = $.isEnum,
          i = 0,
          key;
        while (symbols.length > i)
          if (isEnum.call(it, key = symbols[i++])) keys.push(key);
      }
      return keys;
    };

    /***/
  }),
  /* 45 */
  /***/
  (function(module, exports) {

    module.exports = false;

    /***/
  }),
  /* 46 */
  [634, 9, 47],
  /* 47 */
  [635, 8, 27, 30, 15],
  /* 48 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 19.1.3.10 Object.is(value1, value2)
    var $export = __webpack_require__(9);
    $export($export.S, 'Object', { is: __webpack_require__(49) });

    /***/
  }),
  /* 49 */
  /***/
  (function(module, exports) {

    // 7.2.9 SameValue(x, y)
    module.exports = Object.is || function is(x, y) {
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };

    /***/
  }),
  /* 50 */
  [636, 9, 51],
  /* 51 */
  [637, 8, 22, 26, 18],
  /* 52 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    // 19.1.3.6 Object.prototype.toString()
    var classof = __webpack_require__(53),
      test = {};
    test[__webpack_require__(37)('toStringTag')] = 'z';
    if (test + '' != '[object z]') {
      __webpack_require__(16)(Object.prototype, 'toString', function toString() {
        return '[object ' + classof(this) + ']';
      }, true);
    }

    /***/
  }),
  /* 53 */
  [638, 24, 37],
  /* 54 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 19.1.2.5 Object.freeze(O)
    var isObject = __webpack_require__(22);

    __webpack_require__(55)('freeze', function($freeze) {
      return function freeze(it) {
        return $freeze && isObject(it) ? $freeze(it) : it;
      };
    });

    /***/
  }),
  /* 55 */
  [639, 9, 11, 15],
  /* 56 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 19.1.2.17 Object.seal(O)
    var isObject = __webpack_require__(22);

    __webpack_require__(55)('seal', function($seal) {
      return function seal(it) {
        return $seal && isObject(it) ? $seal(it) : it;
      };
    });

    /***/
  }),
  /* 57 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 19.1.2.15 Object.preventExtensions(O)
    var isObject = __webpack_require__(22);

    __webpack_require__(55)('preventExtensions', function($preventExtensions) {
      return function preventExtensions(it) {
        return $preventExtensions && isObject(it) ? $preventExtensions(it) : it;
      };
    });

    /***/
  }),
  /* 58 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 19.1.2.12 Object.isFrozen(O)
    var isObject = __webpack_require__(22);

    __webpack_require__(55)('isFrozen', function($isFrozen) {
      return function isFrozen(it) {
        return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
      };
    });

    /***/
  }),
  /* 59 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 19.1.2.13 Object.isSealed(O)
    var isObject = __webpack_require__(22);

    __webpack_require__(55)('isSealed', function($isSealed) {
      return function isSealed(it) {
        return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
      };
    });

    /***/
  }),
  /* 60 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 19.1.2.11 Object.isExtensible(O)
    var isObject = __webpack_require__(22);

    __webpack_require__(55)('isExtensible', function($isExtensible) {
      return function isExtensible(it) {
        return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
      };
    });

    /***/
  }),
  /* 61 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    var toIObject = __webpack_require__(29);

    __webpack_require__(55)('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor) {
      return function getOwnPropertyDescriptor(it, key) {
        return $getOwnPropertyDescriptor(toIObject(it), key);
      };
    });

    /***/
  }),
  /* 62 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 19.1.2.9 Object.getPrototypeOf(O)
    var toObject = __webpack_require__(27);

    __webpack_require__(55)('getPrototypeOf', function($getPrototypeOf) {
      return function getPrototypeOf(it) {
        return $getPrototypeOf(toObject(it));
      };
    });

    /***/
  }),
  /* 63 */
  [640, 27, 55],
  /* 64 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 19.1.2.7 Object.getOwnPropertyNames(O)
    __webpack_require__(55)('getOwnPropertyNames', function() {
      return __webpack_require__(43).get;
    });

    /***/
  }),
  /* 65 */
  /***/
  (function(module, exports, __webpack_require__) {

    var setDesc = __webpack_require__(8).setDesc,
      createDesc = __webpack_require__(13),
      has = __webpack_require__(23),
      FProto = Function.prototype,
      nameRE = /^\s*function ([^ (]*)/,
      NAME = 'name';
    // 19.2.4.2 name
    NAME in FProto || __webpack_require__(14) && setDesc(FProto, NAME, {
      configurable: true,
      get: function() {
        var match = ('' + this).match(nameRE),
          name = match ? match[1] : '';
        has(this, NAME) || setDesc(this, NAME, createDesc(5, name));
        return name;
      }
    });

    /***/
  }),
  /* 66 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $ = __webpack_require__(8),
      isObject = __webpack_require__(22),
      HAS_INSTANCE = __webpack_require__(37)('hasInstance'),
      FunctionProto = Function.prototype;
    // 19.2.3.6 Function.prototype[@@hasInstance](V)
    if (!(HAS_INSTANCE in FunctionProto)) $.setDesc(FunctionProto, HAS_INSTANCE, {
      value: function(O) {
        if (typeof this != 'function' || !isObject(O)) return false;
        if (!isObject(this.prototype)) return O instanceof this;
        // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
        while (O = $.getProto(O))
          if (this.prototype === O) return true;
        return false;
      }
    });

    /***/
  }),
  /* 67 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $ = __webpack_require__(8),
      global = __webpack_require__(10),
      has = __webpack_require__(23),
      cof = __webpack_require__(24),
      toPrimitive = __webpack_require__(68),
      fails = __webpack_require__(15),
      $trim = __webpack_require__(69).trim,
      NUMBER = 'Number',
      $Number = global[NUMBER],
      Base = $Number,
      proto = $Number.prototype
      // Opera ~12 has broken Object#toString
      ,
      BROKEN_COF = cof($.create(proto)) == NUMBER,
      TRIM = 'trim' in String.prototype;

    // 7.1.3 ToNumber(argument)
    var toNumber = function(argument) {
      var it = toPrimitive(argument, false);
      if (typeof it == 'string' && it.length > 2) {
        it = TRIM ? it.trim() : $trim(it, 3);
        var first = it.charCodeAt(0),
          third, radix, maxCode;
        if (first === 43 || first === 45) {
          third = it.charCodeAt(2);
          if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
        } else if (first === 48) {
          switch (it.charCodeAt(1)) {
            case 66:
            case 98:
              radix = 2;
              maxCode = 49;
              break; // fast equal /^0b[01]+$/i
            case 79:
            case 111:
              radix = 8;
              maxCode = 55;
              break; // fast equal /^0o[0-7]+$/i
            default:
              return +it;
          }
          for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
            code = digits.charCodeAt(i);
            // parseInt parses a string to a first unavailable symbol
            // but ToNumber should return NaN if a string contains unavailable symbols
            if (code < 48 || code > maxCode) return NaN;
          }
          return parseInt(digits, radix);
        }
      }
      return +it;
    };

    if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
      $Number = function Number(value) {
        var it = arguments.length < 1 ? 0 : value,
          that = this;
        return that instanceof $Number
          // check on 1..constructor(foo) case
          &&
          (BROKEN_COF ? fails(function() { proto.valueOf.call(that); }) : cof(that) != NUMBER) ?
          new Base(toNumber(it)) : toNumber(it);
      };
      $.each.call(__webpack_require__(14) ? $.getNames(Base) : (
        // ES3:
        'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
        // ES6 (in case, if modules with ES6 Number statics required before):
        'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
        'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
      ).split(','), function(key) {
        if (has(Base, key) && !has($Number, key)) {
          $.setDesc($Number, key, $.getDesc(Base, key));
        }
      });
      $Number.prototype = proto;
      proto.constructor = $Number;
      __webpack_require__(16)(global, NUMBER, $Number);
    }

    /***/
  }),
  /* 68 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 7.1.1 ToPrimitive(input [, PreferredType])
    var isObject = __webpack_require__(22);
    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    module.exports = function(it, S) {
      if (!isObject(it)) return it;
      var fn, val;
      if (S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
      if (typeof(fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
      if (!S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
      throw TypeError("Can't convert object to primitive value");
    };

    /***/
  }),
  /* 69 */
  /***/
  (function(module, exports, __webpack_require__) {

    var $export = __webpack_require__(9),
      defined = __webpack_require__(28),
      fails = __webpack_require__(15),
      spaces = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
      '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF',
      space = '[' + spaces + ']',
      non = '\u200b\u0085',
      ltrim = RegExp('^' + space + space + '*'),
      rtrim = RegExp(space + space + '*$');

    var exporter = function(KEY, exec) {
      var exp = {};
      exp[KEY] = exec(trim);
      $export($export.P + $export.F * fails(function() {
        return !!spaces[KEY]() || non[KEY]() != non;
      }), 'String', exp);
    };

    // 1 -> String#trimLeft
    // 2 -> String#trimRight
    // 3 -> String#trim
    var trim = exporter.trim = function(string, TYPE) {
      string = String(defined(string));
      if (TYPE & 1) string = string.replace(ltrim, '');
      if (TYPE & 2) string = string.replace(rtrim, '');
      return string;
    };

    module.exports = exporter;

    /***/
  }),
  /* 70 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.1.2.1 Number.EPSILON
    var $export = __webpack_require__(9);

    $export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

    /***/
  }),
  /* 71 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.1.2.2 Number.isFinite(number)
    var $export = __webpack_require__(9),
      _isFinite = __webpack_require__(10).isFinite;

    $export($export.S, 'Number', {
      isFinite: function isFinite(it) {
        return typeof it == 'number' && _isFinite(it);
      }
    });

    /***/
  }),
  /* 72 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.1.2.3 Number.isInteger(number)
    var $export = __webpack_require__(9);

    $export($export.S, 'Number', { isInteger: __webpack_require__(73) });

    /***/
  }),
  /* 73 */
  [641, 22],
  /* 74 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.1.2.4 Number.isNaN(number)
    var $export = __webpack_require__(9);

    $export($export.S, 'Number', {
      isNaN: function isNaN(number) {
        return number != number;
      }
    });

    /***/
  }),
  /* 75 */
  [642, 9, 73],
  /* 76 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.1.2.6 Number.MAX_SAFE_INTEGER
    var $export = __webpack_require__(9);

    $export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

    /***/
  }),
  /* 77 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.1.2.10 Number.MIN_SAFE_INTEGER
    var $export = __webpack_require__(9);

    $export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

    /***/
  }),
  /* 78 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.1.2.12 Number.parseFloat(string)
    var $export = __webpack_require__(9);

    $export($export.S, 'Number', { parseFloat: parseFloat });

    /***/
  }),
  /* 79 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.1.2.13 Number.parseInt(string, radix)
    var $export = __webpack_require__(9);

    $export($export.S, 'Number', { parseInt: parseInt });

    /***/
  }),
  /* 80 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.3 Math.acosh(x)
    var $export = __webpack_require__(9),
      log1p = __webpack_require__(81),
      sqrt = Math.sqrt,
      $acosh = Math.acosh;

    // V8 bug https://code.google.com/p/v8/issues/detail?id=3509
    $export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710), 'Math', {
      acosh: function acosh(x) {
        return (x = +x) < 1 ? NaN : x > 94906265.62425156 ?
          Math.log(x) + Math.LN2 :
          log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
      }
    });

    /***/
  }),
  /* 81 */
  /***/
  (function(module, exports) {

    // 20.2.2.20 Math.log1p(x)
    module.exports = Math.log1p || function log1p(x) {
      return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
    };

    /***/
  }),
  /* 82 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.5 Math.asinh(x)
    var $export = __webpack_require__(9);

    function asinh(x) {
      return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
    }

    $export($export.S, 'Math', { asinh: asinh });

    /***/
  }),
  /* 83 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.7 Math.atanh(x)
    var $export = __webpack_require__(9);

    $export($export.S, 'Math', {
      atanh: function atanh(x) {
        return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
      }
    });

    /***/
  }),
  /* 84 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.9 Math.cbrt(x)
    var $export = __webpack_require__(9),
      sign = __webpack_require__(85);

    $export($export.S, 'Math', {
      cbrt: function cbrt(x) {
        return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
      }
    });

    /***/
  }),
  /* 85 */
  /***/
  (function(module, exports) {

    // 20.2.2.28 Math.sign(x)
    module.exports = Math.sign || function sign(x) {
      return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
    };

    /***/
  }),
  /* 86 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.11 Math.clz32(x)
    var $export = __webpack_require__(9);

    $export($export.S, 'Math', {
      clz32: function clz32(x) {
        return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
      }
    });

    /***/
  }),
  /* 87 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.12 Math.cosh(x)
    var $export = __webpack_require__(9),
      exp = Math.exp;

    $export($export.S, 'Math', {
      cosh: function cosh(x) {
        return (exp(x = +x) + exp(-x)) / 2;
      }
    });

    /***/
  }),
  /* 88 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.14 Math.expm1(x)
    var $export = __webpack_require__(9);

    $export($export.S, 'Math', { expm1: __webpack_require__(89) });

    /***/
  }),
  /* 89 */
  /***/
  (function(module, exports) {

    // 20.2.2.14 Math.expm1(x)
    module.exports = Math.expm1 || function expm1(x) {
      return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
    };

    /***/
  }),
  /* 90 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.16 Math.fround(x)
    var $export = __webpack_require__(9),
      sign = __webpack_require__(85),
      pow = Math.pow,
      EPSILON = pow(2, -52),
      EPSILON32 = pow(2, -23),
      MAX32 = pow(2, 127) * (2 - EPSILON32),
      MIN32 = pow(2, -126);

    var roundTiesToEven = function(n) {
      return n + 1 / EPSILON - 1 / EPSILON;
    };

    $export($export.S, 'Math', {
      fround: function fround(x) {
        var $abs = Math.abs(x),
          $sign = sign(x),
          a, result;
        if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
        a = (1 + EPSILON32 / EPSILON) * $abs;
        result = a - (a - $abs);
        if (result > MAX32 || result != result) return $sign * Infinity;
        return $sign * result;
      }
    });

    /***/
  }),
  /* 91 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
    var $export = __webpack_require__(9),
      abs = Math.abs;

    $export($export.S, 'Math', {
      hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
        var sum = 0,
          i = 0,
          $$ = arguments,
          $$len = $$.length,
          larg = 0,
          arg, div;
        while (i < $$len) {
          arg = abs($$[i++]);
          if (larg < arg) {
            div = larg / arg;
            sum = sum * div * div + 1;
            larg = arg;
          } else if (arg > 0) {
            div = arg / larg;
            sum += div * div;
          } else sum += arg;
        }
        return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
      }
    });

    /***/
  }),
  /* 92 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.18 Math.imul(x, y)
    var $export = __webpack_require__(9),
      $imul = Math.imul;

    // some WebKit versions fails with big numbers, some has wrong arity
    $export($export.S + $export.F * __webpack_require__(15)(function() {
      return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
    }), 'Math', {
      imul: function imul(x, y) {
        var UINT16 = 0xffff,
          xn = +x,
          yn = +y,
          xl = UINT16 & xn,
          yl = UINT16 & yn;
        return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
      }
    });

    /***/
  }),
  /* 93 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.21 Math.log10(x)
    var $export = __webpack_require__(9);

    $export($export.S, 'Math', {
      log10: function log10(x) {
        return Math.log(x) / Math.LN10;
      }
    });

    /***/
  }),
  /* 94 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.20 Math.log1p(x)
    var $export = __webpack_require__(9);

    $export($export.S, 'Math', { log1p: __webpack_require__(81) });

    /***/
  }),
  /* 95 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.22 Math.log2(x)
    var $export = __webpack_require__(9);

    $export($export.S, 'Math', {
      log2: function log2(x) {
        return Math.log(x) / Math.LN2;
      }
    });

    /***/
  }),
  /* 96 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.28 Math.sign(x)
    var $export = __webpack_require__(9);

    $export($export.S, 'Math', { sign: __webpack_require__(85) });

    /***/
  }),
  /* 97 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.30 Math.sinh(x)
    var $export = __webpack_require__(9),
      expm1 = __webpack_require__(89),
      exp = Math.exp;

    // V8 near Chromium 38 has a problem with very small numbers
    $export($export.S + $export.F * __webpack_require__(15)(function() {
      return !Math.sinh(-2e-17) != -2e-17;
    }), 'Math', {
      sinh: function sinh(x) {
        return Math.abs(x = +x) < 1 ?
          (expm1(x) - expm1(-x)) / 2 :
          (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
      }
    });

    /***/
  }),
  /* 98 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.33 Math.tanh(x)
    var $export = __webpack_require__(9),
      expm1 = __webpack_require__(89),
      exp = Math.exp;

    $export($export.S, 'Math', {
      tanh: function tanh(x) {
        var a = expm1(x = +x),
          b = expm1(-x);
        return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
      }
    });

    /***/
  }),
  /* 99 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 20.2.2.34 Math.trunc(x)
    var $export = __webpack_require__(9);

    $export($export.S, 'Math', {
      trunc: function trunc(it) {
        return (it > 0 ? Math.floor : Math.ceil)(it);
      }
    });

    /***/
  }),
  /* 100 */
  /***/
  (function(module, exports, __webpack_require__) {

    var $export = __webpack_require__(9),
      toIndex = __webpack_require__(32),
      fromCharCode = String.fromCharCode,
      $fromCodePoint = String.fromCodePoint;

    // length should be 1, old FF problem
    $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
      // 21.1.2.2 String.fromCodePoint(...codePoints)
      fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
        var res = [],
          $$ = arguments,
          $$len = $$.length,
          i = 0,
          code;
        while ($$len > i) {
          code = +$$[i++];
          if (toIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
          res.push(code < 0x10000 ?
            fromCharCode(code) :
            fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
          );
        }
        return res.join('');
      }
    });

    /***/
  }),
  /* 101 */
  /***/
  (function(module, exports, __webpack_require__) {

    var $export = __webpack_require__(9),
      toIObject = __webpack_require__(29),
      toLength = __webpack_require__(33);

    $export($export.S, 'String', {
      // 21.1.2.4 String.raw(callSite, ...substitutions)
      raw: function raw(callSite) {
        var tpl = toIObject(callSite.raw),
          len = toLength(tpl.length),
          $$ = arguments,
          $$len = $$.length,
          res = [],
          i = 0;
        while (len > i) {
          res.push(String(tpl[i++]));
          if (i < $$len) res.push(String($$[i]));
        }
        return res.join('');
      }
    });

    /***/
  }),
  /* 102 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    // 21.1.3.25 String.prototype.trim()
    __webpack_require__(69)('trim', function($trim) {
      return function trim() {
        return $trim(this, 3);
      };
    });

    /***/
  }),
  /* 103 */
  [643, 104, 105],
  /* 104 */
  [644, 31, 28],
  /* 105 */
  [645, 45, 9, 16, 12, 23, 106, 107, 41, 8, 37],
  /* 106 */
  /***/
  (function(module, exports) {

    module.exports = {};

    /***/
  }),
  /* 107 */
  [646, 8, 13, 41, 12, 37],
  /* 108 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $export = __webpack_require__(9),
      $at = __webpack_require__(104)(false);
    $export($export.P, 'String', {
      // 21.1.3.3 String.prototype.codePointAt(pos)
      codePointAt: function codePointAt(pos) {
        return $at(this, pos);
      }
    });

    /***/
  }),
  /* 109 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
    'use strict';
    var $export = __webpack_require__(9),
      toLength = __webpack_require__(33),
      context = __webpack_require__(110),
      ENDS_WITH = 'endsWith',
      $endsWith = '' [ENDS_WITH];

    $export($export.P + $export.F * __webpack_require__(112)(ENDS_WITH), 'String', {
      endsWith: function endsWith(searchString /*, endPosition = @length */ ) {
        var that = context(this, searchString, ENDS_WITH),
          $$ = arguments,
          endPosition = $$.length > 1 ? $$[1] : undefined,
          len = toLength(that.length),
          end = endPosition === undefined ? len : Math.min(toLength(endPosition), len),
          search = String(searchString);
        return $endsWith ?
          $endsWith.call(that, search, end) :
          that.slice(end - search.length, end) === search;
      }
    });

    /***/
  }),
  /* 110 */
  /***/
  (function(module, exports, __webpack_require__) {

    // helper for String#{startsWith, endsWith, includes}
    var isRegExp = __webpack_require__(111),
      defined = __webpack_require__(28);

    module.exports = function(that, searchString, NAME) {
      if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
      return String(defined(that));
    };

    /***/
  }),
  /* 111 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 7.2.8 IsRegExp(argument)
    var isObject = __webpack_require__(22),
      cof = __webpack_require__(24),
      MATCH = __webpack_require__(37)('match');
    module.exports = function(it) {
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
    };

    /***/
  }),
  /* 112 */
  /***/
  (function(module, exports, __webpack_require__) {

    var MATCH = __webpack_require__(37)('match');
    module.exports = function(KEY) {
      var re = /./;
      try {
        '/./' [KEY](re);
      } catch (e) {
        try {
          re[MATCH] = false;
          return !'/./' [KEY](re);
        } catch (f) { /* empty */ }
      }
      return true;
    };

    /***/
  }),
  /* 113 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 21.1.3.7 String.prototype.includes(searchString, position = 0)
    'use strict';
    var $export = __webpack_require__(9),
      context = __webpack_require__(110),
      INCLUDES = 'includes';

    $export($export.P + $export.F * __webpack_require__(112)(INCLUDES), 'String', {
      includes: function includes(searchString /*, position = 0 */ ) {
        return !!~context(this, searchString, INCLUDES)
          .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
      }
    });

    /***/
  }),
  /* 114 */
  /***/
  (function(module, exports, __webpack_require__) {

    var $export = __webpack_require__(9);

    $export($export.P, 'String', {
      // 21.1.3.13 String.prototype.repeat(count)
      repeat: __webpack_require__(115)
    });

    /***/
  }),
  /* 115 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var toInteger = __webpack_require__(31),
      defined = __webpack_require__(28);

    module.exports = function repeat(count) {
      var str = String(defined(this)),
        res = '',
        n = toInteger(count);
      if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
      for (; n > 0;
        (n >>>= 1) && (str += str))
        if (n & 1) res += str;
      return res;
    };

    /***/
  }),
  /* 116 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
    'use strict';
    var $export = __webpack_require__(9),
      toLength = __webpack_require__(33),
      context = __webpack_require__(110),
      STARTS_WITH = 'startsWith',
      $startsWith = '' [STARTS_WITH];

    $export($export.P + $export.F * __webpack_require__(112)(STARTS_WITH), 'String', {
      startsWith: function startsWith(searchString /*, position = 0 */ ) {
        var that = context(this, searchString, STARTS_WITH),
          $$ = arguments,
          index = toLength(Math.min($$.length > 1 ? $$[1] : undefined, that.length)),
          search = String(searchString);
        return $startsWith ?
          $startsWith.call(that, search, index) :
          that.slice(index, index + search.length) === search;
      }
    });

    /***/
  }),
  /* 117 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var ctx = __webpack_require__(18),
      $export = __webpack_require__(9),
      toObject = __webpack_require__(27),
      call = __webpack_require__(118),
      isArrayIter = __webpack_require__(119),
      toLength = __webpack_require__(33),
      getIterFn = __webpack_require__(120);
    $export($export.S + $export.F * !__webpack_require__(121)(function(iter) { Array.from(iter); }), 'Array', {
      // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
      from: function from(arrayLike /*, mapfn = undefined, thisArg = undefined*/ ) {
        var O = toObject(arrayLike),
          C = typeof this == 'function' ? this : Array,
          $$ = arguments,
          $$len = $$.length,
          mapfn = $$len > 1 ? $$[1] : undefined,
          mapping = mapfn !== undefined,
          index = 0,
          iterFn = getIterFn(O),
          length, result, step, iterator;
        if (mapping) mapfn = ctx(mapfn, $$len > 2 ? $$[2] : undefined, 2);
        // if object isn't iterable or it's array with default iterator - use simple case
        if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
          for (iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++) {
            result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
          }
        } else {
          length = toLength(O.length);
          for (result = new C(length); length > index; index++) {
            result[index] = mapping ? mapfn(O[index], index) : O[index];
          }
        }
        result.length = index;
        return result;
      }
    });

    /***/
  }),
  /* 118 */
  /***/
  (function(module, exports, __webpack_require__) {

    // call something on iterator step with safe closing on error
    var anObject = __webpack_require__(26);
    module.exports = function(iterator, fn, value, entries) {
      try {
        return entries ? fn(anObject(value)[0], value[1]) : fn(value);
        // 7.4.6 IteratorClose(iterator, completion)
      } catch (e) {
        var ret = iterator['return'];
        if (ret !== undefined) anObject(ret.call(iterator));
        throw e;
      }
    };

    /***/
  }),
  /* 119 */
  /***/
  (function(module, exports, __webpack_require__) {

    // check on default Array iterator
    var Iterators = __webpack_require__(106),
      ITERATOR = __webpack_require__(37)('iterator'),
      ArrayProto = Array.prototype;

    module.exports = function(it) {
      return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
    };

    /***/
  }),
  /* 120 */
  [647, 53, 37, 106, 11],
  /* 121 */
  /***/
  (function(module, exports, __webpack_require__) {

    var ITERATOR = __webpack_require__(37)('iterator'),
      SAFE_CLOSING = false;

    try {
      var riter = [7][ITERATOR]();
      riter['return'] = function() { SAFE_CLOSING = true; };
      Array.from(riter, function() { throw 2; });
    } catch (e) { /* empty */ }

    module.exports = function(exec, skipClosing) {
      if (!skipClosing && !SAFE_CLOSING) return false;
      var safe = false;
      try {
        var arr = [7],
          iter = arr[ITERATOR]();
        iter.next = function() { return { done: safe = true }; };
        arr[ITERATOR] = function() { return iter; };
        exec(arr);
      } catch (e) { /* empty */ }
      return safe;
    };

    /***/
  }),
  /* 122 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $export = __webpack_require__(9);

    // WebKit Array.of isn't generic
    $export($export.S + $export.F * __webpack_require__(15)(function() {
      function F() {}
      return !(Array.of.call(F) instanceof F);
    }), 'Array', {
      // 22.1.2.3 Array.of( ...items)
      of: function of ( /* ...args */ ) {
        var index = 0,
          $$ = arguments,
          $$len = $$.length,
          result = new(typeof this == 'function' ? this : Array)($$len);
        while ($$len > index) result[index] = $$[index++];
        result.length = $$len;
        return result;
      }
    });

    /***/
  }),
  /* 123 */
  [648, 124, 125, 106, 29, 105],
  /* 124 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 22.1.3.31 Array.prototype[@@unscopables]
    var UNSCOPABLES = __webpack_require__(37)('unscopables'),
      ArrayProto = Array.prototype;
    if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(12)(ArrayProto, UNSCOPABLES, {});
    module.exports = function(key) {
      ArrayProto[UNSCOPABLES][key] = true;
    };

    /***/
  }),
  /* 125 */
  /***/
  (function(module, exports) {

    module.exports = function(done, value) {
      return { value: value, done: !!done };
    };

    /***/
  }),
  /* 126 */
  /***/
  (function(module, exports, __webpack_require__) {

    __webpack_require__(127)('Array');

    /***/
  }),
  /* 127 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var global = __webpack_require__(10),
      $ = __webpack_require__(8),
      DESCRIPTORS = __webpack_require__(14),
      SPECIES = __webpack_require__(37)('species');

    module.exports = function(KEY) {
      var C = global[KEY];
      if (DESCRIPTORS && C && !C[SPECIES]) $.setDesc(C, SPECIES, {
        configurable: true,
        get: function() { return this; }
      });
    };

    /***/
  }),
  /* 128 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
    var $export = __webpack_require__(9);

    $export($export.P, 'Array', { copyWithin: __webpack_require__(129) });

    __webpack_require__(124)('copyWithin');

    /***/
  }),
  /* 129 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
    'use strict';
    var toObject = __webpack_require__(27),
      toIndex = __webpack_require__(32),
      toLength = __webpack_require__(33);

    module.exports = [].copyWithin || function copyWithin(target /*= 0*/ , start /*= 0, end = @length*/ ) {
      var O = toObject(this),
        len = toLength(O.length),
        to = toIndex(target, len),
        from = toIndex(start, len),
        $$ = arguments,
        end = $$.length > 2 ? $$[2] : undefined,
        count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to),
        inc = 1;
      if (from < to && to < from + count) {
        inc = -1;
        from += count - 1;
        to += count - 1;
      }
      while (count-- > 0) {
        if (from in O) O[to] = O[from];
        else delete O[to];
        to += inc;
        from += inc;
      }
      return O;
    };

    /***/
  }),
  /* 130 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
    var $export = __webpack_require__(9);

    $export($export.P, 'Array', { fill: __webpack_require__(131) });

    __webpack_require__(124)('fill');

    /***/
  }),
  /* 131 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
    'use strict';
    var toObject = __webpack_require__(27),
      toIndex = __webpack_require__(32),
      toLength = __webpack_require__(33);
    module.exports = [].fill || function fill(value /*, start = 0, end = @length */ ) {
      var O = toObject(this),
        length = toLength(O.length),
        $$ = arguments,
        $$len = $$.length,
        index = toIndex($$len > 1 ? $$[1] : undefined, length),
        end = $$len > 2 ? $$[2] : undefined,
        endPos = end === undefined ? length : toIndex(end, length);
      while (endPos > index) O[index++] = value;
      return O;
    };

    /***/
  }),
  /* 132 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
    var $export = __webpack_require__(9),
      $find = __webpack_require__(34)(5),
      KEY = 'find',
      forced = true;
    // Shouldn't skip holes
    if (KEY in []) Array(1)[KEY](function() { forced = false; });
    $export($export.P + $export.F * forced, 'Array', {
      find: function find(callbackfn /*, that = undefined */ ) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    __webpack_require__(124)(KEY);

    /***/
  }),
  /* 133 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
    var $export = __webpack_require__(9),
      $find = __webpack_require__(34)(6),
      KEY = 'findIndex',
      forced = true;
    // Shouldn't skip holes
    if (KEY in []) Array(1)[KEY](function() { forced = false; });
    $export($export.P + $export.F * forced, 'Array', {
      findIndex: function findIndex(callbackfn /*, that = undefined */ ) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    __webpack_require__(124)(KEY);

    /***/
  }),
  /* 134 */
  /***/
  (function(module, exports, __webpack_require__) {

    var $ = __webpack_require__(8),
      global = __webpack_require__(10),
      isRegExp = __webpack_require__(111),
      $flags = __webpack_require__(135),
      $RegExp = global.RegExp,
      Base = $RegExp,
      proto = $RegExp.prototype,
      re1 = /a/g,
      re2 = /a/g
      // "new" creates a new object, old webkit buggy here
      ,
      CORRECT_NEW = new $RegExp(re1) !== re1;

    if (__webpack_require__(14) && (!CORRECT_NEW || __webpack_require__(15)(function() {
        re2[__webpack_require__(37)('match')] = false;
        // RegExp constructor can alter flags and IsRegExp works correct with @@match
        return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
      }))) {
      $RegExp = function RegExp(p, f) {
        var piRE = isRegExp(p),
          fiU = f === undefined;
        return !(this instanceof $RegExp) && piRE && p.constructor === $RegExp && fiU ? p :
          CORRECT_NEW ?
          new Base(piRE && !fiU ? p.source : p, f) :
          Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f);
      };
      $.each.call($.getNames(Base), function(key) {
        key in $RegExp || $.setDesc($RegExp, key, {
          configurable: true,
          get: function() { return Base[key]; },
          set: function(it) { Base[key] = it; }
        });
      });
      proto.constructor = $RegExp;
      $RegExp.prototype = proto;
      __webpack_require__(16)(global, 'RegExp', $RegExp);
    }

    __webpack_require__(127)('RegExp');

    /***/
  }),
  /* 135 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    // 21.2.5.3 get RegExp.prototype.flags
    var anObject = __webpack_require__(26);
    module.exports = function() {
      var that = anObject(this),
        result = '';
      if (that.global) result += 'g';
      if (that.ignoreCase) result += 'i';
      if (that.multiline) result += 'm';
      if (that.unicode) result += 'u';
      if (that.sticky) result += 'y';
      return result;
    };

    /***/
  }),
  /* 136 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 21.2.5.3 get RegExp.prototype.flags()
    var $ = __webpack_require__(8);
    if (__webpack_require__(14) && /./g.flags != 'g') $.setDesc(RegExp.prototype, 'flags', {
      configurable: true,
      get: __webpack_require__(135)
    });

    /***/
  }),
  /* 137 */
  /***/
  (function(module, exports, __webpack_require__) {

    // @@match logic
    __webpack_require__(138)('match', 1, function(defined, MATCH) {
      // 21.1.3.11 String.prototype.match(regexp)
      return function match(regexp) {
        'use strict';
        var O = defined(this),
          fn = regexp == undefined ? undefined : regexp[MATCH];
        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
      };
    });

    /***/
  }),
  /* 138 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var hide = __webpack_require__(12),
      redefine = __webpack_require__(16),
      fails = __webpack_require__(15),
      defined = __webpack_require__(28),
      wks = __webpack_require__(37);

    module.exports = function(KEY, length, exec) {
      var SYMBOL = wks(KEY),
        original = '' [KEY];
      if (fails(function() {
          var O = {};
          O[SYMBOL] = function() { return 7; };
          return '' [KEY](O) != 7;
        })) {
        redefine(String.prototype, KEY, exec(defined, SYMBOL, original));
        hide(RegExp.prototype, SYMBOL, length == 2
          // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
          // 21.2.5.11 RegExp.prototype[@@split](string, limit)
          ?
          function(string, arg) { return original.call(string, this, arg); }
          // 21.2.5.6 RegExp.prototype[@@match](string)
          // 21.2.5.9 RegExp.prototype[@@search](string)
          :
          function(string) { return original.call(string, this); }
        );
      }
    };

    /***/
  }),
  /* 139 */
  /***/
  (function(module, exports, __webpack_require__) {

    // @@replace logic
    __webpack_require__(138)('replace', 2, function(defined, REPLACE, $replace) {
      // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
      return function replace(searchValue, replaceValue) {
        'use strict';
        var O = defined(this),
          fn = searchValue == undefined ? undefined : searchValue[REPLACE];
        return fn !== undefined ?
          fn.call(searchValue, O, replaceValue) :
          $replace.call(String(O), searchValue, replaceValue);
      };
    });

    /***/
  }),
  /* 140 */
  /***/
  (function(module, exports, __webpack_require__) {

    // @@search logic
    __webpack_require__(138)('search', 1, function(defined, SEARCH) {
      // 21.1.3.15 String.prototype.search(regexp)
      return function search(regexp) {
        'use strict';
        var O = defined(this),
          fn = regexp == undefined ? undefined : regexp[SEARCH];
        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
      };
    });

    /***/
  }),
  /* 141 */
  /***/
  (function(module, exports, __webpack_require__) {

    // @@split logic
    __webpack_require__(138)('split', 2, function(defined, SPLIT, $split) {
      // 21.1.3.17 String.prototype.split(separator, limit)
      return function split(separator, limit) {
        'use strict';
        var O = defined(this),
          fn = separator == undefined ? undefined : separator[SPLIT];
        return fn !== undefined ?
          fn.call(separator, O, limit) :
          $split.call(String(O), separator, limit);
      };
    });

    /***/
  }),
  /* 142 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $ = __webpack_require__(8),
      LIBRARY = __webpack_require__(45),
      global = __webpack_require__(10),
      ctx = __webpack_require__(18),
      classof = __webpack_require__(53),
      $export = __webpack_require__(9),
      isObject = __webpack_require__(22),
      anObject = __webpack_require__(26),
      aFunction = __webpack_require__(19),
      strictNew = __webpack_require__(143),
      forOf = __webpack_require__(144),
      setProto = __webpack_require__(51).set,
      same = __webpack_require__(49),
      SPECIES = __webpack_require__(37)('species'),
      speciesConstructor = __webpack_require__(145),
      asap = __webpack_require__(146),
      PROMISE = 'Promise',
      process = global.process,
      isNode = classof(process) == 'process',
      P = global[PROMISE],
      empty = function() { /* empty */ },
      Wrapper;

    var testResolve = function(sub) {
      var test = new P(empty),
        promise;
      if (sub) test.constructor = function(exec) {
        exec(empty, empty);
      };
      (promise = P.resolve(test))['catch'](empty);
      return promise === test;
    };

    var USE_NATIVE = function() {
      var works = false;

      function P2(x) {
        var self = new P(x);
        setProto(self, P2.prototype);
        return self;
      }
      try {
        works = P && P.resolve && testResolve();
        setProto(P2, P);
        P2.prototype = $.create(P.prototype, { constructor: { value: P2 } });
        // actual Firefox has broken subclass support, test that
        if (!(P2.resolve(5).then(function() {}) instanceof P2)) {
          works = false;
        }
        // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
        if (works && __webpack_require__(14)) {
          var thenableThenGotten = false;
          P.resolve($.setDesc({}, 'then', {
            get: function() { thenableThenGotten = true; }
          }));
          works = thenableThenGotten;
        }
      } catch (e) { works = false; }
      return works;
    }();

    // helpers
    var sameConstructor = function(a, b) {
      // library wrapper special case
      if (LIBRARY && a === P && b === Wrapper) return true;
      return same(a, b);
    };
    var getConstructor = function(C) {
      var S = anObject(C)[SPECIES];
      return S != undefined ? S : C;
    };
    var isThenable = function(it) {
      var then;
      return isObject(it) && typeof(then = it.then) == 'function' ? then : false;
    };
    var PromiseCapability = function(C) {
      var resolve, reject;
      this.promise = new C(function($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aFunction(resolve),
        this.reject = aFunction(reject)
    };
    var perform = function(exec) {
      try {
        exec();
      } catch (e) {
        return { error: e };
      }
    };
    var notify = function(record, isReject) {
      if (record.n) return;
      record.n = true;
      var chain = record.c;
      asap(function() {
        var value = record.v,
          ok = record.s == 1,
          i = 0;
        var run = function(reaction) {
          var handler = ok ? reaction.ok : reaction.fail,
            resolve = reaction.resolve,
            reject = reaction.reject,
            result, then;
          try {
            if (handler) {
              if (!ok) record.h = true;
              result = handler === true ? value : handler(value);
              if (result === reaction.promise) {
                reject(TypeError('Promise-chain cycle'));
              } else if (then = isThenable(result)) {
                then.call(result, resolve, reject);
              } else resolve(result);
            } else reject(value);
          } catch (e) {
            reject(e);
          }
        };
        while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
        chain.length = 0;
        record.n = false;
        if (isReject) setTimeout(function() {
          var promise = record.p,
            handler, console;
          if (isUnhandled(promise)) {
            if (isNode) {
              process.emit('unhandledRejection', value, promise);
            } else if (handler = global.onunhandledrejection) {
              handler({ promise: promise, reason: value });
            } else if ((console = global.console) && console.error) {
              console.error('Unhandled promise rejection', value);
            }
          }
          record.a = undefined;
        }, 1);
      });
    };
    var isUnhandled = function(promise) {
      var record = promise._d,
        chain = record.a || record.c,
        i = 0,
        reaction;
      if (record.h) return false;
      while (chain.length > i) {
        reaction = chain[i++];
        if (reaction.fail || !isUnhandled(reaction.promise)) return false;
      }
      return true;
    };
    var $reject = function(value) {
      var record = this;
      if (record.d) return;
      record.d = true;
      record = record.r || record; // unwrap
      record.v = value;
      record.s = 2;
      record.a = record.c.slice();
      notify(record, true);
    };
    var $resolve = function(value) {
      var record = this,
        then;
      if (record.d) return;
      record.d = true;
      record = record.r || record; // unwrap
      try {
        if (record.p === value) throw TypeError("Promise can't be resolved itself");
        if (then = isThenable(value)) {
          asap(function() {
            var wrapper = { r: record, d: false }; // wrap
            try {
              then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
            } catch (e) {
              $reject.call(wrapper, e);
            }
          });
        } else {
          record.v = value;
          record.s = 1;
          notify(record, false);
        }
      } catch (e) {
        $reject.call({ r: record, d: false }, e); // wrap
      }
    };

    // constructor polyfill
    if (!USE_NATIVE) {
      // 25.4.3.1 Promise(executor)
      P = function Promise(executor) {
        aFunction(executor);
        var record = this._d = {
          p: strictNew(this, P, PROMISE), // <- promise
          c: [], // <- awaiting reactions
          a: undefined, // <- checked in isUnhandled reactions
          s: 0, // <- state
          d: false, // <- done
          v: undefined, // <- value
          h: false, // <- handled rejection
          n: false // <- notify
        };
        try {
          executor(ctx($resolve, record, 1), ctx($reject, record, 1));
        } catch (err) {
          $reject.call(record, err);
        }
      };
      __webpack_require__(148)(P.prototype, {
        // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
        then: function then(onFulfilled, onRejected) {
          var reaction = new PromiseCapability(speciesConstructor(this, P)),
            promise = reaction.promise,
            record = this._d;
          reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
          reaction.fail = typeof onRejected == 'function' && onRejected;
          record.c.push(reaction);
          if (record.a) record.a.push(reaction);
          if (record.s) notify(record, false);
          return promise;
        },
        // 25.4.5.1 Promise.prototype.catch(onRejected)
        'catch': function(onRejected) {
          return this.then(undefined, onRejected);
        }
      });
    }

    $export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: P });
    __webpack_require__(41)(P, PROMISE);
    __webpack_require__(127)(PROMISE);
    Wrapper = __webpack_require__(11)[PROMISE];

    // statics
    $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
      // 25.4.4.5 Promise.reject(r)
      reject: function reject(r) {
        var capability = new PromiseCapability(this),
          $$reject = capability.reject;
        $$reject(r);
        return capability.promise;
      }
    });
    $export($export.S + $export.F * (!USE_NATIVE || testResolve(true)), PROMISE, {
      // 25.4.4.6 Promise.resolve(x)
      resolve: function resolve(x) {
        // instanceof instead of internal slot check because we should fix it without replacement native Promise core
        if (x instanceof P && sameConstructor(x.constructor, this)) return x;
        var capability = new PromiseCapability(this),
          $$resolve = capability.resolve;
        $$resolve(x);
        return capability.promise;
      }
    });
    $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(121)(function(iter) {
      P.all(iter)['catch'](function() {});
    })), PROMISE, {
      // 25.4.4.1 Promise.all(iterable)
      all: function all(iterable) {
        var C = getConstructor(this),
          capability = new PromiseCapability(C),
          resolve = capability.resolve,
          reject = capability.reject,
          values = [];
        var abrupt = perform(function() {
          forOf(iterable, false, values.push, values);
          var remaining = values.length,
            results = Array(remaining);
          if (remaining) $.each.call(values, function(promise, index) {
            var alreadyCalled = false;
            C.resolve(promise).then(function(value) {
              if (alreadyCalled) return;
              alreadyCalled = true;
              results[index] = value;
              --remaining || resolve(results);
            }, reject);
          });
          else resolve(results);
        });
        if (abrupt) reject(abrupt.error);
        return capability.promise;
      },
      // 25.4.4.4 Promise.race(iterable)
      race: function race(iterable) {
        var C = getConstructor(this),
          capability = new PromiseCapability(C),
          reject = capability.reject;
        var abrupt = perform(function() {
          forOf(iterable, false, function(promise) {
            C.resolve(promise).then(capability.resolve, reject);
          });
        });
        if (abrupt) reject(abrupt.error);
        return capability.promise;
      }
    });

    /***/
  }),
  /* 143 */
  /***/
  (function(module, exports) {

    module.exports = function(it, Constructor, name) {
      if (!(it instanceof Constructor)) throw TypeError(name + ": use the 'new' operator!");
      return it;
    };

    /***/
  }),
  /* 144 */
  /***/
  (function(module, exports, __webpack_require__) {

    var ctx = __webpack_require__(18),
      call = __webpack_require__(118),
      isArrayIter = __webpack_require__(119),
      anObject = __webpack_require__(26),
      toLength = __webpack_require__(33),
      getIterFn = __webpack_require__(120);
    module.exports = function(iterable, entries, fn, that) {
      var iterFn = getIterFn(iterable),
        f = ctx(fn, that, entries ? 2 : 1),
        index = 0,
        length, step, iterator;
      if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
      // fast case for arrays with default iterator
      if (isArrayIter(iterFn))
        for (length = toLength(iterable.length); length > index; index++) {
          entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
        } else
          for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
            call(iterator, f, step.value, entries);
          }
    };

    /***/
  }),
  /* 145 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 7.3.20 SpeciesConstructor(O, defaultConstructor)
    var anObject = __webpack_require__(26),
      aFunction = __webpack_require__(19),
      SPECIES = __webpack_require__(37)('species');
    module.exports = function(O, D) {
      var C = anObject(O).constructor,
        S;
      return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
    };

    /***/
  }),
  /* 146 */
  /***/
  (function(module, exports, __webpack_require__) {

    var global = __webpack_require__(10),
      macrotask = __webpack_require__(147).set,
      Observer = global.MutationObserver || global.WebKitMutationObserver,
      process = global.process,
      Promise = global.Promise,
      isNode = __webpack_require__(24)(process) == 'process',
      head, last, notify;

    var flush = function() {
      var parent, domain, fn;
      if (isNode && (parent = process.domain)) {
        process.domain = null;
        parent.exit();
      }
      while (head) {
        domain = head.domain;
        fn = head.fn;
        if (domain) domain.enter();
        fn(); // <- currently we use it only for Promise - try / catch not required
        if (domain) domain.exit();
        head = head.next;
      }
      last = undefined;
      if (parent) parent.enter();
    };

    // Node.js
    if (isNode) {
      notify = function() {
        process.nextTick(flush);
      };
      // browsers with MutationObserver
    } else if (Observer) {
      var toggle = 1,
        node = document.createTextNode('');
      new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
      notify = function() {
        node.data = toggle = -toggle;
      };
      // environments with maybe non-completely correct, but existent Promise
    } else if (Promise && Promise.resolve) {
      notify = function() {
        Promise.resolve().then(flush);
      };
      // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout
    } else {
      notify = function() {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global, flush);
      };
    }

    module.exports = function asap(fn) {
      var task = { fn: fn, next: undefined, domain: isNode && process.domain };
      if (last) last.next = task;
      if (!head) {
        head = task;
        notify();
      }
      last = task;
    };

    /***/
  }),
  /* 147 */
  /***/
  (function(module, exports, __webpack_require__) {

    var ctx = __webpack_require__(18),
      invoke = __webpack_require__(25),
      html = __webpack_require__(20),
      cel = __webpack_require__(21),
      global = __webpack_require__(10),
      process = global.process,
      setTask = global.setImmediate,
      clearTask = global.clearImmediate,
      MessageChannel = global.MessageChannel,
      counter = 0,
      queue = {},
      ONREADYSTATECHANGE = 'onreadystatechange',
      defer, channel, port;
    var run = function() {
      var id = +this;
      if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };
    var listner = function(event) {
      run.call(event.data);
    };
    // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
    if (!setTask || !clearTask) {
      setTask = function setImmediate(fn) {
        var args = [],
          i = 1;
        while (arguments.length > i) args.push(arguments[i++]);
        queue[++counter] = function() {
          invoke(typeof fn == 'function' ? fn : Function(fn), args);
        };
        defer(counter);
        return counter;
      };
      clearTask = function clearImmediate(id) {
        delete queue[id];
      };
      // Node.js 0.8-
      if (__webpack_require__(24)(process) == 'process') {
        defer = function(id) {
          process.nextTick(ctx(run, id, 1));
        };
        // Browsers with MessageChannel, includes WebWorkers
      } else if (MessageChannel) {
        channel = new MessageChannel;
        port = channel.port2;
        channel.port1.onmessage = listner;
        defer = ctx(port.postMessage, port, 1);
        // Browsers with postMessage, skip WebWorkers
        // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
      } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
        defer = function(id) {
          global.postMessage(id + '', '*');
        };
        global.addEventListener('message', listner, false);
        // IE8-
      } else if (ONREADYSTATECHANGE in cel('script')) {
        defer = function(id) {
          html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run.call(id);
          };
        };
        // Rest old browsers
      } else {
        defer = function(id) {
          setTimeout(ctx(run, id, 1), 0);
        };
      }
    }
    module.exports = {
      set: setTask,
      clear: clearTask
    };

    /***/
  }),
  /* 148 */
  /***/
  (function(module, exports, __webpack_require__) {

    var redefine = __webpack_require__(16);
    module.exports = function(target, src) {
      for (var key in src) redefine(target, key, src[key]);
      return target;
    };

    /***/
  }),
  /* 149 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var strong = __webpack_require__(150);

    // 23.1 Map Objects
    __webpack_require__(151)('Map', function(get) {
      return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.1.3.6 Map.prototype.get(key)
      get: function get(key) {
        var entry = strong.getEntry(this, key);
        return entry && entry.v;
      },
      // 23.1.3.9 Map.prototype.set(key, value)
      set: function set(key, value) {
        return strong.def(this, key === 0 ? 0 : key, value);
      }
    }, strong, true);

    /***/
  }),
  /* 150 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $ = __webpack_require__(8),
      hide = __webpack_require__(12),
      redefineAll = __webpack_require__(148),
      ctx = __webpack_require__(18),
      strictNew = __webpack_require__(143),
      defined = __webpack_require__(28),
      forOf = __webpack_require__(144),
      $iterDefine = __webpack_require__(105),
      step = __webpack_require__(125),
      ID = __webpack_require__(17)('id'),
      $has = __webpack_require__(23),
      isObject = __webpack_require__(22),
      setSpecies = __webpack_require__(127),
      DESCRIPTORS = __webpack_require__(14),
      isExtensible = Object.isExtensible || isObject,
      SIZE = DESCRIPTORS ? '_s' : 'size',
      id = 0;

    var fastKey = function(it, create) {
      // return primitive with prefix
      if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
      if (!$has(it, ID)) {
        // can't set id to frozen object
        if (!isExtensible(it)) return 'F';
        // not necessary to add id
        if (!create) return 'E';
        // add missing object id
        hide(it, ID, ++id);
        // return object id with prefix
      }
      return 'O' + it[ID];
    };

    var getEntry = function(that, key) {
      // fast case
      var index = fastKey(key),
        entry;
      if (index !== 'F') return that._i[index];
      // frozen object case
      for (entry = that._f; entry; entry = entry.n) {
        if (entry.k == key) return entry;
      }
    };

    module.exports = {
      getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function(that, iterable) {
          strictNew(that, C, NAME);
          that._i = $.create(null); // index
          that._f = undefined; // first entry
          that._l = undefined; // last entry
          that[SIZE] = 0; // size
          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
          // 23.1.3.1 Map.prototype.clear()
          // 23.2.3.2 Set.prototype.clear()
          clear: function clear() {
            for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {
              entry.r = true;
              if (entry.p) entry.p = entry.p.n = undefined;
              delete data[entry.i];
            }
            that._f = that._l = undefined;
            that[SIZE] = 0;
          },
          // 23.1.3.3 Map.prototype.delete(key)
          // 23.2.3.4 Set.prototype.delete(value)
          'delete': function(key) {
            var that = this,
              entry = getEntry(that, key);
            if (entry) {
              var next = entry.n,
                prev = entry.p;
              delete that._i[entry.i];
              entry.r = true;
              if (prev) prev.n = next;
              if (next) next.p = prev;
              if (that._f == entry) that._f = next;
              if (that._l == entry) that._l = prev;
              that[SIZE]--;
            }
            return !!entry;
          },
          // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
          // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
          forEach: function forEach(callbackfn /*, that = undefined */ ) {
            var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3),
              entry;
            while (entry = entry ? entry.n : this._f) {
              f(entry.v, entry.k, this);
              // revert to the last existing entry
              while (entry && entry.r) entry = entry.p;
            }
          },
          // 23.1.3.7 Map.prototype.has(key)
          // 23.2.3.7 Set.prototype.has(value)
          has: function has(key) {
            return !!getEntry(this, key);
          }
        });
        if (DESCRIPTORS) $.setDesc(C.prototype, 'size', {
          get: function() {
            return defined(this[SIZE]);
          }
        });
        return C;
      },
      def: function(that, key, value) {
        var entry = getEntry(that, key),
          prev, index;
        // change existing entry
        if (entry) {
          entry.v = value;
          // create new entry
        } else {
          that._l = entry = {
            i: index = fastKey(key, true), // <- index
            k: key, // <- key
            v: value, // <- value
            p: prev = that._l, // <- previous entry
            n: undefined, // <- next entry
            r: false // <- removed
          };
          if (!that._f) that._f = entry;
          if (prev) prev.n = entry;
          that[SIZE]++;
          // add to index
          if (index !== 'F') that._i[index] = entry;
        }
        return that;
      },
      getEntry: getEntry,
      setStrong: function(C, NAME, IS_MAP) {
        // add .keys, .values, .entries, [@@iterator]
        // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
        $iterDefine(C, NAME, function(iterated, kind) {
          this._t = iterated; // target
          this._k = kind; // kind
          this._l = undefined; // previous
        }, function() {
          var that = this,
            kind = that._k,
            entry = that._l;
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
          // get next entry
          if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
            // or finish the iteration
            that._t = undefined;
            return step(1);
          }
          // return step by kind
          if (kind == 'keys') return step(0, entry.k);
          if (kind == 'values') return step(0, entry.v);
          return step(0, [entry.k, entry.v]);
        }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

        // add [@@species], 23.1.2.2, 23.2.2.2
        setSpecies(NAME);
      }
    };

    /***/
  }),
  /* 151 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var global = __webpack_require__(10),
      $export = __webpack_require__(9),
      redefine = __webpack_require__(16),
      redefineAll = __webpack_require__(148),
      forOf = __webpack_require__(144),
      strictNew = __webpack_require__(143),
      isObject = __webpack_require__(22),
      fails = __webpack_require__(15),
      $iterDetect = __webpack_require__(121),
      setToStringTag = __webpack_require__(41);

    module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
      var Base = global[NAME],
        C = Base,
        ADDER = IS_MAP ? 'set' : 'add',
        proto = C && C.prototype,
        O = {};
      var fixMethod = function(KEY) {
        var fn = proto[KEY];
        redefine(proto, KEY,
          KEY == 'delete' ? function(a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'has' ? function has(a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'get' ? function get(a) {
            return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; } :
          function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
        );
      };
      if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function() {
          new C().entries().next();
        }))) {
        // create collection constructor
        C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
        redefineAll(C.prototype, methods);
      } else {
        var instance = new C
          // early implementations not supports chaining
          ,
          HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
          // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
          ,
          THROWS_ON_PRIMITIVES = fails(function() { instance.has(1); })
          // most early implementations doesn't supports iterables, most modern - not close it correctly
          ,
          ACCEPT_ITERABLES = $iterDetect(function(iter) { new C(iter); }) // eslint-disable-line no-new
          // for early implementations -0 and +0 not the same
          ,
          BUGGY_ZERO;
        if (!ACCEPT_ITERABLES) {
          C = wrapper(function(target, iterable) {
            strictNew(target, C, NAME);
            var that = new Base;
            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
            return that;
          });
          C.prototype = proto;
          proto.constructor = C;
        }
        IS_WEAK || instance.forEach(function(val, key) {
          BUGGY_ZERO = 1 / key === -Infinity;
        });
        if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
          fixMethod('delete');
          fixMethod('has');
          IS_MAP && fixMethod('get');
        }
        if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
        // weak collections should not contains .clear method
        if (IS_WEAK && proto.clear) delete proto.clear;
      }

      setToStringTag(C, NAME);

      O[NAME] = C;
      $export($export.G + $export.W + $export.F * (C != Base), O);

      if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

      return C;
    };

    /***/
  }),
  /* 152 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var strong = __webpack_require__(150);

    // 23.2 Set Objects
    __webpack_require__(151)('Set', function(get) {
      return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.2.3.1 Set.prototype.add(value)
      add: function add(value) {
        return strong.def(this, value = value === 0 ? 0 : value, value);
      }
    }, strong);

    /***/
  }),
  /* 153 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $ = __webpack_require__(8),
      redefine = __webpack_require__(16),
      weak = __webpack_require__(154),
      isObject = __webpack_require__(22),
      has = __webpack_require__(23),
      frozenStore = weak.frozenStore,
      WEAK = weak.WEAK,
      isExtensible = Object.isExtensible || isObject,
      tmp = {};

    // 23.3 WeakMap Objects
    var $WeakMap = __webpack_require__(151)('WeakMap', function(get) {
      return function WeakMap() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.3.3.3 WeakMap.prototype.get(key)
      get: function get(key) {
        if (isObject(key)) {
          if (!isExtensible(key)) return frozenStore(this).get(key);
          if (has(key, WEAK)) return key[WEAK][this._i];
        }
      },
      // 23.3.3.5 WeakMap.prototype.set(key, value)
      set: function set(key, value) {
        return weak.def(this, key, value);
      }
    }, weak, true, true);

    // IE11 WeakMap frozen keys fix
    if (new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
      $.each.call(['delete', 'has', 'get', 'set'], function(key) {
        var proto = $WeakMap.prototype,
          method = proto[key];
        redefine(proto, key, function(a, b) {
          // store frozen objects on leaky map
          if (isObject(a) && !isExtensible(a)) {
            var result = frozenStore(this)[key](a, b);
            return key == 'set' ? this : result;
            // store all the rest on native weakmap
          }
          return method.call(this, a, b);
        });
      });
    }

    /***/
  }),
  /* 154 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var hide = __webpack_require__(12),
      redefineAll = __webpack_require__(148),
      anObject = __webpack_require__(26),
      isObject = __webpack_require__(22),
      strictNew = __webpack_require__(143),
      forOf = __webpack_require__(144),
      createArrayMethod = __webpack_require__(34),
      $has = __webpack_require__(23),
      WEAK = __webpack_require__(17)('weak'),
      isExtensible = Object.isExtensible || isObject,
      arrayFind = createArrayMethod(5),
      arrayFindIndex = createArrayMethod(6),
      id = 0;

    // fallback for frozen keys
    var frozenStore = function(that) {
      return that._l || (that._l = new FrozenStore);
    };
    var FrozenStore = function() {
      this.a = [];
    };
    var findFrozen = function(store, key) {
      return arrayFind(store.a, function(it) {
        return it[0] === key;
      });
    };
    FrozenStore.prototype = {
      get: function(key) {
        var entry = findFrozen(this, key);
        if (entry) return entry[1];
      },
      has: function(key) {
        return !!findFrozen(this, key);
      },
      set: function(key, value) {
        var entry = findFrozen(this, key);
        if (entry) entry[1] = value;
        else this.a.push([key, value]);
      },
      'delete': function(key) {
        var index = arrayFindIndex(this.a, function(it) {
          return it[0] === key;
        });
        if (~index) this.a.splice(index, 1);
        return !!~index;
      }
    };

    module.exports = {
      getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function(that, iterable) {
          strictNew(that, C, NAME);
          that._i = id++; // collection id
          that._l = undefined; // leak store for frozen objects
          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
          // 23.3.3.2 WeakMap.prototype.delete(key)
          // 23.4.3.3 WeakSet.prototype.delete(value)
          'delete': function(key) {
            if (!isObject(key)) return false;
            if (!isExtensible(key)) return frozenStore(this)['delete'](key);
            return $has(key, WEAK) && $has(key[WEAK], this._i) && delete key[WEAK][this._i];
          },
          // 23.3.3.4 WeakMap.prototype.has(key)
          // 23.4.3.4 WeakSet.prototype.has(value)
          has: function has(key) {
            if (!isObject(key)) return false;
            if (!isExtensible(key)) return frozenStore(this).has(key);
            return $has(key, WEAK) && $has(key[WEAK], this._i);
          }
        });
        return C;
      },
      def: function(that, key, value) {
        if (!isExtensible(anObject(key))) {
          frozenStore(that).set(key, value);
        } else {
          $has(key, WEAK) || hide(key, WEAK, {});
          key[WEAK][that._i] = value;
        }
        return that;
      },
      frozenStore: frozenStore,
      WEAK: WEAK
    };

    /***/
  }),
  /* 155 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var weak = __webpack_require__(154);

    // 23.4 WeakSet Objects
    __webpack_require__(151)('WeakSet', function(get) {
      return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.4.3.1 WeakSet.prototype.add(value)
      add: function add(value) {
        return weak.def(this, value, true);
      }
    }, weak, false, true);

    /***/
  }),
  /* 156 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
    var $export = __webpack_require__(9),
      _apply = Function.apply,
      anObject = __webpack_require__(26);

    $export($export.S, 'Reflect', {
      apply: function apply(target, thisArgument, argumentsList) {
        return _apply.call(target, thisArgument, anObject(argumentsList));
      }
    });

    /***/
  }),
  /* 157 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
    var $ = __webpack_require__(8),
      $export = __webpack_require__(9),
      aFunction = __webpack_require__(19),
      anObject = __webpack_require__(26),
      isObject = __webpack_require__(22),
      bind = Function.bind || __webpack_require__(11).Function.prototype.bind;

    // MS Edge supports only 2 arguments
    // FF Nightly sets third argument as `new.target`, but does not create `this` from it
    $export($export.S + $export.F * __webpack_require__(15)(function() {
      function F() {}
      return !(Reflect.construct(function() {}, [], F) instanceof F);
    }), 'Reflect', {
      construct: function construct(Target, args /*, newTarget*/ ) {
        aFunction(Target);
        anObject(args);
        var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
        if (Target == newTarget) {
          // w/o altered newTarget, optimization for 0-4 arguments
          switch (args.length) {
            case 0:
              return new Target;
            case 1:
              return new Target(args[0]);
            case 2:
              return new Target(args[0], args[1]);
            case 3:
              return new Target(args[0], args[1], args[2]);
            case 4:
              return new Target(args[0], args[1], args[2], args[3]);
          }
          // w/o altered newTarget, lot of arguments case
          var $args = [null];
          $args.push.apply($args, args);
          return new(bind.apply(Target, $args));
        }
        // with altered newTarget, not support built-in constructors
        var proto = newTarget.prototype,
          instance = $.create(isObject(proto) ? proto : Object.prototype),
          result = Function.apply.call(Target, instance, args);
        return isObject(result) ? result : instance;
      }
    });

    /***/
  }),
  /* 158 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
    var $ = __webpack_require__(8),
      $export = __webpack_require__(9),
      anObject = __webpack_require__(26);

    // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
    $export($export.S + $export.F * __webpack_require__(15)(function() {
      Reflect.defineProperty($.setDesc({}, 1, { value: 1 }), 1, { value: 2 });
    }), 'Reflect', {
      defineProperty: function defineProperty(target, propertyKey, attributes) {
        anObject(target);
        try {
          $.setDesc(target, propertyKey, attributes);
          return true;
        } catch (e) {
          return false;
        }
      }
    });

    /***/
  }),
  /* 159 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.4 Reflect.deleteProperty(target, propertyKey)
    var $export = __webpack_require__(9),
      getDesc = __webpack_require__(8).getDesc,
      anObject = __webpack_require__(26);

    $export($export.S, 'Reflect', {
      deleteProperty: function deleteProperty(target, propertyKey) {
        var desc = getDesc(anObject(target), propertyKey);
        return desc && !desc.configurable ? false : delete target[propertyKey];
      }
    });

    /***/
  }),
  /* 160 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    // 26.1.5 Reflect.enumerate(target)
    var $export = __webpack_require__(9),
      anObject = __webpack_require__(26);
    var Enumerate = function(iterated) {
      this._t = anObject(iterated); // target
      this._i = 0; // next index
      var keys = this._k = [] // keys
        ,
        key;
      for (key in iterated) keys.push(key);
    };
    __webpack_require__(107)(Enumerate, 'Object', function() {
      var that = this,
        keys = that._k,
        key;
      do {
        if (that._i >= keys.length) return { value: undefined, done: true };
      } while (!((key = keys[that._i++]) in that._t));
      return { value: key, done: false };
    });

    $export($export.S, 'Reflect', {
      enumerate: function enumerate(target) {
        return new Enumerate(target);
      }
    });

    /***/
  }),
  /* 161 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.6 Reflect.get(target, propertyKey [, receiver])
    var $ = __webpack_require__(8),
      has = __webpack_require__(23),
      $export = __webpack_require__(9),
      isObject = __webpack_require__(22),
      anObject = __webpack_require__(26);

    function get(target, propertyKey /*, receiver*/ ) {
      var receiver = arguments.length < 3 ? target : arguments[2],
        desc, proto;
      if (anObject(target) === receiver) return target[propertyKey];
      if (desc = $.getDesc(target, propertyKey)) return has(desc, 'value') ?
        desc.value :
        desc.get !== undefined ?
        desc.get.call(receiver) :
        undefined;
      if (isObject(proto = $.getProto(target))) return get(proto, propertyKey, receiver);
    }

    $export($export.S, 'Reflect', { get: get });

    /***/
  }),
  /* 162 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
    var $ = __webpack_require__(8),
      $export = __webpack_require__(9),
      anObject = __webpack_require__(26);

    $export($export.S, 'Reflect', {
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
        return $.getDesc(anObject(target), propertyKey);
      }
    });

    /***/
  }),
  /* 163 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.8 Reflect.getPrototypeOf(target)
    var $export = __webpack_require__(9),
      getProto = __webpack_require__(8).getProto,
      anObject = __webpack_require__(26);

    $export($export.S, 'Reflect', {
      getPrototypeOf: function getPrototypeOf(target) {
        return getProto(anObject(target));
      }
    });

    /***/
  }),
  /* 164 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.9 Reflect.has(target, propertyKey)
    var $export = __webpack_require__(9);

    $export($export.S, 'Reflect', {
      has: function has(target, propertyKey) {
        return propertyKey in target;
      }
    });

    /***/
  }),
  /* 165 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.10 Reflect.isExtensible(target)
    var $export = __webpack_require__(9),
      anObject = __webpack_require__(26),
      $isExtensible = Object.isExtensible;

    $export($export.S, 'Reflect', {
      isExtensible: function isExtensible(target) {
        anObject(target);
        return $isExtensible ? $isExtensible(target) : true;
      }
    });

    /***/
  }),
  /* 166 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.11 Reflect.ownKeys(target)
    var $export = __webpack_require__(9);

    $export($export.S, 'Reflect', { ownKeys: __webpack_require__(167) });

    /***/
  }),
  /* 167 */
  /***/
  (function(module, exports, __webpack_require__) {

    // all object keys, includes non-enumerable and symbols
    var $ = __webpack_require__(8),
      anObject = __webpack_require__(26),
      Reflect = __webpack_require__(10).Reflect;
    module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
      var keys = $.getNames(anObject(it)),
        getSymbols = $.getSymbols;
      return getSymbols ? keys.concat(getSymbols(it)) : keys;
    };

    /***/
  }),
  /* 168 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.12 Reflect.preventExtensions(target)
    var $export = __webpack_require__(9),
      anObject = __webpack_require__(26),
      $preventExtensions = Object.preventExtensions;

    $export($export.S, 'Reflect', {
      preventExtensions: function preventExtensions(target) {
        anObject(target);
        try {
          if ($preventExtensions) $preventExtensions(target);
          return true;
        } catch (e) {
          return false;
        }
      }
    });

    /***/
  }),
  /* 169 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
    var $ = __webpack_require__(8),
      has = __webpack_require__(23),
      $export = __webpack_require__(9),
      createDesc = __webpack_require__(13),
      anObject = __webpack_require__(26),
      isObject = __webpack_require__(22);

    function set(target, propertyKey, V /*, receiver*/ ) {
      var receiver = arguments.length < 4 ? target : arguments[3],
        ownDesc = $.getDesc(anObject(target), propertyKey),
        existingDescriptor, proto;
      if (!ownDesc) {
        if (isObject(proto = $.getProto(target))) {
          return set(proto, propertyKey, V, receiver);
        }
        ownDesc = createDesc(0);
      }
      if (has(ownDesc, 'value')) {
        if (ownDesc.writable === false || !isObject(receiver)) return false;
        existingDescriptor = $.getDesc(receiver, propertyKey) || createDesc(0);
        existingDescriptor.value = V;
        $.setDesc(receiver, propertyKey, existingDescriptor);
        return true;
      }
      return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
    }

    $export($export.S, 'Reflect', { set: set });

    /***/
  }),
  /* 170 */
  /***/
  (function(module, exports, __webpack_require__) {

    // 26.1.14 Reflect.setPrototypeOf(target, proto)
    var $export = __webpack_require__(9),
      setProto = __webpack_require__(51);

    if (setProto) $export($export.S, 'Reflect', {
      setPrototypeOf: function setPrototypeOf(target, proto) {
        setProto.check(target, proto);
        try {
          setProto.set(target, proto);
          return true;
        } catch (e) {
          return false;
        }
      }
    });

    /***/
  }),
  /* 171 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $export = __webpack_require__(9),
      $includes = __webpack_require__(39)(true);

    $export($export.P, 'Array', {
      // https://github.com/domenic/Array.prototype.includes
      includes: function includes(el /*, fromIndex = 0 */ ) {
        return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
      }
    });

    __webpack_require__(124)('includes');

    /***/
  }),
  /* 172 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    // https://github.com/mathiasbynens/String.prototype.at
    var $export = __webpack_require__(9),
      $at = __webpack_require__(104)(true);

    $export($export.P, 'String', {
      at: function at(pos) {
        return $at(this, pos);
      }
    });

    /***/
  }),
  /* 173 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $export = __webpack_require__(9),
      $pad = __webpack_require__(174);

    $export($export.P, 'String', {
      padLeft: function padLeft(maxLength /*, fillString = ' ' */ ) {
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
      }
    });

    /***/
  }),
  /* 174 */
  /***/
  (function(module, exports, __webpack_require__) {

    // https://github.com/ljharb/proposal-string-pad-left-right
    var toLength = __webpack_require__(33),
      repeat = __webpack_require__(115),
      defined = __webpack_require__(28);

    module.exports = function(that, maxLength, fillString, left) {
      var S = String(defined(that)),
        stringLength = S.length,
        fillStr = fillString === undefined ? ' ' : String(fillString),
        intMaxLength = toLength(maxLength);
      if (intMaxLength <= stringLength) return S;
      if (fillStr == '') fillStr = ' ';
      var fillLen = intMaxLength - stringLength,
        stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
      if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
      return left ? stringFiller + S : S + stringFiller;
    };

    /***/
  }),
  /* 175 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var $export = __webpack_require__(9),
      $pad = __webpack_require__(174);

    $export($export.P, 'String', {
      padRight: function padRight(maxLength /*, fillString = ' ' */ ) {
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
      }
    });

    /***/
  }),
  /* 176 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
    __webpack_require__(69)('trimLeft', function($trim) {
      return function trimLeft() {
        return $trim(this, 1);
      };
    });

    /***/
  }),
  /* 177 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
    __webpack_require__(69)('trimRight', function($trim) {
      return function trimRight() {
        return $trim(this, 2);
      };
    });

    /***/
  }),
  /* 178 */
  /***/
  (function(module, exports, __webpack_require__) {

    // https://github.com/benjamingr/RexExp.escape
    var $export = __webpack_require__(9),
      $re = __webpack_require__(179)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

    $export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });

    /***/
  }),
  /* 179 */
  /***/
  (function(module, exports) {

    module.exports = function(regExp, replace) {
      var replacer = replace === Object(replace) ? function(part) {
        return replace[part];
      } : replace;
      return function(it) {
        return String(it).replace(regExp, replacer);
      };
    };

    /***/
  }),
  /* 180 */
  /***/
  (function(module, exports, __webpack_require__) {

    // https://gist.github.com/WebReflection/9353781
    var $ = __webpack_require__(8),
      $export = __webpack_require__(9),
      ownKeys = __webpack_require__(167),
      toIObject = __webpack_require__(29),
      createDesc = __webpack_require__(13);

    $export($export.S, 'Object', {
      getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
        var O = toIObject(object),
          setDesc = $.setDesc,
          getDesc = $.getDesc,
          keys = ownKeys(O),
          result = {},
          i = 0,
          key, D;
        while (keys.length > i) {
          D = getDesc(O, key = keys[i++]);
          if (key in result) setDesc(result, key, createDesc(0, D));
          else result[key] = D;
        }
        return result;
      }
    });

    /***/
  }),
  /* 181 */
  /***/
  (function(module, exports, __webpack_require__) {

    // http://goo.gl/XkBrjD
    var $export = __webpack_require__(9),
      $values = __webpack_require__(182)(false);

    $export($export.S, 'Object', {
      values: function values(it) {
        return $values(it);
      }
    });

    /***/
  }),
  /* 182 */
  /***/
  (function(module, exports, __webpack_require__) {

    var $ = __webpack_require__(8),
      toIObject = __webpack_require__(29),
      isEnum = $.isEnum;
    module.exports = function(isEntries) {
      return function(it) {
        var O = toIObject(it),
          keys = $.getKeys(O),
          length = keys.length,
          i = 0,
          result = [],
          key;
        while (length > i)
          if (isEnum.call(O, key = keys[i++])) {
            result.push(isEntries ? [key, O[key]] : O[key]);
          } return result;
      };
    };

    /***/
  }),
  /* 183 */
  /***/
  (function(module, exports, __webpack_require__) {

    // http://goo.gl/XkBrjD
    var $export = __webpack_require__(9),
      $entries = __webpack_require__(182)(true);

    $export($export.S, 'Object', {
      entries: function entries(it) {
        return $entries(it);
      }
    });

    /***/
  }),
  /* 184 */
  /***/
  (function(module, exports, __webpack_require__) {

    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var $export = __webpack_require__(9);

    $export($export.P, 'Map', { toJSON: __webpack_require__(185)('Map') });

    /***/
  }),
  /* 185 */
  /***/
  (function(module, exports, __webpack_require__) {

    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var forOf = __webpack_require__(144),
      classof = __webpack_require__(53);
    module.exports = function(NAME) {
      return function toJSON() {
        if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
        var arr = [];
        forOf(this, false, arr.push, arr);
        return arr;
      };
    };

    /***/
  }),
  /* 186 */
  /***/
  (function(module, exports, __webpack_require__) {

    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var $export = __webpack_require__(9);

    $export($export.P, 'Set', { toJSON: __webpack_require__(185)('Set') });

    /***/
  }),
  /* 187 */
  /***/
  (function(module, exports, __webpack_require__) {

    // JavaScript 1.6 / Strawman array statics shim
    var $ = __webpack_require__(8),
      $export = __webpack_require__(9),
      $ctx = __webpack_require__(18),
      $Array = __webpack_require__(11).Array || Array,
      statics = {};
    var setStatics = function(keys, length) {
      $.each.call(keys.split(','), function(key) {
        if (length == undefined && key in $Array) statics[key] = $Array[key];
        else if (key in []) statics[key] = $ctx(Function.call, [][key], length);
      });
    };
    setStatics('pop,reverse,shift,keys,values,entries', 1);
    setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
    setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' +
      'reduce,reduceRight,copyWithin,fill');
    $export($export.S, 'Array', statics);

    /***/
  }),
  /* 188 */
  /***/
  (function(module, exports, __webpack_require__) {

    // ie9- setTimeout & setInterval additional parameters fix
    var global = __webpack_require__(10),
      $export = __webpack_require__(9),
      invoke = __webpack_require__(25),
      partial = __webpack_require__(189),
      navigator = global.navigator,
      MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
    var wrap = function(set) {
      return MSIE ? function(fn, time /*, ...args */ ) {
        return set(invoke(
          partial,
          [].slice.call(arguments, 2),
          typeof fn == 'function' ? fn : Function(fn)
        ), time);
      } : set;
    };
    $export($export.G + $export.B + $export.F * MSIE, {
      setTimeout: wrap(global.setTimeout),
      setInterval: wrap(global.setInterval)
    });

    /***/
  }),
  /* 189 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';
    var path = __webpack_require__(190),
      invoke = __webpack_require__(25),
      aFunction = __webpack_require__(19);
    module.exports = function( /* ...pargs */ ) {
      var fn = aFunction(this),
        length = arguments.length,
        pargs = Array(length),
        i = 0,
        _ = path._,
        holder = false;
      while (length > i)
        if ((pargs[i] = arguments[i++]) === _) holder = true;
      return function( /* ...args */ ) {
        var that = this,
          $$ = arguments,
          $$len = $$.length,
          j = 0,
          k = 0,
          args;
        if (!holder && !$$len) return invoke(fn, pargs, that);
        args = pargs.slice();
        if (holder)
          for (; length > j; j++)
            if (args[j] === _) args[j] = $$[k++];
        while ($$len > k) args.push($$[k++]);
        return invoke(fn, args, that);
      };
    };

    /***/
  }),
  /* 190 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(10);

    /***/
  }),
  /* 191 */
  /***/
  (function(module, exports, __webpack_require__) {

    var $export = __webpack_require__(9),
      $task = __webpack_require__(147);
    $export($export.G + $export.B, {
      setImmediate: $task.set,
      clearImmediate: $task.clear
    });

    /***/
  }),
  /* 192 */
  /***/
  (function(module, exports, __webpack_require__) {

    __webpack_require__(123);
    var global = __webpack_require__(10),
      hide = __webpack_require__(12),
      Iterators = __webpack_require__(106),
      ITERATOR = __webpack_require__(37)('iterator'),
      NL = global.NodeList,
      HTC = global.HTMLCollection,
      NLProto = NL && NL.prototype,
      HTCProto = HTC && HTC.prototype,
      ArrayValues = Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
    if (NLProto && !NLProto[ITERATOR]) hide(NLProto, ITERATOR, ArrayValues);
    if (HTCProto && !HTCProto[ITERATOR]) hide(HTCProto, ITERATOR, ArrayValues);

    /***/
  }),
  /* 193 */
  /***/
  (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */
    (function(global, process) {
      /**
       * Copyright (c) 2014, Facebook, Inc.
       * All rights reserved.
       *
       * This source code is licensed under the BSD-style license found in the
       * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
       * additional grant of patent rights can be found in the PATENTS file in
       * the same directory.
       */

      !(function(global) {
        "use strict";

        var hasOwn = Object.prototype.hasOwnProperty;
        var undefined; // More compressible than void 0.
        var iteratorSymbol =
          typeof Symbol === "function" && Symbol.iterator || "@@iterator";

        var inModule = typeof module === "object";
        var runtime = global.regeneratorRuntime;
        if (runtime) {
          if (inModule) {
            // If regeneratorRuntime is defined globally and we're in a module,
            // make the exports object identical to regeneratorRuntime.
            module.exports = runtime;
          }
          // Don't bother evaluating the rest of this file if the runtime was
          // already defined globally.
          return;
        }

        // Define the runtime globally (as expected by generated code) as either
        // module.exports (if we're in a module) or a new, empty object.
        runtime = global.regeneratorRuntime = inModule ? module.exports : {};

        function wrap(innerFn, outerFn, self, tryLocsList) {
          // If outerFn provided, then outerFn.prototype instanceof Generator.
          var generator = Object.create((outerFn || Generator).prototype);
          var context = new Context(tryLocsList || []);

          // The ._invoke method unifies the implementations of the .next,
          // .throw, and .return methods.
          generator._invoke = makeInvokeMethod(innerFn, self, context);

          return generator;
        }
        runtime.wrap = wrap;

        // Try/catch helper to minimize deoptimizations. Returns a completion
        // record like context.tryEntries[i].completion. This interface could
        // have been (and was previously) designed to take a closure to be
        // invoked without arguments, but in all the cases we care about we
        // already have an existing method we want to call, so there's no need
        // to create a new function object. We can even get away with assuming
        // the method takes exactly one argument, since that happens to be true
        // in every case, so we don't have to touch the arguments object. The
        // only additional allocation required is the completion record, which
        // has a stable shape and so hopefully should be cheap to allocate.
        function tryCatch(fn, obj, arg) {
          try {
            return { type: "normal", arg: fn.call(obj, arg) };
          } catch (err) {
            return { type: "throw", arg: err };
          }
        }

        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed";

        // Returning this object from the innerFn has the same effect as
        // breaking out of the dispatch switch statement.
        var ContinueSentinel = {};

        // Dummy constructor functions that we use as the .constructor and
        // .constructor.prototype properties for functions that return Generator
        // objects. For full spec compliance, you may wish to configure your
        // minifier not to mangle the names of these two functions.
        function Generator() {}

        function GeneratorFunction() {}

        function GeneratorFunctionPrototype() {}

        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
        GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
        GeneratorFunctionPrototype.constructor = GeneratorFunction;
        GeneratorFunction.displayName = "GeneratorFunction";

        // Helper for defining the .next, .throw, and .return methods of the
        // Iterator interface in terms of a single ._invoke method.
        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function(method) {
            prototype[method] = function(arg) {
              return this._invoke(method, arg);
            };
          });
        }

        runtime.isGeneratorFunction = function(genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor ?
            ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction" :
            false;
        };

        runtime.mark = function(genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
          }
          genFun.prototype = Object.create(Gp);
          return genFun;
        };

        // Within the body of any async function, `await x` is transformed to
        // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
        // `value instanceof AwaitArgument` to determine if the yielded value is
        // meant to be awaited. Some may consider the name of this method too
        // cutesy, but they are curmudgeons.
        runtime.awrap = function(arg) {
          return new AwaitArgument(arg);
        };

        function AwaitArgument(arg) {
          this.arg = arg;
        }

        function AsyncIterator(generator) {
          // This invoke function is written in a style that assumes some
          // calling function (or Promise) will handle exceptions.
          function invoke(method, arg) {
            var result = generator[method](arg);
            var value = result.value;
            return value instanceof AwaitArgument ?
              Promise.resolve(value.arg).then(invokeNext, invokeThrow) :
              Promise.resolve(value).then(function(unwrapped) {
                // When a yielded Promise is resolved, its final value becomes
                // the .value of the Promise<{value,done}> result for the
                // current iteration. If the Promise is rejected, however, the
                // result for this iteration will be rejected with the same
                // reason. Note that rejections of yielded Promises are not
                // thrown back into the generator function, as is the case
                // when an awaited Promise is rejected. This difference in
                // behavior between yield and await is important, because it
                // allows the consumer to decide what to do with the yielded
                // rejection (swallow it and continue, manually .throw it back
                // into the generator, abandon iteration, whatever). With
                // await, by contrast, there is no opportunity to examine the
                // rejection reason outside the generator function, so the
                // only option is to throw it from the await expression, and
                // let the generator function handle the exception.
                result.value = unwrapped;
                return result;
              });
          }

          if (typeof process === "object" && process.domain) {
            invoke = process.domain.bind(invoke);
          }

          var invokeNext = invoke.bind(generator, "next");
          var invokeThrow = invoke.bind(generator, "throw");
          var invokeReturn = invoke.bind(generator, "return");
          var previousPromise;

          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return invoke(method, arg);
            }

            return previousPromise =
              // If enqueue has been called before, then we want to wait until
              // all previous Promises have been resolved before calling invoke,
              // so that results are always delivered in the correct order. If
              // enqueue has not been called before, then it is important to
              // call invoke immediately, without waiting on a callback to fire,
              // so that the async generator function has the opportunity to do
              // any necessary setup in a predictable way. This predictability
              // is why the Promise constructor synchronously invokes its
              // executor callback, and why async functions synchronously
              // execute code before the first await. Since we implement simple
              // async functions in terms of async generators, it is especially
              // important to get this right, even though it requires care.
              previousPromise ? previousPromise.then(
                callInvokeWithMethodAndArg,
                // Avoid propagating failures to Promises returned by later
                // invocations of the iterator.
                callInvokeWithMethodAndArg
              ) : new Promise(function(resolve) {
                resolve(callInvokeWithMethodAndArg());
              });
          }

          // Define the unified helper method that is used to implement .next,
          // .throw, and .return (see defineIteratorMethods).
          this._invoke = enqueue;
        }

        defineIteratorMethods(AsyncIterator.prototype);

        // Note that simple async functions are implemented on top of
        // AsyncIterator objects; they just return a Promise for the value of
        // the final result produced by the iterator.
        runtime.async = function(innerFn, outerFn, self, tryLocsList) {
          var iter = new AsyncIterator(
            wrap(innerFn, outerFn, self, tryLocsList)
          );

          return runtime.isGeneratorFunction(outerFn) ?
            iter // If outerFn is a generator, return the full iterator.
            :
            iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
        };

        function makeInvokeMethod(innerFn, self, context) {
          var state = GenStateSuspendedStart;

          return function invoke(method, arg) {
            if (state === GenStateExecuting) {
              throw new Error("Generator is already running");
            }

            if (state === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              }

              // Be forgiving, per 25.3.3.3.3 of the spec:
              // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
              return doneResult();
            }

            while (true) {
              var delegate = context.delegate;
              if (delegate) {
                if (method === "return" ||
                  (method === "throw" && delegate.iterator[method] === undefined)) {
                  // A return or throw (when the delegate iterator has no throw
                  // method) always terminates the yield* loop.
                  context.delegate = null;

                  // If the delegate iterator has a return method, give it a
                  // chance to clean up.
                  var returnMethod = delegate.iterator["return"];
                  if (returnMethod) {
                    var record = tryCatch(returnMethod, delegate.iterator, arg);
                    if (record.type === "throw") {
                      // If the return method threw an exception, let that
                      // exception prevail over the original return or throw.
                      method = "throw";
                      arg = record.arg;
                      continue;
                    }
                  }

                  if (method === "return") {
                    // Continue with the outer return, now that the delegate
                    // iterator has been terminated.
                    continue;
                  }
                }

                var record = tryCatch(
                  delegate.iterator[method],
                  delegate.iterator,
                  arg
                );

                if (record.type === "throw") {
                  context.delegate = null;

                  // Like returning generator.throw(uncaught), but without the
                  // overhead of an extra function call.
                  method = "throw";
                  arg = record.arg;
                  continue;
                }

                // Delegate generator ran and handled its own exceptions so
                // regardless of what the method was, we continue as if it is
                // "next" with an undefined arg.
                method = "next";
                arg = undefined;

                var info = record.arg;
                if (info.done) {
                  context[delegate.resultName] = info.value;
                  context.next = delegate.nextLoc;
                } else {
                  state = GenStateSuspendedYield;
                  return info;
                }

                context.delegate = null;
              }

              if (method === "next") {
                if (state === GenStateSuspendedYield) {
                  context.sent = arg;
                } else {
                  context.sent = undefined;
                }

              } else if (method === "throw") {
                if (state === GenStateSuspendedStart) {
                  state = GenStateCompleted;
                  throw arg;
                }

                if (context.dispatchException(arg)) {
                  // If the dispatched exception was caught by a catch block,
                  // then let that catch block handle the exception normally.
                  method = "next";
                  arg = undefined;
                }

              } else if (method === "return") {
                context.abrupt("return", arg);
              }

              state = GenStateExecuting;

              var record = tryCatch(innerFn, self, context);
              if (record.type === "normal") {
                // If an exception is thrown from innerFn, we leave state ===
                // GenStateExecuting and loop back for another invocation.
                state = context.done ?
                  GenStateCompleted :
                  GenStateSuspendedYield;

                var info = {
                  value: record.arg,
                  done: context.done
                };

                if (record.arg === ContinueSentinel) {
                  if (context.delegate && method === "next") {
                    // Deliberately forget the last sent value so that we don't
                    // accidentally pass it on to the delegate.
                    arg = undefined;
                  }
                } else {
                  return info;
                }

              } else if (record.type === "throw") {
                state = GenStateCompleted;
                // Dispatch the exception by looping back around to the
                // context.dispatchException(arg) call above.
                method = "throw";
                arg = record.arg;
              }
            }
          };
        }

        // Define Generator.prototype.{next,throw,return} in terms of the
        // unified ._invoke helper method.
        defineIteratorMethods(Gp);

        Gp[iteratorSymbol] = function() {
          return this;
        };

        Gp.toString = function() {
          return "[object Generator]";
        };

        function pushTryEntry(locs) {
          var entry = { tryLoc: locs[0] };

          if (1 in locs) {
            entry.catchLoc = locs[1];
          }

          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }

          this.tryEntries.push(entry);
        }

        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }

        function Context(tryLocsList) {
          // The root entry object (effectively a try statement without a catch
          // or a finally block) gives us a place to store values thrown from
          // locations where there is no enclosing try statement.
          this.tryEntries = [{ tryLoc: "root" }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }

        runtime.keys = function(object) {
          var keys = [];
          for (var key in object) {
            keys.push(key);
          }
          keys.reverse();

          // Rather than returning an object with a next method, we keep
          // things simple and return the next function itself.
          return function next() {
            while (keys.length) {
              var key = keys.pop();
              if (key in object) {
                next.value = key;
                next.done = false;
                return next;
              }
            }

            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
          };
        };

        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }

            if (typeof iterable.next === "function") {
              return iterable;
            }

            if (!isNaN(iterable.length)) {
              var i = -1,
                next = function next() {
                  while (++i < iterable.length) {
                    if (hasOwn.call(iterable, i)) {
                      next.value = iterable[i];
                      next.done = false;
                      return next;
                    }
                  }

                  next.value = undefined;
                  next.done = true;

                  return next;
                };

              return next.next = next;
            }
          }

          // Return an iterator with no values.
          return { next: doneResult };
        }
        runtime.values = values;

        function doneResult() {
          return { value: undefined, done: true };
        }

        Context.prototype = {
          constructor: Context,

          reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            this.sent = undefined;
            this.done = false;
            this.delegate = null;

            this.tryEntries.forEach(resetTryEntry);

            if (!skipTempReset) {
              for (var name in this) {
                // Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                  this[name] = undefined;
                }
              }
            }
          },

          stop: function() {
            this.done = true;

            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }

            return this.rval;
          },

          dispatchException: function(exception) {
            if (this.done) {
              throw exception;
            }

            var context = this;

            function handle(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context.next = loc;
              return !!caught;
            }

            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              var record = entry.completion;

              if (entry.tryLoc === "root") {
                // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
              }

              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");

                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }

                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  }

                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }

                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },

          abrupt: function(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }

            if (finallyEntry &&
              (type === "break" ||
                type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
              // Ignore the finally entry if control is not jumping to a
              // location outside the try/catch block.
              finallyEntry = null;
            }

            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;

            if (finallyEntry) {
              this.next = finallyEntry.finallyLoc;
            } else {
              this.complete(record);
            }

            return ContinueSentinel;
          },

          complete: function(record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }

            if (record.type === "break" ||
              record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = record.arg;
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }
          },

          finish: function(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },

          "catch": function(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }

            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
          },

          delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values(iterable),
              resultName: resultName,
              nextLoc: nextLoc
            };

            return ContinueSentinel;
          }
        };
      })(
        // Among the various tricks for obtaining a reference to the global
        // object, this seems to be the most reliable technique that does not
        // use indirect eval (which violates Content Security Policy).
        typeof global === "object" ? global :
        typeof window === "object" ? window :
        typeof self === "object" ? self : this
      );

      /* WEBPACK VAR INJECTION */
    }.call(exports, (function() { return this; }()), __webpack_require__(194)))

    /***/
  }),
  /* 194 */
  /***/
  (function(module, exports) {

    // shim for using process in browser
    var process = module.exports = {};

    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
    }

    function defaultClearTimeout() {
      throw new Error('clearTimeout has not been defined');
    }
    (function() {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    }())

    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
          return cachedSetTimeout.call(this, fun, 0);
        }
      }

    }

    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
          // Some versions of I.E. have different rules for clearTimeout vs setTimeout
          return cachedClearTimeout.call(this, marker);
        }
      }

    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
    }

    function drainQueue() {
      if (draining) {
        return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }

    process.nextTick = function(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    };

    // v8 likes predictible objects
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function(name) { return [] }

    process.binding = function(name) {
      throw new Error('process.binding is not supported');
    };

    process.cwd = function() { return '/' };
    process.chdir = function(dir) {
      throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };

    /***/
  }),
  /* 195 */
  /***/
  (function(module, exports, __webpack_require__) {

    // Wrap up new database functionality with a class
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _constantsVisualDatabase = __webpack_require__(196);

    var definitions = _interopRequireWildcard(_constantsVisualDatabase);

    var VisualDBService = (function() {
      function VisualDBService() {
        _classCallCheck(this, VisualDBService);
      }

      _createClass(VisualDBService, [{
        key: 'initializeDB',

        // Creates the pages table in the database if it does not already exist.
        value: function initializeDB() {
          var _this = this;

          this.executeSql(definitions.VISUAL_DATABASE_JOBS_TABLE_STRUCTURE, function() {
            return null;
          }, function() {
            return null;
          });
          this.executeSql(definitions.VISUAL_DATABASE_CAPTURES_TABLE_STRUCTURE, function() {
            return null;
          }, function() {
            return null;
          });
          this.executeSql(definitions.GET_CAPTURES_TABLE_SQL, null, function(result) {
            if (!result.rows[0].sql.match(/`html` TEXT/)) {
              _this.executeSql(definitions.VISUAL_DATABASE_HTML_COL_MIGRATION, null, function() {
                return null;
              }, function() {
                return null;
              });
            }
          }, function() {
            return null;
          });
          // VISUAL_DATABASE_HTML_COL_MIGRATION
        }

        // Executes the specified SQL query with the specified arguments within a
        // transaction. If resultCallback is specified, it is called with the result of
        // the query. If transactionCallback is specified, it is called after the
        // transaction is successful (if it is).
      }, {
        key: 'executeSql',
        value: function executeSql(sql, _args, resultCallback, transactionCallback) {
          var args = typeof _args === 'function' ? [] : _args;
          var noop = function noop() {
            return null;
          };
          var resultFunc = function resultFunc(_, result) {
            return resultCallback ? resultCallback(result) : noop();
          };
          var transactionFuncCallback = transactionCallback || noop;
          var errorFunc = function errorFunc(tx, error) {
            console.log(error.message);
          };
          var transactionFunc = function transactionFunc(transaction) {
            transaction.executeSql(sql, args, resultFunc, errorFunc);
          };

          definitions.VISUAL_DATABASE.transaction(transactionFunc, function() {
            return null;
          }, transactionFuncCallback);
        }
      }]);

      return VisualDBService;
    })();

    exports['default'] = VisualDBService;
    module.exports = exports['default'];

    /***/
  }),
  /* 196 */
  /***/
  (function(module, exports) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var VISUAL_DATABASE = openDatabase('visualJobs', '1.0', 'Visual Jobs', 49 * 1024 * 1024);

    exports.VISUAL_DATABASE = VISUAL_DATABASE;
    // The pages database table structure as an SQL CREATE TABLE statement.
    var VISUAL_DATABASE_JOBS_TABLE_STRUCTURE = "" + "CREATE TABLE IF NOT EXISTS jobs ( " + "  `job_id` INTEGER, " + "  `url` TEXT NOT NULL UNIQUE, " + "  `name` TEXT NOT NULL, " + "  `mode` TEXT NOT NULL DEFAULT 'text', " + "  `regex` TEXT, " + "  `selector` TEXT, " + "  `check_interval` INTEGER, " + "  `html` TEXT NOT NULL DEFAULT '', " + "  `crc_checksum` INTEGER NOT NULL DEFAULT 0, " + "  `updated` INTEGER, " + "  `last_check` INTEGER, " + "  `last_changed` INTEGER, " + "  `crop_scroll_top` INTEGER, " + "  `crop_orig_width` INTEGER, " + "  `crop_orig_height` INTEGER, " + "  `crop_width` INTEGER, " + "  `crop_height` INTEGER, " + "  `crop_x` INTEGER, " + "  `crop_y` INTEGER, " + "  `trigger` TEXT, " + "  `active` BOOLEAN DEFAULT true " + "); ";

    exports.VISUAL_DATABASE_JOBS_TABLE_STRUCTURE = VISUAL_DATABASE_JOBS_TABLE_STRUCTURE;
    var VISUAL_DATABASE_CAPTURES_TABLE_STRUCTURE = "" + "CREATE TABLE IF NOT EXISTS captures ( " + " `job_id` INTEGER NOT NULL, " + " `image_mime` TEXT DEFAULT 'image/png', " + " `img_data` BLOB, " + " `html` TEXT, " + " `created_at` INTEGER " + "); ";

    exports.VISUAL_DATABASE_CAPTURES_TABLE_STRUCTURE = VISUAL_DATABASE_CAPTURES_TABLE_STRUCTURE;
    var GET_CAPTURES_TABLE_SQL = "" + "SELECT name, sql FROM sqlite_master WHERE type='table' AND name = 'captures';";

    exports.GET_CAPTURES_TABLE_SQL = GET_CAPTURES_TABLE_SQL;
    var VISUAL_DATABASE_HTML_COL_MIGRATION = "" + "ALTER TABLE captures ADD COLUMN `html` TEXT;";
    exports.VISUAL_DATABASE_HTML_COL_MIGRATION = VISUAL_DATABASE_HTML_COL_MIGRATION;

    /***/
  }),
  /* 197 */
  /***/
  (function(module, exports, __webpack_require__) {

    // Manages updates persisted in local storage
    // This is easier to work with than Web SQL and requires little space
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _servicesVisualJobService = __webpack_require__(198);

    var _servicesVisualJobService2 = _interopRequireDefault(_servicesVisualJobService);

    var visualJobService = new _servicesVisualJobService2['default']();

    var UpdateService = (function() {
      function UpdateService() {
        _classCallCheck(this, UpdateService);

        this.last_count = 0;
      }

      _createClass(UpdateService, [{
        key: 'getAllUpdates',
        value: function getAllUpdates() {
          var updates = JSON.parse(localStorage.getItem('updates'));
          if (!updates) {
            updates = [];
          }
          this.updateBadge(updates);
          return updates;
        }
      }, {
        key: 'create',
        value: function create(update) {
          var jobAlreadyInUpdates = false;

          var updates = this.getAllUpdates() || [];

          // See if we can find an index for this job already
          var updateIndex = Array.findIndex(updates, function(u) {
            return u.job_id === update.job_id;
          });

          // Overwrite previous job if update already exists
          if (updateIndex !== -1) {
            jobAlreadyInUpdates = true;
            updates[updateIndex] = update;
          } else {
            updates.push(update);
          }

          localStorage.setItem('updates', JSON.stringify(updates));
          this.updateBadge(updates);

          return jobAlreadyInUpdates;
        }
      }, {
        key: 'remove',
        value: function remove(update) {
          var updates = this.getAllUpdates() || [];

          // See if we can find an index for this job already
          var updateIndex = Array.findIndex(updates, function(u) {
            return u.job_id === update.job_id;
          });

          // Remove job if found in updates
          if (updateIndex !== -1) {
            updates.splice(updateIndex, 1);
            localStorage.setItem('updates', JSON.stringify(updates));
          }

          this.updateBadge(updates);
        }

        // Checks if any pages are marked as updated, and if so, displays their count
        // on the browser action badge. If no pages are updated and the badge is
        // displayed, removes it. This also triggers sound alerts and/or desktop
        // notifications if applicable.
      }, {
        key: 'updateBadge',
        value: function updateBadge(updates) {
          if (!updates) {
            return;
          }
          var count = updates.length;

          chrome.browserAction.setBadgeBackgroundColor({ color: '#46A9E2' });
          chrome.browserAction.setBadgeText({ text: count ? String(count) : '' });

          this.last_count = count;
        }
      }]);

      return UpdateService;
    })();

    exports['default'] = UpdateService;
    module.exports = exports['default'];

    /***/
  }),
  /* 198 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _slicedToArray = (function() {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) {
          _d = true;
          _e = err;
        } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } }
        return _arr;
      }
      return function(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } };
    })();

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _VisualDBService = __webpack_require__(195);

    var _VisualDBService2 = _interopRequireDefault(_VisualDBService);

    var _formattersBase64Image = __webpack_require__(199);

    var _formattersIntervalToMilliseconds = __webpack_require__(200);

    // Deals with saving jobs to the database

    var VisualJobService = (function() {
      function VisualJobService() {
        _classCallCheck(this, VisualJobService);

        this.db = new _VisualDBService2['default']();
      }

      _createClass(VisualJobService, [{
        key: 'insertJob',
        value: function insertJob(job) {
          var query = "INSERT INTO jobs(job_id, url, name, mode, regex, selector, " + "                   check_interval, html, crc_checksum, " + "                   last_check, last_changed, " + "                   crop_scroll_top, crop_orig_width, crop_orig_height," + "                   crop_width, crop_height," + "                   crop_x, crop_y, trigger, active ) " + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

          if (job.checkInterval && job.checkIntervalType) {
            job.check_interval = (0, _formattersIntervalToMilliseconds.intervalToMilliseconds)(job.checkInterval, job.checkIntervalType);
          }

          this.db.executeSql(query, [job.id, job.url, job.name || chrome.i18n.getMessage('untitled', job.url), job.mode || 'text', job.regex || null, job.selector || null, job.check_interval || null, job.html || '', job.crc || 0, Date.now(), job.last_changed || null, job.crop.scroll_top, job.crop.orig_width, job.crop.orig_height, job.crop.width, job.crop.height, job.crop.x, job.crop.y, job.trigger, job.active]);
        }
      }, {
        key: 'insertCapture',
        value: function insertCapture(capture, callback) {
          var mimeType = 'undefined';
          var imgData = 'undefined';
          if (capture.cropped_img) {
            var _splitBase64Image = (0, _formattersBase64Image.splitBase64Image)(capture.cropped_img);

            var mime = _splitBase64Image.mime;
            var data = _splitBase64Image.data;

            mimeType = mime;
            imgData = data;
          }

          var query = '' + 'INSERT INTO captures(job_id, image_mime, img_data, html, created_at) ' + 'VALUES(?,?,?,?,?)';

          var captureTimestamp = Date.now();
          var html = capture.html;
          var timestampCallback = callback || function() {};

          this.db.executeSql(query, [capture.id, mimeType, imgData, html, captureTimestamp]);

          timestampCallback(captureTimestamp);
        }
      }, {
        key: 'getAllJobs',
        value: function getAllJobs(callback) {
          var query = 'SELECT * FROM jobs ORDER BY job_id DESC;';
          var self = this;

          this.db.executeSql(query, [], function(result) {
            var jobs = [];
            for (var i = 0; i < result.rows.length; i++) {
              var job = self.rehydrateJobFromDBFormat(result.rows.item(i));
              jobs.push(job);
            }
            callback(jobs);
          });
        }
      }, {
        key: 'getJobByID',
        value: function getJobByID(id, callback) {
          var query = 'SELECT * FROM jobs WHERE job_id = ? LIMIT 1;';
          var self = this;

          this.db.executeSql(query, [id], function(result) {
            var job = self.rehydrateJobFromDBFormat(result.rows.item(0));
            callback(job);
          });
        }
      }, {
        key: 'getJobByURL',
        value: function getJobByURL(url, callback) {
          // if (!url) { return(Error('Could not get job by undefined url')) }
          var query = 'SELECT * FROM jobs WHERE url = ? LIMIT 1;';
          var self = this;

          this.db.executeSql(query, [url], function(result) {
            if (result.rows.length >= 1) {
              var job = self.rehydrateJobFromDBFormat(result.rows.item(0));
              callback(job);
            } else {
              callback(null);
            }
          });
        }

        // For now, we're just ensuring that the job url is unique
      }, {
        key: 'jobIsUnique',
        value: function jobIsUnique(job, callback) {
          var success = true;
          var error = false;
          // Uniqueness check
          var url = job.url;
          this.getJobByURL(url, function(response) {
            if (response && response.url == url) {
              success = false;
              error = 'Job could not be saved because the URL is already being monitored.';
            }
            callback({ success: success, error: error });
          });
        }
      }, {
        key: 'setLastCheckedAtForURL',
        value: function setLastCheckedAtForURL(url) {
          var query = 'UPDATE jobs SET last_check=? WHERE url=? ;';
          var currentTime = Date.now();
          this.db.executeSql(query, [currentTime, url], function(result) {
            // Nothing for now
          });
          // Fire an event that popup can turn into an update action
          chrome.runtime.sendMessage({ action: 'JOB_UPDATED', url: url }, function(response) {
            // console.log(response);
          });
        }
      }, {
        key: 'loadLatestCapturesFor',
        value: function loadLatestCapturesFor(jobID, callback) {
          var query = 'SELECT * FROM captures WHERE job_id = ? ORDER BY created_at DESC LIMIT 2;';
          this.db.executeSql(query, [jobID], function(result) {
            var captures = [];
            for (var ii = 0; ii < result.rows.length; ii++) {
              captures.push(result.rows.item(ii));
            }
            callback(captures);
          });
        }
      }, {
        key: 'loadCapturesByTimestamps',
        value: function loadCapturesByTimestamps(jobID, timestamps, callback) {
          var query = 'SELECT * FROM captures WHERE job_id = ? ' + 'AND created_at IN (?) ' + 'ORDER BY created_at DESC LIMIT 2;';
          this.db.executeSql(query, [jobID, timestamps.join(",")], function(result) {
            var captures = [];
            for (var ii = 0; ii < result.rows.length; ii++) {
              captures.push(result.rows.item(ii));
            }
            callback(captures);
          });
        }
      }, {
        key: 'updateJob',
        value: function updateJob(job, callback) {
          var query = "UPDATE jobs SET url=?, name=?, mode=?, regex=?, selector=?, " + "                check_interval=?, html=?, crc_checksum=?, " + "                last_check=?, last_changed=?, " + "                crop_scroll_top=?, crop_orig_width=?, crop_orig_height=?," + "                crop_width=?, crop_height=?," + "                crop_x=?, crop_y=?, trigger=?, active=? " + "WHERE job_id = ? ;";

          if (job.checkInterval && job.checkIntervalType) {
            job.check_interval = (0, _formattersIntervalToMilliseconds.intervalToMilliseconds)(job.checkInterval, job.checkIntervalType);
          }

          this.db.executeSql(query, [job.url, job.name || chrome.i18n.getMessage('untitled', job.url), job.mode || 'text', job.regex || null, job.selector || null, job.check_interval || null, job.html || '', job.crc || job.crc_checksum || 0, Date.now(), job.last_changed || null, job.crop.scroll_top, job.crop.orig_width, job.crop.orig_height, job.crop.width, job.crop.height, job.crop.x, job.crop.y, job.trigger, job.active, job.job_id // Last position for WHERE statement
          ], function(result) {
            // console.log(result);
            (callback || function() {})(result);
          });
        }

        // Format retrieved job data in the format required for front-end
      }, {
        key: 'rehydrateJobFromDBFormat',
        value: function rehydrateJobFromDBFormat(job) {
          var _millisecondsToInterval = (0, _formattersIntervalToMilliseconds.millisecondsToInterval)(job.check_interval);

          var _millisecondsToInterval2 = _slicedToArray(_millisecondsToInterval, 2);

          var checkInterval = _millisecondsToInterval2[0];
          var checkIntervalType = _millisecondsToInterval2[1];

          job.checkInterval = checkInterval;
          job.checkIntervalType = checkIntervalType;
          job.active = job.active === 'true';
          var crop = {
            scroll_top: job.crop_scroll_top,
            orig_width: job.crop_orig_width,
            orig_height: job.crop_orig_height,
            width: job.crop_width,
            height: job.crop_height,
            x: job.crop_x,
            y: job.crop_y
          };
          job.crop = crop;
          return job;
        }

        // DELETE METHODS
      }, {
        key: 'deleteJob',
        value: function deleteJob(jobID, callback) {
          var self = this;
          var query = 'DELETE FROM jobs WHERE job_id = ?;';
          this.db.executeSql(query, [jobID], function(result) {
            // console.log(result);
            // Clean up captures
            self.deleteCapturesForJob(jobID);
            (callback || function() {})(jobID);
          });
        }

        // Clean out captures after deleting a job
      }, {
        key: 'deleteCapturesForJob',
        value: function deleteCapturesForJob(jobID, callback) {
          var query = 'DELETE FROM captures WHERE job_id = ?;';
          this.db.executeSql(query, [jobID], function(result) {
            // console.log(result);
            (callback || function() {})(jobID);
          });
        }
      }]);

      return VisualJobService;
    })();

    exports['default'] = VisualJobService;
    module.exports = exports['default'];

    /***/
  }),
  /* 199 */
  /***/
  (function(module, exports) {

    // Return image as array of [mimg, blob]
    // usage: { mime, blob } = splitBase64Image(encodedImg);
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.splitBase64Image = splitBase64Image;
    exports.joinBase64Image = joinBase64Image;

    function splitBase64Image(encodedImg) {
      var data = encodedImg.match(/^data:(.+);base64,(.+)$/);
      return {
        mime: data[1],
        data: data[2]
      };
    }

    function joinBase64Image(mime, data) {
      return 'data:' + mime + ';base64,' + data;
    }

    /***/
  }),
  /* 200 */
  /***/
  (function(module, exports) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.intervalToMilliseconds = intervalToMilliseconds;
    exports.millisecondsToInterval = millisecondsToInterval;
    exports.millisecondsBestFit = millisecondsBestFit;

    function intervalToMilliseconds(n, type) {
      switch (type) {
        case 'Sec':
          return n * 1000;
        case 'Min':
          return n * 60 * 1000;
        case 'Hrs':
          return n * 60 * 60 * 1000;
        case 'Days':
          return n * 24 * 60 * 60 * 1000;
        case 'Hour':
          // For server
          return 60 * 60 * 1000;
        case 'Day':
          // For server
          return 24 * 60 * 60 * 1000;
        case 'Week':
          // For server
          return 7 * 24 * 60 * 60 * 1000;
        default:
          console.log('couldn\'t find \'' + type + '\' to convert to milliseconds');
          break;
      }
    }

    function millisecondsToInterval(milliseconds) {
      var n = parseInt(milliseconds, 10);

      if (n % (24 * 60 * 60 * 1000) === 0) {
        return [(n / (24 * 60 * 60 * 1000)).toString(), 'Days'];
      } else if (n % (60 * 60 * 1000) === 0) {
        return [(n / (60 * 60 * 1000)).toString(), 'Hrs'];
      } else if (n % (60 * 1000) === 0) {
        return [(n / (60 * 1000)).toString(), 'Min'];
      } else if (n % 1000 === 0) {
        return [(n / 1000).toString(), 'Sec'];
      } else {
        console.log("Couldn't determine interval form milliseconds");
        return ['1', 'Sec'];
      }
    }

    function millisecondsBestFit(milliseconds) {
      var seconds = Math.floor(milliseconds / 1000);
      var minutes = Math.floor(seconds / 60) % 60;
      var hours = Math.floor(seconds / (60 * 60)) % 24;
      var days = Math.floor(seconds / (60 * 60 * 24));

      if (days) {
        return intervalToMilliseconds(days, 'Days');
      }
      if (hours) {
        return intervalToMilliseconds(hours, 'Hrs');
      }
      if (!days && minutes) {
        return intervalToMilliseconds(minutes, 'Min');
      }
      if (!days && !minutes && seconds) {
        return intervalToMilliseconds(seconds, 'Sec');
      }
    }

    /***/
  }),
  /* 201 */
  /***/
  (function(module, exports, __webpack_require__) {

    // Handles capturing page and redirecting to update
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _servicesVisualJobService = __webpack_require__(198);

    var _servicesVisualJobService2 = _interopRequireDefault(_servicesVisualJobService);

    var _ScreenshotService = __webpack_require__(202);

    var ScreenshotService = _interopRequireWildcard(_ScreenshotService);

    var _jquery = __webpack_require__(203);

    var _jquery2 = _interopRequireDefault(_jquery);

    var _jsBase64 = __webpack_require__(204);

    var visualJobService = new _servicesVisualJobService2['default']();

    var CaptureService = (function() {
      function CaptureService(job, update) {
        _classCallCheck(this, CaptureService);

        var self = this;

        this.job = job;
        this.update = update;
        this.url = job.url;
        this.tab = null;
        this.ratio = 1;
        this.html = null;
      }

      // text_only: true will insert captures with just html

      _createClass(CaptureService, [{
        key: 'captureAndDisplayUpdate',
        value: function captureAndDisplayUpdate(args) {
          var self = this;

          var textOnly = args.text_only === true;
          if (textOnly) {
            self.captureHTMLviaAjax(self.url, function(html) {
              self.html = html;
              self.saveCapture(null);
              self.openUpdate();
            });
            return;
          }

          var width = this.job.crop_orig_width;
          var height = this.job.crop_orig_height;
          self.openTab(width, height, function(tab) {
            self.tab = tab;
            var tabID = tab.id;
            self.displayRecordingMessage(tabID);
            self.getRatio(tabID);
            self.executeRegisterTrigger(tabID, function() {
              self.hideRecordingMessage(tabID, function() {
                self.captureHTMLviaScript(tabID, function() {
                  self.captureTab(tabID, function(imgData) {
                    self.saveCapture(imgData);
                    self.redirectToUpdate();
                    // closeTab(tabID);
                  });
                });
              });
            });
            var scrollTop = self.job.crop_scroll_top;
            self.setScroll(tabID, scrollTop, function() {
              self.executeCaptureTrigger(tabID);
            });
          });
        }
      }, {
        key: 'openTab',
        value: function openTab(width, height, callback) {
          var options = {
            url: this.job.url,
            focused: false
          };

          chrome.windows.create(options, function(win) {
            chrome.windows.update(win.id, {
              width: width,
              height: height
            });

            var tab = win.tabs[0];
            callback(tab);
          });
        }
      }, {
        key: 'captureTab',
        value: function captureTab(tabID, callback) {
          var _this = this;

          var CAPTURE_TIMOUT = 500;
          var self = this;
          var windowID = self.tab.windowId;

          var options = { 'quality': 100, 'format': 'png' };

          chrome.tabs.captureVisibleTab(windowID, options, function(result) {
            // We'll just scale if retina instead of cropping to selection
            var params = {
              options: {
                rect: {
                  x: 0, // self.job.crop_x,
                  y: 0, // self.job.crop_y,
                  width: self.job.crop_orig_width, // self.job.crop_width,
                  height: self.job.crop_orig_height // self.job.crop_height
                }
              }
            };

            var canvas = ScreenshotService.crop(result, params, _this.ratio);

            setTimeout(function() {
              if (!ScreenshotService.isCanvasEmpty(canvas)) {
                var data = canvas.toDataURL('image/png');
                callback(data);
              }
            }, CAPTURE_TIMOUT);
          });
        }
      }, {
        key: 'closeTab',
        value: function closeTab(tabID) {
          var CLOSE_TIMEOUT = 100;
          setTimeout(chrome.windows.remove.bind(this, tabID), CLOSE_TIMEOUT);
        }

        // Get ratio from window for use in crop
        // We can't determine from Background Page what the correct ratio is because
        // it stays as whatever first opened in.
      }, {
        key: 'getRatio',
        value: function getRatio(tabID) {
          var self = this;
          chrome.tabs.executeScript(tabID, {
            code: 'window.devicePixelRatio'
          }, function(response) {
            self.ratio = response[0] ? response[0] : 1;
          });
        }

        // Set scrollTop to get a consistent snapshot
      }, {
        key: 'setScroll',
        value: function setScroll(tabID, scrollTop, callback) {
          var self = this;
          chrome.tabs.executeScript(tabID, {
            code: 'window.scrollTo(0, ' + scrollTop + ')'
          }, function(response) {
            if (chrome.runtime.lastError) {
              console.log(chrome.runtime.lastError.message);
            }
            callback();
          });
        }

        // Set Listener to capture AFTER window loaded
      }, {
        key: 'executeRegisterTrigger',
        value: function executeRegisterTrigger(tabID, callback) {
          var self = this;
          var TRIGGER_TIMEOUT = 1400;
          chrome.extension.onRequest.addListener(function(request, sender, sendResponse) {
            if (sender.tab.id === tabID) {
              setTimeout(callback, TRIGGER_TIMEOUT);
            }
          });
        }

        // inject a script onto the page to trigger listener to capture when page has loaded
      }, {
        key: 'executeCaptureTrigger',
        value: function executeCaptureTrigger(tabID) {
          chrome.tabs.executeScript(tabID, {
            code: "chrome.extension.sendRequest({content: document.body.innerHTML}, function(response) { console.log('success'); });"
          }, function(response) {
            if (chrome.runtime.lastError) {
              console.log(chrome.runtime.lastError.message);
            }
          });
        }
      }, {
        key: 'displayRecordingMessage',
        value: function displayRecordingMessage(tabID) {
          chrome.tabs.executeScript(tabID, { file: 'js/jquery-original.js' }, function() {
            chrome.tabs.executeScript(tabID, { file: 'js/recording.js' }, function() {
              chrome.tabs.executeScript(tabID, { code: '$(initializeRecordingMessage());' }, function(result) {
                // No callback to run
              });
            });
          });
        }
      }, {
        key: 'hideRecordingMessage',
        value: function hideRecordingMessage(tabID, callback) {
          chrome.tabs.executeScript(tabID, { code: '$(hideRecordingMessage());' }, function(result) {
            // Allow time for message to clear before screenshot
            setTimeout(callback, 200);
          });
        }
      }, {
        key: 'captureHTMLviaScript',
        value: function captureHTMLviaScript(tabID, callback) {
          var self = this;
          chrome.tabs.executeScript(tabID, {
            code: 'document.documentElement.innerHTML;'
          }, function(response) {
            // Set HTML to be used in capture
            self.html = response[0];
            callback();
            if (chrome.runtime.lastError) {
              console.log(chrome.runtime.lastError.message);
            }
          });
        }
      }, {
        key: 'captureHTMLviaAjax',
        value: function captureHTMLviaAjax(url, callback) {
          _jquery2['default'].ajax({
            url: url,
            dataType: 'text',
            success: function success(html, _, xhr) {
              callback(html);
            }
          });
        }

        // Insert capture
      }, {
        key: 'saveCapture',
        value: function saveCapture(imgData) {
          var self = this;
          visualJobService.insertCapture({
            id: self.job.job_id,
            cropped_img: imgData,
            html: self.html
          }, function(timestamp) {
            // Update timestamp
            self.update.last_capture_created_at = self.update.current_capture_created_at;
            self.update.current_capture_created_at = timestamp;
          });
        }
      }, {
        key: 'redirectToUpdate',
        value: function redirectToUpdate() {
          var self = this;
          var tabID = self.tab.id;
          var url = chrome.extension.getURL(self.diffURL(self.update));
          chrome.tabs.update(tabID, { url: url });
        }
      }, {
        key: 'openUpdate',
        value: function openUpdate() {
          var self = this;
          var url = chrome.extension.getURL(self.diffURL(self.update));
          var options = {
            url: url
          };
          // chrome.tabs.query({active: true}, (tabs)=> {
          //   let windowId = tabs[0].windowId;
          //   console.log({...options, ...{windowId: windowId}});
          chrome.tabs.create(options, function(win) {});
          // });
        }

        // Pack update as query string data so we can hydrate it on the Diff page
      }, {
        key: 'diffURL',
        value: function diffURL(update) {
          var url = 'diff.html';
          var data = _extends({}, update);
          // Remove screenshots since they can get too large
          delete data.currentScreenshot;
          delete data.lastScreenshot;

          var updateData = JSON.stringify(data);
          url += '?update=' + _jsBase64.Base64.encodeURI(updateData);
          return url;
        }
      }]);

      return CaptureService;
    })();

    exports['default'] = CaptureService;
    module.exports = exports['default'];

    /***/
  }),
  /* 202 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.takeScreenshotReal = takeScreenshotReal;
    exports.crop = crop;
    exports.setScreenshotUrl = setScreenshotUrl;
    exports.isCanvasEmpty = isCanvasEmpty;
    exports.arraysEqual = arraysEqual;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _jquery = __webpack_require__(203);

    var _jquery2 = _interopRequireDefault(_jquery);

    function takeScreenshotReal(callback) {
      var self = this;

      // To make sure we can uniquely identify each screenshot tab, add an id as a
      // query param to the url that displays the screenshot.
      // let id = Date.now();
      var options = { 'quality': 100, 'format': 'png' };
      var url = undefined;
      var w = undefined;

      chrome.tabs.captureVisibleTab(null, options, callback);
    }

    function crop(data, params) {
      var ratio = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

      var rect = params.options.rect;
      // let width = rect.width;
      // let height = rect.height;
      var top = 0;
      var left = 0;

      // write image data into canvas
      var canvas = document.createElement('canvas');
      var context = canvas.getContext('2d');
      context.scale(1 / ratio, 1 / ratio);

      // Handle retina screens
      // http://www.html5rocks.com/en/tutorials/canvas/hidpi/

      // We can't actually do this here because this runs in background page,
      // so the value stays the same when switching across monitors.
      // Passing in the ratio is safer since we can ask the capture window what
      // pixel density it has. Keeping code for reference.

      // let devicePixelRatio = window.devicePixelRatio || 1;
      // let backingStoreRatio = context.webkitBackingStorePixelRatio ||
      //                         context.mozBackingStorePixelRatio ||
      //                         context.msBackingStorePixelRatio ||
      //                         context.oBackingStorePixelRatio ||
      //                         context.backingStorePixelRatio || 1;

      // let ratio = devicePixelRatio / backingStoreRatio;

      var img = new Image();
      img.onload = function() {
        canvas.width = rect.width;
        canvas.height = rect.height;

        var sourceX = rect.x * ratio;
        var sourceY = rect.y * ratio;
        var sourceWidth = rect.width * ratio;
        var sourceHeight = rect.height * ratio;

        var destX = 0;
        var destY = 0;
        var destWidth = rect.width;
        var destHeight = rect.height;

        context.drawImage(img, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
      };
      img.src = data;
      return canvas;
    }

    function setScreenshotUrl(url, title) {
      document.getElementById('target').src = url;
      chrome.tabs.getSelected(function(tab) {
        // null defaults to current window
        var tabTitle = tab.title;
        (0, _jquery2['default'])('.title').text(tabTitle);
      });
    }

    // true if all pixels are the same

    function isCanvasEmpty(canvas) {
      var ctx = canvas.getContext("2d");
      var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      var firstPixel = [imageData.data[0], imageData.data[1], imageData.data[2], imageData.data[3]];
      for (var i = 0; i < imageData.data.length; i += 4) {
        var color = [imageData.data[i], imageData.data[i + 1], imageData.data[i + 2], imageData.data[i + 3]];
        if (!arraysEqual(color, firstPixel)) {
          return false;
        };
      }
      return true;
    }

    function arraysEqual(a, b) {
      if (a === b) return true;
      if (a == null || b == null) return false;
      if (a.length != b.length) return false;

      // If you don't care about the order of the elements inside
      // the array, you should sort both arrays here.

      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    /***/
  }),
  /* 203 */
  /***/
  (function(module, exports, __webpack_require__) {

    var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
    /*!
     * jQuery JavaScript Library v2.2.4
     * http://jquery.com/
     *
     * Includes Sizzle.js
     * http://sizzlejs.com/
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2016-05-20T17:23Z
     */

    (function(global, factory) {

      if (typeof module === "object" && typeof module.exports === "object") {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ?
          factory(global, true) :
          function(w) {
            if (!w.document) {
              throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
          };
      } else {
        factory(global);
      }

      // Pass this if window is not defined yet
    }(typeof window !== "undefined" ? window : this, function(window, noGlobal) {

      // Support: Firefox 18+
      // Can't be in strict mode, several libs including ASP.NET trace
      // the stack via arguments.caller.callee and Firefox dies if
      // you try to trace through "use strict" call chains. (#13335)
      //"use strict";
      var arr = [];

      var document = window.document;

      var slice = arr.slice;

      var concat = arr.concat;

      var push = arr.push;

      var indexOf = arr.indexOf;

      var class2type = {};

      var toString = class2type.toString;

      var hasOwn = class2type.hasOwnProperty;

      var support = {};

      var
        version = "2.2.4",

        // Define a local copy of jQuery
        jQuery = function(selector, context) {

          // The jQuery object is actually just the init constructor 'enhanced'
          // Need init if jQuery is called (just allow error to be thrown if not included)
          return new jQuery.fn.init(selector, context);
        },

        // Support: Android<4.1
        // Make sure we trim BOM and NBSP
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

        // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,

        // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function(all, letter) {
          return letter.toUpperCase();
        };

      jQuery.fn = jQuery.prototype = {

        // The current version of jQuery being used
        jquery: version,

        constructor: jQuery,

        // Start with an empty selector
        selector: "",

        // The default length of a jQuery object is 0
        length: 0,

        toArray: function() {
          return slice.call(this);
        },

        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function(num) {
          return num != null ?

            // Return just the one element from the set
            (num < 0 ? this[num + this.length] : this[num]) :

            // Return all the elements in a clean array
            slice.call(this);
        },

        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function(elems) {

          // Build a new jQuery matched element set
          var ret = jQuery.merge(this.constructor(), elems);

          // Add the old object onto the stack (as a reference)
          ret.prevObject = this;
          ret.context = this.context;

          // Return the newly-formed element set
          return ret;
        },

        // Execute a callback for every element in the matched set.
        each: function(callback) {
          return jQuery.each(this, callback);
        },

        map: function(callback) {
          return this.pushStack(jQuery.map(this, function(elem, i) {
            return callback.call(elem, i, elem);
          }));
        },

        slice: function() {
          return this.pushStack(slice.apply(this, arguments));
        },

        first: function() {
          return this.eq(0);
        },

        last: function() {
          return this.eq(-1);
        },

        eq: function(i) {
          var len = this.length,
            j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },

        end: function() {
          return this.prevObject || this.constructor();
        },

        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
      };

      jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone,
          target = arguments[0] || {},
          i = 1,
          length = arguments.length,
          deep = false;

        // Handle a deep copy situation
        if (typeof target === "boolean") {
          deep = target;

          // Skip the boolean and the target
          target = arguments[i] || {};
          i++;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
          target = {};
        }

        // Extend jQuery itself if only one argument is passed
        if (i === length) {
          target = this;
          i--;
        }

        for (; i < length; i++) {

          // Only deal with non-null/undefined values
          if ((options = arguments[i]) != null) {

            // Extend the base object
            for (name in options) {
              src = target[name];
              copy = options[name];

              // Prevent never-ending loop
              if (target === copy) {
                continue;
              }

              // Recurse if we're merging plain objects or arrays
              if (deep && copy && (jQuery.isPlainObject(copy) ||
                  (copyIsArray = jQuery.isArray(copy)))) {

                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && jQuery.isArray(src) ? src : [];

                } else {
                  clone = src && jQuery.isPlainObject(src) ? src : {};
                }

                // Never move original objects, clone them
                target[name] = jQuery.extend(deep, clone, copy);

                // Don't bring in undefined values
              } else if (copy !== undefined) {
                target[name] = copy;
              }
            }
          }
        }

        // Return the modified object
        return target;
      };

      jQuery.extend({

        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

        // Assume jQuery is ready without the ready module
        isReady: true,

        error: function(msg) {
          throw new Error(msg);
        },

        noop: function() {},

        isFunction: function(obj) {
          return jQuery.type(obj) === "function";
        },

        isArray: Array.isArray,

        isWindow: function(obj) {
          return obj != null && obj === obj.window;
        },

        isNumeric: function(obj) {

          // parseFloat NaNs numeric-cast false positives (null|true|false|"")
          // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
          // subtraction forces infinities to NaN
          // adding 1 corrects loss of precision from parseFloat (#15100)
          var realStringObj = obj && obj.toString();
          return !jQuery.isArray(obj) && (realStringObj - parseFloat(realStringObj) + 1) >= 0;
        },

        isPlainObject: function(obj) {
          var key;

          // Not plain objects:
          // - Any object or value whose internal [[Class]] property is not "[object Object]"
          // - DOM nodes
          // - window
          if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
            return false;
          }

          // Not own constructor property must be Object
          if (obj.constructor &&
            !hasOwn.call(obj, "constructor") &&
            !hasOwn.call(obj.constructor.prototype || {}, "isPrototypeOf")) {
            return false;
          }

          // Own properties are enumerated firstly, so to speed up,
          // if last one is own, then all properties are own
          for (key in obj) {}

          return key === undefined || hasOwn.call(obj, key);
        },

        isEmptyObject: function(obj) {
          var name;
          for (name in obj) {
            return false;
          }
          return true;
        },

        type: function(obj) {
          if (obj == null) {
            return obj + "";
          }

          // Support: Android<4.0, iOS<6 (functionish RegExp)
          return typeof obj === "object" || typeof obj === "function" ?
            class2type[toString.call(obj)] || "object" :
            typeof obj;
        },

        // Evaluates a script in a global context
        globalEval: function(code) {
          var script,
            indirect = eval;

          code = jQuery.trim(code);

          if (code) {

            // If the code includes a valid, prologue position
            // strict mode pragma, execute code by injecting a
            // script tag into the document.
            if (code.indexOf("use strict") === 1) {
              script = document.createElement("script");
              script.text = code;
              document.head.appendChild(script).parentNode.removeChild(script);
            } else {

              // Otherwise, avoid the DOM node creation, insertion
              // and removal by using an indirect global eval

              indirect(code);
            }
          }
        },

        // Convert dashed to camelCase; used by the css and data modules
        // Support: IE9-11+
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function(string) {
          return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },

        nodeName: function(elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },

        each: function(obj, callback) {
          var length, i = 0;

          if (isArrayLike(obj)) {
            length = obj.length;
            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          }

          return obj;
        },

        // Support: Android<4.1
        trim: function(text) {
          return text == null ?
            "" :
            (text + "").replace(rtrim, "");
        },

        // results is for internal usage only
        makeArray: function(arr, results) {
          var ret = results || [];

          if (arr != null) {
            if (isArrayLike(Object(arr))) {
              jQuery.merge(ret,
                typeof arr === "string" ? [arr] : arr
              );
            } else {
              push.call(ret, arr);
            }
          }

          return ret;
        },

        inArray: function(elem, arr, i) {
          return arr == null ? -1 : indexOf.call(arr, elem, i);
        },

        merge: function(first, second) {
          var len = +second.length,
            j = 0,
            i = first.length;

          for (; j < len; j++) {
            first[i++] = second[j];
          }

          first.length = i;

          return first;
        },

        grep: function(elems, callback, invert) {
          var callbackInverse,
            matches = [],
            i = 0,
            length = elems.length,
            callbackExpect = !invert;

          // Go through the array, only saving the items
          // that pass the validator function
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i]);
            }
          }

          return matches;
        },

        // arg is for internal usage only
        map: function(elems, callback, arg) {
          var length, value,
            i = 0,
            ret = [];

          // Go through the array, translating each of the items to their new values
          if (isArrayLike(elems)) {
            length = elems.length;
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);

              if (value != null) {
                ret.push(value);
              }
            }

            // Go through every key on the object,
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);

              if (value != null) {
                ret.push(value);
              }
            }
          }

          // Flatten any nested arrays
          return concat.apply([], ret);
        },

        // A global GUID counter for objects
        guid: 1,

        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function(fn, context) {
          var tmp, args, proxy;

          if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
          }

          // Quick check to determine if target is callable, in the spec
          // this throws a TypeError, but we will just return undefined.
          if (!jQuery.isFunction(fn)) {
            return undefined;
          }

          // Simulated bind
          args = slice.call(arguments, 2);
          proxy = function() {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
          };

          // Set the guid of unique handler to the same of original handler, so it can be removed
          proxy.guid = fn.guid = fn.guid || jQuery.guid++;

          return proxy;
        },

        now: Date.now,

        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
      });

      // JSHint would error on this code due to the Symbol not being defined in ES5.
      // Defining this global in .jshintrc would create a danger of using the global
      // unguarded in another place, it seems safer to just disable JSHint for these
      // three lines.
      /* jshint ignore: start */
      if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
      }
      /* jshint ignore: end */

      // Populate the class2type map
      jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
        function(i, name) {
          class2type["[object " + name + "]"] = name.toLowerCase();
        });

      function isArrayLike(obj) {

        // Support: iOS 8.2 (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length,
          type = jQuery.type(obj);

        if (type === "function" || jQuery.isWindow(obj)) {
          return false;
        }

        return type === "array" || length === 0 ||
          typeof length === "number" && length > 0 && (length - 1) in obj;
      }
      var Sizzle =
        /*!
         * Sizzle CSS Selector Engine v2.2.1
         * http://sizzlejs.com/
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license
         * http://jquery.org/license
         *
         * Date: 2015-10-17
         */
        (function(window) {

          var i,
            support,
            Expr,
            getText,
            isXML,
            tokenize,
            compile,
            select,
            outermostContext,
            sortInput,
            hasDuplicate,

            // Local document vars
            setDocument,
            document,
            docElem,
            documentIsHTML,
            rbuggyQSA,
            rbuggyMatches,
            matches,
            contains,

            // Instance-specific data
            expando = "sizzle" + 1 * new Date(),
            preferredDoc = window.document,
            dirruns = 0,
            done = 0,
            classCache = createCache(),
            tokenCache = createCache(),
            compilerCache = createCache(),
            sortOrder = function(a, b) {
              if (a === b) {
                hasDuplicate = true;
              }
              return 0;
            },

            // General-purpose constants
            MAX_NEGATIVE = 1 << 31,

            // Instance methods
            hasOwn = ({}).hasOwnProperty,
            arr = [],
            pop = arr.pop,
            push_native = arr.push,
            push = arr.push,
            slice = arr.slice,
            // Use a stripped-down indexOf as it's faster than native
            // http://jsperf.com/thor-indexof-vs-for/5
            indexOf = function(list, elem) {
              var i = 0,
                len = list.length;
              for (; i < len; i++) {
                if (list[i] === elem) {
                  return i;
                }
              }
              return -1;
            },

            booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

            // Regular expressions

            // http://www.w3.org/TR/css3-selectors/#whitespace
            whitespace = "[\\x20\\t\\r\\n\\f]",

            // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
            identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

            // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
            attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
            // Operator (capture 2)
            "*([*^$|!~]?=)" + whitespace +
            // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
            "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
            "*\\]",

            pseudos = ":(" + identifier + ")(?:\\((" +
            // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
            // 1. quoted (capture 3; capture 4 or capture 5)
            "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
            // 2. simple (capture 6)
            "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
            // 3. anything else (capture 2)
            ".*" +
            ")\\)|)",

            // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
            rwhitespace = new RegExp(whitespace + "+", "g"),
            rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

            rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
            rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),

            rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),

            rpseudo = new RegExp(pseudos),
            ridentifier = new RegExp("^" + identifier + "$"),

            matchExpr = {
              "ID": new RegExp("^#(" + identifier + ")"),
              "CLASS": new RegExp("^\\.(" + identifier + ")"),
              "TAG": new RegExp("^(" + identifier + "|[*])"),
              "ATTR": new RegExp("^" + attributes),
              "PSEUDO": new RegExp("^" + pseudos),
              "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
              "bool": new RegExp("^(?:" + booleans + ")$", "i"),
              // For use in libraries implementing .is()
              // We use this for POS matching in `select`
              "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
            },

            rinputs = /^(?:input|select|textarea|button)$/i,
            rheader = /^h\d$/i,

            rnative = /^[^{]+\{\s*\[native \w/,

            // Easily-parseable/retrievable ID or TAG or CLASS selectors
            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

            rsibling = /[+~]/,
            rescape = /'|\\/g,

            // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
            runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
            funescape = function(_, escaped, escapedWhitespace) {
              var high = "0x" + escaped - 0x10000;
              // NaN means non-codepoint
              // Support: Firefox<24
              // Workaround erroneous numeric interpretation of +"0x"
              return high !== high || escapedWhitespace ?
                escaped :
                high < 0 ?
                // BMP codepoint
                String.fromCharCode(high + 0x10000) :
                // Supplemental Plane codepoint (surrogate pair)
                String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
            },

            // Used for iframes
            // See setDocument()
            // Removing the function wrapper causes a "Permission Denied"
            // error in IE
            unloadHandler = function() {
              setDocument();
            };

          // Optimize for push.apply( _, NodeList )
          try {
            push.apply(
              (arr = slice.call(preferredDoc.childNodes)),
              preferredDoc.childNodes
            );
            // Support: Android<4.0
            // Detect silently failing push.apply
            arr[preferredDoc.childNodes.length].nodeType;
          } catch (e) {
            push = {
              apply: arr.length ?

                // Leverage slice if possible
                function(target, els) {
                  push_native.apply(target, slice.call(els));
                } :

                // Support: IE<9
                // Otherwise append directly
                function(target, els) {
                  var j = target.length,
                    i = 0;
                  // Can't trust NodeList.length
                  while ((target[j++] = els[i++])) {}
                  target.length = j - 1;
                }
            };
          }

          function Sizzle(selector, context, results, seed) {
            var m, i, elem, nid, nidselect, match, groups, newSelector,
              newContext = context && context.ownerDocument,

              // nodeType defaults to 9, since context defaults to document
              nodeType = context ? context.nodeType : 9;

            results = results || [];

            // Return early from calls with invalid selector or context
            if (typeof selector !== "string" || !selector ||
              nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

              return results;
            }

            // Try to shortcut find operations (as opposed to filters) in HTML documents
            if (!seed) {

              if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
              }
              context = context || document;

              if (documentIsHTML) {

                // If the selector is sufficiently simple, try using a "get*By*" DOM method
                // (excepting DocumentFragment context, where the methods don't exist)
                if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

                  // ID selector
                  if ((m = match[1])) {

                    // Document context
                    if (nodeType === 9) {
                      if ((elem = context.getElementById(m))) {

                        // Support: IE, Opera, Webkit
                        // TODO: identify versions
                        // getElementById can match elements by name instead of ID
                        if (elem.id === m) {
                          results.push(elem);
                          return results;
                        }
                      } else {
                        return results;
                      }

                      // Element context
                    } else {

                      // Support: IE, Opera, Webkit
                      // TODO: identify versions
                      // getElementById can match elements by name instead of ID
                      if (newContext && (elem = newContext.getElementById(m)) &&
                        contains(context, elem) &&
                        elem.id === m) {

                        results.push(elem);
                        return results;
                      }
                    }

                    // Type selector
                  } else if (match[2]) {
                    push.apply(results, context.getElementsByTagName(selector));
                    return results;

                    // Class selector
                  } else if ((m = match[3]) && support.getElementsByClassName &&
                    context.getElementsByClassName) {

                    push.apply(results, context.getElementsByClassName(m));
                    return results;
                  }
                }

                // Take advantage of querySelectorAll
                if (support.qsa &&
                  !compilerCache[selector + " "] &&
                  (!rbuggyQSA || !rbuggyQSA.test(selector))) {

                  if (nodeType !== 1) {
                    newContext = context;
                    newSelector = selector;

                    // qSA looks outside Element context, which is not what we want
                    // Thanks to Andrew Dupont for this workaround technique
                    // Support: IE <=8
                    // Exclude object elements
                  } else if (context.nodeName.toLowerCase() !== "object") {

                    // Capture the context ID, setting it first if necessary
                    if ((nid = context.getAttribute("id"))) {
                      nid = nid.replace(rescape, "\\$&");
                    } else {
                      context.setAttribute("id", (nid = expando));
                    }

                    // Prefix every selector in the list
                    groups = tokenize(selector);
                    i = groups.length;
                    nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";
                    while (i--) {
                      groups[i] = nidselect + " " + toSelector(groups[i]);
                    }
                    newSelector = groups.join(",");

                    // Expand context for sibling selectors
                    newContext = rsibling.test(selector) && testContext(context.parentNode) ||
                      context;
                  }

                  if (newSelector) {
                    try {
                      push.apply(results,
                        newContext.querySelectorAll(newSelector)
                      );
                      return results;
                    } catch (qsaError) {} finally {
                      if (nid === expando) {
                        context.removeAttribute("id");
                      }
                    }
                  }
                }
              }
            }

            // All others
            return select(selector.replace(rtrim, "$1"), context, results, seed);
          }

          /**
           * Create key-value caches of limited size
           * @returns {function(string, object)} Returns the Object data after storing it on itself with
           *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
           *	deleting the oldest entry
           */
          function createCache() {
            var keys = [];

            function cache(key, value) {
              // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
              if (keys.push(key + " ") > Expr.cacheLength) {
                // Only keep the most recent entries
                delete cache[keys.shift()];
              }
              return (cache[key + " "] = value);
            }
            return cache;
          }

          /**
           * Mark a function for special use by Sizzle
           * @param {Function} fn The function to mark
           */
          function markFunction(fn) {
            fn[expando] = true;
            return fn;
          }

          /**
           * Support testing using an element
           * @param {Function} fn Passed the created div and expects a boolean result
           */
          function assert(fn) {
            var div = document.createElement("div");

            try {
              return !!fn(div);
            } catch (e) {
              return false;
            } finally {
              // Remove from its parent by default
              if (div.parentNode) {
                div.parentNode.removeChild(div);
              }
              // release memory in IE
              div = null;
            }
          }

          /**
           * Adds the same handler for all of the specified attrs
           * @param {String} attrs Pipe-separated list of attributes
           * @param {Function} handler The method that will be applied
           */
          function addHandle(attrs, handler) {
            var arr = attrs.split("|"),
              i = arr.length;

            while (i--) {
              Expr.attrHandle[arr[i]] = handler;
            }
          }

          /**
           * Checks document order of two siblings
           * @param {Element} a
           * @param {Element} b
           * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
           */
          function siblingCheck(a, b) {
            var cur = b && a,
              diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
              (~b.sourceIndex || MAX_NEGATIVE) -
              (~a.sourceIndex || MAX_NEGATIVE);

            // Use IE sourceIndex if available on both nodes
            if (diff) {
              return diff;
            }

            // Check if b follows a
            if (cur) {
              while ((cur = cur.nextSibling)) {
                if (cur === b) {
                  return -1;
                }
              }
            }

            return a ? 1 : -1;
          }

          /**
           * Returns a function to use in pseudos for input types
           * @param {String} type
           */
          function createInputPseudo(type) {
            return function(elem) {
              var name = elem.nodeName.toLowerCase();
              return name === "input" && elem.type === type;
            };
          }

          /**
           * Returns a function to use in pseudos for buttons
           * @param {String} type
           */
          function createButtonPseudo(type) {
            return function(elem) {
              var name = elem.nodeName.toLowerCase();
              return (name === "input" || name === "button") && elem.type === type;
            };
          }

          /**
           * Returns a function to use in pseudos for positionals
           * @param {Function} fn
           */
          function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
              argument = +argument;
              return markFunction(function(seed, matches) {
                var j,
                  matchIndexes = fn([], seed.length, argument),
                  i = matchIndexes.length;

                // Match elements found at the specified indexes
                while (i--) {
                  if (seed[(j = matchIndexes[i])]) {
                    seed[j] = !(matches[j] = seed[j]);
                  }
                }
              });
            });
          }

          /**
           * Checks a node for validity as a Sizzle context
           * @param {Element|Object=} context
           * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
           */
          function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
          }

          // Expose support vars for convenience
          support = Sizzle.support = {};

          /**
           * Detects XML nodes
           * @param {Element|Object} elem An element or a document
           * @returns {Boolean} True iff elem is a non-HTML XML node
           */
          isXML = Sizzle.isXML = function(elem) {
            // documentElement is verified for cases where it doesn't yet exist
            // (such as loading iframes in IE - #4833)
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
          };

          /**
           * Sets document-related variables once based on the current document
           * @param {Element|Object} [doc] An element or document object to use to set the document
           * @returns {Object} Returns the current document
           */
          setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, parent,
              doc = node ? node.ownerDocument || node : preferredDoc;

            // Return early if doc is invalid or already selected
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
              return document;
            }

            // Update global variables
            document = doc;
            docElem = document.documentElement;
            documentIsHTML = !isXML(document);

            // Support: IE 9-11, Edge
            // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
            if ((parent = document.defaultView) && parent.top !== parent) {
              // Support: IE 11
              if (parent.addEventListener) {
                parent.addEventListener("unload", unloadHandler, false);

                // Support: IE 9 - 10 only
              } else if (parent.attachEvent) {
                parent.attachEvent("onunload", unloadHandler);
              }
            }

            /* Attributes
            ---------------------------------------------------------------------- */

            // Support: IE<8
            // Verify that getAttribute really returns attributes and not properties
            // (excepting IE8 booleans)
            support.attributes = assert(function(div) {
              div.className = "i";
              return !div.getAttribute("className");
            });

            /* getElement(s)By*
            ---------------------------------------------------------------------- */

            // Check if getElementsByTagName("*") returns only elements
            support.getElementsByTagName = assert(function(div) {
              div.appendChild(document.createComment(""));
              return !div.getElementsByTagName("*").length;
            });

            // Support: IE<9
            support.getElementsByClassName = rnative.test(document.getElementsByClassName);

            // Support: IE<10
            // Check if getElementById returns elements by name
            // The broken getElementById methods don't pick up programatically-set names,
            // so use a roundabout getElementsByName test
            support.getById = assert(function(div) {
              docElem.appendChild(div).id = expando;
              return !document.getElementsByName || !document.getElementsByName(expando).length;
            });

            // ID find and filter
            if (support.getById) {
              Expr.find["ID"] = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var m = context.getElementById(id);
                  return m ? [m] : [];
                }
              };
              Expr.filter["ID"] = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  return elem.getAttribute("id") === attrId;
                };
              };
            } else {
              // Support: IE6/7
              // getElementById is not reliable as a find shortcut
              delete Expr.find["ID"];

              Expr.filter["ID"] = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  var node = typeof elem.getAttributeNode !== "undefined" &&
                    elem.getAttributeNode("id");
                  return node && node.value === attrId;
                };
              };
            }

            // Tag
            Expr.find["TAG"] = support.getElementsByTagName ?
              function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") {
                  return context.getElementsByTagName(tag);

                  // DocumentFragment nodes don't have gEBTN
                } else if (support.qsa) {
                  return context.querySelectorAll(tag);
                }
              } :

              function(tag, context) {
                var elem,
                  tmp = [],
                  i = 0,
                  // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                  results = context.getElementsByTagName(tag);

                // Filter out possible comments
                if (tag === "*") {
                  while ((elem = results[i++])) {
                    if (elem.nodeType === 1) {
                      tmp.push(elem);
                    }
                  }

                  return tmp;
                }
                return results;
              };

            // Class
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
              if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                return context.getElementsByClassName(className);
              }
            };

            /* QSA/matchesSelector
            ---------------------------------------------------------------------- */

            // QSA and matchesSelector support

            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
            rbuggyMatches = [];

            // qSa(:focus) reports false when true (Chrome 21)
            // We allow this because of a bug in IE8/9 that throws an error
            // whenever `document.activeElement` is accessed on an iframe
            // So, we allow :focus to pass through QSA all the time to avoid the IE error
            // See http://bugs.jquery.com/ticket/13378
            rbuggyQSA = [];

            if ((support.qsa = rnative.test(document.querySelectorAll))) {
              // Build QSA regex
              // Regex strategy adopted from Diego Perini
              assert(function(div) {
                // Select is set to empty string on purpose
                // This is to test IE's treatment of not explicitly
                // setting a boolean content attribute,
                // since its presence should be enough
                // http://bugs.jquery.com/ticket/12359
                docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" +
                  "<select id='" + expando + "-\r\\' msallowcapture=''>" +
                  "<option selected=''></option></select>";

                // Support: IE8, Opera 11-12.16
                // Nothing should be selected when empty strings follow ^= or $= or *=
                // The test attribute must be unknown in Opera but "safe" for WinRT
                // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                if (div.querySelectorAll("[msallowcapture^='']").length) {
                  rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                }

                // Support: IE8
                // Boolean attributes and "value" are not treated correctly
                if (!div.querySelectorAll("[selected]").length) {
                  rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                }

                // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
                  rbuggyQSA.push("~=");
                }

                // Webkit/Opera - :checked should return selected option elements
                // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                // IE8 throws error here and will not see later tests
                if (!div.querySelectorAll(":checked").length) {
                  rbuggyQSA.push(":checked");
                }

                // Support: Safari 8+, iOS 8+
                // https://bugs.webkit.org/show_bug.cgi?id=136851
                // In-page `selector#id sibing-combinator selector` fails
                if (!div.querySelectorAll("a#" + expando + "+*").length) {
                  rbuggyQSA.push(".#.+[+~]");
                }
              });

              assert(function(div) {
                // Support: Windows 8 Native Apps
                // The type and name attributes are restricted during .innerHTML assignment
                var input = document.createElement("input");
                input.setAttribute("type", "hidden");
                div.appendChild(input).setAttribute("name", "D");

                // Support: IE8
                // Enforce case-sensitivity of name attribute
                if (div.querySelectorAll("[name=d]").length) {
                  rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                }

                // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                // IE8 throws error here and will not see later tests
                if (!div.querySelectorAll(":enabled").length) {
                  rbuggyQSA.push(":enabled", ":disabled");
                }

                // Opera 10-11 does not throw on post-comma invalid pseudos
                div.querySelectorAll("*,:x");
                rbuggyQSA.push(",.*:");
              });
            }

            if ((support.matchesSelector = rnative.test((matches = docElem.matches ||
                docElem.webkitMatchesSelector ||
                docElem.mozMatchesSelector ||
                docElem.oMatchesSelector ||
                docElem.msMatchesSelector)))) {

              assert(function(div) {
                // Check to see if it's possible to do matchesSelector
                // on a disconnected node (IE 9)
                support.disconnectedMatch = matches.call(div, "div");

                // This should fail with an exception
                // Gecko does not error, returns false instead
                matches.call(div, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
              });
            }

            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

            /* Contains
            ---------------------------------------------------------------------- */
            hasCompare = rnative.test(docElem.compareDocumentPosition);

            // Element contains another
            // Purposefully self-exclusive
            // As in, an element does not contain itself
            contains = hasCompare || rnative.test(docElem.contains) ?
              function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a,
                  bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (
                  adown.contains ?
                  adown.contains(bup) :
                  a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
                ));
              } :
              function(a, b) {
                if (b) {
                  while ((b = b.parentNode)) {
                    if (b === a) {
                      return true;
                    }
                  }
                }
                return false;
              };

            /* Sorting
            ---------------------------------------------------------------------- */

            // Document order sorting
            sortOrder = hasCompare ?
              function(a, b) {

                // Flag for duplicate removal
                if (a === b) {
                  hasDuplicate = true;
                  return 0;
                }

                // Sort on method existence if only one input has compareDocumentPosition
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                  return compare;
                }

                // Calculate position if both inputs belong to the same document
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ?
                  a.compareDocumentPosition(b) :

                  // Otherwise we know they are disconnected
                  1;

                // Disconnected nodes
                if (compare & 1 ||
                  (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {

                  // Choose the first element that is related to our preferred document
                  if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                    return -1;
                  }
                  if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                    return 1;
                  }

                  // Maintain original order
                  return sortInput ?
                    (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                    0;
                }

                return compare & 4 ? -1 : 1;
              } :
              function(a, b) {
                // Exit early if the nodes are identical
                if (a === b) {
                  hasDuplicate = true;
                  return 0;
                }

                var cur,
                  i = 0,
                  aup = a.parentNode,
                  bup = b.parentNode,
                  ap = [a],
                  bp = [b];

                // Parentless nodes are either documents or disconnected
                if (!aup || !bup) {
                  return a === document ? -1 :
                    b === document ? 1 :
                    aup ? -1 :
                    bup ? 1 :
                    sortInput ?
                    (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                    0;

                  // If the nodes are siblings, we can do a quick check
                } else if (aup === bup) {
                  return siblingCheck(a, b);
                }

                // Otherwise we need full lists of their ancestors for comparison
                cur = a;
                while ((cur = cur.parentNode)) {
                  ap.unshift(cur);
                }
                cur = b;
                while ((cur = cur.parentNode)) {
                  bp.unshift(cur);
                }

                // Walk down the tree looking for a discrepancy
                while (ap[i] === bp[i]) {
                  i++;
                }

                return i ?
                  // Do a sibling check if the nodes have a common ancestor
                  siblingCheck(ap[i], bp[i]) :

                  // Otherwise nodes in our document sort first
                  ap[i] === preferredDoc ? -1 :
                  bp[i] === preferredDoc ? 1 :
                  0;
              };

            return document;
          };

          Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
          };

          Sizzle.matchesSelector = function(elem, expr) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
              setDocument(elem);
            }

            // Make sure that attribute selectors are quoted
            expr = expr.replace(rattributeQuotes, "='$1']");

            if (support.matchesSelector && documentIsHTML &&
              !compilerCache[expr + " "] &&
              (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
              (!rbuggyQSA || !rbuggyQSA.test(expr))) {

              try {
                var ret = matches.call(elem, expr);

                // IE 9's matchesSelector returns false on disconnected nodes
                if (ret || support.disconnectedMatch ||
                  // As well, disconnected nodes are said to be in a document
                  // fragment in IE 9
                  elem.document && elem.document.nodeType !== 11) {
                  return ret;
                }
              } catch (e) {}
            }

            return Sizzle(expr, document, null, [elem]).length > 0;
          };

          Sizzle.contains = function(context, elem) {
            // Set document vars if needed
            if ((context.ownerDocument || context) !== document) {
              setDocument(context);
            }
            return contains(context, elem);
          };

          Sizzle.attr = function(elem, name) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
              setDocument(elem);
            }

            var fn = Expr.attrHandle[name.toLowerCase()],
              // Don't get fooled by Object.prototype properties (jQuery #13807)
              val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ?
              fn(elem, name, !documentIsHTML) :
              undefined;

            return val !== undefined ?
              val :
              support.attributes || !documentIsHTML ?
              elem.getAttribute(name) :
              (val = elem.getAttributeNode(name)) && val.specified ?
              val.value :
              null;
          };

          Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
          };

          /**
           * Document sorting and removing duplicates
           * @param {ArrayLike} results
           */
          Sizzle.uniqueSort = function(results) {
            var elem,
              duplicates = [],
              j = 0,
              i = 0;

            // Unless we *know* we can detect duplicates, assume their presence
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);

            if (hasDuplicate) {
              while ((elem = results[i++])) {
                if (elem === results[i]) {
                  j = duplicates.push(i);
                }
              }
              while (j--) {
                results.splice(duplicates[j], 1);
              }
            }

            // Clear input after sorting to release objects
            // See https://github.com/jquery/sizzle/pull/225
            sortInput = null;

            return results;
          };

          /**
           * Utility function for retrieving the text value of an array of DOM nodes
           * @param {Array|Element} elem
           */
          getText = Sizzle.getText = function(elem) {
            var node,
              ret = "",
              i = 0,
              nodeType = elem.nodeType;

            if (!nodeType) {
              // If no nodeType, this is expected to be an array
              while ((node = elem[i++])) {
                // Do not traverse comment nodes
                ret += getText(node);
              }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
              // Use textContent for elements
              // innerText usage removed for consistency of new lines (jQuery #11153)
              if (typeof elem.textContent === "string") {
                return elem.textContent;
              } else {
                // Traverse its children
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  ret += getText(elem);
                }
              }
            } else if (nodeType === 3 || nodeType === 4) {
              return elem.nodeValue;
            }
            // Do not include comment or processing instruction nodes

            return ret;
          };

          Expr = Sizzle.selectors = {

            // Can be adjusted by the user
            cacheLength: 50,

            createPseudo: markFunction,

            match: matchExpr,

            attrHandle: {},

            find: {},

            relative: {
              ">": { dir: "parentNode", first: true },
              " ": { dir: "parentNode" },
              "+": { dir: "previousSibling", first: true },
              "~": { dir: "previousSibling" }
            },

            preFilter: {
              "ATTR": function(match) {
                match[1] = match[1].replace(runescape, funescape);

                // Move the given value to match[3] whether quoted or unquoted
                match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

                if (match[2] === "~=") {
                  match[3] = " " + match[3] + " ";
                }

                return match.slice(0, 4);
              },

              "CHILD": function(match) {
                /* matches from matchExpr["CHILD"]
                	1 type (only|nth|...)
                	2 what (child|of-type)
                	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                	4 xn-component of xn+y argument ([+-]?\d*n|)
                	5 sign of xn-component
                	6 x of xn-component
                	7 sign of y-component
                	8 y of y-component
                */
                match[1] = match[1].toLowerCase();

                if (match[1].slice(0, 3) === "nth") {
                  // nth-* requires argument
                  if (!match[3]) {
                    Sizzle.error(match[0]);
                  }

                  // numeric x and y parameters for Expr.filter.CHILD
                  // remember that false/true cast respectively to 0/1
                  match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                  match[5] = +((match[7] + match[8]) || match[3] === "odd");

                  // other types prohibit arguments
                } else if (match[3]) {
                  Sizzle.error(match[0]);
                }

                return match;
              },

              "PSEUDO": function(match) {
                var excess,
                  unquoted = !match[6] && match[2];

                if (matchExpr["CHILD"].test(match[0])) {
                  return null;
                }

                // Accept quoted arguments as-is
                if (match[3]) {
                  match[2] = match[4] || match[5] || "";

                  // Strip excess characters from unquoted arguments
                } else if (unquoted && rpseudo.test(unquoted) &&
                  // Get excess from tokenize (recursively)
                  (excess = tokenize(unquoted, true)) &&
                  // advance to the next closing parenthesis
                  (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

                  // excess is a negative index
                  match[0] = match[0].slice(0, excess);
                  match[2] = unquoted.slice(0, excess);
                }

                // Return only captures needed by the pseudo filter method (type and argument)
                return match.slice(0, 3);
              }
            },

            filter: {

              "TAG": function(nodeNameSelector) {
                var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                return nodeNameSelector === "*" ?
                  function() { return true; } :
                  function(elem) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                  };
              },

              "CLASS": function(className) {
                var pattern = classCache[className + " "];

                return pattern ||
                  (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
                  classCache(className, function(elem) {
                    return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                  });
              },

              "ATTR": function(name, operator, check) {
                return function(elem) {
                  var result = Sizzle.attr(elem, name);

                  if (result == null) {
                    return operator === "!=";
                  }
                  if (!operator) {
                    return true;
                  }

                  result += "";

                  return operator === "=" ? result === check :
                    operator === "!=" ? result !== check :
                    operator === "^=" ? check && result.indexOf(check) === 0 :
                    operator === "*=" ? check && result.indexOf(check) > -1 :
                    operator === "$=" ? check && result.slice(-check.length) === check :
                    operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 :
                    operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
                    false;
                };
              },

              "CHILD": function(type, what, argument, first, last) {
                var simple = type.slice(0, 3) !== "nth",
                  forward = type.slice(-4) !== "last",
                  ofType = what === "of-type";

                return first === 1 && last === 0 ?

                  // Shortcut for :nth-*(n)
                  function(elem) {
                    return !!elem.parentNode;
                  } :

                  function(elem, context, xml) {
                    var cache, uniqueCache, outerCache, node, nodeIndex, start,
                      dir = simple !== forward ? "nextSibling" : "previousSibling",
                      parent = elem.parentNode,
                      name = ofType && elem.nodeName.toLowerCase(),
                      useCache = !xml && !ofType,
                      diff = false;

                    if (parent) {

                      // :(first|last|only)-(child|of-type)
                      if (simple) {
                        while (dir) {
                          node = elem;
                          while ((node = node[dir])) {
                            if (ofType ?
                              node.nodeName.toLowerCase() === name :
                              node.nodeType === 1) {

                              return false;
                            }
                          }
                          // Reverse direction for :only-* (if we haven't yet done so)
                          start = dir = type === "only" && !start && "nextSibling";
                        }
                        return true;
                      }

                      start = [forward ? parent.firstChild : parent.lastChild];

                      // non-xml :nth-child(...) stores cache data on `parent`
                      if (forward && useCache) {

                        // Seek `elem` from a previously-cached index

                        // ...in a gzip-friendly way
                        node = parent;
                        outerCache = node[expando] || (node[expando] = {});

                        // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)
                        uniqueCache = outerCache[node.uniqueID] ||
                          (outerCache[node.uniqueID] = {});

                        cache = uniqueCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex && cache[2];
                        node = nodeIndex && parent.childNodes[nodeIndex];

                        while ((node = ++nodeIndex && node && node[dir] ||

                            // Fallback to seeking `elem` from the start
                            (diff = nodeIndex = 0) || start.pop())) {

                          // When found, cache indexes on `parent` and break
                          if (node.nodeType === 1 && ++diff && node === elem) {
                            uniqueCache[type] = [dirruns, nodeIndex, diff];
                            break;
                          }
                        }

                      } else {
                        // Use previously-cached element index if available
                        if (useCache) {
                          // ...in a gzip-friendly way
                          node = elem;
                          outerCache = node[expando] || (node[expando] = {});

                          // Support: IE <9 only
                          // Defend against cloned attroperties (jQuery gh-1709)
                          uniqueCache = outerCache[node.uniqueID] ||
                            (outerCache[node.uniqueID] = {});

                          cache = uniqueCache[type] || [];
                          nodeIndex = cache[0] === dirruns && cache[1];
                          diff = nodeIndex;
                        }

                        // xml :nth-child(...)
                        // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                        if (diff === false) {
                          // Use the same loop as above to seek `elem` from the start
                          while ((node = ++nodeIndex && node && node[dir] ||
                              (diff = nodeIndex = 0) || start.pop())) {

                            if ((ofType ?
                                node.nodeName.toLowerCase() === name :
                                node.nodeType === 1) &&
                              ++diff) {

                              // Cache the index of each encountered element
                              if (useCache) {
                                outerCache = node[expando] || (node[expando] = {});

                                // Support: IE <9 only
                                // Defend against cloned attroperties (jQuery gh-1709)
                                uniqueCache = outerCache[node.uniqueID] ||
                                  (outerCache[node.uniqueID] = {});

                                uniqueCache[type] = [dirruns, diff];
                              }

                              if (node === elem) {
                                break;
                              }
                            }
                          }
                        }
                      }

                      // Incorporate the offset, then check against cycle size
                      diff -= last;
                      return diff === first || (diff % first === 0 && diff / first >= 0);
                    }
                  };
              },

              "PSEUDO": function(pseudo, argument) {
                // pseudo-class names are case-insensitive
                // http://www.w3.org/TR/selectors/#pseudo-classes
                // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                // Remember that setFilters inherits from pseudos
                var args,
                  fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
                  Sizzle.error("unsupported pseudo: " + pseudo);

                // The user may use createPseudo to indicate that
                // arguments are needed to create the filter function
                // just as Sizzle does
                if (fn[expando]) {
                  return fn(argument);
                }

                // But maintain support for old signatures
                if (fn.length > 1) {
                  args = [pseudo, pseudo, "", argument];
                  return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
                    markFunction(function(seed, matches) {
                      var idx,
                        matched = fn(seed, argument),
                        i = matched.length;
                      while (i--) {
                        idx = indexOf(seed, matched[i]);
                        seed[idx] = !(matches[idx] = matched[i]);
                      }
                    }) :
                    function(elem) {
                      return fn(elem, 0, args);
                    };
                }

                return fn;
              }
            },

            pseudos: {
              // Potentially complex pseudos
              "not": markFunction(function(selector) {
                // Trim the selector passed to compile
                // to avoid treating leading and trailing
                // spaces as combinators
                var input = [],
                  results = [],
                  matcher = compile(selector.replace(rtrim, "$1"));

                return matcher[expando] ?
                  markFunction(function(seed, matches, context, xml) {
                    var elem,
                      unmatched = matcher(seed, null, xml, []),
                      i = seed.length;

                    // Match elements unmatched by `matcher`
                    while (i--) {
                      if ((elem = unmatched[i])) {
                        seed[i] = !(matches[i] = elem);
                      }
                    }
                  }) :
                  function(elem, context, xml) {
                    input[0] = elem;
                    matcher(input, null, xml, results);
                    // Don't keep the element (issue #299)
                    input[0] = null;
                    return !results.pop();
                  };
              }),

              "has": markFunction(function(selector) {
                return function(elem) {
                  return Sizzle(selector, elem).length > 0;
                };
              }),

              "contains": markFunction(function(text) {
                text = text.replace(runescape, funescape);
                return function(elem) {
                  return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                };
              }),

              // "Whether an element is represented by a :lang() selector
              // is based solely on the element's language value
              // being equal to the identifier C,
              // or beginning with the identifier C immediately followed by "-".
              // The matching of C against the element's language value is performed case-insensitively.
              // The identifier C does not have to be a valid language name."
              // http://www.w3.org/TR/selectors/#lang-pseudo
              "lang": markFunction(function(lang) {
                // lang value must be a valid identifier
                if (!ridentifier.test(lang || "")) {
                  Sizzle.error("unsupported lang: " + lang);
                }
                lang = lang.replace(runescape, funescape).toLowerCase();
                return function(elem) {
                  var elemLang;
                  do {
                    if ((elemLang = documentIsHTML ?
                        elem.lang :
                        elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {

                      elemLang = elemLang.toLowerCase();
                      return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                    }
                  } while ((elem = elem.parentNode) && elem.nodeType === 1);
                  return false;
                };
              }),

              // Miscellaneous
              "target": function(elem) {
                var hash = window.location && window.location.hash;
                return hash && hash.slice(1) === elem.id;
              },

              "root": function(elem) {
                return elem === docElem;
              },

              "focus": function(elem) {
                return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
              },

              // Boolean properties
              "enabled": function(elem) {
                return elem.disabled === false;
              },

              "disabled": function(elem) {
                return elem.disabled === true;
              },

              "checked": function(elem) {
                // In CSS3, :checked should return both checked and selected elements
                // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                var nodeName = elem.nodeName.toLowerCase();
                return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
              },

              "selected": function(elem) {
                // Accessing this property makes selected-by-default
                // options in Safari work properly
                if (elem.parentNode) {
                  elem.parentNode.selectedIndex;
                }

                return elem.selected === true;
              },

              // Contents
              "empty": function(elem) {
                // http://www.w3.org/TR/selectors/#empty-pseudo
                // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                //   but not by others (comment: 8; processing instruction: 7; etc.)
                // nodeType < 6 works because attributes (2) do not appear as children
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  if (elem.nodeType < 6) {
                    return false;
                  }
                }
                return true;
              },

              "parent": function(elem) {
                return !Expr.pseudos["empty"](elem);
              },

              // Element/input types
              "header": function(elem) {
                return rheader.test(elem.nodeName);
              },

              "input": function(elem) {
                return rinputs.test(elem.nodeName);
              },

              "button": function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === "button" || name === "button";
              },

              "text": function(elem) {
                var attr;
                return elem.nodeName.toLowerCase() === "input" &&
                  elem.type === "text" &&

                  // Support: IE<8
                  // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                  ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
              },

              // Position-in-collection
              "first": createPositionalPseudo(function() {
                return [0];
              }),

              "last": createPositionalPseudo(function(matchIndexes, length) {
                return [length - 1];
              }),

              "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
                return [argument < 0 ? argument + length : argument];
              }),

              "even": createPositionalPseudo(function(matchIndexes, length) {
                var i = 0;
                for (; i < length; i += 2) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              }),

              "odd": createPositionalPseudo(function(matchIndexes, length) {
                var i = 1;
                for (; i < length; i += 2) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              }),

              "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                var i = argument < 0 ? argument + length : argument;
                for (; --i >= 0;) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              }),

              "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                var i = argument < 0 ? argument + length : argument;
                for (; ++i < length;) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              })
            }
          };

          Expr.pseudos["nth"] = Expr.pseudos["eq"];

          // Add button/input type pseudos
          for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
            Expr.pseudos[i] = createInputPseudo(i);
          }
          for (i in { submit: true, reset: true }) {
            Expr.pseudos[i] = createButtonPseudo(i);
          }

          // Easy API for creating new setFilters
          function setFilters() {}
          setFilters.prototype = Expr.filters = Expr.pseudos;
          Expr.setFilters = new setFilters();

          tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type,
              soFar, groups, preFilters,
              cached = tokenCache[selector + " "];

            if (cached) {
              return parseOnly ? 0 : cached.slice(0);
            }

            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;

            while (soFar) {

              // Comma and first run
              if (!matched || (match = rcomma.exec(soFar))) {
                if (match) {
                  // Don't consume trailing commas as valid
                  soFar = soFar.slice(match[0].length) || soFar;
                }
                groups.push((tokens = []));
              }

              matched = false;

              // Combinators
              if ((match = rcombinators.exec(soFar))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  // Cast descendant combinators to space
                  type: match[0].replace(rtrim, " ")
                });
                soFar = soFar.slice(matched.length);
              }

              // Filters
              for (type in Expr.filter) {
                if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
                    (match = preFilters[type](match)))) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    type: type,
                    matches: match
                  });
                  soFar = soFar.slice(matched.length);
                }
              }

              if (!matched) {
                break;
              }
            }

            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            return parseOnly ?
              soFar.length :
              soFar ?
              Sizzle.error(selector) :
              // Cache the tokens
              tokenCache(selector, groups).slice(0);
          };

          function toSelector(tokens) {
            var i = 0,
              len = tokens.length,
              selector = "";
            for (; i < len; i++) {
              selector += tokens[i].value;
            }
            return selector;
          }

          function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir,
              checkNonElements = base && dir === "parentNode",
              doneName = done++;

            return combinator.first ?
              // Check against closest ancestor/preceding element
              function(elem, context, xml) {
                while ((elem = elem[dir])) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    return matcher(elem, context, xml);
                  }
                }
              } :

              // Check against all ancestor/preceding elements
              function(elem, context, xml) {
                var oldCache, uniqueCache, outerCache,
                  newCache = [dirruns, doneName];

                // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                if (xml) {
                  while ((elem = elem[dir])) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      if (matcher(elem, context, xml)) {
                        return true;
                      }
                    }
                  }
                } else {
                  while ((elem = elem[dir])) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      outerCache = elem[expando] || (elem[expando] = {});

                      // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)
                      uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

                      if ((oldCache = uniqueCache[dir]) &&
                        oldCache[0] === dirruns && oldCache[1] === doneName) {

                        // Assign to newCache so results back-propagate to previous elements
                        return (newCache[2] = oldCache[2]);
                      } else {
                        // Reuse newcache so results back-propagate to previous elements
                        uniqueCache[dir] = newCache;

                        // A match means we're done; a fail means we have to keep checking
                        if ((newCache[2] = matcher(elem, context, xml))) {
                          return true;
                        }
                      }
                    }
                  }
                }
              };
          }

          function elementMatcher(matchers) {
            return matchers.length > 1 ?
              function(elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                  if (!matchers[i](elem, context, xml)) {
                    return false;
                  }
                }
                return true;
              } :
              matchers[0];
          }

          function multipleContexts(selector, contexts, results) {
            var i = 0,
              len = contexts.length;
            for (; i < len; i++) {
              Sizzle(selector, contexts[i], results);
            }
            return results;
          }

          function condense(unmatched, map, filter, context, xml) {
            var elem,
              newUnmatched = [],
              i = 0,
              len = unmatched.length,
              mapped = map != null;

            for (; i < len; i++) {
              if ((elem = unmatched[i])) {
                if (!filter || filter(elem, context, xml)) {
                  newUnmatched.push(elem);
                  if (mapped) {
                    map.push(i);
                  }
                }
              }
            }

            return newUnmatched;
          }

          function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
              postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
              postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
              var temp, i, elem,
                preMap = [],
                postMap = [],
                preexisting = results.length,

                // Get initial elements from seed or context
                elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

                // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && (seed || !selector) ?
                condense(elems, preMap, preFilter, context, xml) :
                elems,

                matcherOut = matcher ?
                // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || (seed ? preFilter : preexisting || postFilter) ?

                // ...intermediate processing is necessary
                [] :

                // ...otherwise use results directly
                results :
                matcherIn;

              // Find primary matches
              if (matcher) {
                matcher(matcherIn, matcherOut, context, xml);
              }

              // Apply postFilter
              if (postFilter) {
                temp = condense(matcherOut, postMap);
                postFilter(temp, [], context, xml);

                // Un-match failing elements by moving them back to matcherIn
                i = temp.length;
                while (i--) {
                  if ((elem = temp[i])) {
                    matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                  }
                }
              }

              if (seed) {
                if (postFinder || preFilter) {
                  if (postFinder) {
                    // Get the final matcherOut by condensing this intermediate into postFinder contexts
                    temp = [];
                    i = matcherOut.length;
                    while (i--) {
                      if ((elem = matcherOut[i])) {
                        // Restore matcherIn since elem is not yet a final match
                        temp.push((matcherIn[i] = elem));
                      }
                    }
                    postFinder(null, (matcherOut = []), temp, xml);
                  }

                  // Move matched elements from seed to results to keep them synchronized
                  i = matcherOut.length;
                  while (i--) {
                    if ((elem = matcherOut[i]) &&
                      (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

                      seed[temp] = !(results[temp] = elem);
                    }
                  }
                }

                // Add elements to results, through postFinder if defined
              } else {
                matcherOut = condense(
                  matcherOut === results ?
                  matcherOut.splice(preexisting, matcherOut.length) :
                  matcherOut
                );
                if (postFinder) {
                  postFinder(null, results, matcherOut, xml);
                } else {
                  push.apply(results, matcherOut);
                }
              }
            });
          }

          function matcherFromTokens(tokens) {
            var checkContext, matcher, j,
              len = tokens.length,
              leadingRelative = Expr.relative[tokens[0].type],
              implicitRelative = leadingRelative || Expr.relative[" "],
              i = leadingRelative ? 1 : 0,

              // The foundational matcher ensures that elements are reachable from top-level context(s)
              matchContext = addCombinator(function(elem) {
                return elem === checkContext;
              }, implicitRelative, true),
              matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
              }, implicitRelative, true),
              matchers = [function(elem, context, xml) {
                var ret = (!leadingRelative && (xml || context !== outermostContext)) || (
                  (checkContext = context).nodeType ?
                  matchContext(elem, context, xml) :
                  matchAnyContext(elem, context, xml));
                // Avoid hanging onto element (issue #299)
                checkContext = null;
                return ret;
              }];

            for (; i < len; i++) {
              if ((matcher = Expr.relative[tokens[i].type])) {
                matchers = [addCombinator(elementMatcher(matchers), matcher)];
              } else {
                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                // Return special upon seeing a positional matcher
                if (matcher[expando]) {
                  // Find the next relative operator (if any) for proper handling
                  j = ++i;
                  for (; j < len; j++) {
                    if (Expr.relative[tokens[j].type]) {
                      break;
                    }
                  }
                  return setMatcher(
                    i > 1 && elementMatcher(matchers),
                    i > 1 && toSelector(
                      // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                      tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })
                    ).replace(rtrim, "$1"),
                    matcher,
                    i < j && matcherFromTokens(tokens.slice(i, j)),
                    j < len && matcherFromTokens((tokens = tokens.slice(j))),
                    j < len && toSelector(tokens)
                  );
                }
                matchers.push(matcher);
              }
            }

            return elementMatcher(matchers);
          }

          function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0,
              byElement = elementMatchers.length > 0,
              superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher,
                  matchedCount = 0,
                  i = "0",
                  unmatched = seed && [],
                  setMatched = [],
                  contextBackup = outermostContext,
                  // We must always have either seed elements or outermost context
                  elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                  // Use integer dirruns iff this is the outermost matcher
                  dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                  len = elems.length;

                if (outermost) {
                  outermostContext = context === document || context || outermost;
                }

                // Add elements passing elementMatchers directly to results
                // Support: IE<9, Safari
                // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                for (; i !== len && (elem = elems[i]) != null; i++) {
                  if (byElement && elem) {
                    j = 0;
                    if (!context && elem.ownerDocument !== document) {
                      setDocument(elem);
                      xml = !documentIsHTML;
                    }
                    while ((matcher = elementMatchers[j++])) {
                      if (matcher(elem, context || document, xml)) {
                        results.push(elem);
                        break;
                      }
                    }
                    if (outermost) {
                      dirruns = dirrunsUnique;
                    }
                  }

                  // Track unmatched elements for set filters
                  if (bySet) {
                    // They will have gone through all possible matchers
                    if ((elem = !matcher && elem)) {
                      matchedCount--;
                    }

                    // Lengthen the array for every element, matched or not
                    if (seed) {
                      unmatched.push(elem);
                    }
                  }
                }

                // `i` is now the count of elements visited above, and adding it to `matchedCount`
                // makes the latter nonnegative.
                matchedCount += i;

                // Apply set filters to unmatched elements
                // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                // no element matchers and no seed.
                // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                // numerically zero.
                if (bySet && i !== matchedCount) {
                  j = 0;
                  while ((matcher = setMatchers[j++])) {
                    matcher(unmatched, setMatched, context, xml);
                  }

                  if (seed) {
                    // Reintegrate element matches to eliminate the need for sorting
                    if (matchedCount > 0) {
                      while (i--) {
                        if (!(unmatched[i] || setMatched[i])) {
                          setMatched[i] = pop.call(results);
                        }
                      }
                    }

                    // Discard index placeholder values to get only actual matches
                    setMatched = condense(setMatched);
                  }

                  // Add matches to results
                  push.apply(results, setMatched);

                  // Seedless set matches succeeding multiple successful matchers stipulate sorting
                  if (outermost && !seed && setMatched.length > 0 &&
                    (matchedCount + setMatchers.length) > 1) {

                    Sizzle.uniqueSort(results);
                  }
                }

                // Override manipulation of globals by nested matchers
                if (outermost) {
                  dirruns = dirrunsUnique;
                  outermostContext = contextBackup;
                }

                return unmatched;
              };

            return bySet ?
              markFunction(superMatcher) :
              superMatcher;
          }

          compile = Sizzle.compile = function(selector, match /* Internal Use Only */ ) {
            var i,
              setMatchers = [],
              elementMatchers = [],
              cached = compilerCache[selector + " "];

            if (!cached) {
              // Generate a function of recursive functions that can be used to check each element
              if (!match) {
                match = tokenize(selector);
              }
              i = match.length;
              while (i--) {
                cached = matcherFromTokens(match[i]);
                if (cached[expando]) {
                  setMatchers.push(cached);
                } else {
                  elementMatchers.push(cached);
                }
              }

              // Cache the compiled function
              cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

              // Save selector and tokenization
              cached.selector = selector;
            }
            return cached;
          };

          /**
           * A low-level selection function that works with Sizzle's compiled
           *  selector functions
           * @param {String|Function} selector A selector or a pre-compiled
           *  selector function built with Sizzle.compile
           * @param {Element} context
           * @param {Array} [results]
           * @param {Array} [seed] A set of elements to match against
           */
          select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find,
              compiled = typeof selector === "function" && selector,
              match = !seed && tokenize((selector = compiled.selector || selector));

            results = results || [];

            // Try to minimize operations if there is only one selector in the list and no seed
            // (the latter of which guarantees us context)
            if (match.length === 1) {

              // Reduce context if the leading compound selector is an ID
              tokens = match[0] = match[0].slice(0);
              if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                support.getById && context.nodeType === 9 && documentIsHTML &&
                Expr.relative[tokens[1].type]) {

                context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                if (!context) {
                  return results;

                  // Precompiled matchers will still verify ancestry, so step up a level
                } else if (compiled) {
                  context = context.parentNode;
                }

                selector = selector.slice(tokens.shift().value.length);
              }

              // Fetch a seed set for right-to-left matching
              i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
              while (i--) {
                token = tokens[i];

                // Abort if we hit a combinator
                if (Expr.relative[(type = token.type)]) {
                  break;
                }
                if ((find = Expr.find[type])) {
                  // Search, expanding context for leading sibling combinators
                  if ((seed = find(
                      token.matches[0].replace(runescape, funescape),
                      rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                    ))) {

                    // If seed is empty or no tokens remain, we can return early
                    tokens.splice(i, 1);
                    selector = seed.length && toSelector(tokens);
                    if (!selector) {
                      push.apply(results, seed);
                      return results;
                    }

                    break;
                  }
                }
              }
            }

            // Compile and execute a filtering function if one is not provided
            // Provide `match` to avoid retokenization if we modified the selector above
            (compiled || compile(selector, match))(
              seed,
              context,
              !documentIsHTML,
              results,
              !context || rsibling.test(selector) && testContext(context.parentNode) || context
            );
            return results;
          };

          // One-time assignments

          // Sort stability
          support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

          // Support: Chrome 14-35+
          // Always assume duplicates if they aren't passed to the comparison function
          support.detectDuplicates = !!hasDuplicate;

          // Initialize against the default document
          setDocument();

          // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
          // Detached nodes confoundingly follow *each other*
          support.sortDetached = assert(function(div1) {
            // Should return 1, but returns 4 (following)
            return div1.compareDocumentPosition(document.createElement("div")) & 1;
          });

          // Support: IE<8
          // Prevent attribute/property "interpolation"
          // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
          if (!assert(function(div) {
              div.innerHTML = "<a href='#'></a>";
              return div.firstChild.getAttribute("href") === "#";
            })) {
            addHandle("type|href|height|width", function(elem, name, isXML) {
              if (!isXML) {
                return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
              }
            });
          }

          // Support: IE<9
          // Use defaultValue in place of getAttribute("value")
          if (!support.attributes || !assert(function(div) {
              div.innerHTML = "<input/>";
              div.firstChild.setAttribute("value", "");
              return div.firstChild.getAttribute("value") === "";
            })) {
            addHandle("value", function(elem, name, isXML) {
              if (!isXML && elem.nodeName.toLowerCase() === "input") {
                return elem.defaultValue;
              }
            });
          }

          // Support: IE<9
          // Use getAttributeNode to fetch booleans when getAttribute lies
          if (!assert(function(div) {
              return div.getAttribute("disabled") == null;
            })) {
            addHandle(booleans, function(elem, name, isXML) {
              var val;
              if (!isXML) {
                return elem[name] === true ? name.toLowerCase() :
                  (val = elem.getAttributeNode(name)) && val.specified ?
                  val.value :
                  null;
              }
            });
          }

          return Sizzle;

        })(window);

      jQuery.find = Sizzle;
      jQuery.expr = Sizzle.selectors;
      jQuery.expr[":"] = jQuery.expr.pseudos;
      jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
      jQuery.text = Sizzle.getText;
      jQuery.isXMLDoc = Sizzle.isXML;
      jQuery.contains = Sizzle.contains;

      var dir = function(elem, dir, until) {
        var matched = [],
          truncate = until !== undefined;

        while ((elem = elem[dir]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) {
              break;
            }
            matched.push(elem);
          }
        }
        return matched;
      };

      var siblings = function(n, elem) {
        var matched = [];

        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n);
          }
        }

        return matched;
      };

      var rneedsContext = jQuery.expr.match.needsContext;

      var rsingleTag = (/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/);

      var risSimple = /^.[^:#\[\.,]*$/;

      // Implement the identical functionality for filter and not
      function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
          return jQuery.grep(elements, function(elem, i) {
            /* jshint -W018 */
            return !!qualifier.call(elem, i, elem) !== not;
          });

        }

        if (qualifier.nodeType) {
          return jQuery.grep(elements, function(elem) {
            return (elem === qualifier) !== not;
          });

        }

        if (typeof qualifier === "string") {
          if (risSimple.test(qualifier)) {
            return jQuery.filter(qualifier, elements, not);
          }

          qualifier = jQuery.filter(qualifier, elements);
        }

        return jQuery.grep(elements, function(elem) {
          return (indexOf.call(qualifier, elem) > -1) !== not;
        });
      }

      jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];

        if (not) {
          expr = ":not(" + expr + ")";
        }

        return elems.length === 1 && elem.nodeType === 1 ?
          jQuery.find.matchesSelector(elem, expr) ? [elem] : [] :
          jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1;
          }));
      };

      jQuery.fn.extend({
        find: function(selector) {
          var i,
            len = this.length,
            ret = [],
            self = this;

          if (typeof selector !== "string") {
            return this.pushStack(jQuery(selector).filter(function() {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true;
                }
              }
            }));
          }

          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret);
          }

          // Needed because $( selector, context ) becomes $( context ).find( selector )
          ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
          ret.selector = this.selector ? this.selector + " " + selector : selector;
          return ret;
        },
        filter: function(selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
          return !!winnow(
            this,

            // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test(selector) ?
            jQuery(selector) :
            selector || [],
            false
          ).length;
        }
      });

      // Initialize a jQuery object

      // A central reference to the root jQuery(document)
      var rootjQuery,

        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        // Strict HTML recognition (#11290: must start with <)
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

        init = jQuery.fn.init = function(selector, context, root) {
          var match, elem;

          // HANDLE: $(""), $(null), $(undefined), $(false)
          if (!selector) {
            return this;
          }

          // Method init() accepts an alternate rootjQuery
          // so migrate can support jQuery.sub (gh-2101)
          root = root || rootjQuery;

          // Handle HTML strings
          if (typeof selector === "string") {
            if (selector[0] === "<" &&
              selector[selector.length - 1] === ">" &&
              selector.length >= 3) {

              // Assume that strings that start and end with <> are HTML and skip the regex check
              match = [null, selector, null];

            } else {
              match = rquickExpr.exec(selector);
            }

            // Match html or make sure no context is specified for #id
            if (match && (match[1] || !context)) {

              // HANDLE: $(html) -> $(array)
              if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;

                // Option to run scripts is true for back-compat
                // Intentionally let the error be thrown if parseHTML is not present
                jQuery.merge(this, jQuery.parseHTML(
                  match[1],
                  context && context.nodeType ? context.ownerDocument || context : document,
                  true
                ));

                // HANDLE: $(html, props)
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                  for (match in context) {

                    // Properties of context are called as methods if possible
                    if (jQuery.isFunction(this[match])) {
                      this[match](context[match]);

                      // ...and otherwise set as attributes
                    } else {
                      this.attr(match, context[match]);
                    }
                  }
                }

                return this;

                // HANDLE: $(#id)
              } else {
                elem = document.getElementById(match[2]);

                // Support: Blackberry 4.6
                // gEBID returns nodes no longer in the document (#6963)
                if (elem && elem.parentNode) {

                  // Inject the element directly into the jQuery object
                  this.length = 1;
                  this[0] = elem;
                }

                this.context = document;
                this.selector = selector;
                return this;
              }

              // HANDLE: $(expr, $(...))
            } else if (!context || context.jquery) {
              return (context || root).find(selector);

              // HANDLE: $(expr, context)
              // (which is just equivalent to: $(context).find(expr)
            } else {
              return this.constructor(context).find(selector);
            }

            // HANDLE: $(DOMElement)
          } else if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;

            // HANDLE: $(function)
            // Shortcut for document ready
          } else if (jQuery.isFunction(selector)) {
            return root.ready !== undefined ?
              root.ready(selector) :

              // Execute immediately if ready is not present
              selector(jQuery);
          }

          if (selector.selector !== undefined) {
            this.selector = selector.selector;
            this.context = selector.context;
          }

          return jQuery.makeArray(selector, this);
        };

      // Give the init function the jQuery prototype for later instantiation
      init.prototype = jQuery.fn;

      // Initialize central reference
      rootjQuery = jQuery(document);

      var rparentsprev = /^(?:parents|prev(?:Until|All))/,

        // Methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };

      jQuery.fn.extend({
        has: function(target) {
          var targets = jQuery(target, this),
            l = targets.length;

          return this.filter(function() {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true;
              }
            }
          });
        },

        closest: function(selectors, context) {
          var cur,
            i = 0,
            l = this.length,
            matched = [],
            pos = rneedsContext.test(selectors) || typeof selectors !== "string" ?
            jQuery(selectors, context || this.context) :
            0;

          for (; i < l; i++) {
            for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

              // Always skip document fragments
              if (cur.nodeType < 11 && (pos ?
                  pos.index(cur) > -1 :

                  // Don't pass non-elements to Sizzle
                  cur.nodeType === 1 &&
                  jQuery.find.matchesSelector(cur, selectors))) {

                matched.push(cur);
                break;
              }
            }
          }

          return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },

        // Determine the position of an element within the set
        index: function(elem) {

          // No argument, return index in parent
          if (!elem) {
            return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
          }

          // Index in selector
          if (typeof elem === "string") {
            return indexOf.call(jQuery(elem), this[0]);
          }

          // Locate the position of the desired element
          return indexOf.call(this,

            // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem
          );
        },

        add: function(selector, context) {
          return this.pushStack(
            jQuery.uniqueSort(
              jQuery.merge(this.get(), jQuery(selector, context))
            )
          );
        },

        addBack: function(selector) {
          return this.add(selector == null ?
            this.prevObject : this.prevObject.filter(selector)
          );
        }
      });

      function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {}
        return cur;
      }

      jQuery.each({
        parent: function(elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
          return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
          return dir(elem, "parentNode", until);
        },
        next: function(elem) {
          return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
          return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
          return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
          return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
          return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
          return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
          return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
          return siblings(elem.firstChild);
        },
        contents: function(elem) {
          return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
      }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
          var matched = jQuery.map(this, fn, until);

          if (name.slice(-5) !== "Until") {
            selector = until;
          }

          if (selector && typeof selector === "string") {
            matched = jQuery.filter(selector, matched);
          }

          if (this.length > 1) {

            // Remove duplicates
            if (!guaranteedUnique[name]) {
              jQuery.uniqueSort(matched);
            }

            // Reverse order for parents* and prev-derivatives
            if (rparentsprev.test(name)) {
              matched.reverse();
            }
          }

          return this.pushStack(matched);
        };
      });
      var rnotwhite = (/\S+/g);

      // Convert String-formatted options into Object-formatted ones
      function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
          object[flag] = true;
        });
        return object;
      }

      /*
       * Create a callback list using the following parameters:
       *
       *	options: an optional list of space-separated options that will change how
       *			the callback list behaves or a more traditional option object
       *
       * By default a callback list will act like an event callback list and can be
       * "fired" multiple times.
       *
       * Possible options:
       *
       *	once:			will ensure the callback list can only be fired once (like a Deferred)
       *
       *	memory:			will keep track of previous values and will call any callback added
       *					after the list has been fired right away with the latest "memorized"
       *					values (like a Deferred)
       *
       *	unique:			will ensure a callback can only be added once (no duplicate in the list)
       *
       *	stopOnFalse:	interrupt callings when a callback returns false
       *
       */
      jQuery.Callbacks = function(options) {

        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
          createOptions(options) :
          jQuery.extend({}, options);

        var // Flag to know if list is currently firing
          firing,

          // Last fire value for non-forgettable lists
          memory,

          // Flag to know if list was already fired
          fired,

          // Flag to prevent firing
          locked,

          // Actual callback list
          list = [],

          // Queue of execution data for repeatable lists
          queue = [],

          // Index of currently firing callback (modified by add/remove as needed)
          firingIndex = -1,

          // Fire callbacks
          fire = function() {

            // Enforce single-firing
            locked = options.once;

            // Execute callbacks for all pending executions,
            // respecting firingIndex overrides and runtime changes
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {

                // Run callback and check for early termination
                if (list[firingIndex].apply(memory[0], memory[1]) === false &&
                  options.stopOnFalse) {

                  // Jump to end and forget the data so .add doesn't re-fire
                  firingIndex = list.length;
                  memory = false;
                }
              }
            }

            // Forget the data if we're done with it
            if (!options.memory) {
              memory = false;
            }

            firing = false;

            // Clean up if we're done firing for good
            if (locked) {

              // Keep an empty list if we have data for future add calls
              if (memory) {
                list = [];

                // Otherwise, this object is spent
              } else {
                list = "";
              }
            }
          },

          // Actual Callbacks object
          self = {

            // Add a callback or a collection of callbacks to the list
            add: function() {
              if (list) {

                // If we have memory from a past run, we should fire after adding
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory);
                }

                (function add(args) {
                  jQuery.each(args, function(_, arg) {
                    if (jQuery.isFunction(arg)) {
                      if (!options.unique || !self.has(arg)) {
                        list.push(arg);
                      }
                    } else if (arg && arg.length && jQuery.type(arg) !== "string") {

                      // Inspect recursively
                      add(arg);
                    }
                  });
                })(arguments);

                if (memory && !firing) {
                  fire();
                }
              }
              return this;
            },

            // Remove a callback from the list
            remove: function() {
              jQuery.each(arguments, function(_, arg) {
                var index;
                while ((index = jQuery.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);

                  // Handle firing indexes
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              });
              return this;
            },

            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function(fn) {
              return fn ?
                jQuery.inArray(fn, list) > -1 :
                list.length > 0;
            },

            // Remove all callbacks from the list
            empty: function() {
              if (list) {
                list = [];
              }
              return this;
            },

            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function() {
              locked = queue = [];
              list = memory = "";
              return this;
            },
            disabled: function() {
              return !list;
            },

            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function() {
              locked = queue = [];
              if (!memory) {
                list = memory = "";
              }
              return this;
            },
            locked: function() {
              return !!locked;
            },

            // Call all callbacks with the given context and arguments
            fireWith: function(context, args) {
              if (!locked) {
                args = args || [];
                args = [context, args.slice ? args.slice() : args];
                queue.push(args);
                if (!firing) {
                  fire();
                }
              }
              return this;
            },

            // Call all the callbacks with the given arguments
            fire: function() {
              self.fireWith(this, arguments);
              return this;
            },

            // To know if the callbacks have already been called at least once
            fired: function() {
              return !!fired;
            }
          };

        return self;
      };

      jQuery.extend({

        Deferred: function(func) {
          var tuples = [

              // action, add listener, listener list, final state
              ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
              ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
              ["notify", "progress", jQuery.Callbacks("memory")]
            ],
            state = "pending",
            promise = {
              state: function() {
                return state;
              },
              always: function() {
                deferred.done(arguments).fail(arguments);
                return this;
              },
              then: function( /* fnDone, fnFail, fnProgress */ ) {
                var fns = arguments;
                return jQuery.Deferred(function(newDefer) {
                  jQuery.each(tuples, function(i, tuple) {
                    var fn = jQuery.isFunction(fns[i]) && fns[i];

                    // deferred[ done | fail | progress ] for forwarding actions to newDefer
                    deferred[tuple[1]](function() {
                      var returned = fn && fn.apply(this, arguments);
                      if (returned && jQuery.isFunction(returned.promise)) {
                        returned.promise()
                          .progress(newDefer.notify)
                          .done(newDefer.resolve)
                          .fail(newDefer.reject);
                      } else {
                        newDefer[tuple[0] + "With"](
                          this === promise ? newDefer.promise() : this,
                          fn ? [returned] : arguments
                        );
                      }
                    });
                  });
                  fns = null;
                }).promise();
              },

              // Get a promise for this deferred
              // If obj is provided, the promise aspect is added to the object
              promise: function(obj) {
                return obj != null ? jQuery.extend(obj, promise) : promise;
              }
            },
            deferred = {};

          // Keep pipe for back-compat
          promise.pipe = promise.then;

          // Add list-specific methods
          jQuery.each(tuples, function(i, tuple) {
            var list = tuple[2],
              stateString = tuple[3];

            // promise[ done | fail | progress ] = list.add
            promise[tuple[1]] = list.add;

            // Handle state
            if (stateString) {
              list.add(function() {

                // state = [ resolved | rejected ]
                state = stateString;

                // [ reject_list | resolve_list ].disable; progress_list.lock
              }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
            }

            // deferred[ resolve | reject | notify ]
            deferred[tuple[0]] = function() {
              deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
              return this;
            };
            deferred[tuple[0] + "With"] = list.fireWith;
          });

          // Make the deferred a promise
          promise.promise(deferred);

          // Call given func if any
          if (func) {
            func.call(deferred, deferred);
          }

          // All done!
          return deferred;
        },

        // Deferred helper
        when: function(subordinate /* , ..., subordinateN */ ) {
          var i = 0,
            resolveValues = slice.call(arguments),
            length = resolveValues.length,

            // the count of uncompleted subordinates
            remaining = length !== 1 ||
            (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,

            // the master Deferred.
            // If resolveValues consist of only a single Deferred, just use that.
            deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

            // Update function for both resolve and progress values
            updateFunc = function(i, contexts, values) {
              return function(value) {
                contexts[i] = this;
                values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                if (values === progressValues) {
                  deferred.notifyWith(contexts, values);
                } else if (!(--remaining)) {
                  deferred.resolveWith(contexts, values);
                }
              };
            },

            progressValues, progressContexts, resolveContexts;

          // Add listeners to Deferred subordinates; treat others as resolved
          if (length > 1) {
            progressValues = new Array(length);
            progressContexts = new Array(length);
            resolveContexts = new Array(length);
            for (; i < length; i++) {
              if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                resolveValues[i].promise()
                  .progress(updateFunc(i, progressContexts, progressValues))
                  .done(updateFunc(i, resolveContexts, resolveValues))
                  .fail(deferred.reject);
              } else {
                --remaining;
              }
            }
          }

          // If we're not waiting on anything, resolve the master
          if (!remaining) {
            deferred.resolveWith(resolveContexts, resolveValues);
          }

          return deferred.promise();
        }
      });

      // The deferred used on DOM ready
      var readyList;

      jQuery.fn.ready = function(fn) {

        // Add the callback
        jQuery.ready.promise().done(fn);

        return this;
      };

      jQuery.extend({

        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,

        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,

        // Hold (or release) the ready event
        holdReady: function(hold) {
          if (hold) {
            jQuery.readyWait++;
          } else {
            jQuery.ready(true);
          }
        },

        // Handle when the DOM is ready
        ready: function(wait) {

          // Abort if there are pending holds or we're already ready
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return;
          }

          // Remember that the DOM is ready
          jQuery.isReady = true;

          // If a normal DOM Ready event fired, decrement, and wait if need be
          if (wait !== true && --jQuery.readyWait > 0) {
            return;
          }

          // If there are functions bound, to execute
          readyList.resolveWith(document, [jQuery]);

          // Trigger any bound ready events
          if (jQuery.fn.triggerHandler) {
            jQuery(document).triggerHandler("ready");
            jQuery(document).off("ready");
          }
        }
      });

      /**
       * The ready event handler and self cleanup method
       */
      function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window.removeEventListener("load", completed);
        jQuery.ready();
      }

      jQuery.ready.promise = function(obj) {
        if (!readyList) {

          readyList = jQuery.Deferred();

          // Catch cases where $(document).ready() is called
          // after the browser event has already occurred.
          // Support: IE9-10 only
          // Older IE sometimes signals "interactive" too soon
          if (document.readyState === "complete" ||
            (document.readyState !== "loading" && !document.documentElement.doScroll)) {

            // Handle it asynchronously to allow scripts the opportunity to delay ready
            window.setTimeout(jQuery.ready);

          } else {

            // Use the handy event callback
            document.addEventListener("DOMContentLoaded", completed);

            // A fallback to window.onload, that will always work
            window.addEventListener("load", completed);
          }
        }
        return readyList.promise(obj);
      };

      // Kick off the DOM ready check even if the user does not
      jQuery.ready.promise();

      // Multifunctional method to get and set values of a collection
      // The value/s can optionally be executed if it's a function
      var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0,
          len = elems.length,
          bulk = key == null;

        // Sets many values
        if (jQuery.type(key) === "object") {
          chainable = true;
          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw);
          }

          // Sets one value
        } else if (value !== undefined) {
          chainable = true;

          if (!jQuery.isFunction(value)) {
            raw = true;
          }

          if (bulk) {

            // Bulk operations run against the entire set
            if (raw) {
              fn.call(elems, value);
              fn = null;

              // ...except when executing function values
            } else {
              bulk = fn;
              fn = function(elem, key, value) {
                return bulk.call(jQuery(elem), value);
              };
            }
          }

          if (fn) {
            for (; i < len; i++) {
              fn(
                elems[i], key, raw ?
                value :
                value.call(elems[i], i, fn(elems[i], key))
              );
            }
          }
        }

        return chainable ?
          elems :

          // Gets
          bulk ?
          fn.call(elems) :
          len ? fn(elems[0], key) : emptyGet;
      };
      var acceptData = function(owner) {

        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        /* jshint -W018 */
        return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
      };

      function Data() {
        this.expando = jQuery.expando + Data.uid++;
      }

      Data.uid = 1;

      Data.prototype = {

        register: function(owner, initial) {
          var value = initial || {};

          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value;

            // Otherwise secure it in a non-enumerable, non-writable property
            // configurability must be true to allow the property to be
            // deleted with the delete operator
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              writable: true,
              configurable: true
            });
          }
          return owner[this.expando];
        },
        cache: function(owner) {

          // We can accept data for non-element nodes in modern browsers,
          // but we should not, see #8335.
          // Always return an empty object.
          if (!acceptData(owner)) {
            return {};
          }

          // Check if the owner object already has a cache
          var value = owner[this.expando];

          // If not, create one
          if (!value) {
            value = {};

            // We can accept data for non-element nodes in modern browsers,
            // but we should not, see #8335.
            // Always return an empty object.
            if (acceptData(owner)) {

              // If it is a node unlikely to be stringify-ed or looped over
              // use plain assignment
              if (owner.nodeType) {
                owner[this.expando] = value;

                // Otherwise secure it in a non-enumerable property
                // configurable must be true to allow the property to be
                // deleted when data is removed
              } else {
                Object.defineProperty(owner, this.expando, {
                  value: value,
                  configurable: true
                });
              }
            }
          }

          return value;
        },
        set: function(owner, data, value) {
          var prop,
            cache = this.cache(owner);

          // Handle: [ owner, key, value ] args
          if (typeof data === "string") {
            cache[data] = value;

            // Handle: [ owner, { properties } ] args
          } else {

            // Copy the properties one-by-one to the cache object
            for (prop in data) {
              cache[prop] = data[prop];
            }
          }
          return cache;
        },
        get: function(owner, key) {
          return key === undefined ?
            this.cache(owner) :
            owner[this.expando] && owner[this.expando][key];
        },
        access: function(owner, key, value) {
          var stored;

          // In cases where either:
          //
          //   1. No key was specified
          //   2. A string key was specified, but no value provided
          //
          // Take the "read" path and allow the get method to determine
          // which value to return, respectively either:
          //
          //   1. The entire cache object
          //   2. The data stored at the key
          //
          if (key === undefined ||
            ((key && typeof key === "string") && value === undefined)) {

            stored = this.get(owner, key);

            return stored !== undefined ?
              stored : this.get(owner, jQuery.camelCase(key));
          }

          // When the key is not a string, or both a key and value
          // are specified, set or extend (existing objects) with either:
          //
          //   1. An object of properties
          //   2. A key and value
          //
          this.set(owner, key, value);

          // Since the "set" path can have two possible entry points
          // return the expected data based on which path was taken[*]
          return value !== undefined ? value : key;
        },
        remove: function(owner, key) {
          var i, name, camel,
            cache = owner[this.expando];

          if (cache === undefined) {
            return;
          }

          if (key === undefined) {
            this.register(owner);

          } else {

            // Support array or space separated string of keys
            if (jQuery.isArray(key)) {

              // If "name" is an array of keys...
              // When data is initially created, via ("key", "val") signature,
              // keys will be converted to camelCase.
              // Since there is no way to tell _how_ a key was added, remove
              // both plain key and camelCase key. #12786
              // This will only penalize the array argument path.
              name = key.concat(key.map(jQuery.camelCase));
            } else {
              camel = jQuery.camelCase(key);

              // Try the string as a key before any manipulation
              if (key in cache) {
                name = [key, camel];
              } else {

                // If a key with the spaces exists, use it.
                // Otherwise, create an array by matching non-whitespace
                name = camel;
                name = name in cache ? [name] : (name.match(rnotwhite) || []);
              }
            }

            i = name.length;

            while (i--) {
              delete cache[name[i]];
            }
          }

          // Remove the expando if there's no more data
          if (key === undefined || jQuery.isEmptyObject(cache)) {

            // Support: Chrome <= 35-45+
            // Webkit & Blink performance suffers when deleting properties
            // from DOM nodes, so set to undefined instead
            // https://code.google.com/p/chromium/issues/detail?id=378607
            if (owner.nodeType) {
              owner[this.expando] = undefined;
            } else {
              delete owner[this.expando];
            }
          }
        },
        hasData: function(owner) {
          var cache = owner[this.expando];
          return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
      };
      var dataPriv = new Data();

      var dataUser = new Data();

      //	Implementation Summary
      //
      //	1. Enforce API surface and semantic compatibility with 1.9.x branch
      //	2. Improve the module's maintainability by reducing the storage
      //		paths to a single mechanism.
      //	3. Use the same single mechanism to support "private" and "user" data.
      //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
      //	5. Avoid exposing implementation details on user objects (eg. expando properties)
      //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        rmultiDash = /[A-Z]/g;

      function dataAttr(elem, key, data) {
        var name;

        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
          name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
          data = elem.getAttribute(name);

          if (typeof data === "string") {
            try {
              data = data === "true" ? true :
                data === "false" ? false :
                data === "null" ? null :

                // Only convert to a number if it doesn't change the string
                +data + "" === data ? +data :
                rbrace.test(data) ? jQuery.parseJSON(data) :
                data;
            } catch (e) {}

            // Make sure we set the data so it isn't changed later
            dataUser.set(elem, key, data);
          } else {
            data = undefined;
          }
        }
        return data;
      }

      jQuery.extend({
        hasData: function(elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },

        data: function(elem, name, data) {
          return dataUser.access(elem, name, data);
        },

        removeData: function(elem, name) {
          dataUser.remove(elem, name);
        },

        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function(elem, name, data) {
          return dataPriv.access(elem, name, data);
        },

        _removeData: function(elem, name) {
          dataPriv.remove(elem, name);
        }
      });

      jQuery.fn.extend({
        data: function(key, value) {
          var i, name, data,
            elem = this[0],
            attrs = elem && elem.attributes;

          // Gets all values
          if (key === undefined) {
            if (this.length) {
              data = dataUser.get(elem);

              if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                i = attrs.length;
                while (i--) {

                  // Support: IE11+
                  // The attrs elements can be null (#14894)
                  if (attrs[i]) {
                    name = attrs[i].name;
                    if (name.indexOf("data-") === 0) {
                      name = jQuery.camelCase(name.slice(5));
                      dataAttr(elem, name, data[name]);
                    }
                  }
                }
                dataPriv.set(elem, "hasDataAttrs", true);
              }
            }

            return data;
          }

          // Sets multiple values
          if (typeof key === "object") {
            return this.each(function() {
              dataUser.set(this, key);
            });
          }

          return access(this, function(value) {
            var data, camelKey;

            // The calling jQuery object (element matches) is not empty
            // (and therefore has an element appears at this[ 0 ]) and the
            // `value` parameter was not undefined. An empty jQuery object
            // will result in `undefined` for elem = this[ 0 ] which will
            // throw an exception if an attempt to read a data cache is made.
            if (elem && value === undefined) {

              // Attempt to get data from the cache
              // with the key as-is
              data = dataUser.get(elem, key) ||

                // Try to find dashed key if it exists (gh-2779)
                // This is for 2.2.x only
                dataUser.get(elem, key.replace(rmultiDash, "-$&").toLowerCase());

              if (data !== undefined) {
                return data;
              }

              camelKey = jQuery.camelCase(key);

              // Attempt to get data from the cache
              // with the key camelized
              data = dataUser.get(elem, camelKey);
              if (data !== undefined) {
                return data;
              }

              // Attempt to "discover" the data in
              // HTML5 custom data-* attrs
              data = dataAttr(elem, camelKey, undefined);
              if (data !== undefined) {
                return data;
              }

              // We tried really hard, but the data doesn't exist.
              return;
            }

            // Set the data...
            camelKey = jQuery.camelCase(key);
            this.each(function() {

              // First, attempt to store a copy or reference of any
              // data that might've been store with a camelCased key.
              var data = dataUser.get(this, camelKey);

              // For HTML5 data-* attribute interop, we have to
              // store property names with dashes in a camelCase form.
              // This might not apply to all properties...*
              dataUser.set(this, camelKey, value);

              // *... In the case of properties that might _actually_
              // have dashes, we need to also store a copy of that
              // unchanged property.
              if (key.indexOf("-") > -1 && data !== undefined) {
                dataUser.set(this, key, value);
              }
            });
          }, null, value, arguments.length > 1, null, true);
        },

        removeData: function(key) {
          return this.each(function() {
            dataUser.remove(this, key);
          });
        }
      });

      jQuery.extend({
        queue: function(elem, type, data) {
          var queue;

          if (elem) {
            type = (type || "fx") + "queue";
            queue = dataPriv.get(elem, type);

            // Speed up dequeue by getting out quickly if this is just a lookup
            if (data) {
              if (!queue || jQuery.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery.makeArray(data));
              } else {
                queue.push(data);
              }
            }
            return queue || [];
          }
        },

        dequeue: function(elem, type) {
          type = type || "fx";

          var queue = jQuery.queue(elem, type),
            startLength = queue.length,
            fn = queue.shift(),
            hooks = jQuery._queueHooks(elem, type),
            next = function() {
              jQuery.dequeue(elem, type);
            };

          // If the fx queue is dequeued, always remove the progress sentinel
          if (fn === "inprogress") {
            fn = queue.shift();
            startLength--;
          }

          if (fn) {

            // Add a progress sentinel to prevent the fx queue from being
            // automatically dequeued
            if (type === "fx") {
              queue.unshift("inprogress");
            }

            // Clear up the last queue stop function
            delete hooks.stop;
            fn.call(elem, next, hooks);
          }

          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },

        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function(elem, type) {
          var key = type + "queueHooks";
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery.Callbacks("once memory").add(function() {
              dataPriv.remove(elem, [type + "queue", key]);
            })
          });
        }
      });

      jQuery.fn.extend({
        queue: function(type, data) {
          var setter = 2;

          if (typeof type !== "string") {
            data = type;
            type = "fx";
            setter--;
          }

          if (arguments.length < setter) {
            return jQuery.queue(this[0], type);
          }

          return data === undefined ?
            this :
            this.each(function() {
              var queue = jQuery.queue(this, type, data);

              // Ensure a hooks for this queue
              jQuery._queueHooks(this, type);

              if (type === "fx" && queue[0] !== "inprogress") {
                jQuery.dequeue(this, type);
              }
            });
        },
        dequeue: function(type) {
          return this.each(function() {
            jQuery.dequeue(this, type);
          });
        },
        clearQueue: function(type) {
          return this.queue(type || "fx", []);
        },

        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function(type, obj) {
          var tmp,
            count = 1,
            defer = jQuery.Deferred(),
            elements = this,
            i = this.length,
            resolve = function() {
              if (!(--count)) {
                defer.resolveWith(elements, [elements]);
              }
            };

          if (typeof type !== "string") {
            obj = type;
            type = undefined;
          }
          type = type || "fx";

          while (i--) {
            tmp = dataPriv.get(elements[i], type + "queueHooks");
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve);
            }
          }
          resolve();
          return defer.promise(obj);
        }
      });
      var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

      var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

      var cssExpand = ["Top", "Right", "Bottom", "Left"];

      var isHidden = function(elem, el) {

        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" ||
          !jQuery.contains(elem.ownerDocument, elem);
      };

      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted,
          scale = 1,
          maxIterations = 20,
          currentValue = tween ?
          function() { return tween.cur(); } :
          function() { return jQuery.css(elem, prop, ""); },
          initial = currentValue(),
          unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),

          // Starting value computation is required for potential unit mismatches
          initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) &&
          rcssNum.exec(jQuery.css(elem, prop));

        if (initialInUnit && initialInUnit[3] !== unit) {

          // Trust units reported by jQuery.css
          unit = unit || initialInUnit[3];

          // Make sure we update the tween properties later on
          valueParts = valueParts || [];

          // Iteratively approximate from a nonzero starting point
          initialInUnit = +initial || 1;

          do {

            // If previous iteration zeroed out, double until we get *something*.
            // Use string for doubling so we don't accidentally see scale as unchanged below
            scale = scale || ".5";

            // Adjust and apply
            initialInUnit = initialInUnit / scale;
            jQuery.style(elem, prop, initialInUnit + unit);

            // Update scale, tolerating zero or NaN from tween.cur()
            // Break the loop if scale is unchanged or perfect, or if we've just had enough.
          } while (
            scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations
          );
        }

        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0;

          // Apply relative offset (+=/-=) if specified
          adjusted = valueParts[1] ?
            initialInUnit + (valueParts[1] + 1) * valueParts[2] :
            +valueParts[2];
          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted;
          }
        }
        return adjusted;
      }
      var rcheckableType = (/^(?:checkbox|radio)$/i);

      var rtagName = (/<([\w:-]+)/);

      var rscriptType = (/^$|\/(?:java|ecma)script/i);

      // We have to close these tags to support XHTML (#13200)
      var wrapMap = {

        // Support: IE9
        option: [1, "<select multiple='multiple'>", "</select>"],

        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

        _default: [0, "", ""]
      };

      // Support: IE9
      wrapMap.optgroup = wrapMap.option;

      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;

      function getAll(context, tag) {

        // Support: IE9-11+
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret = typeof context.getElementsByTagName !== "undefined" ?
          context.getElementsByTagName(tag || "*") :
          typeof context.querySelectorAll !== "undefined" ?
          context.querySelectorAll(tag || "*") : [];

        return tag === undefined || tag && jQuery.nodeName(context, tag) ?
          jQuery.merge([context], ret) :
          ret;
      }

      // Mark scripts as having already been evaluated
      function setGlobalEval(elems, refElements) {
        var i = 0,
          l = elems.length;

        for (; i < l; i++) {
          dataPriv.set(
            elems[i],
            "globalEval",
            !refElements || dataPriv.get(refElements[i], "globalEval")
          );
        }
      }

      var rhtml = /<|&#?\w+;/;

      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, contains, j,
          fragment = context.createDocumentFragment(),
          nodes = [],
          i = 0,
          l = elems.length;

        for (; i < l; i++) {
          elem = elems[i];

          if (elem || elem === 0) {

            // Add nodes directly
            if (jQuery.type(elem) === "object") {

              // Support: Android<4.1, PhantomJS<2
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

              // Convert non-html into a text node
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem));

              // Convert html into DOM nodes
            } else {
              tmp = tmp || fragment.appendChild(context.createElement("div"));

              // Deserialize a standard representation
              tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

              // Descend through wrappers to the right content
              j = wrap[0];
              while (j--) {
                tmp = tmp.lastChild;
              }

              // Support: Android<4.1, PhantomJS<2
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(nodes, tmp.childNodes);

              // Remember the top-level container
              tmp = fragment.firstChild;

              // Ensure the created nodes are orphaned (#12392)
              tmp.textContent = "";
            }
          }
        }

        // Remove wrapper from fragment
        fragment.textContent = "";

        i = 0;
        while ((elem = nodes[i++])) {

          // Skip elements already in the context collection (trac-4087)
          if (selection && jQuery.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem);
            }
            continue;
          }

          contains = jQuery.contains(elem.ownerDocument, elem);

          // Append to fragment
          tmp = getAll(fragment.appendChild(elem), "script");

          // Preserve script evaluation history
          if (contains) {
            setGlobalEval(tmp);
          }

          // Capture executables
          if (scripts) {
            j = 0;
            while ((elem = tmp[j++])) {
              if (rscriptType.test(elem.type || "")) {
                scripts.push(elem);
              }
            }
          }
        }

        return fragment;
      }

      (function() {
        var fragment = document.createDocumentFragment(),
          div = fragment.appendChild(document.createElement("div")),
          input = document.createElement("input");

        // Support: Android 4.0-4.3, Safari<=5.1
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");

        div.appendChild(input);

        // Support: Safari<=5.1, Android<4.2
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

        // Support: IE<=11+
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
      })();

      var
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

      function returnTrue() {
        return true;
      }

      function returnFalse() {
        return false;
      }

      // Support: IE9
      // See #13393 for more info
      function safeActiveElement() {
        try {
          return document.activeElement;
        } catch (err) {}
      }

      function on(elem, types, selector, data, fn, one) {
        var origFn, type;

        // Types can be a map of types/handlers
        if (typeof types === "object") {

          // ( types-Object, selector, data )
          if (typeof selector !== "string") {

            // ( types-Object, data )
            data = data || selector;
            selector = undefined;
          }
          for (type in types) {
            on(elem, type, selector, data, types[type], one);
          }
          return elem;
        }

        if (data == null && fn == null) {

          // ( types, fn )
          fn = selector;
          data = selector = undefined;
        } else if (fn == null) {
          if (typeof selector === "string") {

            // ( types, selector, fn )
            fn = data;
            data = undefined;
          } else {

            // ( types, data, fn )
            fn = data;
            data = selector;
            selector = undefined;
          }
        }
        if (fn === false) {
          fn = returnFalse;
        } else if (!fn) {
          return elem;
        }

        if (one === 1) {
          origFn = fn;
          fn = function(event) {

            // Can use an empty set, since event contains the info
            jQuery().off(event);
            return origFn.apply(this, arguments);
          };

          // Use same guid so caller can remove using origFn
          fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
          jQuery.event.add(this, types, fn, data, selector);
        });
      }

      /*
       * Helper functions for managing events -- not part of the public interface.
       * Props to Dean Edwards' addEvent library for many of the ideas.
       */
      jQuery.event = {

        global: {},

        add: function(elem, types, handler, data, selector) {

          var handleObjIn, eventHandle, tmp,
            events, t, handleObj,
            special, handlers, type, namespaces, origType,
            elemData = dataPriv.get(elem);

          // Don't attach events to noData or text/comment nodes (but allow plain objects)
          if (!elemData) {
            return;
          }

          // Caller can pass in an object of custom data in lieu of the handler
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          }

          // Make sure that the handler has a unique ID, used to find/remove it later
          if (!handler.guid) {
            handler.guid = jQuery.guid++;
          }

          // Init the element's event structure and main handler, if this is the first
          if (!(events = elemData.events)) {
            events = elemData.events = {};
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function(e) {

              // Discard the second event of a jQuery.event.trigger() and
              // when an event is called after a page has unloaded
              return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
                jQuery.event.dispatch.apply(elem, arguments) : undefined;
            };
          }

          // Handle multiple events separated by a space
          types = (types || "").match(rnotwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();

            // There *must* be a type, no attaching namespace-only handlers
            if (!type) {
              continue;
            }

            // If event changes its type, use the special event handlers for the changed type
            special = jQuery.event.special[type] || {};

            // If selector defined, determine special event api type, otherwise given type
            type = (selector ? special.delegateType : special.bindType) || type;

            // Update special based on newly reset type
            special = jQuery.event.special[type] || {};

            // handleObj is passed to all event handlers
            handleObj = jQuery.extend({
              type: type,
              origType: origType,
              data: data,
              handler: handler,
              guid: handler.guid,
              selector: selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join(".")
            }, handleObjIn);

            // Init the event handler queue if we're the first
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;

              // Only use addEventListener if the special events handler returns false
              if (!special.setup ||
                special.setup.call(elem, data, namespaces, eventHandle) === false) {

                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle);
                }
              }
            }

            if (special.add) {
              special.add.call(elem, handleObj);

              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            }

            // Add to the element's handler list, delegates in front
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }

            // Keep track of which events have ever been used, for event optimization
            jQuery.event.global[type] = true;
          }

        },

        // Detach an event or set of events from an element
        remove: function(elem, types, handler, selector, mappedTypes) {

          var j, origCount, tmp,
            events, t, handleObj,
            special, handlers, type, namespaces, origType,
            elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

          if (!elemData || !(events = elemData.events)) {
            return;
          }

          // Once for each type.namespace in types; type may be omitted
          types = (types || "").match(rnotwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();

            // Unbind all events (on this namespace, if provided) for the element
            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true);
              }
              continue;
            }

            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] &&
              new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

            // Remove matching events
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];

              if ((mappedTypes || origType === handleObj.origType) &&
                (!handler || handler.guid === handleObj.guid) &&
                (!tmp || tmp.test(handleObj.namespace)) &&
                (!selector || selector === handleObj.selector ||
                  selector === "**" && handleObj.selector)) {
                handlers.splice(j, 1);

                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            }

            // Remove generic event handler if we removed something and no more handlers exist
            // (avoids potential for endless recursion during removal of special event handlers)
            if (origCount && !handlers.length) {
              if (!special.teardown ||
                special.teardown.call(elem, namespaces, elemData.handle) === false) {

                jQuery.removeEvent(elem, type, elemData.handle);
              }

              delete events[type];
            }
          }

          // Remove data and the expando if it's no longer used
          if (jQuery.isEmptyObject(events)) {
            dataPriv.remove(elem, "handle events");
          }
        },

        dispatch: function(event) {

          // Make a writable jQuery.Event from the native event object
          event = jQuery.event.fix(event);

          var i, j, ret, matched, handleObj,
            handlerQueue = [],
            args = slice.call(arguments),
            handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
            special = jQuery.event.special[event.type] || {};

          // Use the fix-ed jQuery.Event rather than the (read-only) native event
          args[0] = event;
          event.delegateTarget = this;

          // Call the preDispatch hook for the mapped type, and let it bail if desired
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return;
          }

          // Determine handlers
          handlerQueue = jQuery.event.handlers.call(this, event, handlers);

          // Run delegates first; they may want to stop propagation beneath us
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;

            j = 0;
            while ((handleObj = matched.handlers[j++]) &&
              !event.isImmediatePropagationStopped()) {

              // Triggered event must either 1) have no namespace, or 2) have namespace(s)
              // a subset or equal to those in the bound event (both can have no namespace).
              if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

                event.handleObj = handleObj;
                event.data = handleObj.data;

                ret = ((jQuery.event.special[handleObj.origType] || {}).handle ||
                  handleObj.handler).apply(matched.elem, args);

                if (ret !== undefined) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
          }

          // Call the postDispatch hook for the mapped type
          if (special.postDispatch) {
            special.postDispatch.call(this, event);
          }

          return event.result;
        },

        handlers: function(event, handlers) {
          var i, matches, sel, handleObj,
            handlerQueue = [],
            delegateCount = handlers.delegateCount,
            cur = event.target;

          // Support (at least): Chrome, IE9
          // Find delegate handlers
          // Black-hole SVG <use> instance trees (#13180)
          //
          // Support: Firefox<=42+
          // Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
          if (delegateCount && cur.nodeType &&
            (event.type !== "click" || isNaN(event.button) || event.button < 1)) {

            for (; cur !== this; cur = cur.parentNode || this) {

              // Don't check non-elements (#13208)
              // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
              if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                matches = [];
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];

                  // Don't conflict with Object.prototype properties (#13203)
                  sel = handleObj.selector + " ";

                  if (matches[sel] === undefined) {
                    matches[sel] = handleObj.needsContext ?
                      jQuery(sel, this).index(cur) > -1 :
                      jQuery.find(sel, this, null, [cur]).length;
                  }
                  if (matches[sel]) {
                    matches.push(handleObj);
                  }
                }
                if (matches.length) {
                  handlerQueue.push({ elem: cur, handlers: matches });
                }
              }
            }
          }

          // Add the remaining (directly-bound) handlers
          if (delegateCount < handlers.length) {
            handlerQueue.push({ elem: this, handlers: handlers.slice(delegateCount) });
          }

          return handlerQueue;
        },

        // Includes some event props shared by KeyEvent and MouseEvent
        props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
          "metaKey relatedTarget shiftKey target timeStamp view which").split(" "),

        fixHooks: {},

        keyHooks: {
          props: "char charCode key keyCode".split(" "),
          filter: function(event, original) {

            // Add which for key events
            if (event.which == null) {
              event.which = original.charCode != null ? original.charCode : original.keyCode;
            }

            return event;
          }
        },

        mouseHooks: {
          props: ("button buttons clientX clientY offsetX offsetY pageX pageY " +
            "screenX screenY toElement").split(" "),
          filter: function(event, original) {
            var eventDoc, doc, body,
              button = original.button;

            // Calculate pageX/Y if missing and clientX/Y available
            if (event.pageX == null && original.clientX != null) {
              eventDoc = event.target.ownerDocument || document;
              doc = eventDoc.documentElement;
              body = eventDoc.body;

              event.pageX = original.clientX +
                (doc && doc.scrollLeft || body && body.scrollLeft || 0) -
                (doc && doc.clientLeft || body && body.clientLeft || 0);
              event.pageY = original.clientY +
                (doc && doc.scrollTop || body && body.scrollTop || 0) -
                (doc && doc.clientTop || body && body.clientTop || 0);
            }

            // Add which for click: 1 === left; 2 === middle; 3 === right
            // Note: button is not normalized, so don't use it
            if (!event.which && button !== undefined) {
              event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
            }

            return event;
          }
        },

        fix: function(event) {
          if (event[jQuery.expando]) {
            return event;
          }

          // Create a writable copy of the event object and normalize some properties
          var i, prop, copy,
            type = event.type,
            originalEvent = event,
            fixHook = this.fixHooks[type];

          if (!fixHook) {
            this.fixHooks[type] = fixHook =
              rmouseEvent.test(type) ? this.mouseHooks :
              rkeyEvent.test(type) ? this.keyHooks : {};
          }
          copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

          event = new jQuery.Event(originalEvent);

          i = copy.length;
          while (i--) {
            prop = copy[i];
            event[prop] = originalEvent[prop];
          }

          // Support: Cordova 2.5 (WebKit) (#13255)
          // All events should have a target; Cordova deviceready doesn't
          if (!event.target) {
            event.target = document;
          }

          // Support: Safari 6.0+, Chrome<28
          // Target should not be a text node (#504, #13143)
          if (event.target.nodeType === 3) {
            event.target = event.target.parentNode;
          }

          return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },

        special: {
          load: {

            // Prevent triggered image.load events from bubbling to window.load
            noBubble: true
          },
          focus: {

            // Fire native event if possible so blur/focus sequence is correct
            trigger: function() {
              if (this !== safeActiveElement() && this.focus) {
                this.focus();
                return false;
              }
            },
            delegateType: "focusin"
          },
          blur: {
            trigger: function() {
              if (this === safeActiveElement() && this.blur) {
                this.blur();
                return false;
              }
            },
            delegateType: "focusout"
          },
          click: {

            // For checkbox, fire native event so checked state will be right
            trigger: function() {
              if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
                this.click();
                return false;
              }
            },

            // For cross-browser consistency, don't fire native .click() on links
            _default: function(event) {
              return jQuery.nodeName(event.target, "a");
            }
          },

          beforeunload: {
            postDispatch: function(event) {

              // Support: Firefox 20+
              // Firefox doesn't alert if the returnValue field is not set.
              if (event.result !== undefined && event.originalEvent) {
                event.originalEvent.returnValue = event.result;
              }
            }
          }
        }
      };

      jQuery.removeEvent = function(elem, type, handle) {

        // This "if" is needed for plain objects
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle);
        }
      };

      jQuery.Event = function(src, props) {

        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props);
        }

        // Event object
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;

          // Events bubbling up the document may have been marked as prevented
          // by a handler lower down the tree; reflect the correct value.
          this.isDefaultPrevented = src.defaultPrevented ||
            src.defaultPrevented === undefined &&

            // Support: Android<4.0
            src.returnValue === false ?
            returnTrue :
            returnFalse;

          // Event type
        } else {
          this.type = src;
        }

        // Put explicitly provided properties onto the event object
        if (props) {
          jQuery.extend(this, props);
        }

        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();

        // Mark it as fixed
        this[jQuery.expando] = true;
      };

      // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
      // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
      jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,

        preventDefault: function() {
          var e = this.originalEvent;

          this.isDefaultPrevented = returnTrue;

          if (e && !this.isSimulated) {
            e.preventDefault();
          }
        },
        stopPropagation: function() {
          var e = this.originalEvent;

          this.isPropagationStopped = returnTrue;

          if (e && !this.isSimulated) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation: function() {
          var e = this.originalEvent;

          this.isImmediatePropagationStopped = returnTrue;

          if (e && !this.isSimulated) {
            e.stopImmediatePropagation();
          }

          this.stopPropagation();
        }
      };

      // Create mouseenter/leave events using mouseover/out and event-time checks
      // so that event delegation works in jQuery.
      // Do the same for pointerenter/pointerleave and pointerover/pointerout
      //
      // Support: Safari 7 only
      // Safari sends mouseenter too often; see:
      // https://code.google.com/p/chromium/issues/detail?id=470258
      // for the description of the bug (it existed in older Chrome versions as well).
      jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
      }, function(orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,

          handle: function(event) {
            var ret,
              target = this,
              related = event.relatedTarget,
              handleObj = event.handleObj;

            // For mouseenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if (!related || (related !== target && !jQuery.contains(target, related))) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix;
            }
            return ret;
          }
        };
      });

      jQuery.fn.extend({
        on: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {

            // ( event )  dispatched jQuery.Event
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(
              handleObj.namespace ?
              handleObj.origType + "." + handleObj.namespace :
              handleObj.origType,
              handleObj.selector,
              handleObj.handler
            );
            return this;
          }
          if (typeof types === "object") {

            // ( types-object [, selector] )
            for (type in types) {
              this.off(type, selector, types[type]);
            }
            return this;
          }
          if (selector === false || typeof selector === "function") {

            // ( types [, fn] )
            fn = selector;
            selector = undefined;
          }
          if (fn === false) {
            fn = returnFalse;
          }
          return this.each(function() {
            jQuery.event.remove(this, types, fn, selector);
          });
        }
      });

      var
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

        // Support: IE 10-11, Edge 10240+
        // In IE/Edge using regex groups here causes severe slowdowns.
        // See https://connect.microsoft.com/IE/feedback/details/1736512/
        rnoInnerhtml = /<script|<style|<link/i,

        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

      // Manipulating tables requires a tbody
      function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") &&
          jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ?

          elem.getElementsByTagName("tbody")[0] ||
          elem.appendChild(elem.ownerDocument.createElement("tbody")) :
          elem;
      }

      // Replace/restore the type attribute of script elements for safe DOM manipulation
      function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
      }

      function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);

        if (match) {
          elem.type = match[1];
        } else {
          elem.removeAttribute("type");
        }

        return elem;
      }

      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

        if (dest.nodeType !== 1) {
          return;
        }

        // 1. Copy private data: events, handlers, etc.
        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.access(src);
          pdataCur = dataPriv.set(dest, pdataOld);
          events = pdataOld.events;

          if (events) {
            delete pdataCur.handle;
            pdataCur.events = {};

            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i]);
              }
            }
          }
        }

        // 2. Copy user data
        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src);
          udataCur = jQuery.extend({}, udataOld);

          dataUser.set(dest, udataCur);
        }
      }

      // Fix IE bugs, see support tests
      function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();

        // Fails to persist the checked state of a cloned checkbox or radio button.
        if (nodeName === "input" && rcheckableType.test(src.type)) {
          dest.checked = src.checked;

          // Fails to return the selected option to the default selected state when cloning options
        } else if (nodeName === "input" || nodeName === "textarea") {
          dest.defaultValue = src.defaultValue;
        }
      }

      function domManip(collection, args, callback, ignored) {

        // Flatten any nested arrays
        args = concat.apply([], args);

        var fragment, first, scripts, hasScripts, node, doc,
          i = 0,
          l = collection.length,
          iNoClone = l - 1,
          value = args[0],
          isFunction = jQuery.isFunction(value);

        // We can't cloneNode fragments that contain checked, in WebKit
        if (isFunction ||
          (l > 1 && typeof value === "string" &&
            !support.checkClone && rchecked.test(value))) {
          return collection.each(function(index) {
            var self = collection.eq(index);
            if (isFunction) {
              args[0] = value.call(this, index, self.html());
            }
            domManip(self, args, callback, ignored);
          });
        }

        if (l) {
          fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
          first = fragment.firstChild;

          if (fragment.childNodes.length === 1) {
            fragment = first;
          }

          // Require either new content or an interest in ignored elements to invoke the callback
          if (first || ignored) {
            scripts = jQuery.map(getAll(fragment, "script"), disableScript);
            hasScripts = scripts.length;

            // Use the original fragment for the last item
            // instead of the first because it can end up
            // being emptied incorrectly in certain situations (#8070).
            for (; i < l; i++) {
              node = fragment;

              if (i !== iNoClone) {
                node = jQuery.clone(node, true, true);

                // Keep references to cloned scripts for later restoration
                if (hasScripts) {

                  // Support: Android<4.1, PhantomJS<2
                  // push.apply(_, arraylike) throws on ancient WebKit
                  jQuery.merge(scripts, getAll(node, "script"));
                }
              }

              callback.call(collection[i], node, i);
            }

            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument;

              // Reenable scripts
              jQuery.map(scripts, restoreScript);

              // Evaluate executable scripts on first document insertion
              for (i = 0; i < hasScripts; i++) {
                node = scripts[i];
                if (rscriptType.test(node.type || "") &&
                  !dataPriv.access(node, "globalEval") &&
                  jQuery.contains(doc, node)) {

                  if (node.src) {

                    // Optional AJAX dependency, but won't run scripts if not present
                    if (jQuery._evalUrl) {
                      jQuery._evalUrl(node.src);
                    }
                  } else {
                    jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
                  }
                }
              }
            }
          }
        }

        return collection;
      }

      function remove(elem, selector, keepData) {
        var node,
          nodes = selector ? jQuery.filter(selector, elem) : elem,
          i = 0;

        for (;
          (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery.cleanData(getAll(node));
          }

          if (node.parentNode) {
            if (keepData && jQuery.contains(node.ownerDocument, node)) {
              setGlobalEval(getAll(node, "script"));
            }
            node.parentNode.removeChild(node);
          }
        }

        return elem;
      }

      jQuery.extend({
        htmlPrefilter: function(html) {
          return html.replace(rxhtmlTag, "<$1></$2>");
        },

        clone: function(elem, dataAndEvents, deepDataAndEvents) {
          var i, l, srcElements, destElements,
            clone = elem.cloneNode(true),
            inPage = jQuery.contains(elem.ownerDocument, elem);

          // Fix IE cloning issues
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) &&
            !jQuery.isXMLDoc(elem)) {

            // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
            destElements = getAll(clone);
            srcElements = getAll(elem);

            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          }

          // Copy the events from the original to the clone
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);

              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          }

          // Preserve script evaluation history
          destElements = getAll(clone, "script");
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, "script"));
          }

          // Return the cloned set
          return clone;
        },

        cleanData: function(elems) {
          var data, elem, type,
            special = jQuery.event.special,
            i = 0;

          for (;
            (elem = elems[i]) !== undefined; i++) {
            if (acceptData(elem)) {
              if ((data = elem[dataPriv.expando])) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type);

                      // This is a shortcut to avoid jQuery.event.remove's overhead
                    } else {
                      jQuery.removeEvent(elem, type, data.handle);
                    }
                  }
                }

                // Support: Chrome <= 35-45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataPriv.expando] = undefined;
              }
              if (elem[dataUser.expando]) {

                // Support: Chrome <= 35-45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataUser.expando] = undefined;
              }
            }
          }
        }
      });

      jQuery.fn.extend({

        // Keep domManip exposed until 3.0 (gh-2225)
        domManip: domManip,

        detach: function(selector) {
          return remove(this, selector, true);
        },

        remove: function(selector) {
          return remove(this, selector);
        },

        text: function(value) {
          return access(this, function(value) {
            return value === undefined ?
              jQuery.text(this) :
              this.empty().each(function() {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value;
                }
              });
          }, null, value, arguments.length);
        },

        append: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },

        prepend: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },

        before: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },

        after: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },

        empty: function() {
          var elem,
            i = 0;

          for (;
            (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {

              // Prevent memory leaks
              jQuery.cleanData(getAll(elem, false));

              // Remove any remaining nodes
              elem.textContent = "";
            }
          }

          return this;
        },

        clone: function(dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

          return this.map(function() {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },

        html: function(value) {
          return access(this, function(value) {
            var elem = this[0] || {},
              i = 0,
              l = this.length;

            if (value === undefined && elem.nodeType === 1) {
              return elem.innerHTML;
            }

            // See if we can take a shortcut and just use innerHTML
            if (typeof value === "string" && !rnoInnerhtml.test(value) &&
              !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

              value = jQuery.htmlPrefilter(value);

              try {
                for (; i < l; i++) {
                  elem = this[i] || {};

                  // Remove element nodes and prevent memory leaks
                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value;
                  }
                }

                elem = 0;

                // If using innerHTML throws an exception, use the fallback method
              } catch (e) {}
            }

            if (elem) {
              this.empty().append(value);
            }
          }, null, value, arguments.length);
        },

        replaceWith: function() {
          var ignored = [];

          // Make the changes, replacing each non-ignored context element with the new content
          return domManip(this, arguments, function(elem) {
            var parent = this.parentNode;

            if (jQuery.inArray(this, ignored) < 0) {
              jQuery.cleanData(getAll(this));
              if (parent) {
                parent.replaceChild(elem, this);
              }
            }

            // Force callback invocation
          }, ignored);
        }
      });

      jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
      }, function(name, original) {
        jQuery.fn[name] = function(selector) {
          var elems,
            ret = [],
            insert = jQuery(selector),
            last = insert.length - 1,
            i = 0;

          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems);

            // Support: QtWebKit
            // .get() because push.apply(_, arraylike) throws
            push.apply(ret, elems.get());
          }

          return this.pushStack(ret);
        };
      });

      var iframe,
        elemdisplay = {

          // Support: Firefox
          // We have to pre-define these values for FF (#10227)
          HTML: "block",
          BODY: "block"
        };

      /**
       * Retrieve the actual display of a element
       * @param {String} name nodeName of the element
       * @param {Object} doc Document object
       */

      // Called only from within defaultDisplay
      function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body),

          display = jQuery.css(elem[0], "display");

        // We don't have any data stored on the element,
        // so use "detach" method as fast way to get rid of the element
        elem.detach();

        return display;
      }

      /**
       * Try to determine the default display value of an element
       * @param {String} nodeName
       */
      function defaultDisplay(nodeName) {
        var doc = document,
          display = elemdisplay[nodeName];

        if (!display) {
          display = actualDisplay(nodeName, doc);

          // If the simple way fails, read from inside an iframe
          if (display === "none" || !display) {

            // Use the already-created iframe if possible
            iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>"))
              .appendTo(doc.documentElement);

            // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
            doc = iframe[0].contentDocument;

            // Support: IE
            doc.write();
            doc.close();

            display = actualDisplay(nodeName, doc);
            iframe.detach();
          }

          // Store the correct default display
          elemdisplay[nodeName] = display;
        }

        return display;
      }
      var rmargin = (/^margin/);

      var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

      var getStyles = function(elem) {

        // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;

        if (!view || !view.opener) {
          view = window;
        }

        return view.getComputedStyle(elem);
      };

      var swap = function(elem, options, callback, args) {
        var ret, name,
          old = {};

        // Remember the old values, and insert the new ones
        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name];
        }

        ret = callback.apply(elem, args || []);

        // Revert the old values
        for (name in options) {
          elem.style[name] = old[name];
        }

        return ret;
      };

      var documentElement = document.documentElement;

      (function() {
        var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
          container = document.createElement("div"),
          div = document.createElement("div");

        // Finish early in limited (non-browser) environments
        if (!div.style) {
          return;
        }

        // Support: IE9-11+
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";

        container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
          "padding:0;margin-top:1px;position:absolute";
        container.appendChild(div);

        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
          div.style.cssText =

            // Support: Firefox<29, Android 2.3
            // Vendor-prefix box-sizing
            "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
            "position:relative;display:block;" +
            "margin:auto;border:1px;padding:1px;" +
            "top:1%;width:50%";
          div.innerHTML = "";
          documentElement.appendChild(container);

          var divStyle = window.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== "1%";
          reliableMarginLeftVal = divStyle.marginLeft === "2px";
          boxSizingReliableVal = divStyle.width === "4px";

          // Support: Android 4.0 - 4.3 only
          // Some styles come back with percentage values, even though they shouldn't
          div.style.marginRight = "50%";
          pixelMarginRightVal = divStyle.marginRight === "4px";

          documentElement.removeChild(container);
        }

        jQuery.extend(support, {
          pixelPosition: function() {

            // This test is executed only once but we still do memoizing
            // since we can use the boxSizingReliable pre-computing.
            // No need to check if the test was already performed, though.
            computeStyleTests();
            return pixelPositionVal;
          },
          boxSizingReliable: function() {
            if (boxSizingReliableVal == null) {
              computeStyleTests();
            }
            return boxSizingReliableVal;
          },
          pixelMarginRight: function() {

            // Support: Android 4.0-4.3
            // We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
            // since that compresses better and they're computed together anyway.
            if (boxSizingReliableVal == null) {
              computeStyleTests();
            }
            return pixelMarginRightVal;
          },
          reliableMarginLeft: function() {

            // Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
            if (boxSizingReliableVal == null) {
              computeStyleTests();
            }
            return reliableMarginLeftVal;
          },
          reliableMarginRight: function() {

            // Support: Android 2.3
            // Check if div with explicit width and no margin-right incorrectly
            // gets computed margin-right based on width of container. (#3333)
            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
            // This support function is only executed once so no memoizing is needed.
            var ret,
              marginDiv = div.appendChild(document.createElement("div"));

            // Reset CSS: box-sizing; display; margin; border; padding
            marginDiv.style.cssText = div.style.cssText =

              // Support: Android 2.3
              // Vendor-prefix box-sizing
              "-webkit-box-sizing:content-box;box-sizing:content-box;" +
              "display:block;margin:0;border:0;padding:0";
            marginDiv.style.marginRight = marginDiv.style.width = "0";
            div.style.width = "1px";
            documentElement.appendChild(container);

            ret = !parseFloat(window.getComputedStyle(marginDiv).marginRight);

            documentElement.removeChild(container);
            div.removeChild(marginDiv);

            return ret;
          }
        });
      })();

      function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret,
          style = elem.style;

        computed = computed || getStyles(elem);
        ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;

        // Support: Opera 12.1x only
        // Fall back to style even without computed
        // computed is undefined for elems on document fragments
        if ((ret === "" || ret === undefined) && !jQuery.contains(elem.ownerDocument, elem)) {
          ret = jQuery.style(elem, name);
        }

        // Support: IE9
        // getPropertyValue is only needed for .css('filter') (#12537)
        if (computed) {

          // A tribute to the "awesome hack by Dean Edwards"
          // Android Browser returns percentage for some values,
          // but width seems to be reliably pixels.
          // This is against the CSSOM draft spec:
          // http://dev.w3.org/csswg/cssom/#resolved-values
          if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

            // Remember the original values
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;

            // Put in the new values to get a computed value out
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;

            // Revert the changed values
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
          }
        }

        return ret !== undefined ?

          // Support: IE9-11+
          // IE returns zIndex value as an integer.
          ret + "" :
          ret;
      }

      function addGetHookIf(conditionFn, hookFn) {

        // Define the hook, we'll check on the first run if it's really needed.
        return {
          get: function() {
            if (conditionFn()) {

              // Hook not needed (or it's not possible to use it due
              // to missing dependency), remove it.
              delete this.get;
              return;
            }

            // Hook needed; redefine it so that the support test is not executed again.
            return (this.get = hookFn).apply(this, arguments);
          }
        };
      }

      var

        // Swappable if display is none or starts with table
        // except "table", "table-cell", or "table-caption"
        // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,

        cssShow = { position: "absolute", visibility: "hidden", display: "block" },
        cssNormalTransform = {
          letterSpacing: "0",
          fontWeight: "400"
        },

        cssPrefixes = ["Webkit", "O", "Moz", "ms"],
        emptyStyle = document.createElement("div").style;

      // Return a css property mapped to a potentially vendor prefixed property
      function vendorPropName(name) {

        // Shortcut for names that are not vendor prefixed
        if (name in emptyStyle) {
          return name;
        }

        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1),
          i = cssPrefixes.length;

        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in emptyStyle) {
            return name;
          }
        }
      }

      function setPositiveNumber(elem, value, subtract) {

        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ?

          // Guard against undefined "subtract", e.g., when used as in cssHooks
          Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") :
          value;
      }

      function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ?

          // If we already have the right measurement, avoid augmentation
          4 :

          // Otherwise initialize for horizontal or vertical properties
          name === "width" ? 1 : 0,

          val = 0;

        for (; i < 4; i += 2) {

          // Both box models exclude margin, so add it if we want it
          if (extra === "margin") {
            val += jQuery.css(elem, extra + cssExpand[i], true, styles);
          }

          if (isBorderBox) {

            // border-box includes padding, so remove it if we want content
            if (extra === "content") {
              val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            }

            // At this point, extra isn't border nor margin, so remove border
            if (extra !== "margin") {
              val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          } else {

            // At this point, extra isn't content, so add padding
            val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

            // At this point, extra isn't content nor padding, so add border
            if (extra !== "padding") {
              val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          }
        }

        return val;
      }

      function getWidthOrHeight(elem, name, extra) {

        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true,
          val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
          styles = getStyles(elem),
          isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

        // Some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {

          // Fall back to computed then uncomputed css if necessary
          val = curCSS(elem, name, styles);
          if (val < 0 || val == null) {
            val = elem.style[name];
          }

          // Computed unit is not pixels. Stop here and return.
          if (rnumnonpx.test(val)) {
            return val;
          }

          // Check for style in case a browser which returns unreliable values
          // for getComputedStyle silently falls back to the reliable elem.style
          valueIsBorderBox = isBorderBox &&
            (support.boxSizingReliable() || val === elem.style[name]);

          // Normalize "", auto, and prepare for extra
          val = parseFloat(val) || 0;
        }

        // Use the active box-sizing model to add/subtract irrelevant styles
        return (val +
          augmentWidthOrHeight(
            elem,
            name,
            extra || (isBorderBox ? "border" : "content"),
            valueIsBorderBox,
            styles
          )
        ) + "px";
      }

      function showHide(elements, show) {
        var display, elem, hidden,
          values = [],
          index = 0,
          length = elements.length;

        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }

          values[index] = dataPriv.get(elem, "olddisplay");
          display = elem.style.display;
          if (show) {

            // Reset the inline display of this element to learn if it is
            // being hidden by cascaded rules or not
            if (!values[index] && display === "none") {
              elem.style.display = "";
            }

            // Set elements which have been overridden with display: none
            // in a stylesheet to whatever the default browser style is
            // for such an element
            if (elem.style.display === "" && isHidden(elem)) {
              values[index] = dataPriv.access(
                elem,
                "olddisplay",
                defaultDisplay(elem.nodeName)
              );
            }
          } else {
            hidden = isHidden(elem);

            if (display !== "none" || !hidden) {
              dataPriv.set(
                elem,
                "olddisplay",
                hidden ? display : jQuery.css(elem, "display")
              );
            }
          }
        }

        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for (index = 0; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          if (!show || elem.style.display === "none" || elem.style.display === "") {
            elem.style.display = show ? values[index] || "" : "none";
          }
        }

        return elements;
      }

      jQuery.extend({

        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
          opacity: {
            get: function(elem, computed) {
              if (computed) {

                // We should always get a number back from opacity
                var ret = curCSS(elem, "opacity");
                return ret === "" ? "1" : ret;
              }
            }
          }
        },

        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
          "animationIterationCount": true,
          "columnCount": true,
          "fillOpacity": true,
          "flexGrow": true,
          "flexShrink": true,
          "fontWeight": true,
          "lineHeight": true,
          "opacity": true,
          "order": true,
          "orphans": true,
          "widows": true,
          "zIndex": true,
          "zoom": true
        },

        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
          "float": "cssFloat"
        },

        // Get and set the style property on a DOM Node
        style: function(elem, name, value, extra) {

          // Don't set styles on text and comment nodes
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return;
          }

          // Make sure that we're working with the right name
          var ret, type, hooks,
            origName = jQuery.camelCase(name),
            style = elem.style;

          name = jQuery.cssProps[origName] ||
            (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

          // Gets hook for the prefixed version, then unprefixed version
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

          // Check if we're setting a value
          if (value !== undefined) {
            type = typeof value;

            // Convert "+=" or "-=" to relative numbers (#7345)
            if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret);

              // Fixes bug #9237
              type = "number";
            }

            // Make sure that null and NaN values aren't set (#7116)
            if (value == null || value !== value) {
              return;
            }

            // If a number was passed in, add the unit (except for certain CSS properties)
            if (type === "number") {
              value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
            }

            // Support: IE9-11+
            // background-* props affect original clone's values
            if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
              style[name] = "inherit";
            }

            // If a hook was provided, use that value, otherwise just set the specified value
            if (!hooks || !("set" in hooks) ||
              (value = hooks.set(elem, value, extra)) !== undefined) {

              style[name] = value;
            }

          } else {

            // If a hook was provided get the non-computed value from there
            if (hooks && "get" in hooks &&
              (ret = hooks.get(elem, false, extra)) !== undefined) {

              return ret;
            }

            // Otherwise just get the value from the style object
            return style[name];
          }
        },

        css: function(elem, name, extra, styles) {
          var val, num, hooks,
            origName = jQuery.camelCase(name);

          // Make sure that we're working with the right name
          name = jQuery.cssProps[origName] ||
            (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

          // Try prefixed name followed by the unprefixed name
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

          // If a hook was provided get the computed value from there
          if (hooks && "get" in hooks) {
            val = hooks.get(elem, true, extra);
          }

          // Otherwise, if a way to get the computed value exists, use that
          if (val === undefined) {
            val = curCSS(elem, name, styles);
          }

          // Convert "normal" to computed value
          if (val === "normal" && name in cssNormalTransform) {
            val = cssNormalTransform[name];
          }

          // Make numeric if forced or a qualifier was provided and val looks numeric
          if (extra === "" || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val;
          }
          return val;
        }
      });

      jQuery.each(["height", "width"], function(i, name) {
        jQuery.cssHooks[name] = {
          get: function(elem, computed, extra) {
            if (computed) {

              // Certain elements can have dimension info if we invisibly show them
              // but it must have a current display style that would benefit
              return rdisplayswap.test(jQuery.css(elem, "display")) &&
                elem.offsetWidth === 0 ?
                swap(elem, cssShow, function() {
                  return getWidthOrHeight(elem, name, extra);
                }) :
                getWidthOrHeight(elem, name, extra);
            }
          },

          set: function(elem, value, extra) {
            var matches,
              styles = extra && getStyles(elem),
              subtract = extra && augmentWidthOrHeight(
                elem,
                name,
                extra,
                jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                styles
              );

            // Convert to pixels if value adjustment is needed
            if (subtract && (matches = rcssNum.exec(value)) &&
              (matches[3] || "px") !== "px") {

              elem.style[name] = value;
              value = jQuery.css(elem, name);
            }

            return setPositiveNumber(elem, value, subtract);
          }
        };
      });

      jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft,
        function(elem, computed) {
          if (computed) {
            return (parseFloat(curCSS(elem, "marginLeft")) ||
              elem.getBoundingClientRect().left -
              swap(elem, { marginLeft: 0 }, function() {
                return elem.getBoundingClientRect().left;
              })
            ) + "px";
          }
        }
      );

      // Support: Android 2.3
      jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight,
        function(elem, computed) {
          if (computed) {
            return swap(elem, { "display": "inline-block" },
              curCSS, [elem, "marginRight"]);
          }
        }
      );

      // These hooks are used by animate to expand properties
      jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
      }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function(value) {
            var i = 0,
              expanded = {},

              // Assumes a single number if not a string
              parts = typeof value === "string" ? value.split(" ") : [value];

            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] =
                parts[i] || parts[i - 2] || parts[0];
            }

            return expanded;
          }
        };

        if (!rmargin.test(prefix)) {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });

      jQuery.fn.extend({
        css: function(name, value) {
          return access(this, function(elem, name, value) {
            var styles, len,
              map = {},
              i = 0;

            if (jQuery.isArray(name)) {
              styles = getStyles(elem);
              len = name.length;

              for (; i < len; i++) {
                map[name[i]] = jQuery.css(elem, name[i], false, styles);
              }

              return map;
            }

            return value !== undefined ?
              jQuery.style(elem, name, value) :
              jQuery.css(elem, name);
          }, name, value, arguments.length > 1);
        },
        show: function() {
          return showHide(this, true);
        },
        hide: function() {
          return showHide(this);
        },
        toggle: function(state) {
          if (typeof state === "boolean") {
            return state ? this.show() : this.hide();
          }

          return this.each(function() {
            if (isHidden(this)) {
              jQuery(this).show();
            } else {
              jQuery(this).hide();
            }
          });
        }
      });

      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
      }
      jQuery.Tween = Tween;

      Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery.easing._default;
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
          var hooks = Tween.propHooks[this.prop];

          return hooks && hooks.get ?
            hooks.get(this) :
            Tween.propHooks._default.get(this);
        },
        run: function(percent) {
          var eased,
            hooks = Tween.propHooks[this.prop];

          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](
              percent, this.options.duration * percent, 0, 1, this.options.duration
            );
          } else {
            this.pos = eased = percent;
          }
          this.now = (this.end - this.start) * eased + this.start;

          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }

          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween.propHooks._default.set(this);
          }
          return this;
        }
      };

      Tween.prototype.init.prototype = Tween.prototype;

      Tween.propHooks = {
        _default: {
          get: function(tween) {
            var result;

            // Use a property on the element directly when it is not a DOM element,
            // or when there is no matching style property that exists.
            if (tween.elem.nodeType !== 1 ||
              tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop];
            }

            // Passing an empty string as a 3rd parameter to .css will automatically
            // attempt a parseFloat and fallback to a string if the parse fails.
            // Simple values such as "10px" are parsed to Float;
            // complex values such as "rotate(1rad)" are returned as-is.
            result = jQuery.css(tween.elem, tween.prop, "");

            // Empty strings, null, undefined and "auto" are converted to 0.
            return !result || result === "auto" ? 0 : result;
          },
          set: function(tween) {

            // Use step hook for back compat.
            // Use cssHook if its there.
            // Use .style if available and use plain properties where available.
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween);
            } else if (tween.elem.nodeType === 1 &&
              (tween.elem.style[jQuery.cssProps[tween.prop]] != null ||
                jQuery.cssHooks[tween.prop])) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }
      };

      // Support: IE9
      // Panic based approach to setting things on disconnected nodes
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };

      jQuery.easing = {
        linear: function(p) {
          return p;
        },
        swing: function(p) {
          return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
      };

      jQuery.fx = Tween.prototype.init;

      // Back Compat <1.8 extension point
      jQuery.fx.step = {};

      var
        fxNow, timerId,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rrun = /queueHooks$/;

      // Animations created synchronously will run synchronously
      function createFxNow() {
        window.setTimeout(function() {
          fxNow = undefined;
        });
        return (fxNow = jQuery.now());
      }

      // Generate parameters to create a standard animation
      function genFx(type, includeWidth) {
        var which,
          i = 0,
          attrs = { height: type };

        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs["margin" + which] = attrs["padding" + which] = type;
        }

        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }

        return attrs;
      }

      function createTween(value, prop, animation) {
        var tween,
          collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
          index = 0,
          length = collection.length;
        for (; index < length; index++) {
          if ((tween = collection[index].call(animation, prop, value))) {

            // We're done with this property
            return tween;
          }
        }
      }

      function defaultPrefilter(elem, props, opts) {
        /* jshint validthis: true */
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
          anim = this,
          orig = {},
          style = elem.style,
          hidden = elem.nodeType && isHidden(elem),
          dataShow = dataPriv.get(elem, "fxshow");

        // Handle queue: false promises
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, "fx");
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function() {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }
          hooks.unqueued++;

          anim.always(function() {

            // Ensure the complete handler is called before this completes
            anim.always(function() {
              hooks.unqueued--;
              if (!jQuery.queue(elem, "fx").length) {
                hooks.empty.fire();
              }
            });
          });
        }

        // Height/width overflow pass
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {

          // Make sure that nothing sneaks out
          // Record all 3 overflow attributes because IE9-10 do not
          // change the overflow attribute when overflowX and
          // overflowY are set to the same value
          opts.overflow = [style.overflow, style.overflowX, style.overflowY];

          // Set display property to inline-block for height/width
          // animations on inline elements that are having width/height animated
          display = jQuery.css(elem, "display");

          // Test default display if display is currently "none"
          checkDisplay = display === "none" ?
            dataPriv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

          if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
            style.display = "inline-block";
          }
        }

        if (opts.overflow) {
          style.overflow = "hidden";
          anim.always(function() {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2];
          });
        }

        // show/hide pass
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.exec(value)) {
            delete props[prop];
            toggle = toggle || value === "toggle";
            if (value === (hidden ? "hide" : "show")) {

              // If there is dataShow left over from a stopped hide or show
              // and we are going to proceed with show, we should pretend to be hidden
              if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                hidden = true;
              } else {
                continue;
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

            // Any non-fx value stops us from restoring the original display value
          } else {
            display = undefined;
          }
        }

        if (!jQuery.isEmptyObject(orig)) {
          if (dataShow) {
            if ("hidden" in dataShow) {
              hidden = dataShow.hidden;
            }
          } else {
            dataShow = dataPriv.access(elem, "fxshow", {});
          }

          // Store state if its toggle - enables .stop().toggle() to "reverse"
          if (toggle) {
            dataShow.hidden = !hidden;
          }
          if (hidden) {
            jQuery(elem).show();
          } else {
            anim.done(function() {
              jQuery(elem).hide();
            });
          }
          anim.done(function() {
            var prop;

            dataPriv.remove(elem, "fxshow");
            for (prop in orig) {
              jQuery.style(elem, prop, orig[prop]);
            }
          });
          for (prop in orig) {
            tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

            if (!(prop in dataShow)) {
              dataShow[prop] = tween.start;
              if (hidden) {
                tween.end = tween.start;
                tween.start = prop === "width" || prop === "height" ? 1 : 0;
              }
            }
          }

          // If this is a noop like .hide().hide(), restore an overwritten display value
        } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
          style.display = display;
        }
      }

      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;

        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
          name = jQuery.camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (jQuery.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }

          if (index !== name) {
            props[name] = value;
            delete props[index];
          }

          hooks = jQuery.cssHooks[name];
          if (hooks && "expand" in hooks) {
            value = hooks.expand(value);
            delete props[name];

            // Not quite $.extend, this won't overwrite existing keys.
            // Reusing 'index' because we have the correct "name"
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name] = easing;
          }
        }
      }

      function Animation(elem, properties, options) {
        var result,
          stopped,
          index = 0,
          length = Animation.prefilters.length,
          deferred = jQuery.Deferred().always(function() {

            // Don't match elem in the :animated selector
            delete tick.elem;
          }),
          tick = function() {
            if (stopped) {
              return false;
            }
            var currentTime = fxNow || createFxNow(),
              remaining = Math.max(0, animation.startTime + animation.duration - currentTime),

              // Support: Android 2.3
              // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
              temp = remaining / animation.duration || 0,
              percent = 1 - temp,
              index = 0,
              length = animation.tweens.length;

            for (; index < length; index++) {
              animation.tweens[index].run(percent);
            }

            deferred.notifyWith(elem, [animation, percent, remaining]);

            if (percent < 1 && length) {
              return remaining;
            } else {
              deferred.resolveWith(elem, [animation]);
              return false;
            }
          },
          animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
              specialEasing: {},
              easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
              var tween = jQuery.Tween(elem, animation.opts, prop, end,
                animation.opts.specialEasing[prop] || animation.opts.easing);
              animation.tweens.push(tween);
              return tween;
            },
            stop: function(gotoEnd) {
              var index = 0,

                // If we are going to the end, we want to run all the tweens
                // otherwise we skip this part
                length = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this;
              }
              stopped = true;
              for (; index < length; index++) {
                animation.tweens[index].run(1);
              }

              // Resolve when we played the last frame; otherwise, reject
              if (gotoEnd) {
                deferred.notifyWith(elem, [animation, 1, 0]);
                deferred.resolveWith(elem, [animation, gotoEnd]);
              } else {
                deferred.rejectWith(elem, [animation, gotoEnd]);
              }
              return this;
            }
          }),
          props = animation.props;

        propFilter(props, animation.opts.specialEasing);

        for (; index < length; index++) {
          result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            if (jQuery.isFunction(result.stop)) {
              jQuery._queueHooks(animation.elem, animation.opts.queue).stop =
                jQuery.proxy(result.stop, result);
            }
            return result;
          }
        }

        jQuery.map(props, createTween, animation);

        if (jQuery.isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation);
        }

        jQuery.fx.timer(
          jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
          })
        );

        // attach callbacks from options
        return animation.progress(animation.opts.progress)
          .done(animation.opts.done, animation.opts.complete)
          .fail(animation.opts.fail)
          .always(animation.opts.always);
      }

      jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
          "*": [function(prop, value) {
            var tween = this.createTween(prop, value);
            adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
            return tween;
          }]
        },

        tweener: function(props, callback) {
          if (jQuery.isFunction(props)) {
            callback = props;
            props = ["*"];
          } else {
            props = props.match(rnotwhite);
          }

          var prop,
            index = 0,
            length = props.length;

          for (; index < length; index++) {
            prop = props[index];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback);
          }
        },

        prefilters: [defaultPrefilter],

        prefilter: function(callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback);
          } else {
            Animation.prefilters.push(callback);
          }
        }
      });

      jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
          complete: fn || !fn && easing ||
            jQuery.isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };

        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
          opt.duration : opt.duration in jQuery.fx.speeds ?
          jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

        // Normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
          opt.queue = "fx";
        }

        // Queueing
        opt.old = opt.complete;

        opt.complete = function() {
          if (jQuery.isFunction(opt.old)) {
            opt.old.call(this);
          }

          if (opt.queue) {
            jQuery.dequeue(this, opt.queue);
          }
        };

        return opt;
      };

      jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {

          // Show any hidden elements after setting opacity to 0
          return this.filter(isHidden).css("opacity", 0).show()

            // Animate to the value specified
            .end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop),
            optall = jQuery.speed(speed, easing, callback),
            doAnimation = function() {

              // Operate on a copy of prop so per-property easing won't be lost
              var anim = Animation(this, jQuery.extend({}, prop), optall);

              // Empty animations, or finishing resolves immediately
              if (empty || dataPriv.get(this, "finish")) {
                anim.stop(true);
              }
            };
          doAnimation.finish = doAnimation;

          return empty || optall.queue === false ?
            this.each(doAnimation) :
            this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
          var stopQueue = function(hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd);
          };

          if (typeof type !== "string") {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined;
          }
          if (clearQueue && type !== false) {
            this.queue(type || "fx", []);
          }

          return this.each(function() {
            var dequeue = true,
              index = type != null && type + "queueHooks",
              timers = jQuery.timers,
              data = dataPriv.get(this);

            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index]);
                }
              }
            }

            for (index = timers.length; index--;) {
              if (timers[index].elem === this &&
                (type == null || timers[index].queue === type)) {

                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            }

            // Start the next in the queue if the last step wasn't forced.
            // Timers currently will call their complete callbacks, which
            // will dequeue but only if they were gotoEnd.
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type);
            }
          });
        },
        finish: function(type) {
          if (type !== false) {
            type = type || "fx";
          }
          return this.each(function() {
            var index,
              data = dataPriv.get(this),
              queue = data[type + "queue"],
              hooks = data[type + "queueHooks"],
              timers = jQuery.timers,
              length = queue ? queue.length : 0;

            // Enable finishing flag on private data
            data.finish = true;

            // Empty the queue first
            jQuery.queue(this, type, []);

            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            }

            // Look for any active animations, and finish them
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            }

            // Look for any animations in the old queue and finish them
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            }

            // Turn off finishing flag
            delete data.finish;
          });
        }
      });

      jQuery.each(["toggle", "show", "hide"], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
          return speed == null || typeof speed === "boolean" ?
            cssFn.apply(this, arguments) :
            this.animate(genFx(name, true), speed, easing, callback);
        };
      });

      // Generate shortcuts for custom animations
      jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
      }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });

      jQuery.timers = [];
      jQuery.fx.tick = function() {
        var timer,
          i = 0,
          timers = jQuery.timers;

        fxNow = jQuery.now();

        for (; i < timers.length; i++) {
          timer = timers[i];

          // Checks the timer has not already been removed
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }

        if (!timers.length) {
          jQuery.fx.stop();
        }
        fxNow = undefined;
      };

      jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        if (timer()) {
          jQuery.fx.start();
        } else {
          jQuery.timers.pop();
        }
      };

      jQuery.fx.interval = 13;
      jQuery.fx.start = function() {
        if (!timerId) {
          timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
      };

      jQuery.fx.stop = function() {
        window.clearInterval(timerId);

        timerId = null;
      };

      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,

        // Default speed
        _default: 400
      };

      // Based off of the plugin by Clint Helfers, with permission.
      // http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
      jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";

        return this.queue(type, function(next, hooks) {
          var timeout = window.setTimeout(next, time);
          hooks.stop = function() {
            window.clearTimeout(timeout);
          };
        });
      };

      (function() {
        var input = document.createElement("input"),
          select = document.createElement("select"),
          opt = select.appendChild(document.createElement("option"));

        input.type = "checkbox";

        // Support: iOS<=5.1, Android<=4.2+
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== "";

        // Support: IE<=11+
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;

        // Support: Android<=2.3
        // Options inside disabled selects are incorrectly marked as disabled
        select.disabled = true;
        support.optDisabled = !opt.disabled;

        // Support: IE<=11+
        // An input loses its value after becoming a radio
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
      })();

      var boolHook,
        attrHandle = jQuery.expr.attrHandle;

      jQuery.fn.extend({
        attr: function(name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1);
        },

        removeAttr: function(name) {
          return this.each(function() {
            jQuery.removeAttr(this, name);
          });
        }
      });

      jQuery.extend({
        attr: function(elem, name, value) {
          var ret, hooks,
            nType = elem.nodeType;

          // Don't get/set attributes on text, comment and attribute nodes
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }

          // Fallback to prop when attributes are not supported
          if (typeof elem.getAttribute === "undefined") {
            return jQuery.prop(elem, name, value);
          }

          // All attributes are lowercase
          // Grab necessary hook if one is defined
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            name = name.toLowerCase();
            hooks = jQuery.attrHooks[name] ||
              (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
          }

          if (value !== undefined) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
              return;
            }

            if (hooks && "set" in hooks &&
              (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret;
            }

            elem.setAttribute(name, value + "");
            return value;
          }

          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }

          ret = jQuery.find.attr(elem, name);

          // Non-existent attributes return null, we normalize to undefined
          return ret == null ? undefined : ret;
        },

        attrHooks: {
          type: {
            set: function(elem, value) {
              if (!support.radioValue && value === "radio" &&
                jQuery.nodeName(elem, "input")) {
                var val = elem.value;
                elem.setAttribute("type", value);
                if (val) {
                  elem.value = val;
                }
                return value;
              }
            }
          }
        },

        removeAttr: function(elem, value) {
          var name, propName,
            i = 0,
            attrNames = value && value.match(rnotwhite);

          if (attrNames && elem.nodeType === 1) {
            while ((name = attrNames[i++])) {
              propName = jQuery.propFix[name] || name;

              // Boolean attributes get special treatment (#10870)
              if (jQuery.expr.match.bool.test(name)) {

                // Set corresponding property to false
                elem[propName] = false;
              }

              elem.removeAttribute(name);
            }
          }
        }
      });

      // Hooks for boolean attributes
      boolHook = {
        set: function(elem, value, name) {
          if (value === false) {

            // Remove boolean attributes when set to false
            jQuery.removeAttr(elem, name);
          } else {
            elem.setAttribute(name, name);
          }
          return name;
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;

        attrHandle[name] = function(elem, name, isXML) {
          var ret, handle;
          if (!isXML) {

            // Avoid an infinite loop by temporarily removing this function from the getter
            handle = attrHandle[name];
            attrHandle[name] = ret;
            ret = getter(elem, name, isXML) != null ?
              name.toLowerCase() :
              null;
            attrHandle[name] = handle;
          }
          return ret;
        };
      });

      var rfocusable = /^(?:input|select|textarea|button)$/i,
        rclickable = /^(?:a|area)$/i;

      jQuery.fn.extend({
        prop: function(name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1);
        },

        removeProp: function(name) {
          return this.each(function() {
            delete this[jQuery.propFix[name] || name];
          });
        }
      });

      jQuery.extend({
        prop: function(elem, name, value) {
          var ret, hooks,
            nType = elem.nodeType;

          // Don't get/set properties on text, comment and attribute nodes
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }

          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

            // Fix name and attach hooks
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name];
          }

          if (value !== undefined) {
            if (hooks && "set" in hooks &&
              (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret;
            }

            return (elem[name] = value);
          }

          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }

          return elem[name];
        },

        propHooks: {
          tabIndex: {
            get: function(elem) {

              // elem.tabIndex doesn't always return the
              // correct value when it hasn't been explicitly set
              // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
              // Use proper attribute retrieval(#12072)
              var tabindex = jQuery.find.attr(elem, "tabindex");

              return tabindex ?
                parseInt(tabindex, 10) :
                rfocusable.test(elem.nodeName) ||
                rclickable.test(elem.nodeName) && elem.href ?
                0 :
                -1;
            }
          }
        },

        propFix: {
          "for": "htmlFor",
          "class": "className"
        }
      });

      // Support: IE <=11 only
      // Accessing the selectedIndex property
      // forces the browser to respect setting selected
      // on the option
      // The getter ensures a default option is selected
      // when in an optgroup
      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function(elem) {
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex;
            }
            return null;
          },
          set: function(elem) {
            var parent = elem.parentNode;
            if (parent) {
              parent.selectedIndex;

              if (parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
            }
          }
        };
      }

      jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
      ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
      });

      var rclass = /[\t\r\n\f]/g;

      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
      }

      jQuery.fn.extend({
        addClass: function(value) {
          var classes, elem, cur, curValue, clazz, j, finalValue,
            i = 0;

          if (jQuery.isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).addClass(value.call(this, j, getClass(this)));
            });
          }

          if (typeof value === "string" && value) {
            classes = value.match(rnotwhite) || [];

            while ((elem = this[i++])) {
              curValue = getClass(elem);
              cur = elem.nodeType === 1 &&
                (" " + curValue + " ").replace(rclass, " ");

              if (cur) {
                j = 0;
                while ((clazz = classes[j++])) {
                  if (cur.indexOf(" " + clazz + " ") < 0) {
                    cur += clazz + " ";
                  }
                }

                // Only assign if different to avoid unneeded rendering.
                finalValue = jQuery.trim(cur);
                if (curValue !== finalValue) {
                  elem.setAttribute("class", finalValue);
                }
              }
            }
          }

          return this;
        },

        removeClass: function(value) {
          var classes, elem, cur, curValue, clazz, j, finalValue,
            i = 0;

          if (jQuery.isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).removeClass(value.call(this, j, getClass(this)));
            });
          }

          if (!arguments.length) {
            return this.attr("class", "");
          }

          if (typeof value === "string" && value) {
            classes = value.match(rnotwhite) || [];

            while ((elem = this[i++])) {
              curValue = getClass(elem);

              // This expression is here for better compressibility (see addClass)
              cur = elem.nodeType === 1 &&
                (" " + curValue + " ").replace(rclass, " ");

              if (cur) {
                j = 0;
                while ((clazz = classes[j++])) {

                  // Remove *all* instances
                  while (cur.indexOf(" " + clazz + " ") > -1) {
                    cur = cur.replace(" " + clazz + " ", " ");
                  }
                }

                // Only assign if different to avoid unneeded rendering.
                finalValue = jQuery.trim(cur);
                if (curValue !== finalValue) {
                  elem.setAttribute("class", finalValue);
                }
              }
            }
          }

          return this;
        },

        toggleClass: function(value, stateVal) {
          var type = typeof value;

          if (typeof stateVal === "boolean" && type === "string") {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }

          if (jQuery.isFunction(value)) {
            return this.each(function(i) {
              jQuery(this).toggleClass(
                value.call(this, i, getClass(this), stateVal),
                stateVal
              );
            });
          }

          return this.each(function() {
            var className, i, self, classNames;

            if (type === "string") {

              // Toggle individual class names
              i = 0;
              self = jQuery(this);
              classNames = value.match(rnotwhite) || [];

              while ((className = classNames[i++])) {

                // Check each className given, space separated list
                if (self.hasClass(className)) {
                  self.removeClass(className);
                } else {
                  self.addClass(className);
                }
              }

              // Toggle whole class name
            } else if (value === undefined || type === "boolean") {
              className = getClass(this);
              if (className) {

                // Store className if set
                dataPriv.set(this, "__className__", className);
              }

              // If the element has a class name or if we're passed `false`,
              // then remove the whole classname (if there was one, the above saved it).
              // Otherwise bring back whatever was previously saved (if anything),
              // falling back to the empty string if nothing was stored.
              if (this.setAttribute) {
                this.setAttribute("class",
                  className || value === false ?
                  "" :
                  dataPriv.get(this, "__className__") || ""
                );
              }
            }
          });
        },

        hasClass: function(selector) {
          var className, elem,
            i = 0;

          className = " " + selector + " ";
          while ((elem = this[i++])) {
            if (elem.nodeType === 1 &&
              (" " + getClass(elem) + " ").replace(rclass, " ")
              .indexOf(className) > -1
            ) {
              return true;
            }
          }

          return false;
        }
      });

      var rreturn = /\r/g,
        rspaces = /[\x20\t\r\n\f]+/g;

      jQuery.fn.extend({
        val: function(value) {
          var hooks, ret, isFunction,
            elem = this[0];

          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] ||
                jQuery.valHooks[elem.nodeName.toLowerCase()];

              if (hooks &&
                "get" in hooks &&
                (ret = hooks.get(elem, "value")) !== undefined
              ) {
                return ret;
              }

              ret = elem.value;

              return typeof ret === "string" ?

                // Handle most common string cases
                ret.replace(rreturn, "") :

                // Handle cases where value is null/undef or number
                ret == null ? "" : ret;
            }

            return;
          }

          isFunction = jQuery.isFunction(value);

          return this.each(function(i) {
            var val;

            if (this.nodeType !== 1) {
              return;
            }

            if (isFunction) {
              val = value.call(this, i, jQuery(this).val());
            } else {
              val = value;
            }

            // Treat null/undefined as ""; convert numbers to string
            if (val == null) {
              val = "";

            } else if (typeof val === "number") {
              val += "";

            } else if (jQuery.isArray(val)) {
              val = jQuery.map(val, function(value) {
                return value == null ? "" : value + "";
              });
            }

            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

            // If set returns undefined, fall back to normal setting
            if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
              this.value = val;
            }
          });
        }
      });

      jQuery.extend({
        valHooks: {
          option: {
            get: function(elem) {

              var val = jQuery.find.attr(elem, "value");
              return val != null ?
                val :

                // Support: IE10-11+
                // option.text throws exceptions (#14686, #14858)
                // Strip and collapse whitespace
                // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                jQuery.trim(jQuery.text(elem)).replace(rspaces, " ");
            }
          },
          select: {
            get: function(elem) {
              var value, option,
                options = elem.options,
                index = elem.selectedIndex,
                one = elem.type === "select-one" || index < 0,
                values = one ? null : [],
                max = one ? index + 1 : options.length,
                i = index < 0 ?
                max :
                one ? index : 0;

              // Loop through all the selected options
              for (; i < max; i++) {
                option = options[i];

                // IE8-9 doesn't update selected after form reset (#2551)
                if ((option.selected || i === index) &&

                  // Don't return options that are disabled or in a disabled optgroup
                  (support.optDisabled ?
                    !option.disabled : option.getAttribute("disabled") === null) &&
                  (!option.parentNode.disabled ||
                    !jQuery.nodeName(option.parentNode, "optgroup"))) {

                  // Get the specific value for the option
                  value = jQuery(option).val();

                  // We don't need an array for one selects
                  if (one) {
                    return value;
                  }

                  // Multi-Selects return an array
                  values.push(value);
                }
              }

              return values;
            },

            set: function(elem, value) {
              var optionSet, option,
                options = elem.options,
                values = jQuery.makeArray(value),
                i = options.length;

              while (i--) {
                option = options[i];
                if (option.selected =
                  jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1
                ) {
                  optionSet = true;
                }
              }

              // Force browsers to behave consistently when non-matching value is set
              if (!optionSet) {
                elem.selectedIndex = -1;
              }
              return values;
            }
          }
        }
      });

      // Radios and checkboxes getter/setter
      jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = {
          set: function(elem, value) {
            if (jQuery.isArray(value)) {
              return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1);
            }
          }
        };
        if (!support.checkOn) {
          jQuery.valHooks[this].get = function(elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
          };
        }
      });

      // Return jQuery for attributes-only inclusion

      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

      jQuery.extend(jQuery.event, {

        trigger: function(event, data, elem, onlyHandlers) {

          var i, cur, tmp, bubbleType, ontype, handle, special,
            eventPath = [elem || document],
            type = hasOwn.call(event, "type") ? event.type : event,
            namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

          cur = tmp = elem = elem || document;

          // Don't do events on text and comment nodes
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return;
          }

          // focus/blur morphs to focusin/out; ensure we're not firing them right now
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return;
          }

          if (type.indexOf(".") > -1) {

            // Namespaced trigger; create a regexp to match event type in handle()
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
          }
          ontype = type.indexOf(":") < 0 && "on" + type;

          // Caller can pass in a jQuery.Event object, Object, or just an event type string
          event = event[jQuery.expando] ?
            event :
            new jQuery.Event(type, typeof event === "object" && event);

          // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join(".");
          event.rnamespace = event.namespace ?
            new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
            null;

          // Clean up the event in case it is being reused
          event.result = undefined;
          if (!event.target) {
            event.target = elem;
          }

          // Clone any incoming data and prepend the event, creating the handler arg list
          data = data == null ? [event] :
            jQuery.makeArray(data, [event]);

          // Allow special events to draw outside the lines
          special = jQuery.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return;
          }

          // Determine event propagation path in advance, per W3C events spec (#9951)
          // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
          if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            }

            // Only add window if we got to document (e.g., not plain obj or detached DOM)
            if (tmp === (elem.ownerDocument || document)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window);
            }
          }

          // Fire handlers on the event path
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

            event.type = i > 1 ?
              bubbleType :
              special.bindType || type;

            // jQuery handler
            handle = (dataPriv.get(cur, "events") || {})[event.type] &&
              dataPriv.get(cur, "handle");
            if (handle) {
              handle.apply(cur, data);
            }

            // Native handler
            handle = ontype && cur[ontype];
            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data);
              if (event.result === false) {
                event.preventDefault();
              }
            }
          }
          event.type = type;

          // If nobody prevented the default action, do it now
          if (!onlyHandlers && !event.isDefaultPrevented()) {

            if ((!special._default ||
                special._default.apply(eventPath.pop(), data) === false) &&
              acceptData(elem)) {

              // Call a native DOM method on the target with the same name name as the event.
              // Don't do default actions on window, that's where global variables be (#6170)
              if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

                // Don't re-trigger an onFOO event when we call its FOO() method
                tmp = elem[ontype];

                if (tmp) {
                  elem[ontype] = null;
                }

                // Prevent re-triggering of the same event, since we already bubbled it above
                jQuery.event.triggered = type;
                elem[type]();
                jQuery.event.triggered = undefined;

                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }

          return event.result;
        },

        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function(type, elem, event) {
          var e = jQuery.extend(
            new jQuery.Event(),
            event, {
              type: type,
              isSimulated: true
            }
          );

          jQuery.event.trigger(e, null, elem);
        }

      });

      jQuery.fn.extend({

        trigger: function(type, data) {
          return this.each(function() {
            jQuery.event.trigger(type, data, this);
          });
        },
        triggerHandler: function(type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true);
          }
        }
      });

      jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
          "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
          "change select submit keydown keypress keyup error contextmenu").split(" "),
        function(i, name) {

          // Handle event binding
          jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ?
              this.on(name, null, data, fn) :
              this.trigger(name);
          };
        });

      jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
      });

      support.focusin = "onfocusin" in window;

      // Support: Firefox
      // Firefox doesn't have focus(in | out) events
      // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
      //
      // Support: Chrome, Safari
      // focus(in | out) events fire after focus & blur events,
      // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
      // Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
      if (!support.focusin) {
        jQuery.each({ focus: "focusin", blur: "focusout" }, function(orig, fix) {

          // Attach a single capturing handler on the document while someone wants focusin/focusout
          var handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
          };

          jQuery.event.special[fix] = {
            setup: function() {
              var doc = this.ownerDocument || this,
                attaches = dataPriv.access(doc, fix);

              if (!attaches) {
                doc.addEventListener(orig, handler, true);
              }
              dataPriv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown: function() {
              var doc = this.ownerDocument || this,
                attaches = dataPriv.access(doc, fix) - 1;

              if (!attaches) {
                doc.removeEventListener(orig, handler, true);
                dataPriv.remove(doc, fix);

              } else {
                dataPriv.access(doc, fix, attaches);
              }
            }
          };
        });
      }
      var location = window.location;

      var nonce = jQuery.now();

      var rquery = (/\?/);

      // Support: Android 2.3
      // Workaround failure to string-cast null input
      jQuery.parseJSON = function(data) {
        return JSON.parse(data + "");
      };

      // Cross-browser xml parsing
      jQuery.parseXML = function(data) {
        var xml;
        if (!data || typeof data !== "string") {
          return null;
        }

        // Support: IE9
        try {
          xml = (new window.DOMParser()).parseFromString(data, "text/xml");
        } catch (e) {
          xml = undefined;
        }

        if (!xml || xml.getElementsByTagName("parsererror").length) {
          jQuery.error("Invalid XML: " + data);
        }
        return xml;
      };

      var
        rhash = /#.*$/,
        rts = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,

        /* Prefilters
         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
         * 2) These are called:
         *    - BEFORE asking for a transport
         *    - AFTER param serialization (s.data is a string if s.processData is true)
         * 3) key is the dataType
         * 4) the catchall symbol "*" can be used
         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
         */
        prefilters = {},

        /* Transports bindings
         * 1) key is the dataType
         * 2) the catchall symbol "*" can be used
         * 3) selection will start with transport dataType and THEN go to "*" if needed
         */
        transports = {},

        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = "*/".concat("*"),

        // Anchor tag for parsing the document origin
        originAnchor = document.createElement("a");
      originAnchor.href = location.href;

      // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
      function addToPrefiltersOrTransports(structure) {

        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {

          if (typeof dataTypeExpression !== "string") {
            func = dataTypeExpression;
            dataTypeExpression = "*";
          }

          var dataType,
            i = 0,
            dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

          if (jQuery.isFunction(func)) {

            // For each dataType in the dataTypeExpression
            while ((dataType = dataTypes[i++])) {

              // Prepend if requested
              if (dataType[0] === "+") {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);

                // Otherwise append
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      }

      // Base inspection function for prefilters and transports
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

        var inspected = {},
          seekingTransport = (structure === transports);

        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === "string" &&
              !seekingTransport && !inspected[dataTypeOrTransport]) {

              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
      }

      // A special extend for ajax options
      // that takes "flat" options (not to be deep extended)
      // Fixes #9887
      function ajaxExtend(target, src) {
        var key, deep,
          flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for (key in src) {
          if (src[key] !== undefined) {
            (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep);
        }

        return target;
      }

      /* Handles responses to an ajax request:
       * - finds the right dataType (mediates between content-type and expected dataType)
       * - returns the corresponding response
       */
      function ajaxHandleResponses(s, jqXHR, responses) {

        var ct, type, finalDataType, firstDataType,
          contents = s.contents,
          dataTypes = s.dataTypes;

        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === "*") {
          dataTypes.shift();
          if (ct === undefined) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
          }
        }

        // Check if we're dealing with a known content-type
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        }

        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {

          // Try convertible dataTypes
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
              finalDataType = type;
              break;
            }
            if (!firstDataType) {
              firstDataType = type;
            }
          }

          // Or just use first one
          finalDataType = finalDataType || firstDataType;
        }

        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }
          return responses[finalDataType];
        }
      }

      /* Chain conversions given the request and the original response
       * Also sets the responseXXX fields on the jqXHR instance
       */
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev,
          converters = {},

          // Work with a copy of dataTypes in case we need to modify it for conversion
          dataTypes = s.dataTypes.slice();

        // Create converters map with lowercased keys
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }

        current = dataTypes.shift();

        // Convert to each sequential dataType
        while (current) {

          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response;
          }

          // Apply the dataFilter if provided
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
          }

          prev = current;
          current = dataTypes.shift();

          if (current) {

            // There's only work to do if current dataType is non-auto
            if (current === "*") {

              current = prev;

              // Convert response if prev dataType is non-auto and differs from current
            } else if (prev !== "*" && prev !== current) {

              // Seek a direct converter
              conv = converters[prev + " " + current] || converters["* " + current];

              // If none found, seek a pair
              if (!conv) {
                for (conv2 in converters) {

                  // If conv2 outputs current
                  tmp = conv2.split(" ");
                  if (tmp[1] === current) {

                    // If prev can be converted to accepted input
                    conv = converters[prev + " " + tmp[0]] ||
                      converters["* " + tmp[0]];
                    if (conv) {

                      // Condense equivalence converters
                      if (conv === true) {
                        conv = converters[conv2];

                        // Otherwise, insert the intermediate dataType
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }
                      break;
                    }
                  }
                }
              }

              // Apply converter (if not an equivalence)
              if (conv !== true) {

                // Unless errors are allowed to bubble, catch and return them
                if (conv && s.throws) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e) {
                    return {
                      state: "parsererror",
                      error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                  }
                }
              }
            }
          }
        }

        return { state: "success", data: response };
      }

      jQuery.extend({

        // Counter for holding the number of active queries
        active: 0,

        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},

        ajaxSettings: {
          url: location.href,
          type: "GET",
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: "application/x-www-form-urlencoded; charset=UTF-8",
          /*
          timeout: 0,
          data: null,
          dataType: null,
          username: null,
          password: null,
          cache: null,
          throws: false,
          traditional: false,
          headers: {},
          */

          accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
          },

          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },

          responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
          },

          // Data converters
          // Keys separate source (or catchall "*") and destination types with a single space
          converters: {

            // Convert anything to text
            "* text": String,

            // Text to html (true = no transformation)
            "text html": true,

            // Evaluate text as a json expression
            "text json": jQuery.parseJSON,

            // Parse text as xml
            "text xml": jQuery.parseXML
          },

          // For options that shouldn't be deep extended:
          // you can add your own custom options here if
          // and when you create one that shouldn't be
          // deep extended (see ajaxExtend)
          flatOptions: {
            url: true,
            context: true
          }
        },

        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function(target, settings) {
          return settings ?

            // Building a settings object
            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

            // Extending ajaxSettings
            ajaxExtend(jQuery.ajaxSettings, target);
        },

        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),

        // Main method
        ajax: function(url, options) {

          // If url is an object, simulate pre-1.5 signature
          if (typeof url === "object") {
            options = url;
            url = undefined;
          }

          // Force options to be an object
          options = options || {};

          var transport,

            // URL without anti-cache param
            cacheURL,

            // Response headers
            responseHeadersString,
            responseHeaders,

            // timeout handle
            timeoutTimer,

            // Url cleanup var
            urlAnchor,

            // To know if global events are to be dispatched
            fireGlobals,

            // Loop variable
            i,

            // Create the final options object
            s = jQuery.ajaxSetup({}, options),

            // Callbacks context
            callbackContext = s.context || s,

            // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context &&
            (callbackContext.nodeType || callbackContext.jquery) ?
            jQuery(callbackContext) :
            jQuery.event,

            // Deferreds
            deferred = jQuery.Deferred(),
            completeDeferred = jQuery.Callbacks("once memory"),

            // Status-dependent callbacks
            statusCode = s.statusCode || {},

            // Headers (they are sent all at once)
            requestHeaders = {},
            requestHeadersNames = {},

            // The jqXHR state
            state = 0,

            // Default abort message
            strAbort = "canceled",

            // Fake xhr
            jqXHR = {
              readyState: 0,

              // Builds headers hashtable if needed
              getResponseHeader: function(key) {
                var match;
                if (state === 2) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while ((match = rheaders.exec(responseHeadersString))) {
                      responseHeaders[match[1].toLowerCase()] = match[2];
                    }
                  }
                  match = responseHeaders[key.toLowerCase()];
                }
                return match == null ? null : match;
              },

              // Raw string
              getAllResponseHeaders: function() {
                return state === 2 ? responseHeadersString : null;
              },

              // Caches the header
              setRequestHeader: function(name, value) {
                var lname = name.toLowerCase();
                if (!state) {
                  name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                  requestHeaders[name] = value;
                }
                return this;
              },

              // Overrides response content-type header
              overrideMimeType: function(type) {
                if (!state) {
                  s.mimeType = type;
                }
                return this;
              },

              // Status-dependent callbacks
              statusCode: function(map) {
                var code;
                if (map) {
                  if (state < 2) {
                    for (code in map) {

                      // Lazy-add the new callback in a way that preserves old ones
                      statusCode[code] = [statusCode[code], map[code]];
                    }
                  } else {

                    // Execute the appropriate callbacks
                    jqXHR.always(map[jqXHR.status]);
                  }
                }
                return this;
              },

              // Cancel the request
              abort: function(statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText);
                }
                done(0, finalText);
                return this;
              }
            };

          // Attach deferreds
          deferred.promise(jqXHR).complete = completeDeferred.add;
          jqXHR.success = jqXHR.done;
          jqXHR.error = jqXHR.fail;

          // Remove hash character (#7531: and string promotion)
          // Add protocol if not provided (prefilters might expect it)
          // Handle falsy url in the settings object (#10093: consistency with old signature)
          // We also use the url parameter if available
          s.url = ((url || s.url || location.href) + "").replace(rhash, "")
            .replace(rprotocol, location.protocol + "//");

          // Alias method option to type as per ticket #12004
          s.type = options.method || options.type || s.method || s.type;

          // Extract dataTypes list
          s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

          // A cross-domain request is in order when the origin doesn't match the current origin.
          if (s.crossDomain == null) {
            urlAnchor = document.createElement("a");

            // Support: IE8-11+
            // IE throws exception if url is malformed, e.g. http://example.com:80x/
            try {
              urlAnchor.href = s.url;

              // Support: IE8-11+
              // Anchor's host property isn't correctly set when s.url is relative
              urlAnchor.href = urlAnchor.href;
              s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
                urlAnchor.protocol + "//" + urlAnchor.host;
            } catch (e) {

              // If there is an error parsing the URL, assume it is crossDomain,
              // it can be rejected by the transport if it is invalid
              s.crossDomain = true;
            }
          }

          // Convert data if not already a string
          if (s.data && s.processData && typeof s.data !== "string") {
            s.data = jQuery.param(s.data, s.traditional);
          }

          // Apply prefilters
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

          // If request was aborted inside a prefilter, stop there
          if (state === 2) {
            return jqXHR;
          }

          // We can fire global events as of now if asked to
          // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
          fireGlobals = jQuery.event && s.global;

          // Watch for a new set of requests
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger("ajaxStart");
          }

          // Uppercase the type
          s.type = s.type.toUpperCase();

          // Determine if request has content
          s.hasContent = !rnoContent.test(s.type);

          // Save the URL in case we're toying with the If-Modified-Since
          // and/or If-None-Match header later on
          cacheURL = s.url;

          // More options handling for requests with no content
          if (!s.hasContent) {

            // If data is available, append data to url
            if (s.data) {
              cacheURL = (s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data);

              // #9682: remove data so that it's not used in an eventual retry
              delete s.data;
            }

            // Add anti-cache in url if needed
            if (s.cache === false) {
              s.url = rts.test(cacheURL) ?

                // If there is already a '_' parameter, set its value
                cacheURL.replace(rts, "$1_=" + nonce++) :

                // Otherwise add one to the end
                cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
            }
          }

          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
          }

          // Set the correct header, if data is being sent
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader("Content-Type", s.contentType);
          }

          // Set the Accepts header for the server, depending on the dataType
          jqXHR.setRequestHeader(
            "Accept",
            s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
            s.accepts[s.dataTypes[0]] +
            (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
            s.accepts["*"]
          );

          // Check for headers option
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          }

          // Allow custom headers/mimetypes and early abort
          if (s.beforeSend &&
            (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {

            // Abort if not done already and return
            return jqXHR.abort();
          }

          // Aborting is no longer a cancellation
          strAbort = "abort";

          // Install callbacks on deferreds
          for (i in { success: 1, error: 1, complete: 1 }) {
            jqXHR[i](s[i]);
          }

          // Get transport
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

          // If no transport, we auto-abort
          if (!transport) {
            done(-1, "No Transport");
          } else {
            jqXHR.readyState = 1;

            // Send global event
            if (fireGlobals) {
              globalEventContext.trigger("ajaxSend", [jqXHR, s]);
            }

            // If request was aborted inside ajaxSend, stop there
            if (state === 2) {
              return jqXHR;
            }

            // Timeout
            if (s.async && s.timeout > 0) {
              timeoutTimer = window.setTimeout(function() {
                jqXHR.abort("timeout");
              }, s.timeout);
            }

            try {
              state = 1;
              transport.send(requestHeaders, done);
            } catch (e) {

              // Propagate exception as error if not done
              if (state < 2) {
                done(-1, e);

                // Simply rethrow otherwise
              } else {
                throw e;
              }
            }
          }

          // Callback for when everything is done
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error, response, modified,
              statusText = nativeStatusText;

            // Called once
            if (state === 2) {
              return;
            }

            // State is "done" now
            state = 2;

            // Clear timeout if it exists
            if (timeoutTimer) {
              window.clearTimeout(timeoutTimer);
            }

            // Dereference transport for early garbage collection
            // (no matter how long the jqXHR object will be used)
            transport = undefined;

            // Cache response headers
            responseHeadersString = headers || "";

            // Set readyState
            jqXHR.readyState = status > 0 ? 4 : 0;

            // Determine if successful
            isSuccess = status >= 200 && status < 300 || status === 304;

            // Get response data
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses);
            }

            // Convert no matter what (that way responseXXX fields are always set)
            response = ajaxConvert(s, response, jqXHR, isSuccess);

            // If successful, handle type chaining
            if (isSuccess) {

              // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader("Last-Modified");
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified;
                }
                modified = jqXHR.getResponseHeader("etag");
                if (modified) {
                  jQuery.etag[cacheURL] = modified;
                }
              }

              // if no content
              if (status === 204 || s.type === "HEAD") {
                statusText = "nocontent";

                // if not modified
              } else if (status === 304) {
                statusText = "notmodified";

                // If we have data, let's convert it
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
              }
            } else {

              // Extract error from statusText and normalize for non-aborts
              error = statusText;
              if (status || !statusText) {
                statusText = "error";
                if (status < 0) {
                  status = 0;
                }
              }
            }

            // Set data for the fake xhr object
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + "";

            // Success/Error
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
            } else {
              deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
            }

            // Status-dependent callbacks
            jqXHR.statusCode(statusCode);
            statusCode = undefined;

            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError",
                [jqXHR, s, isSuccess ? success : error]);
            }

            // Complete
            completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

            if (fireGlobals) {
              globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

              // Handle the global AJAX counter
              if (!(--jQuery.active)) {
                jQuery.event.trigger("ajaxStop");
              }
            }
          }

          return jqXHR;
        },

        getJSON: function(url, data, callback) {
          return jQuery.get(url, data, callback, "json");
        },

        getScript: function(url, callback) {
          return jQuery.get(url, undefined, callback, "script");
        }
      });

      jQuery.each(["get", "post"], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {

          // Shift arguments if data argument was omitted
          if (jQuery.isFunction(data)) {
            type = type || callback;
            callback = data;
            data = undefined;
          }

          // The url can be an options object (which then must have .url)
          return jQuery.ajax(jQuery.extend({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
          }, jQuery.isPlainObject(url) && url));
        };
      });

      jQuery._evalUrl = function(url) {
        return jQuery.ajax({
          url: url,

          // Make this explicit, since user can override this through ajaxSetup (#11264)
          type: "GET",
          dataType: "script",
          async: false,
          global: false,
          "throws": true
        });
      };

      jQuery.fn.extend({
        wrapAll: function(html) {
          var wrap;

          if (jQuery.isFunction(html)) {
            return this.each(function(i) {
              jQuery(this).wrapAll(html.call(this, i));
            });
          }

          if (this[0]) {

            // The elements to wrap the target around
            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }

            wrap.map(function() {
              var elem = this;

              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }

              return elem;
            }).append(this);
          }

          return this;
        },

        wrapInner: function(html) {
          if (jQuery.isFunction(html)) {
            return this.each(function(i) {
              jQuery(this).wrapInner(html.call(this, i));
            });
          }

          return this.each(function() {
            var self = jQuery(this),
              contents = self.contents();

            if (contents.length) {
              contents.wrapAll(html);

            } else {
              self.append(html);
            }
          });
        },

        wrap: function(html) {
          var isFunction = jQuery.isFunction(html);

          return this.each(function(i) {
            jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
          });
        },

        unwrap: function() {
          return this.parent().each(function() {
            if (!jQuery.nodeName(this, "body")) {
              jQuery(this).replaceWith(this.childNodes);
            }
          }).end();
        }
      });

      jQuery.expr.filters.hidden = function(elem) {
        return !jQuery.expr.filters.visible(elem);
      };
      jQuery.expr.filters.visible = function(elem) {

        // Support: Opera <= 12.12
        // Opera reports offsetWidths and offsetHeights less than zero on some elements
        // Use OR instead of AND as the element is not visible if either is true
        // See tickets #10406 and #13132
        return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
      };

      var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;

      function buildParams(prefix, obj, traditional, add) {
        var name;

        if (jQuery.isArray(obj)) {

          // Serialize array item.
          jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) {

              // Treat each array item as a scalar.
              add(prefix, v);

            } else {

              // Item is non-scalar (array or object), encode its numeric index.
              buildParams(
                prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
                v,
                traditional,
                add
              );
            }
          });

        } else if (!traditional && jQuery.type(obj) === "object") {

          // Serialize object item.
          for (name in obj) {
            buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
          }

        } else {

          // Serialize scalar item.
          add(prefix, obj);
        }
      }

      // Serialize an array of form elements or a set of
      // key/values into a query string
      jQuery.param = function(a, traditional) {
        var prefix,
          s = [],
          add = function(key, value) {

            // If value is a function, invoke it and return its value
            value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
          };

        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if (traditional === undefined) {
          traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }

        // If an array was passed in, assume that it is an array of form elements.
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {

          // Serialize the form elements
          jQuery.each(a, function() {
            add(this.name, this.value);
          });

        } else {

          // If traditional, encode the "old" way (the way 1.3.2 or older
          // did it), otherwise encode params recursively.
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add);
          }
        }

        // Return the resulting serialization
        return s.join("&").replace(r20, "+");
      };

      jQuery.fn.extend({
        serialize: function() {
          return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
          return this.map(function() {

              // Can add propHook for "elements" to filter or add form elements
              var elements = jQuery.prop(this, "elements");
              return elements ? jQuery.makeArray(elements) : this;
            })
            .filter(function() {
              var type = this.type;

              // Use .is( ":disabled" ) so that fieldset[disabled] works
              return this.name && !jQuery(this).is(":disabled") &&
                rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
                (this.checked || !rcheckableType.test(type));
            })
            .map(function(i, elem) {
              var val = jQuery(this).val();

              return val == null ?
                null :
                jQuery.isArray(val) ?
                jQuery.map(val, function(val) {
                  return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
                }) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            }).get();
        }
      });

      jQuery.ajaxSettings.xhr = function() {
        try {
          return new window.XMLHttpRequest();
        } catch (e) {}
      };

      var xhrSuccessStatus = {

          // File protocol always yields status code 0, assume 200
          0: 200,

          // Support: IE9
          // #1450: sometimes IE returns 1223 when it should be 204
          1223: 204
        },
        xhrSupported = jQuery.ajaxSettings.xhr();

      support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
      support.ajax = xhrSupported = !!xhrSupported;

      jQuery.ajaxTransport(function(options) {
        var callback, errorCallback;

        // Cross domain only allowed if supported through XMLHttpRequest
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function(headers, complete) {
              var i,
                xhr = options.xhr();

              xhr.open(
                options.type,
                options.url,
                options.async,
                options.username,
                options.password
              );

              // Apply custom fields if provided
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i];
                }
              }

              // Override mime type if needed
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              }

              // X-Requested-With header
              // For cross-domain requests, seeing as conditions for a preflight are
              // akin to a jigsaw puzzle, we simply never set it to be sure.
              // (it can always be set on a per-request basis or even using ajaxSetup)
              // For same-domain requests, won't change header if already provided.
              if (!options.crossDomain && !headers["X-Requested-With"]) {
                headers["X-Requested-With"] = "XMLHttpRequest";
              }

              // Set headers
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              }

              // Callback
              callback = function(type) {
                return function() {
                  if (callback) {
                    callback = errorCallback = xhr.onload =
                      xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

                    if (type === "abort") {
                      xhr.abort();
                    } else if (type === "error") {

                      // Support: IE9
                      // On a manual native abort, IE9 throws
                      // errors on any property access that is not readyState
                      if (typeof xhr.status !== "number") {
                        complete(0, "error");
                      } else {
                        complete(

                          // File: protocol always yields status 0; see #8605, #14207
                          xhr.status,
                          xhr.statusText
                        );
                      }
                    } else {
                      complete(
                        xhrSuccessStatus[xhr.status] || xhr.status,
                        xhr.statusText,

                        // Support: IE9 only
                        // IE9 has no XHR2 but throws on binary (trac-11426)
                        // For XHR2 non-text, let the caller handle it (gh-2498)
                        (xhr.responseType || "text") !== "text" ||
                        typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText },
                        xhr.getAllResponseHeaders()
                      );
                    }
                  }
                };
              };

              // Listen to events
              xhr.onload = callback();
              errorCallback = xhr.onerror = callback("error");

              // Support: IE9
              // Use onreadystatechange to replace onabort
              // to handle uncaught aborts
              if (xhr.onabort !== undefined) {
                xhr.onabort = errorCallback;
              } else {
                xhr.onreadystatechange = function() {

                  // Check readyState before timeout as it changes
                  if (xhr.readyState === 4) {

                    // Allow onerror to be called first,
                    // but that will not handle a native abort
                    // Also, save errorCallback to a variable
                    // as xhr.onerror cannot be accessed
                    window.setTimeout(function() {
                      if (callback) {
                        errorCallback();
                      }
                    });
                  }
                };
              }

              // Create the abort callback
              callback = callback("abort");

              try {

                // Do send the request (this may raise an exception)
                xhr.send(options.hasContent && options.data || null);
              } catch (e) {

                // #14683: Only rethrow if this hasn't been notified as an error yet
                if (callback) {
                  throw e;
                }
              }
            },

            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });

      // Install script dataType
      jQuery.ajaxSetup({
        accepts: {
          script: "text/javascript, application/javascript, " +
            "application/ecmascript, application/x-ecmascript"
        },
        contents: {
          script: /\b(?:java|ecma)script\b/
        },
        converters: {
          "text script": function(text) {
            jQuery.globalEval(text);
            return text;
          }
        }
      });

      // Handle cache's special case and crossDomain
      jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
          s.cache = false;
        }
        if (s.crossDomain) {
          s.type = "GET";
        }
      });

      // Bind script tag hack transport
      jQuery.ajaxTransport("script", function(s) {

        // This transport only deals with cross domain requests
        if (s.crossDomain) {
          var script, callback;
          return {
            send: function(_, complete) {
              script = jQuery("<script>").prop({
                charset: s.scriptCharset,
                src: s.url
              }).on(
                "load error",
                callback = function(evt) {
                  script.remove();
                  callback = null;
                  if (evt) {
                    complete(evt.type === "error" ? 404 : 200, evt.type);
                  }
                }
              );

              // Use native DOM manipulation to avoid our domManip AJAX trickery
              document.head.appendChild(script[0]);
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });

      var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;

      // Default jsonp settings
      jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
          var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
          this[callback] = true;
          return callback;
        }
      });

      // Detect, normalize options and install callbacks for jsonp requests
      jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {

        var callbackName, overwritten, responseContainer,
          jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
            "url" :
            typeof s.data === "string" &&
            (s.contentType || "")
            .indexOf("application/x-www-form-urlencoded") === 0 &&
            rjsonp.test(s.data) && "data"
          );

        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {

          // Get callback name, remembering preexisting value associated with it
          callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
            s.jsonpCallback() :
            s.jsonpCallback;

          // Insert callback into url or form data
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
          }

          // Use data converter to retrieve json after script execution
          s.converters["script json"] = function() {
            if (!responseContainer) {
              jQuery.error(callbackName + " was not called");
            }
            return responseContainer[0];
          };

          // Force json dataType
          s.dataTypes[0] = "json";

          // Install callback
          overwritten = window[callbackName];
          window[callbackName] = function() {
            responseContainer = arguments;
          };

          // Clean-up function (fires after converters)
          jqXHR.always(function() {

            // If previous value didn't exist - remove it
            if (overwritten === undefined) {
              jQuery(window).removeProp(callbackName);

              // Otherwise restore preexisting value
            } else {
              window[callbackName] = overwritten;
            }

            // Save back as free
            if (s[callbackName]) {

              // Make sure that re-using the options doesn't screw things around
              s.jsonpCallback = originalSettings.jsonpCallback;

              // Save the callback name for future use
              oldCallbacks.push(callbackName);
            }

            // Call if it was a function and we have a response
            if (responseContainer && jQuery.isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }

            responseContainer = overwritten = undefined;
          });

          // Delegate to script
          return "script";
        }
      });

      // Argument "data" should be string of html
      // context (optional): If specified, the fragment will be created in this context,
      // defaults to document
      // keepScripts (optional): If true, will include scripts passed in the html string
      jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || typeof data !== "string") {
          return null;
        }
        if (typeof context === "boolean") {
          keepScripts = context;
          context = false;
        }
        context = context || document;

        var parsed = rsingleTag.exec(data),
          scripts = !keepScripts && [];

        // Single tag
        if (parsed) {
          return [context.createElement(parsed[1])];
        }

        parsed = buildFragment([data], context, scripts);

        if (scripts && scripts.length) {
          jQuery(scripts).remove();
        }

        return jQuery.merge([], parsed.childNodes);
      };

      // Keep a copy of the old load method
      var _load = jQuery.fn.load;

      /**
       * Load a url into a page
       */
      jQuery.fn.load = function(url, params, callback) {
        if (typeof url !== "string" && _load) {
          return _load.apply(this, arguments);
        }

        var selector, type, response,
          self = this,
          off = url.indexOf(" ");

        if (off > -1) {
          selector = jQuery.trim(url.slice(off));
          url = url.slice(0, off);
        }

        // If it's a function
        if (jQuery.isFunction(params)) {

          // We assume that it's the callback
          callback = params;
          params = undefined;

          // Otherwise, build a param string
        } else if (params && typeof params === "object") {
          type = "POST";
        }

        // If we have elements to modify, make the request
        if (self.length > 0) {
          jQuery.ajax({
            url: url,

            // If "type" variable is undefined, then "GET" method will be used.
            // Make value of this field explicit since
            // user can override it through ajaxSetup method
            type: type || "GET",
            dataType: "html",
            data: params
          }).done(function(responseText) {

            // Save response for use in complete callback
            response = arguments;

            self.html(selector ?

              // If a selector was specified, locate the right elements in a dummy div
              // Exclude scripts to avoid IE 'Permission Denied' errors
              jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

              // Otherwise use the full result
              responseText);

            // If the request succeeds, this function gets "data", "status", "jqXHR"
            // but they are ignored because response was set above.
            // If it fails, this function gets "jqXHR", "status", "error"
          }).always(callback && function(jqXHR, status) {
            self.each(function() {
              callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
            });
          });
        }

        return this;
      };

      // Attach a bunch of functions for handling common AJAX events
      jQuery.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
      ], function(i, type) {
        jQuery.fn[type] = function(fn) {
          return this.on(type, fn);
        };
      });

      jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
          return elem === fn.elem;
        }).length;
      };

      /**
       * Gets a window from an element
       */
      function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
      }

      jQuery.offset = {
        setOffset: function(elem, options, i) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
            position = jQuery.css(elem, "position"),
            curElem = jQuery(elem),
            props = {};

          // Set position first, in-case top/left are set even on static elem
          if (position === "static") {
            elem.style.position = "relative";
          }

          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, "top");
          curCSSLeft = jQuery.css(elem, "left");
          calculatePosition = (position === "absolute" || position === "fixed") &&
            (curCSSTop + curCSSLeft).indexOf("auto") > -1;

          // Need to be able to calculate position if either
          // top or left is auto and position is either absolute or fixed
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;

          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }

          if (jQuery.isFunction(options)) {

            // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
            options = options.call(elem, i, jQuery.extend({}, curOffset));
          }

          if (options.top != null) {
            props.top = (options.top - curOffset.top) + curTop;
          }
          if (options.left != null) {
            props.left = (options.left - curOffset.left) + curLeft;
          }

          if ("using" in options) {
            options.using.call(elem, props);

          } else {
            curElem.css(props);
          }
        }
      };

      jQuery.fn.extend({
        offset: function(options) {
          if (arguments.length) {
            return options === undefined ?
              this :
              this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
              });
          }

          var docElem, win,
            elem = this[0],
            box = { top: 0, left: 0 },
            doc = elem && elem.ownerDocument;

          if (!doc) {
            return;
          }

          docElem = doc.documentElement;

          // Make sure it's not a disconnected DOM node
          if (!jQuery.contains(docElem, elem)) {
            return box;
          }

          box = elem.getBoundingClientRect();
          win = getWindow(doc);
          return {
            top: box.top + win.pageYOffset - docElem.clientTop,
            left: box.left + win.pageXOffset - docElem.clientLeft
          };
        },

        position: function() {
          if (!this[0]) {
            return;
          }

          var offsetParent, offset,
            elem = this[0],
            parentOffset = { top: 0, left: 0 };

          // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
          // because it is its only offset parent
          if (jQuery.css(elem, "position") === "fixed") {

            // Assume getBoundingClientRect is there when computed position is fixed
            offset = elem.getBoundingClientRect();

          } else {

            // Get *real* offsetParent
            offsetParent = this.offsetParent();

            // Get correct offsets
            offset = this.offset();
            if (!jQuery.nodeName(offsetParent[0], "html")) {
              parentOffset = offsetParent.offset();
            }

            // Add offsetParent borders
            parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
            parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
          }

          // Subtract parent offsets and element margins
          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
            left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
          };
        },

        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function() {
          return this.map(function() {
            var offsetParent = this.offsetParent;

            while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.offsetParent;
            }

            return offsetParent || documentElement;
          });
        }
      });

      // Create scrollLeft and scrollTop methods
      jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
        var top = "pageYOffset" === prop;

        jQuery.fn[method] = function(val) {
          return access(this, function(elem, method, val) {
            var win = getWindow(elem);

            if (val === undefined) {
              return win ? win[prop] : elem[method];
            }

            if (win) {
              win.scrollTo(
                !top ? val : win.pageXOffset,
                top ? val : win.pageYOffset
              );

            } else {
              elem[method] = val;
            }
          }, method, val, arguments.length);
        };
      });

      // Support: Safari<7-8+, Chrome<37-44+
      // Add the top/left cssHooks using jQuery.fn.position
      // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
      // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
      // getComputedStyle returns percent when specified for top/left/bottom/right;
      // rather than make the css module depend on the offset module, just check for it here
      jQuery.each(["top", "left"], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,
          function(elem, computed) {
            if (computed) {
              computed = curCSS(elem, prop);

              // If curCSS returns percentage, fallback to offset
              return rnumnonpx.test(computed) ?
                jQuery(elem).position()[prop] + "px" :
                computed;
            }
          }
        );
      });

      // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
      jQuery.each({ Height: "height", Width: "width" }, function(name, type) {
        jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name },
          function(defaultExtra, funcName) {

            // Margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function(margin, value) {
              var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

              return access(this, function(elem, type, value) {
                var doc;

                if (jQuery.isWindow(elem)) {

                  // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                  // isn't a whole lot we can do. See pull request at this URL for discussion:
                  // https://github.com/jquery/jquery/pull/764
                  return elem.document.documentElement["client" + name];
                }

                // Get document width or height
                if (elem.nodeType === 9) {
                  doc = elem.documentElement;

                  // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                  // whichever is greatest
                  return Math.max(
                    elem.body["scroll" + name], doc["scroll" + name],
                    elem.body["offset" + name], doc["offset" + name],
                    doc["client" + name]
                  );
                }

                return value === undefined ?

                  // Get width or height on the element, requesting but not forcing parseFloat
                  jQuery.css(elem, type, extra) :

                  // Set width or height on the element
                  jQuery.style(elem, type, value, extra);
              }, type, chainable ? margin : undefined, chainable, null);
            };
          });
      });

      jQuery.fn.extend({

        bind: function(types, data, fn) {
          return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
          return this.off(types, null, fn);
        },

        delegate: function(selector, types, data, fn) {
          return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {

          // ( namespace ) or ( selector, types [, fn] )
          return arguments.length === 1 ?
            this.off(selector, "**") :
            this.off(types, selector || "**", fn);
        },
        size: function() {
          return this.length;
        }
      });

      jQuery.fn.andSelf = jQuery.fn.addBack;

      // Register as a named AMD module, since jQuery can be concatenated with other
      // files that may use define, but not via a proper concatenation script that
      // understands anonymous AMD modules. A named AMD is safest and most robust
      // way to register. Lowercase jquery is used because AMD module names are
      // derived from file names, and jQuery is normally delivered in a lowercase
      // file name. Do this after creating the global so that if an AMD module wants
      // to call noConflict to hide this version of jQuery, it will work.

      // Note that for maximum portability, libraries that are not jQuery should
      // declare themselves as anonymous modules, and avoid setting a global if an
      // AMD loader is present. jQuery is a special case. For more information, see
      // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

      if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
          return jQuery;
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
      }

      var

        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,

        // Map over the $ in case of overwrite
        _$ = window.$;

      jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
          window.$ = _$;
        }

        if (deep && window.jQuery === jQuery) {
          window.jQuery = _jQuery;
        }

        return jQuery;
      };

      // Expose jQuery and $ identifiers, even in AMD
      // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
      // and CommonJS for browser emulators (#13566)
      if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
      }

      return jQuery;
    }));

    /***/
  }),
  /* 204 */
  /***/
  (function(module, exports, __webpack_require__) {

    var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /* WEBPACK VAR INJECTION */
    (function(global) {
      /*
       *  base64.js
       *
       *  Licensed under the BSD 3-Clause License.
       *    http://opensource.org/licenses/BSD-3-Clause
       *
       *  References:
       *    http://en.wikipedia.org/wiki/Base64
       */
      ;
      (function(global, factory) {
        true
          ?
          module.exports = factory(global) :
          typeof define === 'function' && define.amd ?
          define(factory) : factory(global)
      }((
        typeof self !== 'undefined' ? self :
        typeof window !== 'undefined' ? window :
        typeof global !== 'undefined' ? global :
        this
      ), function(global) {
        'use strict';
        // existing version for noConflict()
        global = global || {};
        var _Base64 = global.Base64;
        var version = "2.6.4";
        // constants
        var b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        var b64tab = function(bin) {
          var t = {};
          for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
          return t;
        }(b64chars);
        var fromCharCode = String.fromCharCode;
        // encoder stuff
        var cb_utob = function(c) {
          if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 0x80 ? c :
              cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6)) +
                fromCharCode(0x80 | (cc & 0x3f))) :
              (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f)) +
                fromCharCode(0x80 | ((cc >>> 6) & 0x3f)) +
                fromCharCode(0x80 | (cc & 0x3f)));
          } else {
            var cc = 0x10000 +
              (c.charCodeAt(0) - 0xD800) * 0x400 +
              (c.charCodeAt(1) - 0xDC00);
            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07)) +
              fromCharCode(0x80 | ((cc >>> 12) & 0x3f)) +
              fromCharCode(0x80 | ((cc >>> 6) & 0x3f)) +
              fromCharCode(0x80 | (cc & 0x3f)));
          }
        };
        var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
        var utob = function(u) {
          return u.replace(re_utob, cb_utob);
        };
        var cb_encode = function(ccc) {
          var padlen = [0, 2, 1][ccc.length % 3],
            ord = ccc.charCodeAt(0) << 16 |
            ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8) |
            ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
            chars = [
              b64chars.charAt(ord >>> 18),
              b64chars.charAt((ord >>> 12) & 63),
              padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
              padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
            ];
          return chars.join('');
        };
        var btoa = global.btoa && typeof global.btoa == 'function' ?
          function(b) { return global.btoa(b) } : function(b) {
            if (b.match(/[^\x00-\xFF]/)) throw new RangeError(
              'The string contains invalid characters.'
            );
            return b.replace(/[\s\S]{1,3}/g, cb_encode);
          };
        var _encode = function(u) {
          return btoa(utob(String(u)));
        };
        var mkUriSafe = function(b64) {
          return b64.replace(/[+\/]/g, function(m0) {
            return m0 == '+' ? '-' : '_';
          }).replace(/=/g, '');
        };
        var encode = function(u, urisafe) {
          return urisafe ? mkUriSafe(_encode(u)) : _encode(u);
        };
        var encodeURI = function(u) { return encode(u, true) };
        var fromUint8Array;
        if (global.Uint8Array) fromUint8Array = function(a, urisafe) {
          // return btoa(fromCharCode.apply(null, a));
          var b64 = '';
          for (var i = 0, l = a.length; i < l; i += 3) {
            var a0 = a[i],
              a1 = a[i + 1],
              a2 = a[i + 2];
            var ord = a0 << 16 | a1 << 8 | a2;
            b64 += b64chars.charAt(ord >>> 18) +
              b64chars.charAt((ord >>> 12) & 63) +
              (typeof a1 != 'undefined' ?
                b64chars.charAt((ord >>> 6) & 63) : '=') +
              (typeof a2 != 'undefined' ?
                b64chars.charAt(ord & 63) : '=');
          }
          return urisafe ? mkUriSafe(b64) : b64;
        };
        // decoder stuff
        var re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
        var cb_btou = function(cccc) {
          switch (cccc.length) {
            case 4:
              var cp = ((0x07 & cccc.charCodeAt(0)) << 18) |
                ((0x3f & cccc.charCodeAt(1)) << 12) |
                ((0x3f & cccc.charCodeAt(2)) << 6) |
                (0x3f & cccc.charCodeAt(3)),
                offset = cp - 0x10000;
              return (fromCharCode((offset >>> 10) + 0xD800) +
                fromCharCode((offset & 0x3FF) + 0xDC00));
            case 3:
              return fromCharCode(
                ((0x0f & cccc.charCodeAt(0)) << 12) |
                ((0x3f & cccc.charCodeAt(1)) << 6) |
                (0x3f & cccc.charCodeAt(2))
              );
            default:
              return fromCharCode(
                ((0x1f & cccc.charCodeAt(0)) << 6) |
                (0x3f & cccc.charCodeAt(1))
              );
          }
        };
        var btou = function(b) {
          return b.replace(re_btou, cb_btou);
        };
        var cb_decode = function(cccc) {
          var len = cccc.length,
            padlen = len % 4,
            n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0) |
            (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0) |
            (len > 2 ? b64tab[cccc.charAt(2)] << 6 : 0) |
            (len > 3 ? b64tab[cccc.charAt(3)] : 0),
            chars = [
              fromCharCode(n >>> 16),
              fromCharCode((n >>> 8) & 0xff),
              fromCharCode(n & 0xff)
            ];
          chars.length -= [0, 0, 2, 1][padlen];
          return chars.join('');
        };
        var _atob = global.atob && typeof global.atob == 'function' ?
          function(a) { return global.atob(a) } : function(a) {
            return a.replace(/\S{1,4}/g, cb_decode);
          };
        var atob = function(a) {
          return _atob(String(a).replace(/[^A-Za-z0-9\+\/]/g, ''));
        };
        var _decode = function(a) { return btou(_atob(a)) };
        var _fromURI = function(a) {
          return String(a).replace(/[-_]/g, function(m0) {
            return m0 == '-' ? '+' : '/'
          }).replace(/[^A-Za-z0-9\+\/]/g, '');
        };
        var decode = function(a) {
          return _decode(_fromURI(a));
        };
        var toUint8Array;
        if (global.Uint8Array) toUint8Array = function(a) {
          return Uint8Array.from(atob(_fromURI(a)), function(c) {
            return c.charCodeAt(0);
          });
        };
        var noConflict = function() {
          var Base64 = global.Base64;
          global.Base64 = _Base64;
          return Base64;
        };
        // export Base64
        global.Base64 = {
          VERSION: version,
          atob: atob,
          btoa: btoa,
          fromBase64: decode,
          toBase64: encode,
          utob: utob,
          encode: encode,
          encodeURI: encodeURI,
          btou: btou,
          decode: decode,
          noConflict: noConflict,
          fromUint8Array: fromUint8Array,
          toUint8Array: toUint8Array
        };
        // if ES5 is available, make Base64.extendString() available
        if (typeof Object.defineProperty === 'function') {
          var noEnum = function(v) {
            return { value: v, enumerable: false, writable: true, configurable: true };
          };
          global.Base64.extendString = function() {
            Object.defineProperty(
              String.prototype, 'fromBase64', noEnum(function() {
                return decode(this)
              }));
            Object.defineProperty(
              String.prototype, 'toBase64', noEnum(function(urisafe) {
                return encode(this, urisafe)
              }));
            Object.defineProperty(
              String.prototype, 'toBase64URI', noEnum(function() {
                return encode(this, true)
              }));
          };
        }
        //
        // export Base64 to the namespace
        //
        if (global['Meteor']) { // Meteor.js
          Base64 = global.Base64;
        }
        // module.exports and AMD are mutually exclusive.
        // module.exports has precedence.
        if (typeof module !== 'undefined' && module.exports) {
          module.exports.Base64 = global.Base64;
        } else if (true) {
          // AMD. Register as an anonymous module.
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return global.Base64 }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }
        // that's it!
        return { Base64: global.Base64 }
      }));

      /* WEBPACK VAR INJECTION */
    }.call(exports, (function() { return this; }())))

    /***/
  }),
  /* 205 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _servicesVisualJobService = __webpack_require__(198);

    var _servicesVisualJobService2 = _interopRequireDefault(_servicesVisualJobService);

    var _servicesPageCheck = __webpack_require__(206);

    var PageCheck = _interopRequireWildcard(_servicesPageCheck);

    var _servicesSurveyService = __webpack_require__(209);

    var SurveyService = _interopRequireWildcard(_servicesSurveyService);

    var _servicesAmplitudeService = __webpack_require__(214);

    var amplitudeService = _interopRequireWildcard(_servicesAmplitudeService);

    var visualJobService = new _servicesVisualJobService2['default']();

    var PickerService = (function() {
      function PickerService(tabID) {
        _classCallCheck(this, PickerService);

        this.tabID = tabID;
      }

      // Load Picker UI for current tab

      _createClass(PickerService, [{
        key: 'initialize',
        value: function initialize(data) {
          var self = this;
          var options = _extends({}, data, { runtimeID: chrome.runtime.id });
          // Insert UI on to page
          chrome.tabs.executeScript(self.tabID, { file: 'js/jquery-original.js' }, function() {
            chrome.tabs.executeScript(self.tabID, { file: 'js/picker.js' }, function() {
              chrome.tabs.executeScript(self.tabID, { code: '$(initialize(\'' + JSON.stringify(options) + '\'));' });
            });
            chrome.tabs.insertCSS(self.tabID, { file: 'styles/picker.css' });
          });
          // Close pop-up to focus tab
          // window.close();
          // Setup Amplitude
          amplitudeService.setupAmplitude();
          return null;
        }

        // Setup listener on background process
      }, {
        key: 'initializeListener',
        value: function initializeListener() {
          var self = this;
          chrome.runtime.onMessage.addListener(self.respondToDone);
        }

        // Methods for dealing with response
      }, {
        key: 'respondToDone',
        value: function respondToDone(request) {
          if (request && request.selector) {
            chrome.tabs.getSelected(null, function(tab) {
              var job = {};
              job.id = Date.now();
              job.active = true;
              job.url = tab.url;
              job.name = tab.title;
              job.mode = 'selector';
              // job.check_interval = 5 * 60 * 1000;
              job.checkInterval = request.checkInterval;
              job.checkIntervalType = request.checkIntervalType;
              job.selector = request.selector;
              job.crop = { // Set defaults
                scroll_top: 0,
                orig_width: 1280,
                orig_height: 800,
                width: 1280,
                height: 800,
                x: 0,
                y: 0
              };

              visualJobService.jobIsUnique(job, function(response) {
                if (response.success === true) {
                  visualJobService.insertJob(job);
                  SurveyService.countJobCreated();

                  // Set the initial CRC for this job
                  PageCheck.checkPageHTML(job.url, function() {}, function() {}, true);

                  amplitudeService.trackJobAdded(job, 'browser');
                } else {
                  alert('Page already monitored');
                }
              });
            });
          }
        }
      }]);

      return PickerService;
    })();

    exports['default'] = PickerService;
    module.exports = exports['default'];

    /***/
  }),
  /* 206 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    exports.checkPage = checkPage;
    exports.checkPageHTML = checkPageHTML;
    exports.detectVisualChange = detectVisualChange;
    exports.setPageSettings = setPageSettings;
    exports.processPage = processPage;
    exports.getStrippedBody = getStrippedBody;
    exports.canonizePage = canonizePage;
    exports.findAndFormatRegexMatches = findAndFormatRegexMatches;
    exports.findAndFormatSelectorMatches = findAndFormatSelectorMatches;
    exports.cleanAndHashPage = cleanAndHashPage;
    exports.cleanHtmlPage = cleanHtmlPage;

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _jquery = __webpack_require__(203);

    var _jquery2 = _interopRequireDefault(_jquery);

    var _servicesVisualJobService = __webpack_require__(198);

    var _servicesVisualJobService2 = _interopRequireDefault(_servicesVisualJobService);

    var _servicesUpdateService = __webpack_require__(197);

    var _servicesUpdateService2 = _interopRequireDefault(_servicesUpdateService);

    var _servicesNotificationService = __webpack_require__(207);

    var _servicesNotificationService2 = _interopRequireDefault(_servicesNotificationService);

    var _formattersCrc32 = __webpack_require__(210);

    var _formattersCrc322 = _interopRequireDefault(_formattersCrc32);

    var _constantsWatchDogJs = __webpack_require__(212);

    var config = _interopRequireWildcard(_constantsWatchDogJs);

    var _ScreenshotService = __webpack_require__(202);

    var ScreenshotService = _interopRequireWildcard(_ScreenshotService);

    var _DifferenceCalculator = __webpack_require__(213);

    var DifferenceCalculator = _interopRequireWildcard(_DifferenceCalculator);

    var _formattersBase64Image = __webpack_require__(199);

    var visualJobService = new _servicesVisualJobService2['default']();
    var updateService = new _servicesUpdateService2['default']();

    /*******************************************************************************
     *                                Page Checking                                 *
     *******************************************************************************/

    // Performs a check on the specified page, and updates its crc field with new
    // info. If a change is detected, sets the updated flag on that page. Once the
    // check is done and all updates are applied, the callback is called with the
    // URL of the checked page.
    //
    // If the changes in the page did not result in a different CRC from the one
    // recorded (e.g. changes in numbers only, or in non-selected parts during
    // selective monitoring), or force_snapshot is checked, the html field of the
    // page is updated. It is not updated when the CRC changes so that the diff
    // viewer has a snapshot of the page before the latest update.

    function checkPage(url, callback, forceSnapshot) {
      // Check HTML checksum first, then check visual
      var changeDetectedCallback = function changeDetectedCallback(url, callback, forceSnapshot) {
        visualJobService.getJobByURL(url, function(job) {
          if (!job) return;
          // Create update
          var update = {
            job_id: job.job_id,
            name: job.name,
            url: job.url,
            created_at: Date.now()
          };

          var jobAlreadyInUpdates = updateService.create(update);
          // Trigger Notifications
          if (!jobAlreadyInUpdates) {
            new _servicesNotificationService2['default']().notify(update);
          }
          // Important that callback gets run to notify WatchDog to schedule again
          callback(job);
        });
      };

      checkPageHTML(url, changeDetectedCallback, callback, forceSnapshot);
    }

    function checkPageHTML(url, changeDetectedCallback, callback, forceSnapshot) {
      visualJobService.getJobByURL(url, function(job) {
        if (!job) return;
        _jquery2['default'].ajax({
          url: url,
          dataType: 'text',
          timeout: 5000,
          success: function success(html, _, xhr) {
            var settings = processPage(job, html, xhr, forceSnapshot);
            // if ( forceSnapshot !== true ) {
            //   delete settings['html'];
            // }
            setPageSettings(job, settings);
            if (settings['updated'] == true) {
              // If change was detected hand off to callback to do additional work
              changeDetectedCallback(url, callback, forceSnapshot);
            } else {
              // Important that callback gets run to notify WatchDog to schedule again
              callback(job);
            }
          },
          error: function error(event) {
            console.log('AJAX ERROR', event);
            var settings = { last_check: Date.now() };
            setPageSettings(job, settings, callback);
            // Important that callback gets run to notify WatchDog to schedule again
            callback(job);
          }
        });
      });
    }

    // ! No Longer used, but keeping for example !

    function detectVisualChange(newImage, job) {
      var _this = this;

      // Let's look harder by comparing images
      visualJobService.loadLatestCapturesFor(job.job_id, function(captures) {
        if (captures.length == 0) {
          recordCapture();
          return;
        }
        var img = (0, _formattersBase64Image.joinBase64Image)(captures[0].image_mime, captures[0].img_data);
        // console.log('img', img);
        // console.log('new', newImage);
        DifferenceCalculator.compare(img, newImage, (function(result) {
          console.log('percentage', result);
          // Image width will change when going from pixel ratio 1 to 2 and vice versa
          if (isNaN(result)) {
            recordCapture();
          } else {
            switch (job.trigger) {
              case 'Tiny Change':
                if (result > 1) {
                  recordCapture();
                }
                break;
              case 'Medium Change':
                if (result > 10) {
                  recordCapture();
                }
                break;
              case 'Major Change':
                if (result > 25) {
                  recordCapture();
                }
                break;
              default:
                if (result > 10) {
                  recordCapture();
                }
                break;
            }
          }
        }).bind(_this));
      });
    }

    function setPageSettings(job, settings, callback) {
      if (settings === undefined) settings = {};

      visualJobService.updateJob(_extends({}, job, settings), function() {
        (callback || function() {})(job);
      });
    }

    function processPage(job, html, xhr, forceSnapshot) {
      var settings = {};
      var type = xhr.getResponseHeader('Content-type');
      cleanAndHashPage(html, job.mode, job.regex, job.selector, function(crc) {
        // console.log('crc pair', [crc, job.crc_checksum]);
        if (crc != job.crc_checksum) {
          console.log(job.name, 'CHECKSUM CHANGE DETECTED');
          settings = {
            updated: true,
            crc: crc,
            html: canonizePage(html, type),
            last_changed: Date.now()
          };
        } else {
          console.log(job.name, '!NO CHECKSUM CHANGE!');
          settings = { html: canonizePage(html, type) };
        }

        settings.last_check = Date.now();
      });

      return settings;
    }

    // Takes a string representation of an HTML document, discards everything
    // outside the <body> element (if one exists), then strips <script> tags.

    function getStrippedBody(html) {
      var body = html.match(/<body[^>]*>(?:([^]*)<\/body>([^]*)|([^]*))/i);
      if (body && body.length > 1) {
        if (body[2] && body[2].length > config.MIN_BODY_TAIL_LENGTH) {
          body = body[1] + ' ' + body[2];
        } else if (body[1] === undefined) {
          body = body[3];
        } else {
          body = body[1];
        }
      } else {
        body = html;
      }

      // We can't simply remove the script tags since that will invalidate the
      // selectors which include nth-child(). Instead, we replace them with an
      // unlikely tag.
      return body.replace(/<script\b[^>]*(?:>[^]*?<\/script>|\/>)/ig, '<blink/>');
    }

    /*******************************************************************************
     *                              Cleaning & Hashing                              *
     *******************************************************************************/

    // Takes a page (HTML or text) and a MIME type (allowing a ;q=... suffix) and
    // converts the page to its canonical form. For HTML and XML, this means
    // collapsing spaces. For other types, no transformation is applied. Empty input
    // results in empty output.

    function canonizePage(page, type) {
      if (!page) return page;
      return type.match(/\b(x|xht|ht)ml\b/) ? page.replace(/\s+/g, ' ') : page;
    }

    // Searches for all matches of regex in text, formats them into a single string,
    // then calls the callback with the result as an argument. If matching the regex
    // takes more than REGEX_TIMEOUT, the matching is cancelled and the callback is
    // called with a null argument.

    function findAndFormatRegexMatches(text, regex, callback) {
      if (!callback) return;
      if (!regex) return callback('');

      var called = false;
      var worker = new Worker(config.REGEX_WORKER_PATH);

      function finishMatching(result) {
        if (!called) {
          called = true;
          worker.terminate();
          (callback || function() {})(result ? result.data : null);
        }
      }

      worker.onmessage = finishMatching;
      worker.postMessage(JSON.stringify({
        command: 'run',
        text: text,
        regex: regex
      }));

      setTimeout(finishMatching, config.REGEX_TIMEOUT);
    }

    // Searches for all matches of selector in the body of the html string, formats
    // them into a single string, then calls the callback with the result as an
    // argument. If called with an invalid selector, the callback is called with a
    // null.

    function findAndFormatSelectorMatches(html, selector, callback) {
      try {
        (function() {
          var body = (0, _jquery2['default'])('<body>').html(getStrippedBody(html));
          var selectorFunc = function selectorFunc(css) {
            // return jQuery(selector, body).map((i, el) => {
            //   return '"' + jQuery('<div>').append(el).html() + '"';
            // }).get().join('\n');
            return (0, _jquery2['default'])(css, body).html();
          };

          // Walk up the selector tree nothing found
          var selectors = selector.split(' > ');
          var result = selectorFunc(selector);
          while ((result === '' || typeof result === 'undefined') && selectors.length >= 1) {
            selectors.pop();
            var newSelector = selectors.join(' > ');
            result = selectorFunc(newSelector);
          }

          // console.log('result', result);

          cleanHtmlPage(result, callback);
        })();
      } catch (e) {
        console.log(e);
        (callback || function() {})(null);
      }
    }

    // Calculates the CRC of a page, after cleaning it, and calls the callback with
    // this CRC as an argument. If mode=regex and the regex parameter is set, the
    // page is cleaned by replacing it with all the matches of this regex. If
    // mode=selector and the selector parameter is set, the pages is cleaned by
    // replacing it with the outerHTML of all matches of that selector. Otherwise
    // cleaning means calling cleanHtmlPage() which pretty much extracts the text
    // out of the HTML (see the function for more details).

    function cleanAndHashPage(html, mode, regex, selector, callback) {
      if (!callback) return;

      var callBackWithCrc = function callBackWithCrc(result) {
        var crcResult = '';
        if (result === '') {
          crcResult = Math.floor(Math.random() * 10000000);
        } else {
          crcResult = result || '';
        }
        callback((0, _formattersCrc322['default'])(crcResult));
      };

      if (mode === 'regex' && regex) {
        findAndFormatRegexMatches(html, regex, callBackWithCrc);
      } else if (mode === 'selector' && selector) {
        findAndFormatSelectorMatches(html, selector, callBackWithCrc);
      } else {
        cleanHtmlPage(html, callBackWithCrc);
      }
    }

    // Extract the text out of the HTML page, then calls the callback with the
    // result as an argument. If no callback is provided, simply returns the result.
    // The extraction includes:
    // 1. Trimming everything outside of <body> through getStrippedBody().
    // 2. Removing the contents of script, style, object, embed and applet tags.
    // 3. Replacing images with their src, surrounded by "startimg" and "endimg".
    // 4. Removing all tags.
    // 5. Removing time, date and cardinality number suffixes (1st, 5pm, 3 weeks).
    // 6. Removing all ASCII non-letter characters.
    // 7. Casting all the result into lowercase.

    function cleanHtmlPage(rawHTML, callback) {
      if (!rawHTML) {
        return;
      }
      var html = rawHTML.toLowerCase();
      // Get rid of everything outside the body.
      html = getStrippedBody(html);
      // Remove major non-text elements.
      html = html.replace(/<(script|style|object|embed|applet)[^>]*>[^]*?<\/\1>/g, '');
      // Replace images with their sources (to preserve after tag stripping).
      html = html.replace(/<img[^>]*src\s*=\s*['"]?([^<>"' ]+)['"]?[^>]*>/g, '{startimg:$1:endimg}');
      // Strip tags.
      html = html.replace(/<[^>]*>/g, '');
      // Collapse whitespace.
      html = html.replace(/\s+/g, ' ');
      // Unescape HTML entities (&nbsp;, &amp;, numeric unicode entities, etc.).
      html = (0, _jquery2['default'])('<div/>').html(html).text();
      // Remove numbers with common number suffixes. This helps with pages that
      // print out the current date/time or time since an item was posted.
      html = html.replace(/\d+ ?(st|nd|rd|th|am|pm|seconds?|minutes?|hours?|days?|weeks?|months?)\b/g, '');
      // Remove everything other than letters (unicode letters are preserved).
      html = html.replace(/[\x00-\x40\x5B-\x60\x7B-\xBF]/g, '');

      if (callback) {
        callback(html);
      } else {
        return html;
      }
    }

    /***/
  }),
  /* 207 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _servicesVisualJobService = __webpack_require__(198);

    var _servicesVisualJobService2 = _interopRequireDefault(_servicesVisualJobService);

    var _servicesUpdateService = __webpack_require__(197);

    var _servicesUpdateService2 = _interopRequireDefault(_servicesUpdateService);

    var _servicesCaptureService = __webpack_require__(201);

    var _servicesCaptureService2 = _interopRequireDefault(_servicesCaptureService);

    var _constantsAppConstants = __webpack_require__(208);

    var AppConstants = _interopRequireWildcard(_constantsAppConstants);

    var _servicesSurveyService = __webpack_require__(209);

    var SurveyService = _interopRequireWildcard(_servicesSurveyService);

    var _formattersBase64Image = __webpack_require__(199);

    var _jsBase64 = __webpack_require__(204);

    var visualJobService = new _servicesVisualJobService2['default']();

    // Handle display of notifications and mark as read when clicked

    var NotificationService = (function() {
      function NotificationService() {
        _classCallCheck(this, NotificationService);

        this.updates = [];
      }

      _createClass(NotificationService, [{
        key: 'notify',
        value: function notify(update) {
          if (this.desktopNotificationEnabled()) {
            this.triggerDesktopNotification(update);
            if (this.soundEnabled()) {
              this.triggerSoundAlert();
            }
          } else {
            console.log('Desktop notifications disabled.');
          }
        }

        // Call this method after reloading app to update badge and set notifications
      }, {
        key: 'notifyAll',
        value: function notifyAll() {
          var _this = this;

          if (this.desktopNotificationEnabled()) {
            var updates = [];
            updates = this.getAllUpdates();

            updates.map(function(update, i) {
              _this.triggerDesktopNotification(update);
            });

            if (updates.length >= 1 && this.soundEnabled()) {
              this.triggerSoundAlert();
            }
          } else {
            console.log('Desktop notifications disabled.');
          }
        }
      }, {
        key: 'getAllUpdates',
        value: function getAllUpdates() {
          var updateService = new _servicesUpdateService2['default']();
          var updates = updateService.getAllUpdates();
          return updates;
        }
      }, {
        key: 'hideDesktopNotification',
        value: function hideDesktopNotification(notification) {
          if (notification !== null && typeof notification !== 'number') {
            if (typeof notification === 'string') {
              // This platform uses Rich notifications.
              chrome.notifications.clear(notification, function() {});
            } else {
              notification.cancel();
            }
          }
        }
      }, {
        key: 'desktopNotificationEnabled',
        value: function desktopNotificationEnabled() {
          return localStorage.getItem('desktop_notifications') === 'Enabled';
        }
      }, {
        key: 'soundEnabled',
        value: function soundEnabled() {
          return localStorage.getItem('sound_enabled') === 'Enabled';
        }

        // Triggers a sound alert if it is enabled.
      }, {
        key: 'triggerSoundAlert',
        value: function triggerSoundAlert() {
          var audioOption = localStorage.getItem('sound_clip');
          var audioSrc = AppConstants.SOUND_CLIP_OPTIONS_MAP.filter(function(option) {
            if (option.option === audioOption) {
              return option.src;
            }
          })[0].src;
          var audio = new Audio(audioSrc);
          audio.addEventListener('canplaythrough', function() {
            if (audio) {
              if (audio.loop) audio.loop = false;
              audio.play();
              audio = null;
            }
          });
        }
      }, {
        key: 'triggerDesktopNotification',
        value: function triggerDesktopNotification(update) {
          if (window.webkitNotifications && window.webkitNotifications.createHTMLNotification) {
            // This platform uses HTML notifications.
            this.triggerHTMLNotification(update);
          } else if (chrome.notifications && chrome.notifications.create) {
            this.triggerRichNotification(update);
          }
        }
      }, {
        key: 'triggerHTMLNotification',
        value: function triggerHTMLNotification(update) {
          var url = 'notification.html';
          var notification = window.webkitNotifications.createHTMLNotification(url);
          notification.show();
        }

        // Returns a chrome://favicon/... URL that points to the Chrome-cached favicon
        // of the given URL.
      }, {
        key: 'getFavicon',
        value: function getFavicon(url) {
          return 'chrome://favicon/' + url;
        }
      }, {
        key: 'triggerRichNotification',
        value: function triggerRichNotification(update) {
          var self = this;

          var buttons = [{
            title: 'View changes'
            // iconUrl: update.currentScreenshot
          }, {
            title: 'Disable'
          }];
          var title = update.name;
          var options = {
            type: 'basic',
            iconUrl: self.getFavicon(update.url), // chrome.extension.getURL('img/icon.png'),
            title: title,
            message: 'Click to view website 123',
            isClickable: true,
            buttons: buttons
          };

          var markAsRead = function markAsRead() {
            var updateService = new _servicesUpdateService2['default']();
            updateService.remove(update);
          };

          // Create notification to display
          // note: 2 button limit means we create a notification for every update
          //       second button could be used to mark as read in the future
          var notification = 0; // Set as id
          chrome.notifications.create('', options, function(id) {
            notification = id;
          });

          // Bind nortification click to the website
          chrome.notifications.onClicked.addListener(function(id, button) {
            if (notification === id) {
              window.open(update.url);
              markAsRead(); // Mark as read (remove)
              chrome.notifications.clear(notification, function() {});
            }
          });

          // Bind the Diff url to the notification click
          chrome.notifications.onButtonClicked.addListener(function(id, button) {
            if (notification === id) {
              if (button === 0) {
                // View changes
                SurveyService.countCheck();

                visualJobService.getJobByURL(update.url, function(job) {
                  var captureService = new _servicesCaptureService2['default'](job, update);
                  var textOnly = localStorage.getItem('default_compare_preference') === 'Text only';
                  captureService.captureAndDisplayUpdate({ text_only: textOnly });
                });

                markAsRead(); // Mark as read (remove)
                chrome.notifications.clear(notification, function() {});
              } else if (button === 1) {
                // Disable
                visualJobService.getJobByID(update.job_id, function(job) {
                  job.active = false;
                  visualJobService.updateJob(job);
                });
                markAsRead(); // Mark as read (remove)
                chrome.notifications.clear(notification, function() {});
              }
            }
          });

          setTimeout(self.hideDesktopNotification.bind(self, notification), 30000);
        }
      }]);

      return NotificationService;
    })();

    exports['default'] = NotificationService;
    module.exports = exports['default'];

    /***/
  }),
  /* 208 */
  /***/
  (function(module, exports) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var BROWSER_INTERVAL_OPTIONS = ['Sec', 'Min', 'Hrs', 'Days'];
    exports.BROWSER_INTERVAL_OPTIONS = BROWSER_INTERVAL_OPTIONS;
    var SERVER_INTERVAL_OPTIONS = ['Hour', 'Day', 'Week'];

    exports.SERVER_INTERVAL_OPTIONS = SERVER_INTERVAL_OPTIONS;
    var SOUND_ENABLED_OPTIONS = ['Enabled', 'Disabled'];
    exports.SOUND_ENABLED_OPTIONS = SOUND_ENABLED_OPTIONS;
    var DESKTOP_NOTIFICATION_OPTIONS = ['Enabled', 'Disabled'];
    exports.DESKTOP_NOTIFICATION_OPTIONS = DESKTOP_NOTIFICATION_OPTIONS;
    var SOUND_CLIP_OPTIONS = ['Ping', 'Cuckoo', 'Bell'];
    exports.SOUND_CLIP_OPTIONS = SOUND_CLIP_OPTIONS;
    var SOUND_CLIP_OPTIONS_MAP = [{ option: 'Ping', src: 'audio/visualping.ogg' }, { option: 'Cuckoo', src: 'audio/cuckoo.ogg' }, { option: 'Bell', src: 'audio/bell.ogg' }];
    exports.SOUND_CLIP_OPTIONS_MAP = SOUND_CLIP_OPTIONS_MAP;
    var TAB_PREFERENCE_OPTIONS = ['Server', 'Browser'];
    exports.TAB_PREFERENCE_OPTIONS = TAB_PREFERENCE_OPTIONS;
    var DEFAULT_COMPARE_OPTIONS = ['Visual', 'Text', 'Text only'];
    exports.DEFAULT_COMPARE_OPTIONS = DEFAULT_COMPARE_OPTIONS;

    /***/
  }),
  /* 209 */
  /***/
  (function(module, exports) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.countJobCreated = countJobCreated;
    exports.countCheck = countCheck;
    exports.countWillFillSurvey = countWillFillSurvey;
    exports.countWillGiveFeedback = countWillGiveFeedback;
    exports.countSurveyDisplay = countSurveyDisplay;
    exports.surveyComplete = surveyComplete;
    exports.shouldDisplaySurvey = shouldDisplaySurvey;

    function countJobCreated() {
      var jobsCount = (parseInt(localStorage.getItem('s_jobs_created'), 10) || 0) + 1;
      localStorage.setItem('s_jobs_created', jobsCount);
    }

    function countCheck() {
      var checksCount = (parseInt(localStorage.getItem('s_checks'), 10) || 0) + 1;
      localStorage.setItem('s_checks', checksCount);
    }

    function countWillFillSurvey() {
      localStorage.setItem('s_wfs', true);
    }

    function countWillGiveFeedback() {
      localStorage.setItem('s_wgf', true);
    }

    function countSurveyDisplay() {
      var displayCount = (parseInt(localStorage.getItem('s_dc'), 10) || 0) + 1;
      localStorage.setItem('s_dc', displayCount);
    }

    function surveyComplete() {
      localStorage.setItem('s_completed', true);
    }

    function shouldDisplaySurvey() {
      var sJobsCreated = parseInt(localStorage.getItem('s_jobs_created'), 10) || 0;
      var sChecks = parseInt(localStorage.getItem('s_checks'), 10) || 0;
      var sCompleted = localStorage.getItem('s_completed') === 'true';
      var sCompletedSecondStep = localStorage.getItem('s_wfs') === 'true' || localStorage.getItem('s_wgf') === 'true';
      var sDisplayCount = parseInt(localStorage.getItem('s_dc'), 10) || 0;

      if ((sJobsCreated >= 5 || sChecks >= 10) && !sCompleted) {
        // Stop asking after the 3rd time you ask “Do you have time to…”? but they don’t react:
        if (sDisplayCount > 3) {
          return false;
        }
        return true;
      } else if ((sJobsCreated >= 20 || sChecks >= 20) && !sCompletedSecondStep) {
        // Show it again after 20 jobs/events if they don’t press YES after the second screen
        return true;
      }

      return false;
    }

    /***/
  }),
  /* 210 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports['default'] = crc;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _encodeUTF8 = __webpack_require__(211);

    var _encodeUTF82 = _interopRequireDefault(_encodeUTF8);

    var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];

    // Takes a string and returns its crc32 checksum.

    function crc(rawString) {
      if (typeof rawString !== 'string') return null;

      var str = (0, _encodeUTF82['default'])(rawString);
      var length = str.length;
      var value = 0xFFFFFFFF;

      for (var i = 0; i < length; i++) {
        value = value >>> 8 ^ table[value & 0xFF ^ str.charCodeAt(i)];
      }

      return value ^ -1;
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 211 */
  /***/
  (function(module, exports) {

    // Encodes a unicode string into a UTF-8 byte sequence.
    // Adapted from code at http://www.webtoolkit.info/javascript-utf8.html.
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports['default'] = encodeUTF8;

    function encodeUTF8(string) {
      var utftext = [];

      for (var n = 0; n < string.length; n++) {
        var c = string.charCodeAt(n);

        if (c < 128) {
          utftext.push(String.fromCharCode(c));
        } else if (c > 127 && c < 2048) {
          utftext.push(String.fromCharCode(c >> 6 | 192));
          utftext.push(String.fromCharCode(c & 63 | 128));
        } else {
          utftext.push(String.fromCharCode(c >> 12 | 224));
          utftext.push(String.fromCharCode(c >> 6 & 63 | 128));
          utftext.push(String.fromCharCode(c & 63 | 128));
        }
      }

      return utftext.join('');
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 212 */
  /***/
  (function(module, exports) {

    // Default interval between checks.
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var DEFAULT_CHECK_INTERVAL = 3 * 60 * 60 * 1000;

    exports.DEFAULT_CHECK_INTERVAL = DEFAULT_CHECK_INTERVAL;
    // The delay in milliseconds to wait after a check attempt that failed due
    // to the network being down.
    var RESCHEDULE_DELAY = 2 * 60 * 1000;
    exports.RESCHEDULE_DELAY = RESCHEDULE_DELAY;
    // 2 minutes

    // The minimum time in milliseconds between checks.
    var MINIMUM_CHECK_SPACING = 1000;

    exports.MINIMUM_CHECK_SPACING = MINIMUM_CHECK_SPACING;
    // The maximum time offset in the future in milliseconds to look for pages
    // to update.
    var EPSILON = 500;

    exports.EPSILON = EPSILON;
    // The interval in milliseconds between successive watchdog runs.
    var WATCHDOG_INTERVAL = 15 * 60 * 1000;

    exports.WATCHDOG_INTERVAL = WATCHDOG_INTERVAL;
    // The maximum amount of time between the projected check time and the
    // last check before the watchdog is alerted.
    var WATCHDOG_TOLERANCE = 2 * 60 * 1000;

    exports.WATCHDOG_TOLERANCE = WATCHDOG_TOLERANCE;
    // The address to check when testing for network availability.
    var RELIABLE_CHECKPOINT = 'http://www.google.com/';

    exports.RELIABLE_CHECKPOINT = RELIABLE_CHECKPOINT;
    // A regex that must match the checkpoint result (for detecting proxy portals).
    var RELIABLE_CHECKPOINT_REGEX = /Google/;
    exports.RELIABLE_CHECKPOINT_REGEX = RELIABLE_CHECKPOINT_REGEX;

    /***/
  }),
  /* 213 */
  /***/
  (function(module, exports) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.getImageData = getImageData;
    exports.compare = compare;

    function getImageData(url, callback) {
      var img = document.createElement('img');
      var canvas = document.createElement('canvas');

      img.onload = function() {
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        callback(ctx.getImageData(0, 0, img.width, img.height));
      };

      img.src = url;
    }

    function compare(firstImage, secondImage, callback) {
      getImageData(firstImage, function(img1) {
        getImageData(secondImage, function(img2) {
          if (img1.width !== img2.width || img1.height != img2.height) {
            callback(NaN);
            return;
          }

          var diff = 0;

          for (var i = 0; i < img1.data.length / 4; i++) {
            diff += Math.abs(img1.data[4 * i + 0] - img2.data[4 * i + 0]) / 255;
            diff += Math.abs(img1.data[4 * i + 1] - img2.data[4 * i + 1]) / 255;
            diff += Math.abs(img1.data[4 * i + 2] - img2.data[4 * i + 2]) / 255;
          }

          callback(100 * diff / (img1.width * img1.height * 3));
        });
      });
    }

    // compare('Lenna50.jpg', 'Lenna100.jpg', function (result) {
    // 	console.log(result);
    // });

    /***/
  }),
  /* 214 */
  /***/
  (function(module, exports, __webpack_require__) {

    // Amplitude.js sets up the amplitude event
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.setupAmplitude = setupAmplitude;
    exports.setupAmplitudeUserSettings = setupAmplitudeUserSettings;
    exports.trackPageMonitorUser = trackPageMonitorUser;
    exports.trackEmail = trackEmail;
    exports.trackJobAdded = trackJobAdded;
    exports.trackAppLaunched = trackAppLaunched;
    exports.trackSurveySatisfied = trackSurveySatisfied;
    exports.trackSurveyWillGiveFeedback = trackSurveyWillGiveFeedback;
    exports.trackSurveyWillFillSurvey = trackSurveyWillFillSurvey;

    function setupAmplitude() {
      (function(t, e) {
        var n = t.amplitude || {};
        var r = e.createElement("script");
        r.type = "text/javascript";
        r.async = true;
        r.src = "https://d24n15hnbwhuhn.cloudfront.net/libs/amplitude-2.5.0-min.gz.js";
        r.onload = function() {
          t.amplitude.runQueuedFunctions();
        };
        var s = e.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(r, s);
        var i = function i() {
          this._q = [];
          return this;
        };

        function o(t) {
          i.prototype[t] = function() {
            this._q.push([t].concat(Array.prototype.slice.call(arguments, 0)));
            return this;
          };
        }
        var a = ["add", "set", "setOnce", "unset"];
        for (var u = 0; u < a.length; u++) {
          o(a[u]);
        }
        n.Identify = i;
        n._q = [];

        function c(t) {
          n[t] = function() {
            n._q.push([t].concat(Array.prototype.slice.call(arguments, 0)));
          };
        }
        var l = ["init", "logEvent", "logRevenue", "setUserId", "setUserProperties", "setOptOut", "setVersionName", "setDomain", "setDeviceId", "setGlobalUserProperties", "identify"];
        for (var p = 0; p < l.length; p++) {
          c(l[p]);
        }
        t.amplitude = n;
      })(window, document);

      if (false) {
        amplitude.init("45e9713b257843e42e683db4d26610c6"); // DEV
      } else {
        amplitude.init("7de90ecefc3f100c31988fe0fdd29546"); // PROD
      }

      setupAmplitudeUserSettings();
    }

    function setupAmplitudeUserSettings() {
      var uuid = localStorage.getItem('uuid');
      if (!uuid && !(uuid === '')) {
        uuid = guid();
        localStorage.setItem('uuid', uuid);
      }
      amplitude.setUserId(uuid);
      amplitude.setVersionName(localStorage.getItem('version'));
    }

    function trackPageMonitorUser() {
      var isPagemonitorUser = ['true', true].includes(localStorage.getItem('pm_user'));
      var identify = new amplitude.Identify().set('pm_user', isPagemonitorUser);
      amplitude.identify(identify);
    }

    function trackEmail(email) {
      var identify = new amplitude.Identify().set('email', email);
      amplitude.identify(identify);
    }

    function trackJobAdded(job) {
      var type = arguments.length <= 1 || arguments[1] === undefined ? 'browser' : arguments[1];

      var interval = millisecondsToInterval(job.check_interval).join(' ');

      var event_name = null;
      if (type == 'browser') {
        event_name = 'BROWSER_JOB_CREATED';
      } else if (type == 'server') {
        event_name = 'SERVER_JOB_CREATED';
      }

      amplitude.logEvent(event_name, {
        mode: job.mode,
        check_interval: interval
      });
    }

    function trackAppLaunched() {
      amplitude.logEvent('APP_LAUNCHED', {});
    }

    function trackSurveySatisfied(value) {
      var answer = value === true ? 'Yes' : 'No';
      var identify = new amplitude.Identify().set('survey_satisfied', answer);
      amplitude.identify(identify);
      amplitude.logEvent('SURVEY_SATISFIED', { answer: answer });
    }

    function trackSurveyWillGiveFeedback(value) {
      var answer = value === true ? 'Yes' : 'No';
      var identify = new amplitude.Identify().set('survey_will_give_feedback', answer);
      amplitude.identify(identify);
      amplitude.logEvent('SURVEY_WILL_GIVE_FEEDBACK', { answer: answer });
    }

    function trackSurveyWillFillSurvey(value) {
      var answer = value === true ? 'Yes' : 'No';
      var identify = new amplitude.Identify().set('survey_will_fill_survey', answer);
      amplitude.identify(identify);
      amplitude.logEvent('SURVEY_WILL_FILL_SURVEY', { answer: answer });
    }

    function millisecondsToInterval(milliseconds) {
      var n = parseInt(milliseconds, 10);

      // Remove anything less than a second
      if (n % 1000 < 1000) {
        n = n - n % 1000;
      }

      if (n % (24 * 60 * 60 * 1000) === 0) {
        return [(n / (24 * 60 * 60 * 1000)).toString(), 'Days'];
      } else if (n % (60 * 60 * 1000) === 0) {
        return [(n / (60 * 60 * 1000)).toString(), 'Hrs'];
      } else if (n % (60 * 1000) === 0) {
        return [(n / (60 * 1000)).toString(), 'Min'];
      } else if (n % 1000 === 0) {
        return [(n / 1000).toString(), 'Sec'];
      } else {
        console.log("Couldn't determine interval from milliseconds");
        return ['1', 'Sec'];
      }
    }

    function guid() {
      function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      }
      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }

    /***/
  }),
  /* 215 */
  ,
  /* 216 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _constantsWatchDogJs = __webpack_require__(212);

    var config = _interopRequireWildcard(_constantsWatchDogJs);

    var _jquery = __webpack_require__(203);

    var _jquery2 = _interopRequireDefault(_jquery);

    var _servicesVisualJobService = __webpack_require__(198);

    var _servicesVisualJobService2 = _interopRequireDefault(_servicesVisualJobService);

    var _servicesPageCheck = __webpack_require__(206);

    var visualJobService = new _servicesVisualJobService2['default']();

    var WatchDog = (function() {
      function WatchDog() {
        _classCallCheck(this, WatchDog);

        this.projected_check_time = 0;
        this.check_timeout_id = 0;
        this.init();
      }

      _createClass(WatchDog, [{
        key: 'init',
        value: function init() {
          if (Date.now() - this.projected_check_time > config.WATCHDOG_TOLERANCE) {
            console.log('WARNING: Watchdog recovered a lost timeout.');
            this.scheduleCheck();
          }
        }
      }, {
        key: 'scheduleCheck',
        value: function scheduleCheck() {
          var currentTime = Date.now();
          var self = this;

          visualJobService.getAllJobs(function(jobs) {
            var activeJobs = self._jobsActive(jobs);
            if (activeJobs.length === 0) {
              self.applySchedule(config.RESCHEDULE_DELAY);
            } else {
              var times = self._jobCheckTimes(activeJobs, currentTime);
              var minTime = self._getMinTime(times, currentTime);
              self.applySchedule(minTime);
            }
          });
        }
      }, {
        key: 'checkAllNow',
        value: function checkAllNow() {
          var force = true;
          // Force check and schedule as normal after
          this.check(force, this.scheduleCheck.bind(this));
        }

        // Checks each job that has reached its projected check time, calling
        // jobCallback() for each page once it's checked, then update the badge,
        // call scheduleCheck(), and finally call callback(). If force is true, all
        // pages are checked regardless of whether their projected check time has been
        // reached. If the network connection is down, reschedule a check after
        // RESCHEDULE_DELAY.
      }, {
        key: 'check',
        value: function check(force, callback, jobCallback) {
          var self = this;

          _jquery2['default'].ajax({
            url: config.RELIABLE_CHECKPOINT,
            complete: function complete(xhr) {
              var internetAvailable = false;
              if (xhr && xhr.status >= 200 && xhr.status < 300) {
                // Network up. Make sure this isn't a gateway portal.
                internetAvailable = config.RELIABLE_CHECKPOINT_REGEX.test(xhr.responseText);
              }
              if (internetAvailable) {
                // Network up. Do the check.
                self.setLastError(''); // Resets all, may need to be more sophisticated.
                self.actualCheck(force, callback, jobCallback);
              } else {
                // Network down. Do a constant reschedule.
                var message = 'Network appears down (' + (xhr && xhr.status) + '). Rescheduling check.';
                console.log(message);
                self.setLastError(message);
                self.applySchedule(config.RESCHEDULE_DELAY);
                (callback || function() {})();
              }
            }
          });
        }

        // Error message can be read from local storage
      }, {
        key: 'setLastError',
        value: function setLastError(message) {
          localStorage.setItem('last_error', message);
        }
      }, {
        key: 'applySchedule',
        value: function applySchedule(offset) {
          this.projected_check_time = Date.now() + offset;
          clearTimeout(this.check_timeout_id);
          this.check_timeout_id = setTimeout(this.check.bind(this), offset);
        }

        // Performs the page checks. Called by check() to do the actual work.
      }, {
        key: 'actualCheck',
        value: function actualCheck(force, callback, jobCallback) {
          var _this = this;

          var self = this;
          visualJobService.getAllJobs(function(jobs) {
            var currentTime = Date.now();
            var jobsToCheck = self._jobsToCheck(jobs, currentTime);
            // Force will check all jobs
            if (force === true) {
              jobsToCheck = self._jobsActive(jobs);
            }
            var jobsChecked = 0;

            var notifyAllChecksFinished = function notifyAllChecksFinished() {
              console.log('All checks finished');
              self.scheduleCheck();
              (callback || function() {})();
            };

            var notifyCheckFinished = function notifyCheckFinished(url) {
              (jobCallback || function() {})(url);
              jobsChecked++;
              console.assert(jobsChecked <= jobsToCheck.length);
              if (jobsChecked === jobsToCheck.length) {
                notifyAllChecksFinished();
              }
            };

            if (jobsToCheck.length) {
              jobsToCheck.map(function(job, i) {
                setTimeout(_servicesPageCheck.checkPage.bind(_this, job.url, notifyCheckFinished), (1 + i) * 1000);
              });
            } else {
              notifyAllChecksFinished();
            }
          });
        }
      }, {
        key: '_jobsToCheck',
        value: function _jobsToCheck(jobs, currentTime) {
          return _jquery2['default'].grep(jobs, function(job) {
            var active = job.active === true;
            var interval = job.check_interval; // || getSetting(SETTINGS.check_interval);
            var projectedCheck = job.last_check + interval - config.EPSILON;
            return active && projectedCheck <= currentTime;
          });
        }
      }, {
        key: '_jobsActive',
        value: function _jobsActive(jobs) {
          return _jquery2['default'].grep(jobs, function(job) {
            return job.active === true;
          });
        }
      }, {
        key: '_jobCheckTimes',
        value: function _jobCheckTimes(jobs, currentTime) {
          if (jobs === undefined) jobs = [];

          return jobs.map(function(job) {
            return job.last_check + job.check_interval - currentTime;
          });
        }
      }, {
        key: '_getMinTime',
        value: function _getMinTime(times, currentTime) {
          var minTime = Math.min.apply(Math, times);
          if (minTime < config.MINIMUM_CHECK_SPACING) {
            minTime = config.MINIMUM_CHECK_SPACING;
          } else if (minTime === currentTime) {
            // No pages need to be checked.
            minTime = config.DEFAULT_CHECK_INTERVAL;
          }
          return minTime;
        }
      }]);

      return WatchDog;
    })();

    exports['default'] = WatchDog;
    module.exports = exports['default'];

    /***/
  }),
  /* 217 */
  ,
  /* 218 */
  ,
  /* 219 */
  ,
  /* 220 */
  /***/
  (function(module, exports, __webpack_require__) {

    // Take PageMonitor format and return job format

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _formattersIntervalToMilliseconds = __webpack_require__(200);

    var PageMonitorToJob = (function() {
      function PageMonitorToJob() {
        _classCallCheck(this, PageMonitorToJob);
      }

      _createClass(PageMonitorToJob, [{
        key: 'convert',
        value: function convert(page) {
          var job = {
            id: page.last_changed || page.last_checked, // Adopt time as job_id
            active: true,
            name: page.name,
            mode: page.mode,
            selector: page.selector,
            regex: page.regex,
            url: page.url,
            crc_checksum: page.crc,
            check_interval: this.getBestInterval(page.check_interval),
            trigger: 'Tiny Change',
            last_check: page.last_check,
            last_changed: page.last_changed,
            crop: { // Set defaults
              scroll_top: page.crop_scroll_top || 0,
              orig_width: page.crop_orig_width || 1280,
              orig_height: page.crop_orig_height || 800,
              width: page.crop_width || 1280,
              height: page.crop_height || 800,
              x: page.crop_x || 0,
              y: page.crop_y || 0
            }
          };

          return job;
        }
      }, {
        key: 'getBestInterval',
        value: function getBestInterval(interval) {
          var globalInterval = parseInt(localStorage.getItem('check_interval'));
          return (0, _formattersIntervalToMilliseconds.millisecondsBestFit)(interval || globalInterval || 60000);
        }
      }, {
        key: 'convertArray',
        value: function convertArray(pages) {
          var _this = this;

          return pages.map(function(page, i) {
            return _this.convert(page);
          }, this);
        }
      }]);

      return PageMonitorToJob;
    })();

    exports['default'] = PageMonitorToJob;
    module.exports = exports['default'];

    /***/
  }),
  /* 221 */
  ,
  /* 222 */
  ,
  /* 223 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(224);

    /***/
  }),
  /* 224 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule React
     */

    /* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

    'use strict';

    var EventPluginUtils = __webpack_require__(225);
    var ReactChildren = __webpack_require__(229);
    var ReactComponent = __webpack_require__(243);
    var ReactClass = __webpack_require__(258);
    var ReactContext = __webpack_require__(233);
    var ReactCurrentOwner = __webpack_require__(238);
    var ReactElement = __webpack_require__(232);
    var ReactElementValidator = __webpack_require__(253);
    var ReactDOM = __webpack_require__(261);
    var ReactDOMTextComponent = __webpack_require__(263);
    var ReactDefaultInjection = __webpack_require__(312);
    var ReactInstanceHandles = __webpack_require__(240);
    var ReactMount = __webpack_require__(288);
    var ReactPerf = __webpack_require__(249);
    var ReactPropTypes = __webpack_require__(343);
    var ReactReconciler = __webpack_require__(250);
    var ReactServerRendering = __webpack_require__(371);

    var assign = __webpack_require__(234);
    var findDOMNode = __webpack_require__(332);
    var onlyChild = __webpack_require__(373);

    ReactDefaultInjection.inject();

    var createElement = ReactElement.createElement;
    var createFactory = ReactElement.createFactory;
    var cloneElement = ReactElement.cloneElement;

    if (false) {
      createElement = ReactElementValidator.createElement;
      createFactory = ReactElementValidator.createFactory;
      cloneElement = ReactElementValidator.cloneElement;
    }

    var render = ReactPerf.measure('React', 'render', ReactMount.render);

    var React = {
      Children: {
        map: ReactChildren.map,
        forEach: ReactChildren.forEach,
        count: ReactChildren.count,
        only: onlyChild
      },
      Component: ReactComponent,
      DOM: ReactDOM,
      PropTypes: ReactPropTypes,
      initializeTouchEvents: function(shouldUseTouch) {
        EventPluginUtils.useTouchEvents = shouldUseTouch;
      },
      createClass: ReactClass.createClass,
      createElement: createElement,
      cloneElement: cloneElement,
      createFactory: createFactory,
      createMixin: function(mixin) {
        // Currently a noop. Will be used to validate and trace mixins.
        return mixin;
      },
      constructAndRenderComponent: ReactMount.constructAndRenderComponent,
      constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
      findDOMNode: findDOMNode,
      render: render,
      renderToString: ReactServerRendering.renderToString,
      renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
      unmountComponentAtNode: ReactMount.unmountComponentAtNode,
      isValidElement: ReactElement.isValidElement,
      withContext: ReactContext.withContext,

      // Hook for JSX spread, don't use this for anything else.
      __spread: assign
    };

    // Inject the runtime into a devtools global hook regardless of browser.
    // Allows for debugging when the hook is injected on the page.
    if (
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
        CurrentOwner: ReactCurrentOwner,
        InstanceHandles: ReactInstanceHandles,
        Mount: ReactMount,
        Reconciler: ReactReconciler,
        TextComponent: ReactDOMTextComponent
      });
    }

    if (false) {
      var ExecutionEnvironment = require("./ExecutionEnvironment");
      if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

        // If we're in Chrome, look for the devtools marker and provide a download
        // link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
            console.debug(
              'Download the React DevTools for a better development experience: ' +
              'https://fb.me/react-devtools'
            );
          }
        }

        var expectedFeatures = [
          // shims
          Array.isArray,
          Array.prototype.every,
          Array.prototype.forEach,
          Array.prototype.indexOf,
          Array.prototype.map,
          Date.now,
          Function.prototype.bind,
          Object.keys,
          String.prototype.split,
          String.prototype.trim,

          // shams
          Object.create,
          Object.freeze
        ];

        for (var i = 0; i < expectedFeatures.length; i++) {
          if (!expectedFeatures[i]) {
            console.error(
              'One or more ES5 shim/shams expected by React are not available: ' +
              'https://fb.me/react-warning-polyfills'
            );
            break;
          }
        }
      }
    }

    React.version = '0.13.3';

    module.exports = React;

    /***/
  }),
  /* 225 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule EventPluginUtils
     */

    'use strict';

    var EventConstants = __webpack_require__(226);

    var invariant = __webpack_require__(228);

    /**
     * Injected dependencies:
     */

    /**
     * - `Mount`: [required] Module that can convert between React dom IDs and
     *   actual node references.
     */
    var injection = {
      Mount: null,
      injectMount: function(InjectedMount) {
        injection.Mount = InjectedMount;
        if (false) {
          ("production" !== process.env.NODE_ENV ? invariant(
            InjectedMount && InjectedMount.getNode,
            'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
            'is missing getNode.'
          ) : invariant(InjectedMount && InjectedMount.getNode));
        }
      }
    };

    var topLevelTypes = EventConstants.topLevelTypes;

    function isEndish(topLevelType) {
      return topLevelType === topLevelTypes.topMouseUp ||
        topLevelType === topLevelTypes.topTouchEnd ||
        topLevelType === topLevelTypes.topTouchCancel;
    }

    function isMoveish(topLevelType) {
      return topLevelType === topLevelTypes.topMouseMove ||
        topLevelType === topLevelTypes.topTouchMove;
    }

    function isStartish(topLevelType) {
      return topLevelType === topLevelTypes.topMouseDown ||
        topLevelType === topLevelTypes.topTouchStart;
    }

    var validateEventDispatches;
    if (false) {
      validateEventDispatches = function(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchIDs = event._dispatchIDs;

        var listenersIsArr = Array.isArray(dispatchListeners);
        var idsIsArr = Array.isArray(dispatchIDs);
        var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
        var listenersLen = listenersIsArr ?
          dispatchListeners.length :
          dispatchListeners ? 1 : 0;

        ("production" !== process.env.NODE_ENV ? invariant(
          idsIsArr === listenersIsArr && IDsLen === listenersLen,
          'EventPluginUtils: Invalid `event`.'
        ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
      };
    }

    /**
     * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
     * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
     * kept separate to conserve memory.
     */
    function forEachEventDispatch(event, cb) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
      if (false) {
        validateEventDispatches(event);
      }
      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          }
          // Listeners and IDs are two parallel arrays that are always in sync.
          cb(event, dispatchListeners[i], dispatchIDs[i]);
        }
      } else if (dispatchListeners) {
        cb(event, dispatchListeners, dispatchIDs);
      }
    }

    /**
     * Default implementation of PluginModule.executeDispatch().
     * @param {SyntheticEvent} SyntheticEvent to handle
     * @param {function} Application-level callback
     * @param {string} domID DOM id to pass to the callback.
     */
    function executeDispatch(event, listener, domID) {
      event.currentTarget = injection.Mount.getNode(domID);
      var returnValue = listener(event, domID);
      event.currentTarget = null;
      return returnValue;
    }

    /**
     * Standard/simple iteration through an event's collected dispatches.
     */
    function executeDispatchesInOrder(event, cb) {
      forEachEventDispatch(event, cb);
      event._dispatchListeners = null;
      event._dispatchIDs = null;
    }

    /**
     * Standard/simple iteration through an event's collected dispatches, but stops
     * at the first dispatch execution returning true, and returns that id.
     *
     * @return id of the first dispatch execution who's listener returns true, or
     * null if no listener returned true.
     */
    function executeDispatchesInOrderStopAtTrueImpl(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
      if (false) {
        validateEventDispatches(event);
      }
      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          }
          // Listeners and IDs are two parallel arrays that are always in sync.
          if (dispatchListeners[i](event, dispatchIDs[i])) {
            return dispatchIDs[i];
          }
        }
      } else if (dispatchListeners) {
        if (dispatchListeners(event, dispatchIDs)) {
          return dispatchIDs;
        }
      }
      return null;
    }

    /**
     * @see executeDispatchesInOrderStopAtTrueImpl
     */
    function executeDispatchesInOrderStopAtTrue(event) {
      var ret = executeDispatchesInOrderStopAtTrueImpl(event);
      event._dispatchIDs = null;
      event._dispatchListeners = null;
      return ret;
    }

    /**
     * Execution of a "direct" dispatch - there must be at most one dispatch
     * accumulated on the event or it is considered an error. It doesn't really make
     * sense for an event with multiple dispatches (bubbled) to keep track of the
     * return values at each dispatch execution, but it does tend to make sense when
     * dealing with "direct" dispatches.
     *
     * @return The return value of executing the single dispatch.
     */
    function executeDirectDispatch(event) {
      if (false) {
        validateEventDispatches(event);
      }
      var dispatchListener = event._dispatchListeners;
      var dispatchID = event._dispatchIDs;
      (false ? invariant(
        !Array.isArray(dispatchListener),
        'executeDirectDispatch(...): Invalid `event`.'
      ) : invariant(!Array.isArray(dispatchListener)));
      var res = dispatchListener ?
        dispatchListener(event, dispatchID) :
        null;
      event._dispatchListeners = null;
      event._dispatchIDs = null;
      return res;
    }

    /**
     * @param {SyntheticEvent} event
     * @return {bool} True iff number of dispatches accumulated is greater than 0.
     */
    function hasDispatches(event) {
      return !!event._dispatchListeners;
    }

    /**
     * General utilities that are useful in creating custom Event Plugins.
     */
    var EventPluginUtils = {
      isEndish: isEndish,
      isMoveish: isMoveish,
      isStartish: isStartish,

      executeDirectDispatch: executeDirectDispatch,
      executeDispatch: executeDispatch,
      executeDispatchesInOrder: executeDispatchesInOrder,
      executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
      hasDispatches: hasDispatches,
      injection: injection,
      useTouchEvents: false
    };

    module.exports = EventPluginUtils;

    /***/
  }),
  /* 226 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule EventConstants
     */

    'use strict';

    var keyMirror = __webpack_require__(227);

    var PropagationPhases = keyMirror({ bubbled: null, captured: null });

    /**
     * Types of raw signals from the browser caught at the top level.
     */
    var topLevelTypes = keyMirror({
      topBlur: null,
      topChange: null,
      topClick: null,
      topCompositionEnd: null,
      topCompositionStart: null,
      topCompositionUpdate: null,
      topContextMenu: null,
      topCopy: null,
      topCut: null,
      topDoubleClick: null,
      topDrag: null,
      topDragEnd: null,
      topDragEnter: null,
      topDragExit: null,
      topDragLeave: null,
      topDragOver: null,
      topDragStart: null,
      topDrop: null,
      topError: null,
      topFocus: null,
      topInput: null,
      topKeyDown: null,
      topKeyPress: null,
      topKeyUp: null,
      topLoad: null,
      topMouseDown: null,
      topMouseMove: null,
      topMouseOut: null,
      topMouseOver: null,
      topMouseUp: null,
      topPaste: null,
      topReset: null,
      topScroll: null,
      topSelectionChange: null,
      topSubmit: null,
      topTextInput: null,
      topTouchCancel: null,
      topTouchEnd: null,
      topTouchMove: null,
      topTouchStart: null,
      topWheel: null
    });

    var EventConstants = {
      topLevelTypes: topLevelTypes,
      PropagationPhases: PropagationPhases
    };

    module.exports = EventConstants;

    /***/
  }),
  /* 227 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule keyMirror
     * @typechecks static-only
     */

    'use strict';

    var invariant = __webpack_require__(228);

    /**
     * Constructs an enumeration with keys equal to their value.
     *
     * For example:
     *
     *   var COLORS = keyMirror({blue: null, red: null});
     *   var myColor = COLORS.blue;
     *   var isColorValid = !!COLORS[myColor];
     *
     * The last line could not be performed if the values of the generated enum were
     * not equal to their keys.
     *
     *   Input:  {key1: val1, key2: val2}
     *   Output: {key1: key1, key2: key2}
     *
     * @param {object} obj
     * @return {object}
     */
    var keyMirror = function(obj) {
      var ret = {};
      var key;
      (false ? invariant(
        obj instanceof Object && !Array.isArray(obj),
        'keyMirror(...): Argument must be an object.'
      ) : invariant(obj instanceof Object && !Array.isArray(obj)));
      for (key in obj) {
        if (!obj.hasOwnProperty(key)) {
          continue;
        }
        ret[key] = key;
      }
      return ret;
    };

    module.exports = keyMirror;

    /***/
  }),
  /* 228 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule invariant
     */

    "use strict";

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var invariant = function(condition, format, a, b, c, d, e, f) {
      if (false) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      }

      if (!condition) {
        var error;
        if (format === undefined) {
          error = new Error(
            'Minified exception occurred; use the non-minified dev environment ' +
            'for the full error message and additional helpful warnings.'
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            'Invariant Violation: ' +
            format.replace(/%s/g, function() { return args[argIndex++]; })
          );
        }

        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    };

    module.exports = invariant;

    /***/
  }),
  /* 229 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactChildren
     */

    'use strict';

    var PooledClass = __webpack_require__(230);
    var ReactFragment = __webpack_require__(231);

    var traverseAllChildren = __webpack_require__(239);
    var warning = __webpack_require__(236);

    var twoArgumentPooler = PooledClass.twoArgumentPooler;
    var threeArgumentPooler = PooledClass.threeArgumentPooler;

    /**
     * PooledClass representing the bookkeeping associated with performing a child
     * traversal. Allows avoiding binding callbacks.
     *
     * @constructor ForEachBookKeeping
     * @param {!function} forEachFunction Function to perform traversal with.
     * @param {?*} forEachContext Context to perform context with.
     */
    function ForEachBookKeeping(forEachFunction, forEachContext) {
      this.forEachFunction = forEachFunction;
      this.forEachContext = forEachContext;
    }
    PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

    function forEachSingleChild(traverseContext, child, name, i) {
      var forEachBookKeeping = traverseContext;
      forEachBookKeeping.forEachFunction.call(
        forEachBookKeeping.forEachContext, child, i);
    }

    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc.
     * @param {*} forEachContext Context for forEachContext.
     */
    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }

      var traverseContext =
        ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      ForEachBookKeeping.release(traverseContext);
    }

    /**
     * PooledClass representing the bookkeeping associated with performing a child
     * mapping. Allows avoiding binding callbacks.
     *
     * @constructor MapBookKeeping
     * @param {!*} mapResult Object containing the ordered map of results.
     * @param {!function} mapFunction Function to perform mapping with.
     * @param {?*} mapContext Context to perform mapping with.
     */
    function MapBookKeeping(mapResult, mapFunction, mapContext) {
      this.mapResult = mapResult;
      this.mapFunction = mapFunction;
      this.mapContext = mapContext;
    }
    PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

    function mapSingleChildIntoContext(traverseContext, child, name, i) {
      var mapBookKeeping = traverseContext;
      var mapResult = mapBookKeeping.mapResult;

      var keyUnique = !mapResult.hasOwnProperty(name);
      if (false) {
        ("production" !== process.env.NODE_ENV ? warning(
          keyUnique,
          'ReactChildren.map(...): Encountered two children with the same key, ' +
          '`%s`. Child keys must be unique; when two children share a key, only ' +
          'the first child will be used.',
          name
        ) : null);
      }

      if (keyUnique) {
        var mappedChild =
          mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
        mapResult[name] = mappedChild;
      }
    }

    /**
     * Maps children that are typically specified as `props.children`.
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * TODO: This may likely break any calls to `ReactChildren.map` that were
     * previously relying on the fact that we guarded against null children.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} mapFunction.
     * @param {*} mapContext Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }

      var mapResult = {};
      var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      MapBookKeeping.release(traverseContext);
      return ReactFragment.create(mapResult);
    }

    function forEachSingleChildDummy(traverseContext, child, name, i) {
      return null;
    }

    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */
    function countChildren(children, context) {
      return traverseAllChildren(children, forEachSingleChildDummy, null);
    }

    var ReactChildren = {
      forEach: forEachChildren,
      map: mapChildren,
      count: countChildren
    };

    module.exports = ReactChildren;

    /***/
  }),
  /* 230 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule PooledClass
     */

    'use strict';

    var invariant = __webpack_require__(228);

    /**
     * Static poolers. Several custom versions for each potential number of
     * arguments. A completely generic pooler is easy to implement, but would
     * require accessing the `arguments` object. In each of these, `this` refers to
     * the Class itself, not an instance. If any others are needed, simply add them
     * here, or in their own files.
     */
    var oneArgumentPooler = function(copyFieldsFrom) {
      var Klass = this;
      if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, copyFieldsFrom);
        return instance;
      } else {
        return new Klass(copyFieldsFrom);
      }
    };

    var twoArgumentPooler = function(a1, a2) {
      var Klass = this;
      if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2);
        return instance;
      } else {
        return new Klass(a1, a2);
      }
    };

    var threeArgumentPooler = function(a1, a2, a3) {
      var Klass = this;
      if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3);
        return instance;
      } else {
        return new Klass(a1, a2, a3);
      }
    };

    var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
      var Klass = this;
      if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        Klass.call(instance, a1, a2, a3, a4, a5);
        return instance;
      } else {
        return new Klass(a1, a2, a3, a4, a5);
      }
    };

    var standardReleaser = function(instance) {
      var Klass = this;
      (false ? invariant(
        instance instanceof Klass,
        'Trying to release an instance into a pool of a different type.'
      ) : invariant(instance instanceof Klass));
      if (instance.destructor) {
        instance.destructor();
      }
      if (Klass.instancePool.length < Klass.poolSize) {
        Klass.instancePool.push(instance);
      }
    };

    var DEFAULT_POOL_SIZE = 10;
    var DEFAULT_POOLER = oneArgumentPooler;

    /**
     * Augments `CopyConstructor` to be a poolable class, augmenting only the class
     * itself (statically) not adding any prototypical fields. Any CopyConstructor
     * you give this may have a `poolSize` property, and will look for a
     * prototypical `destructor` on instances (optional).
     *
     * @param {Function} CopyConstructor Constructor that can be used to reset.
     * @param {Function} pooler Customizable pooler.
     */
    var addPoolingTo = function(CopyConstructor, pooler) {
      var NewKlass = CopyConstructor;
      NewKlass.instancePool = [];
      NewKlass.getPooled = pooler || DEFAULT_POOLER;
      if (!NewKlass.poolSize) {
        NewKlass.poolSize = DEFAULT_POOL_SIZE;
      }
      NewKlass.release = standardReleaser;
      return NewKlass;
    };

    var PooledClass = {
      addPoolingTo: addPoolingTo,
      oneArgumentPooler: oneArgumentPooler,
      twoArgumentPooler: twoArgumentPooler,
      threeArgumentPooler: threeArgumentPooler,
      fiveArgumentPooler: fiveArgumentPooler
    };

    module.exports = PooledClass;

    /***/
  }),
  /* 231 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactFragment
     */

    'use strict';

    var ReactElement = __webpack_require__(232);

    var warning = __webpack_require__(236);

    /**
     * We used to allow keyed objects to serve as a collection of ReactElements,
     * or nested sets. This allowed us a way to explicitly key a set a fragment of
     * components. This is now being replaced with an opaque data structure.
     * The upgrade path is to call React.addons.createFragment({ key: value }) to
     * create a keyed fragment. The resulting data structure is opaque, for now.
     */

    if (false) {
      var fragmentKey = '_reactFragment';
      var didWarnKey = '_reactDidWarn';
      var canWarnForReactFragment = false;

      try {
        // Feature test. Don't even try to issue this warning if we can't use
        // enumerable: false.

        var dummy = function() {
          return 1;
        };

        Object.defineProperty({},
          fragmentKey, { enumerable: false, value: true }
        );

        Object.defineProperty({},
          'key', { enumerable: true, get: dummy }
        );

        canWarnForReactFragment = true;
      } catch (x) {}

      var proxyPropertyAccessWithWarning = function(obj, key) {
        Object.defineProperty(obj, key, {
          enumerable: true,
          get: function() {
            ("production" !== process.env.NODE_ENV ? warning(
              this[didWarnKey],
              'A ReactFragment is an opaque type. Accessing any of its ' +
              'properties is deprecated. Pass it to one of the React.Children ' +
              'helpers.'
            ) : null);
            this[didWarnKey] = true;
            return this[fragmentKey][key];
          },
          set: function(value) {
            ("production" !== process.env.NODE_ENV ? warning(
              this[didWarnKey],
              'A ReactFragment is an immutable opaque type. Mutating its ' +
              'properties is deprecated.'
            ) : null);
            this[didWarnKey] = true;
            this[fragmentKey][key] = value;
          }
        });
      };

      var issuedWarnings = {};

      var didWarnForFragment = function(fragment) {
        // We use the keys and the type of the value as a heuristic to dedupe the
        // warning to avoid spamming too much.
        var fragmentCacheKey = '';
        for (var key in fragment) {
          fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
        }
        var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
        issuedWarnings[fragmentCacheKey] = true;
        return alreadyWarnedOnce;
      };
    }

    var ReactFragment = {
      // Wrap a keyed object in an opaque proxy that warns you if you access any
      // of its properties.
      create: function(object) {
        if (false) {
          if (typeof object !== 'object' || !object || Array.isArray(object)) {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'React.addons.createFragment only accepts a single object.',
              object
            ) : null);
            return object;
          }
          if (ReactElement.isValidElement(object)) {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'React.addons.createFragment does not accept a ReactElement ' +
              'without a wrapper object.'
            ) : null);
            return object;
          }
          if (canWarnForReactFragment) {
            var proxy = {};
            Object.defineProperty(proxy, fragmentKey, {
              enumerable: false,
              value: object
            });
            Object.defineProperty(proxy, didWarnKey, {
              writable: true,
              enumerable: false,
              value: false
            });
            for (var key in object) {
              proxyPropertyAccessWithWarning(proxy, key);
            }
            Object.preventExtensions(proxy);
            return proxy;
          }
        }
        return object;
      },
      // Extract the original keyed object from the fragment opaque type. Warn if
      // a plain object is passed here.
      extract: function(fragment) {
        if (false) {
          if (canWarnForReactFragment) {
            if (!fragment[fragmentKey]) {
              ("production" !== process.env.NODE_ENV ? warning(
                didWarnForFragment(fragment),
                'Any use of a keyed object should be wrapped in ' +
                'React.addons.createFragment(object) before being passed as a ' +
                'child.'
              ) : null);
              return fragment;
            }
            return fragment[fragmentKey];
          }
        }
        return fragment;
      },
      // Check if this is a fragment and if so, extract the keyed object. If it
      // is a fragment-like object, warn that it should be wrapped. Ignore if we
      // can't determine what kind of object this is.
      extractIfFragment: function(fragment) {
        if (false) {
          if (canWarnForReactFragment) {
            // If it is the opaque type, return the keyed object.
            if (fragment[fragmentKey]) {
              return fragment[fragmentKey];
            }
            // Otherwise, check each property if it has an element, if it does
            // it is probably meant as a fragment, so we can warn early. Defer,
            // the warning to extract.
            for (var key in fragment) {
              if (fragment.hasOwnProperty(key) &&
                ReactElement.isValidElement(fragment[key])) {
                // This looks like a fragment object, we should provide an
                // early warning.
                return ReactFragment.extract(fragment);
              }
            }
          }
        }
        return fragment;
      }
    };

    module.exports = ReactFragment;

    /***/
  }),
  /* 232 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactElement
     */

    'use strict';

    var ReactContext = __webpack_require__(233);
    var ReactCurrentOwner = __webpack_require__(238);

    var assign = __webpack_require__(234);
    var warning = __webpack_require__(236);

    var RESERVED_PROPS = {
      key: true,
      ref: true
    };

    /**
     * Warn for mutations.
     *
     * @internal
     * @param {object} object
     * @param {string} key
     */
    function defineWarningProperty(object, key) {
      Object.defineProperty(object, key, {

        configurable: false,
        enumerable: true,

        get: function() {
          if (!this._store) {
            return null;
          }
          return this._store[key];
        },

        set: function(value) {
          (false ? warning(
            false,
            'Don\'t set the %s property of the React element. Instead, ' +
            'specify the correct value when initially creating the element.',
            key
          ) : null);
          this._store[key] = value;
        }

      });
    }

    /**
     * This is updated to true if the membrane is successfully created.
     */
    var useMutationMembrane = false;

    /**
     * Warn for mutations.
     *
     * @internal
     * @param {object} element
     */
    function defineMutationMembrane(prototype) {
      try {
        var pseudoFrozenProperties = {
          props: true
        };
        for (var key in pseudoFrozenProperties) {
          defineWarningProperty(prototype, key);
        }
        useMutationMembrane = true;
      } catch (x) {
        // IE will fail on defineProperty
      }
    }

    /**
     * Base constructor for all React elements. This is only used to make this
     * work with a dynamic instanceof check. Nothing should live on this prototype.
     *
     * @param {*} type
     * @param {string|object} ref
     * @param {*} key
     * @param {*} props
     * @internal
     */
    var ReactElement = function(type, key, ref, owner, context, props) {
      // Built-in properties that belong on the element
      this.type = type;
      this.key = key;
      this.ref = ref;

      // Record the component responsible for creating this element.
      this._owner = owner;

      // TODO: Deprecate withContext, and then the context becomes accessible
      // through the owner.
      this._context = context;

      if (false) {
        // The validation flag and props are currently mutative. We put them on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        this._store = { props: props, originalProps: assign({}, props) };

        // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        try {
          Object.defineProperty(this._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true
          });
        } catch (x) {}
        this._store.validated = false;

        // We're not allowed to set props directly on the object so we early
        // return and rely on the prototype membrane to forward to the backing
        // store.
        if (useMutationMembrane) {
          Object.freeze(this);
          return;
        }
      }

      this.props = props;
    };

    // We intentionally don't expose the function on the constructor property.
    // ReactElement should be indistinguishable from a plain object.
    ReactElement.prototype = {
      _isReactElement: true
    };

    if (false) {
      defineMutationMembrane(ReactElement.prototype);
    }

    ReactElement.createElement = function(type, config, children) {
      var propName;

      // Reserved names are extracted
      var props = {};

      var key = null;
      var ref = null;

      if (config != null) {
        ref = config.ref === undefined ? null : config.ref;
        key = config.key === undefined ? null : '' + config.key;
        // Remaining properties are added to a new props object
        for (propName in config) {
          if (config.hasOwnProperty(propName) &&
            !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      }

      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }

      // Resolve default props
      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps) {
          if (typeof props[propName] === 'undefined') {
            props[propName] = defaultProps[propName];
          }
        }
      }

      return new ReactElement(
        type,
        key,
        ref,
        ReactCurrentOwner.current,
        ReactContext.current,
        props
      );
    };

    ReactElement.createFactory = function(type) {
      var factory = ReactElement.createElement.bind(null, type);
      // Expose the type on the factory and the prototype so that it can be
      // easily accessed on elements. E.g. <Foo />.type === Foo.type.
      // This should not be named `constructor` since this may not be the function
      // that created the element, and it may not even be a constructor.
      // Legacy hook TODO: Warn if this is accessed
      factory.type = type;
      return factory;
    };

    ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
      var newElement = new ReactElement(
        oldElement.type,
        oldElement.key,
        oldElement.ref,
        oldElement._owner,
        oldElement._context,
        newProps
      );

      if (false) {
        // If the key on the original is valid, then the clone is valid
        newElement._store.validated = oldElement._store.validated;
      }
      return newElement;
    };

    ReactElement.cloneElement = function(element, config, children) {
      var propName;

      // Original props are copied
      var props = assign({}, element.props);

      // Reserved names are extracted
      var key = element.key;
      var ref = element.ref;

      // Owner will be preserved, unless ref is overridden
      var owner = element._owner;

      if (config != null) {
        if (config.ref !== undefined) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }
        if (config.key !== undefined) {
          key = '' + config.key;
        }
        // Remaining properties override existing props
        for (propName in config) {
          if (config.hasOwnProperty(propName) &&
            !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      }

      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }

      return new ReactElement(
        element.type,
        key,
        ref,
        owner,
        element._context,
        props
      );
    };

    /**
     * @param {?object} object
     * @return {boolean} True if `object` is a valid component.
     * @final
     */
    ReactElement.isValidElement = function(object) {
      // ReactTestUtils is often used outside of beforeEach where as React is
      // within it. This leads to two different instances of React on the same
      // page. To identify a element from a different React instance we use
      // a flag instead of an instanceof check.
      var isElement = !!(object && object._isReactElement);
      // if (isElement && !(object instanceof ReactElement)) {
      // This is an indicator that you're using multiple versions of React at the
      // same time. This will screw with ownership and stuff. Fix it, please.
      // TODO: We could possibly warn here.
      // }
      return isElement;
    };

    module.exports = ReactElement;

    /***/
  }),
  /* 233 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactContext
     */

    'use strict';

    var assign = __webpack_require__(234);
    var emptyObject = __webpack_require__(235);
    var warning = __webpack_require__(236);

    var didWarn = false;

    /**
     * Keeps track of the current context.
     *
     * The context is automatically passed down the component ownership hierarchy
     * and is accessible via `this.context` on ReactCompositeComponents.
     */
    var ReactContext = {

      /**
       * @internal
       * @type {object}
       */
      current: emptyObject,

      /**
       * Temporarily extends the current context while executing scopedCallback.
       *
       * A typical use case might look like
       *
       *  render: function() {
       *    var children = ReactContext.withContext({foo: 'foo'}, () => (
       *
       *    ));
       *    return <div>{children}</div>;
       *  }
       *
       * @param {object} newContext New context to merge into the existing context
       * @param {function} scopedCallback Callback to run with the new context
       * @return {ReactComponent|array<ReactComponent>}
       */
      withContext: function(newContext, scopedCallback) {
        if (false) {
          ("production" !== process.env.NODE_ENV ? warning(
            didWarn,
            'withContext is deprecated and will be removed in a future version. ' +
            'Use a wrapper component with getChildContext instead.'
          ) : null);

          didWarn = true;
        }

        var result;
        var previousContext = ReactContext.current;
        ReactContext.current = assign({}, previousContext, newContext);
        try {
          result = scopedCallback();
        } finally {
          ReactContext.current = previousContext;
        }
        return result;
      }

    };

    module.exports = ReactContext;

    /***/
  }),
  /* 234 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule Object.assign
     */

    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

    'use strict';

    function assign(target, sources) {
      if (target == null) {
        throw new TypeError('Object.assign target cannot be null or undefined');
      }

      var to = Object(target);
      var hasOwnProperty = Object.prototype.hasOwnProperty;

      for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
        var nextSource = arguments[nextIndex];
        if (nextSource == null) {
          continue;
        }

        var from = Object(nextSource);

        // We don't currently support accessors nor proxies. Therefore this
        // copy cannot throw. If we ever supported this then we must handle
        // exceptions and side-effects. We don't support symbols so they won't
        // be transferred.

        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
      }

      return to;
    }

    module.exports = assign;

    /***/
  }),
  /* 235 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule emptyObject
     */

    "use strict";

    var emptyObject = {};

    if (false) {
      Object.freeze(emptyObject);
    }

    module.exports = emptyObject;

    /***/
  }),
  /* 236 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule warning
     */

    "use strict";

    var emptyFunction = __webpack_require__(237);

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = emptyFunction;

    if (false) {
      warning = function(condition, format) {
        for (var args = [], $__0 = 2, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);
        if (format === undefined) {
          throw new Error(
            '`warning(condition, format, ...args)` requires a warning ' +
            'message argument'
          );
        }

        if (format.length < 10 || /^[s\W]*$/.test(format)) {
          throw new Error(
            'The warning format should be able to uniquely identify this ' +
            'warning. Please, use a more descriptive format than: ' + format
          );
        }

        if (format.indexOf('Failed Composite propType: ') === 0) {
          return; // Ignore CompositeComponent proptype check.
        }

        if (!condition) {
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function() { return args[argIndex++]; });
          console.warn(message);
          try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
          } catch (x) {}
        }
      };
    }

    module.exports = warning;

    /***/
  }),
  /* 237 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule emptyFunction
     */

    function makeEmptyFunction(arg) {
      return function() {
        return arg;
      };
    }

    /**
     * This function accepts and discards inputs; it has no side effects. This is
     * primarily useful idiomatically for overridable function endpoints which
     * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
     */
    function emptyFunction() {}

    emptyFunction.thatReturns = makeEmptyFunction;
    emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
    emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
    emptyFunction.thatReturnsNull = makeEmptyFunction(null);
    emptyFunction.thatReturnsThis = function() { return this; };
    emptyFunction.thatReturnsArgument = function(arg) { return arg; };

    module.exports = emptyFunction;

    /***/
  }),
  /* 238 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactCurrentOwner
     */

    'use strict';

    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     *
     * The depth indicate how many composite components are above this render level.
     */
    var ReactCurrentOwner = {

      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null

    };

    module.exports = ReactCurrentOwner;

    /***/
  }),
  /* 239 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule traverseAllChildren
     */

    'use strict';

    var ReactElement = __webpack_require__(232);
    var ReactFragment = __webpack_require__(231);
    var ReactInstanceHandles = __webpack_require__(240);

    var getIteratorFn = __webpack_require__(242);
    var invariant = __webpack_require__(228);
    var warning = __webpack_require__(236);

    var SEPARATOR = ReactInstanceHandles.SEPARATOR;
    var SUBSEPARATOR = ':';

    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */

    var userProvidedKeyEscaperLookup = {
      '=': '=0',
      '.': '=1',
      ':': '=2'
    };

    var userProvidedKeyEscapeRegex = /[=.:]/g;

    var didWarnAboutMaps = false;

    function userProvidedKeyEscaper(match) {
      return userProvidedKeyEscaperLookup[match];
    }

    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */
    function getComponentKey(component, index) {
      if (component && component.key != null) {
        // Explicit key
        return wrapUserProvidedKey(component.key);
      }
      // Implicit key determined by the index in the set
      return index.toString(36);
    }

    /**
     * Escape a component key so that it is safe to use in a reactid.
     *
     * @param {*} key Component key to be escaped.
     * @return {string} An escaped string.
     */
    function escapeUserProvidedKey(text) {
      return ('' + text).replace(
        userProvidedKeyEscapeRegex,
        userProvidedKeyEscaper
      );
    }

    /**
     * Wrap a `key` value explicitly provided by the user to distinguish it from
     * implicitly-generated keys generated by a component's index in its parent.
     *
     * @param {string} key Value of a user-provided `key` attribute
     * @return {string}
     */
    function wrapUserProvidedKey(key) {
      return '$' + escapeUserProvidedKey(key);
    }

    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!number} indexSoFar Number of children encountered until this point.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildrenImpl(
      children,
      nameSoFar,
      indexSoFar,
      callback,
      traverseContext
    ) {
      var type = typeof children;

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      if (children === null ||
        type === 'string' ||
        type === 'number' ||
        ReactElement.isValidElement(children)) {
        callback(
          traverseContext,
          children,
          // If it's the only child, treat the name as if it was wrapped in an array
          // so that it's consistent if the number of children grows.
          nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
          indexSoFar
        );
        return 1;
      }

      var child, nextName, nextIndex;
      var subtreeCount = 0; // Count of children found in the current subtree.

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            getComponentKey(child, i)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      } else {
        var iteratorFn = getIteratorFn(children);
        if (iteratorFn) {
          var iterator = iteratorFn.call(children);
          var step;
          if (iteratorFn !== children.entries) {
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = (
                (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
                getComponentKey(child, ii++)
              );
              nextIndex = indexSoFar + subtreeCount;
              subtreeCount += traverseAllChildrenImpl(
                child,
                nextName,
                nextIndex,
                callback,
                traverseContext
              );
            }
          } else {
            if (false) {
              ("production" !== process.env.NODE_ENV ? warning(
                didWarnAboutMaps,
                'Using Maps as children is not yet fully supported. It is an ' +
                'experimental feature that might be removed. Convert it to a ' +
                'sequence / iterable of keyed ReactElements instead.'
              ) : null);
              didWarnAboutMaps = true;
            }
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                child = entry[1];
                nextName = (
                  (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
                  wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
                  getComponentKey(child, 0)
                );
                nextIndex = indexSoFar + subtreeCount;
                subtreeCount += traverseAllChildrenImpl(
                  child,
                  nextName,
                  nextIndex,
                  callback,
                  traverseContext
                );
              }
            }
          }
        } else if (type === 'object') {
          (false ? invariant(
            children.nodeType !== 1,
            'traverseAllChildren(...): Encountered an invalid child; DOM ' +
            'elements are not valid children of React components.'
          ) : invariant(children.nodeType !== 1));
          var fragment = ReactFragment.extract(children);
          for (var key in fragment) {
            if (fragment.hasOwnProperty(key)) {
              child = fragment[key];
              nextName = (
                (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
                wrapUserProvidedKey(key) + SUBSEPARATOR +
                getComponentKey(child, 0)
              );
              nextIndex = indexSoFar + subtreeCount;
              subtreeCount += traverseAllChildrenImpl(
                child,
                nextName,
                nextIndex,
                callback,
                traverseContext
              );
            }
          }
        }
      }

      return subtreeCount;
    }

    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
    }

    module.exports = traverseAllChildren;

    /***/
  }),
  /* 240 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactInstanceHandles
     * @typechecks static-only
     */

    'use strict';

    var ReactRootIndex = __webpack_require__(241);

    var invariant = __webpack_require__(228);

    var SEPARATOR = '.';
    var SEPARATOR_LENGTH = SEPARATOR.length;

    /**
     * Maximum depth of traversals before we consider the possibility of a bad ID.
     */
    var MAX_TREE_DEPTH = 100;

    /**
     * Creates a DOM ID prefix to use when mounting React components.
     *
     * @param {number} index A unique integer
     * @return {string} React root ID.
     * @internal
     */
    function getReactRootIDString(index) {
      return SEPARATOR + index.toString(36);
    }

    /**
     * Checks if a character in the supplied ID is a separator or the end.
     *
     * @param {string} id A React DOM ID.
     * @param {number} index Index of the character to check.
     * @return {boolean} True if the character is a separator or end of the ID.
     * @private
     */
    function isBoundary(id, index) {
      return id.charAt(index) === SEPARATOR || index === id.length;
    }

    /**
     * Checks if the supplied string is a valid React DOM ID.
     *
     * @param {string} id A React DOM ID, maybe.
     * @return {boolean} True if the string is a valid React DOM ID.
     * @private
     */
    function isValidID(id) {
      return id === '' || (
        id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
      );
    }

    /**
     * Checks if the first ID is an ancestor of or equal to the second ID.
     *
     * @param {string} ancestorID
     * @param {string} descendantID
     * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
     * @internal
     */
    function isAncestorIDOf(ancestorID, descendantID) {
      return (
        descendantID.indexOf(ancestorID) === 0 &&
        isBoundary(descendantID, ancestorID.length)
      );
    }

    /**
     * Gets the parent ID of the supplied React DOM ID, `id`.
     *
     * @param {string} id ID of a component.
     * @return {string} ID of the parent, or an empty string.
     * @private
     */
    function getParentID(id) {
      return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
    }

    /**
     * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
     * supplied `destinationID`. If they are equal, the ID is returned.
     *
     * @param {string} ancestorID ID of an ancestor node of `destinationID`.
     * @param {string} destinationID ID of the destination node.
     * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
     * @private
     */
    function getNextDescendantID(ancestorID, destinationID) {
      (false ? invariant(
        isValidID(ancestorID) && isValidID(destinationID),
        'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
        ancestorID,
        destinationID
      ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
      (false ? invariant(
        isAncestorIDOf(ancestorID, destinationID),
        'getNextDescendantID(...): React has made an invalid assumption about ' +
        'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
        ancestorID,
        destinationID
      ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
      if (ancestorID === destinationID) {
        return ancestorID;
      }
      // Skip over the ancestor and the immediate separator. Traverse until we hit
      // another separator or we reach the end of `destinationID`.
      var start = ancestorID.length + SEPARATOR_LENGTH;
      var i;
      for (i = start; i < destinationID.length; i++) {
        if (isBoundary(destinationID, i)) {
          break;
        }
      }
      return destinationID.substr(0, i);
    }

    /**
     * Gets the nearest common ancestor ID of two IDs.
     *
     * Using this ID scheme, the nearest common ancestor ID is the longest common
     * prefix of the two IDs that immediately preceded a "marker" in both strings.
     *
     * @param {string} oneID
     * @param {string} twoID
     * @return {string} Nearest common ancestor ID, or the empty string if none.
     * @private
     */
    function getFirstCommonAncestorID(oneID, twoID) {
      var minLength = Math.min(oneID.length, twoID.length);
      if (minLength === 0) {
        return '';
      }
      var lastCommonMarkerIndex = 0;
      // Use `<=` to traverse until the "EOL" of the shorter string.
      for (var i = 0; i <= minLength; i++) {
        if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
          lastCommonMarkerIndex = i;
        } else if (oneID.charAt(i) !== twoID.charAt(i)) {
          break;
        }
      }
      var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
      (false ? invariant(
        isValidID(longestCommonID),
        'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
        oneID,
        twoID,
        longestCommonID
      ) : invariant(isValidID(longestCommonID)));
      return longestCommonID;
    }

    /**
     * Traverses the parent path between two IDs (either up or down). The IDs must
     * not be the same, and there must exist a parent path between them. If the
     * callback returns `false`, traversal is stopped.
     *
     * @param {?string} start ID at which to start traversal.
     * @param {?string} stop ID at which to end traversal.
     * @param {function} cb Callback to invoke each ID with.
     * @param {?boolean} skipFirst Whether or not to skip the first node.
     * @param {?boolean} skipLast Whether or not to skip the last node.
     * @private
     */
    function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
      start = start || '';
      stop = stop || '';
      (false ? invariant(
        start !== stop,
        'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
        start
      ) : invariant(start !== stop));
      var traverseUp = isAncestorIDOf(stop, start);
      (false ? invariant(
        traverseUp || isAncestorIDOf(start, stop),
        'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
        'not have a parent path.',
        start,
        stop
      ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
      // Traverse from `start` to `stop` one depth at a time.
      var depth = 0;
      var traverse = traverseUp ? getParentID : getNextDescendantID;
      for (var id = start; /* until break */ ; id = traverse(id, stop)) {
        var ret;
        if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
          ret = cb(id, traverseUp, arg);
        }
        if (ret === false || id === stop) {
          // Only break //after// visiting `stop`.
          break;
        }
        (false ? invariant(
          depth++ < MAX_TREE_DEPTH,
          'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
          'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
          start, stop
        ) : invariant(depth++ < MAX_TREE_DEPTH));
      }
    }

    /**
     * Manages the IDs assigned to DOM representations of React components. This
     * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
     * order to simulate events).
     *
     * @internal
     */
    var ReactInstanceHandles = {

      /**
       * Constructs a React root ID
       * @return {string} A React root ID.
       */
      createReactRootID: function() {
        return getReactRootIDString(ReactRootIndex.createReactRootIndex());
      },

      /**
       * Constructs a React ID by joining a root ID with a name.
       *
       * @param {string} rootID Root ID of a parent component.
       * @param {string} name A component's name (as flattened children).
       * @return {string} A React ID.
       * @internal
       */
      createReactID: function(rootID, name) {
        return rootID + name;
      },

      /**
       * Gets the DOM ID of the React component that is the root of the tree that
       * contains the React component with the supplied DOM ID.
       *
       * @param {string} id DOM ID of a React component.
       * @return {?string} DOM ID of the React component that is the root.
       * @internal
       */
      getReactRootIDFromNodeID: function(id) {
        if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
          var index = id.indexOf(SEPARATOR, 1);
          return index > -1 ? id.substr(0, index) : id;
        }
        return null;
      },

      /**
       * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
       * should would receive a `mouseEnter` or `mouseLeave` event.
       *
       * NOTE: Does not invoke the callback on the nearest common ancestor because
       * nothing "entered" or "left" that element.
       *
       * @param {string} leaveID ID being left.
       * @param {string} enterID ID being entered.
       * @param {function} cb Callback to invoke on each entered/left ID.
       * @param {*} upArg Argument to invoke the callback with on left IDs.
       * @param {*} downArg Argument to invoke the callback with on entered IDs.
       * @internal
       */
      traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
        var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
        if (ancestorID !== leaveID) {
          traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
        }
        if (ancestorID !== enterID) {
          traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
        }
      },

      /**
       * Simulates the traversal of a two-phase, capture/bubble event dispatch.
       *
       * NOTE: This traversal happens on IDs without touching the DOM.
       *
       * @param {string} targetID ID of the target node.
       * @param {function} cb Callback to invoke.
       * @param {*} arg Argument to invoke the callback with.
       * @internal
       */
      traverseTwoPhase: function(targetID, cb, arg) {
        if (targetID) {
          traverseParentPath('', targetID, cb, arg, true, false);
          traverseParentPath(targetID, '', cb, arg, false, true);
        }
      },

      /**
       * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
       * example, passing `.0.$row-0.1` would result in `cb` getting called
       * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
       *
       * NOTE: This traversal happens on IDs without touching the DOM.
       *
       * @param {string} targetID ID of the target node.
       * @param {function} cb Callback to invoke.
       * @param {*} arg Argument to invoke the callback with.
       * @internal
       */
      traverseAncestors: function(targetID, cb, arg) {
        traverseParentPath('', targetID, cb, arg, true, false);
      },

      /**
       * Exposed for unit testing.
       * @private
       */
      _getFirstCommonAncestorID: getFirstCommonAncestorID,

      /**
       * Exposed for unit testing.
       * @private
       */
      _getNextDescendantID: getNextDescendantID,

      isAncestorIDOf: isAncestorIDOf,

      SEPARATOR: SEPARATOR

    };

    module.exports = ReactInstanceHandles;

    /***/
  }),
  /* 241 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactRootIndex
     * @typechecks
     */

    'use strict';

    var ReactRootIndexInjection = {
      /**
       * @param {function} _createReactRootIndex
       */
      injectCreateReactRootIndex: function(_createReactRootIndex) {
        ReactRootIndex.createReactRootIndex = _createReactRootIndex;
      }
    };

    var ReactRootIndex = {
      createReactRootIndex: null,
      injection: ReactRootIndexInjection
    };

    module.exports = ReactRootIndex;

    /***/
  }),
  /* 242 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getIteratorFn
     * @typechecks static-only
     */

    'use strict';

    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (
        (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
      );
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    module.exports = getIteratorFn;

    /***/
  }),
  /* 243 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactComponent
     */

    'use strict';

    var ReactUpdateQueue = __webpack_require__(244);

    var invariant = __webpack_require__(228);
    var warning = __webpack_require__(236);

    /**
     * Base class helpers for the updating state of a component.
     */
    function ReactComponent(props, context) {
      this.props = props;
      this.context = context;
    }

    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */
    ReactComponent.prototype.setState = function(partialState, callback) {
      (false ? invariant(
        typeof partialState === 'object' ||
        typeof partialState === 'function' ||
        partialState == null,
        'setState(...): takes an object of state variables to update or a ' +
        'function which returns an object of state variables.'
      ) : invariant(typeof partialState === 'object' ||
        typeof partialState === 'function' ||
        partialState == null));
      if (false) {
        ("production" !== process.env.NODE_ENV ? warning(
          partialState != null,
          'setState(...): You passed an undefined or null state object; ' +
          'instead, use forceUpdate().'
        ) : null);
      }
      ReactUpdateQueue.enqueueSetState(this, partialState);
      if (callback) {
        ReactUpdateQueue.enqueueCallback(this, callback);
      }
    };

    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */
    ReactComponent.prototype.forceUpdate = function(callback) {
      ReactUpdateQueue.enqueueForceUpdate(this);
      if (callback) {
        ReactUpdateQueue.enqueueCallback(this, callback);
      }
    };

    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */
    if (false) {
      var deprecatedAPIs = {
        getDOMNode: [
          'getDOMNode',
          'Use React.findDOMNode(component) instead.'
        ],
        isMounted: [
          'isMounted',
          'Instead, make sure to clean up subscriptions and pending requests in ' +
          'componentWillUnmount to prevent memory leaks.'
        ],
        replaceProps: [
          'replaceProps',
          'Instead, call React.render again at the top level.'
        ],
        replaceState: [
          'replaceState',
          'Refactor your code to use setState instead (see ' +
          'https://github.com/facebook/react/issues/3236).'
        ],
        setProps: [
          'setProps',
          'Instead, call React.render again at the top level.'
        ]
      };
      var defineDeprecationWarning = function(methodName, info) {
        try {
          Object.defineProperty(ReactComponent.prototype, methodName, {
            get: function() {
              ("production" !== process.env.NODE_ENV ? warning(
                false,
                '%s(...) is deprecated in plain JavaScript React classes. %s',
                info[0],
                info[1]
              ) : null);
              return undefined;
            }
          });
        } catch (x) {
          // IE will fail on defineProperty (es5-shim/sham too)
        }
      };
      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    module.exports = ReactComponent;

    /***/
  }),
  /* 244 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactUpdateQueue
     */

    'use strict';

    var ReactLifeCycle = __webpack_require__(245);
    var ReactCurrentOwner = __webpack_require__(238);
    var ReactElement = __webpack_require__(232);
    var ReactInstanceMap = __webpack_require__(246);
    var ReactUpdates = __webpack_require__(247);

    var assign = __webpack_require__(234);
    var invariant = __webpack_require__(228);
    var warning = __webpack_require__(236);

    function enqueueUpdate(internalInstance) {
      if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
        // If we're in a componentWillMount handler, don't enqueue a rerender
        // because ReactUpdates assumes we're in a browser context (which is
        // wrong for server rendering) and we're about to do a render anyway.
        // See bug in #1740.
        ReactUpdates.enqueueUpdate(internalInstance);
      }
    }

    function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
      (false ? invariant(
        ReactCurrentOwner.current == null,
        '%s(...): Cannot update during an existing state transition ' +
        '(such as within `render`). Render methods should be a pure function ' +
        'of props and state.',
        callerName
      ) : invariant(ReactCurrentOwner.current == null));

      var internalInstance = ReactInstanceMap.get(publicInstance);
      if (!internalInstance) {
        if (false) {
          // Only warn when we have a callerName. Otherwise we should be silent.
          // We're probably calling from enqueueCallback. We don't want to warn
          // there because we already warned for the corresponding lifecycle method.
          ("production" !== process.env.NODE_ENV ? warning(
            !callerName,
            '%s(...): Can only update a mounted or mounting component. ' +
            'This usually means you called %s() on an unmounted ' +
            'component. This is a no-op.',
            callerName,
            callerName
          ) : null);
        }
        return null;
      }

      if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
        return null;
      }

      return internalInstance;
    }

    /**
     * ReactUpdateQueue allows for state updates to be scheduled into a later
     * reconciliation step.
     */
    var ReactUpdateQueue = {

      /**
       * Enqueue a callback that will be executed after all the pending updates
       * have processed.
       *
       * @param {ReactClass} publicInstance The instance to use as `this` context.
       * @param {?function} callback Called after state is updated.
       * @internal
       */
      enqueueCallback: function(publicInstance, callback) {
        (false ? invariant(
          typeof callback === 'function',
          'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
          '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
          'isn\'t callable.'
        ) : invariant(typeof callback === 'function'));
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

        // Previously we would throw an error if we didn't have an internal
        // instance. Since we want to make it a no-op instead, we mirror the same
        // behavior we have in other enqueue* methods.
        // We also need to ignore callbacks in componentWillMount. See
        // enqueueUpdates.
        if (!internalInstance ||
          internalInstance === ReactLifeCycle.currentlyMountingInstance) {
          return null;
        }

        if (internalInstance._pendingCallbacks) {
          internalInstance._pendingCallbacks.push(callback);
        } else {
          internalInstance._pendingCallbacks = [callback];
        }
        // TODO: The callback here is ignored when setState is called from
        // componentWillMount. Either fix it or disallow doing so completely in
        // favor of getInitialState. Alternatively, we can disallow
        // componentWillMount during server-side rendering.
        enqueueUpdate(internalInstance);
      },

      enqueueCallbackInternal: function(internalInstance, callback) {
        (false ? invariant(
          typeof callback === 'function',
          'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
          '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
          'isn\'t callable.'
        ) : invariant(typeof callback === 'function'));
        if (internalInstance._pendingCallbacks) {
          internalInstance._pendingCallbacks.push(callback);
        } else {
          internalInstance._pendingCallbacks = [callback];
        }
        enqueueUpdate(internalInstance);
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldUpdateComponent`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @internal
       */
      enqueueForceUpdate: function(publicInstance) {
        var internalInstance = getInternalInstanceReadyForUpdate(
          publicInstance,
          'forceUpdate'
        );

        if (!internalInstance) {
          return;
        }

        internalInstance._pendingForceUpdate = true;

        enqueueUpdate(internalInstance);
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @internal
       */
      enqueueReplaceState: function(publicInstance, completeState) {
        var internalInstance = getInternalInstanceReadyForUpdate(
          publicInstance,
          'replaceState'
        );

        if (!internalInstance) {
          return;
        }

        internalInstance._pendingStateQueue = [completeState];
        internalInstance._pendingReplaceState = true;

        enqueueUpdate(internalInstance);
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @internal
       */
      enqueueSetState: function(publicInstance, partialState) {
        var internalInstance = getInternalInstanceReadyForUpdate(
          publicInstance,
          'setState'
        );

        if (!internalInstance) {
          return;
        }

        var queue =
          internalInstance._pendingStateQueue ||
          (internalInstance._pendingStateQueue = []);
        queue.push(partialState);

        enqueueUpdate(internalInstance);
      },

      /**
       * Sets a subset of the props.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialProps Subset of the next props.
       * @internal
       */
      enqueueSetProps: function(publicInstance, partialProps) {
        var internalInstance = getInternalInstanceReadyForUpdate(
          publicInstance,
          'setProps'
        );

        if (!internalInstance) {
          return;
        }

        (false ? invariant(
          internalInstance._isTopLevel,
          'setProps(...): You called `setProps` on a ' +
          'component with a parent. This is an anti-pattern since props will ' +
          'get reactively updated when rendered. Instead, change the owner\'s ' +
          '`render` method to pass the correct value as props to the component ' +
          'where it is created.'
        ) : invariant(internalInstance._isTopLevel));

        // Merge with the pending element if it exists, otherwise with existing
        // element props.
        var element = internalInstance._pendingElement ||
          internalInstance._currentElement;
        var props = assign({}, element.props, partialProps);
        internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
          element,
          props
        );

        enqueueUpdate(internalInstance);
      },

      /**
       * Replaces all of the props.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} props New props.
       * @internal
       */
      enqueueReplaceProps: function(publicInstance, props) {
        var internalInstance = getInternalInstanceReadyForUpdate(
          publicInstance,
          'replaceProps'
        );

        if (!internalInstance) {
          return;
        }

        (false ? invariant(
          internalInstance._isTopLevel,
          'replaceProps(...): You called `replaceProps` on a ' +
          'component with a parent. This is an anti-pattern since props will ' +
          'get reactively updated when rendered. Instead, change the owner\'s ' +
          '`render` method to pass the correct value as props to the component ' +
          'where it is created.'
        ) : invariant(internalInstance._isTopLevel));

        // Merge with the pending element if it exists, otherwise with existing
        // element props.
        var element = internalInstance._pendingElement ||
          internalInstance._currentElement;
        internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
          element,
          props
        );

        enqueueUpdate(internalInstance);
      },

      enqueueElementInternal: function(internalInstance, newElement) {
        internalInstance._pendingElement = newElement;
        enqueueUpdate(internalInstance);
      }

    };

    module.exports = ReactUpdateQueue;

    /***/
  }),
  /* 245 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactLifeCycle
     */

    'use strict';

    /**
     * This module manages the bookkeeping when a component is in the process
     * of being mounted or being unmounted. This is used as a way to enforce
     * invariants (or warnings) when it is not recommended to call
     * setState/forceUpdate.
     *
     * currentlyMountingInstance: During the construction phase, it is not possible
     * to trigger an update since the instance is not fully mounted yet. However, we
     * currently allow this as a convenience for mutating the initial state.
     *
     * currentlyUnmountingInstance: During the unmounting phase, the instance is
     * still mounted and can therefore schedule an update. However, this is not
     * recommended and probably an error since it's about to be unmounted.
     * Therefore we still want to trigger in an error for that case.
     */

    var ReactLifeCycle = {
      currentlyMountingInstance: null,
      currentlyUnmountingInstance: null
    };

    module.exports = ReactLifeCycle;

    /***/
  }),
  /* 246 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactInstanceMap
     */

    'use strict';

    /**
     * `ReactInstanceMap` maintains a mapping from a public facing stateful
     * instance (key) and the internal representation (value). This allows public
     * methods to accept the user facing instance as an argument and map them back
     * to internal methods.
     */

    // TODO: Replace this with ES6: var ReactInstanceMap = new Map();
    var ReactInstanceMap = {

      /**
       * This API should be called `delete` but we'd have to make sure to always
       * transform these to strings for IE support. When this transform is fully
       * supported we can rename it.
       */
      remove: function(key) {
        key._reactInternalInstance = undefined;
      },

      get: function(key) {
        return key._reactInternalInstance;
      },

      has: function(key) {
        return key._reactInternalInstance !== undefined;
      },

      set: function(key, value) {
        key._reactInternalInstance = value;
      }

    };

    module.exports = ReactInstanceMap;

    /***/
  }),
  /* 247 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactUpdates
     */

    'use strict';

    var CallbackQueue = __webpack_require__(248);
    var PooledClass = __webpack_require__(230);
    var ReactCurrentOwner = __webpack_require__(238);
    var ReactPerf = __webpack_require__(249);
    var ReactReconciler = __webpack_require__(250);
    var Transaction = __webpack_require__(257);

    var assign = __webpack_require__(234);
    var invariant = __webpack_require__(228);
    var warning = __webpack_require__(236);

    var dirtyComponents = [];
    var asapCallbackQueue = CallbackQueue.getPooled();
    var asapEnqueued = false;

    var batchingStrategy = null;

    function ensureInjected() {
      (false ? invariant(
        ReactUpdates.ReactReconcileTransaction && batchingStrategy,
        'ReactUpdates: must inject a reconcile transaction class and batching ' +
        'strategy'
      ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
    }

    var NESTED_UPDATES = {
      initialize: function() {
        this.dirtyComponentsLength = dirtyComponents.length;
      },
      close: function() {
        if (this.dirtyComponentsLength !== dirtyComponents.length) {
          // Additional updates were enqueued by componentDidUpdate handlers or
          // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
          // these new updates so that if A's componentDidUpdate calls setState on
          // B, B will update before the callback A's updater provided when calling
          // setState.
          dirtyComponents.splice(0, this.dirtyComponentsLength);
          flushBatchedUpdates();
        } else {
          dirtyComponents.length = 0;
        }
      }
    };

    var UPDATE_QUEUEING = {
      initialize: function() {
        this.callbackQueue.reset();
      },
      close: function() {
        this.callbackQueue.notifyAll();
      }
    };

    var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

    function ReactUpdatesFlushTransaction() {
      this.reinitializeTransaction();
      this.dirtyComponentsLength = null;
      this.callbackQueue = CallbackQueue.getPooled();
      this.reconcileTransaction =
        ReactUpdates.ReactReconcileTransaction.getPooled();
    }

    assign(
      ReactUpdatesFlushTransaction.prototype,
      Transaction.Mixin, {
        getTransactionWrappers: function() {
          return TRANSACTION_WRAPPERS;
        },

        destructor: function() {
          this.dirtyComponentsLength = null;
          CallbackQueue.release(this.callbackQueue);
          this.callbackQueue = null;
          ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
          this.reconcileTransaction = null;
        },

        perform: function(method, scope, a) {
          // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
          // with this transaction's wrappers around it.
          return Transaction.Mixin.perform.call(
            this,
            this.reconcileTransaction.perform,
            this.reconcileTransaction,
            method,
            scope,
            a
          );
        }
      });

    PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

    function batchedUpdates(callback, a, b, c, d) {
      ensureInjected();
      batchingStrategy.batchedUpdates(callback, a, b, c, d);
    }

    /**
     * Array comparator for ReactComponents by mount ordering.
     *
     * @param {ReactComponent} c1 first component you're comparing
     * @param {ReactComponent} c2 second component you're comparing
     * @return {number} Return value usable by Array.prototype.sort().
     */
    function mountOrderComparator(c1, c2) {
      return c1._mountOrder - c2._mountOrder;
    }

    function runBatchedUpdates(transaction) {
      var len = transaction.dirtyComponentsLength;
      (false ? invariant(
        len === dirtyComponents.length,
        'Expected flush transaction\'s stored dirty-components length (%s) to ' +
        'match dirty-components array length (%s).',
        len,
        dirtyComponents.length
      ) : invariant(len === dirtyComponents.length));

      // Since reconciling a component higher in the owner hierarchy usually (not
      // always -- see shouldComponentUpdate()) will reconcile children, reconcile
      // them before their children by sorting the array.
      dirtyComponents.sort(mountOrderComparator);

      for (var i = 0; i < len; i++) {
        // If a component is unmounted before pending changes apply, it will still
        // be here, but we assume that it has cleared its _pendingCallbacks and
        // that performUpdateIfNecessary is a noop.
        var component = dirtyComponents[i];

        // If performUpdateIfNecessary happens to enqueue any new updates, we
        // shouldn't execute the callbacks until the next render happens, so
        // stash the callbacks first
        var callbacks = component._pendingCallbacks;
        component._pendingCallbacks = null;

        ReactReconciler.performUpdateIfNecessary(
          component,
          transaction.reconcileTransaction
        );

        if (callbacks) {
          for (var j = 0; j < callbacks.length; j++) {
            transaction.callbackQueue.enqueue(
              callbacks[j],
              component.getPublicInstance()
            );
          }
        }
      }
    }

    var flushBatchedUpdates = function() {
      // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
      // array and perform any updates enqueued by mount-ready handlers (i.e.,
      // componentDidUpdate) but we need to check here too in order to catch
      // updates enqueued by setState callbacks and asap calls.
      while (dirtyComponents.length || asapEnqueued) {
        if (dirtyComponents.length) {
          var transaction = ReactUpdatesFlushTransaction.getPooled();
          transaction.perform(runBatchedUpdates, null, transaction);
          ReactUpdatesFlushTransaction.release(transaction);
        }

        if (asapEnqueued) {
          asapEnqueued = false;
          var queue = asapCallbackQueue;
          asapCallbackQueue = CallbackQueue.getPooled();
          queue.notifyAll();
          CallbackQueue.release(queue);
        }
      }
    };
    flushBatchedUpdates = ReactPerf.measure(
      'ReactUpdates',
      'flushBatchedUpdates',
      flushBatchedUpdates
    );

    /**
     * Mark a component as needing a rerender, adding an optional callback to a
     * list of functions which will be executed once the rerender occurs.
     */
    function enqueueUpdate(component) {
      ensureInjected();

      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case. (This is called by each top-level update
      // function, like setProps, setState, forceUpdate, etc.; creation and
      // destruction of top-level components is guarded in ReactMount.)
      (false ? warning(
        ReactCurrentOwner.current == null,
        'enqueueUpdate(): Render methods should be a pure function of props ' +
        'and state; triggering nested component updates from render is not ' +
        'allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      if (!batchingStrategy.isBatchingUpdates) {
        batchingStrategy.batchedUpdates(enqueueUpdate, component);
        return;
      }

      dirtyComponents.push(component);
    }

    /**
     * Enqueue a callback to be run at the end of the current batching cycle. Throws
     * if no updates are currently being performed.
     */
    function asap(callback, context) {
      (false ? invariant(
        batchingStrategy.isBatchingUpdates,
        'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
        'updates are not being batched.'
      ) : invariant(batchingStrategy.isBatchingUpdates));
      asapCallbackQueue.enqueue(callback, context);
      asapEnqueued = true;
    }

    var ReactUpdatesInjection = {
      injectReconcileTransaction: function(ReconcileTransaction) {
        (false ? invariant(
          ReconcileTransaction,
          'ReactUpdates: must provide a reconcile transaction class'
        ) : invariant(ReconcileTransaction));
        ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
      },

      injectBatchingStrategy: function(_batchingStrategy) {
        (false ? invariant(
          _batchingStrategy,
          'ReactUpdates: must provide a batching strategy'
        ) : invariant(_batchingStrategy));
        (false ? invariant(
          typeof _batchingStrategy.batchedUpdates === 'function',
          'ReactUpdates: must provide a batchedUpdates() function'
        ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
        (false ? invariant(
          typeof _batchingStrategy.isBatchingUpdates === 'boolean',
          'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
        ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
        batchingStrategy = _batchingStrategy;
      }
    };

    var ReactUpdates = {
      /**
       * React references `ReactReconcileTransaction` using this property in order
       * to allow dependency injection.
       *
       * @internal
       */
      ReactReconcileTransaction: null,

      batchedUpdates: batchedUpdates,
      enqueueUpdate: enqueueUpdate,
      flushBatchedUpdates: flushBatchedUpdates,
      injection: ReactUpdatesInjection,
      asap: asap
    };

    module.exports = ReactUpdates;

    /***/
  }),
  /* 248 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule CallbackQueue
     */

    'use strict';

    var PooledClass = __webpack_require__(230);

    var assign = __webpack_require__(234);
    var invariant = __webpack_require__(228);

    /**
     * A specialized pseudo-event module to help keep track of components waiting to
     * be notified when their DOM representations are available for use.
     *
     * This implements `PooledClass`, so you should never need to instantiate this.
     * Instead, use `CallbackQueue.getPooled()`.
     *
     * @class ReactMountReady
     * @implements PooledClass
     * @internal
     */
    function CallbackQueue() {
      this._callbacks = null;
      this._contexts = null;
    }

    assign(CallbackQueue.prototype, {

      /**
       * Enqueues a callback to be invoked when `notifyAll` is invoked.
       *
       * @param {function} callback Invoked when `notifyAll` is invoked.
       * @param {?object} context Context to call `callback` with.
       * @internal
       */
      enqueue: function(callback, context) {
        this._callbacks = this._callbacks || [];
        this._contexts = this._contexts || [];
        this._callbacks.push(callback);
        this._contexts.push(context);
      },

      /**
       * Invokes all enqueued callbacks and clears the queue. This is invoked after
       * the DOM representation of a component has been created or updated.
       *
       * @internal
       */
      notifyAll: function() {
        var callbacks = this._callbacks;
        var contexts = this._contexts;
        if (callbacks) {
          (false ? invariant(
            callbacks.length === contexts.length,
            'Mismatched list of contexts in callback queue'
          ) : invariant(callbacks.length === contexts.length));
          this._callbacks = null;
          this._contexts = null;
          for (var i = 0, l = callbacks.length; i < l; i++) {
            callbacks[i].call(contexts[i]);
          }
          callbacks.length = 0;
          contexts.length = 0;
        }
      },

      /**
       * Resets the internal queue.
       *
       * @internal
       */
      reset: function() {
        this._callbacks = null;
        this._contexts = null;
      },

      /**
       * `PooledClass` looks for this.
       */
      destructor: function() {
        this.reset();
      }

    });

    PooledClass.addPoolingTo(CallbackQueue);

    module.exports = CallbackQueue;

    /***/
  }),
  /* 249 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactPerf
     * @typechecks static-only
     */

    'use strict';

    /**
     * ReactPerf is a general AOP system designed to measure performance. This
     * module only has the hooks: see ReactDefaultPerf for the analysis tool.
     */
    var ReactPerf = {
      /**
       * Boolean to enable/disable measurement. Set to false by default to prevent
       * accidental logging and perf loss.
       */
      enableMeasure: false,

      /**
       * Holds onto the measure function in use. By default, don't measure
       * anything, but we'll override this if we inject a measure function.
       */
      storedMeasure: _noMeasure,

      /**
       * @param {object} object
       * @param {string} objectName
       * @param {object<string>} methodNames
       */
      measureMethods: function(object, objectName, methodNames) {
        if (false) {
          for (var key in methodNames) {
            if (!methodNames.hasOwnProperty(key)) {
              continue;
            }
            object[key] = ReactPerf.measure(
              objectName,
              methodNames[key],
              object[key]
            );
          }
        }
      },

      /**
       * Use this to wrap methods you want to measure. Zero overhead in production.
       *
       * @param {string} objName
       * @param {string} fnName
       * @param {function} func
       * @return {function}
       */
      measure: function(objName, fnName, func) {
        if (false) {
          var measuredFunc = null;
          var wrapper = function() {
            if (ReactPerf.enableMeasure) {
              if (!measuredFunc) {
                measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
              }
              return measuredFunc.apply(this, arguments);
            }
            return func.apply(this, arguments);
          };
          wrapper.displayName = objName + '_' + fnName;
          return wrapper;
        }
        return func;
      },

      injection: {
        /**
         * @param {function} measure
         */
        injectMeasure: function(measure) {
          ReactPerf.storedMeasure = measure;
        }
      }
    };

    /**
     * Simply passes through the measured function, without measuring it.
     *
     * @param {string} objName
     * @param {string} fnName
     * @param {function} func
     * @return {function}
     */
    function _noMeasure(objName, fnName, func) {
      return func;
    }

    module.exports = ReactPerf;

    /***/
  }),
  /* 250 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactReconciler
     */

    'use strict';

    var ReactRef = __webpack_require__(251);
    var ReactElementValidator = __webpack_require__(253);

    /**
     * Helper to call ReactRef.attachRefs with this composite component, split out
     * to avoid allocations in the transaction mount-ready queue.
     */
    function attachRefs() {
      ReactRef.attachRefs(this, this._currentElement);
    }

    var ReactReconciler = {

      /**
       * Initializes the component, renders markup, and registers event listeners.
       *
       * @param {ReactComponent} internalInstance
       * @param {string} rootID DOM ID of the root node.
       * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
       * @return {?string} Rendered markup to be inserted into the DOM.
       * @final
       * @internal
       */
      mountComponent: function(internalInstance, rootID, transaction, context) {
        var markup = internalInstance.mountComponent(rootID, transaction, context);
        if (false) {
          ReactElementValidator.checkAndWarnForMutatedProps(
            internalInstance._currentElement
          );
        }
        transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
        return markup;
      },

      /**
       * Releases any resources allocated by `mountComponent`.
       *
       * @final
       * @internal
       */
      unmountComponent: function(internalInstance) {
        ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
        internalInstance.unmountComponent();
      },

      /**
       * Update a component using a new element.
       *
       * @param {ReactComponent} internalInstance
       * @param {ReactElement} nextElement
       * @param {ReactReconcileTransaction} transaction
       * @param {object} context
       * @internal
       */
      receiveComponent: function(
        internalInstance, nextElement, transaction, context
      ) {
        var prevElement = internalInstance._currentElement;

        if (nextElement === prevElement && nextElement._owner != null) {
          // Since elements are immutable after the owner is rendered,
          // we can do a cheap identity compare here to determine if this is a
          // superfluous reconcile. It's possible for state to be mutable but such
          // change should trigger an update of the owner which would recreate
          // the element. We explicitly check for the existence of an owner since
          // it's possible for an element created outside a composite to be
          // deeply mutated and reused.
          return;
        }

        if (false) {
          ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
        }

        var refsChanged = ReactRef.shouldUpdateRefs(
          prevElement,
          nextElement
        );

        if (refsChanged) {
          ReactRef.detachRefs(internalInstance, prevElement);
        }

        internalInstance.receiveComponent(nextElement, transaction, context);

        if (refsChanged) {
          transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
        }
      },

      /**
       * Flush any dirty changes in a component.
       *
       * @param {ReactComponent} internalInstance
       * @param {ReactReconcileTransaction} transaction
       * @internal
       */
      performUpdateIfNecessary: function(
        internalInstance,
        transaction
      ) {
        internalInstance.performUpdateIfNecessary(transaction);
      }

    };

    module.exports = ReactReconciler;

    /***/
  }),
  /* 251 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactRef
     */

    'use strict';

    var ReactOwner = __webpack_require__(252);

    var ReactRef = {};

    function attachRef(ref, component, owner) {
      if (typeof ref === 'function') {
        ref(component.getPublicInstance());
      } else {
        // Legacy ref
        ReactOwner.addComponentAsRefTo(component, ref, owner);
      }
    }

    function detachRef(ref, component, owner) {
      if (typeof ref === 'function') {
        ref(null);
      } else {
        // Legacy ref
        ReactOwner.removeComponentAsRefFrom(component, ref, owner);
      }
    }

    ReactRef.attachRefs = function(instance, element) {
      var ref = element.ref;
      if (ref != null) {
        attachRef(ref, instance, element._owner);
      }
    };

    ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      return (
        nextElement._owner !== prevElement._owner ||
        nextElement.ref !== prevElement.ref
      );
    };

    ReactRef.detachRefs = function(instance, element) {
      var ref = element.ref;
      if (ref != null) {
        detachRef(ref, instance, element._owner);
      }
    };

    module.exports = ReactRef;

    /***/
  }),
  /* 252 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactOwner
     */

    'use strict';

    var invariant = __webpack_require__(228);

    /**
     * ReactOwners are capable of storing references to owned components.
     *
     * All components are capable of //being// referenced by owner components, but
     * only ReactOwner components are capable of //referencing// owned components.
     * The named reference is known as a "ref".
     *
     * Refs are available when mounted and updated during reconciliation.
     *
     *   var MyComponent = React.createClass({
     *     render: function() {
     *       return (
     *         <div onClick={this.handleClick}>
     *           <CustomComponent ref="custom" />
     *         </div>
     *       );
     *     },
     *     handleClick: function() {
     *       this.refs.custom.handleClick();
     *     },
     *     componentDidMount: function() {
     *       this.refs.custom.initialize();
     *     }
     *   });
     *
     * Refs should rarely be used. When refs are used, they should only be done to
     * control data that is not handled by React's data flow.
     *
     * @class ReactOwner
     */
    var ReactOwner = {

      /**
       * @param {?object} object
       * @return {boolean} True if `object` is a valid owner.
       * @final
       */
      isValidOwner: function(object) {
        return !!(
          (object &&
            typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
        );
      },

      /**
       * Adds a component by ref to an owner component.
       *
       * @param {ReactComponent} component Component to reference.
       * @param {string} ref Name by which to refer to the component.
       * @param {ReactOwner} owner Component on which to record the ref.
       * @final
       * @internal
       */
      addComponentAsRefTo: function(component, ref, owner) {
        (false ? invariant(
          ReactOwner.isValidOwner(owner),
          'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
          'usually means that you\'re trying to add a ref to a component that ' +
          'doesn\'t have an owner (that is, was not created inside of another ' +
          'component\'s `render` method). Try rendering this component inside of ' +
          'a new top-level component which will hold the ref.'
        ) : invariant(ReactOwner.isValidOwner(owner)));
        owner.attachRef(ref, component);
      },

      /**
       * Removes a component by ref from an owner component.
       *
       * @param {ReactComponent} component Component to dereference.
       * @param {string} ref Name of the ref to remove.
       * @param {ReactOwner} owner Component on which the ref is recorded.
       * @final
       * @internal
       */
      removeComponentAsRefFrom: function(component, ref, owner) {
        (false ? invariant(
          ReactOwner.isValidOwner(owner),
          'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
          'usually means that you\'re trying to remove a ref to a component that ' +
          'doesn\'t have an owner (that is, was not created inside of another ' +
          'component\'s `render` method). Try rendering this component inside of ' +
          'a new top-level component which will hold the ref.'
        ) : invariant(ReactOwner.isValidOwner(owner)));
        // Check that `component` is still the current ref because we do not want to
        // detach the ref if another component stole it.
        if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
          owner.detachRef(ref);
        }
      }

    };

    module.exports = ReactOwner;

    /***/
  }),
  /* 253 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactElementValidator
     */

    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */

    'use strict';

    var ReactElement = __webpack_require__(232);
    var ReactFragment = __webpack_require__(231);
    var ReactPropTypeLocations = __webpack_require__(254);
    var ReactPropTypeLocationNames = __webpack_require__(255);
    var ReactCurrentOwner = __webpack_require__(238);
    var ReactNativeComponent = __webpack_require__(256);

    var getIteratorFn = __webpack_require__(242);
    var invariant = __webpack_require__(228);
    var warning = __webpack_require__(236);

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = ReactCurrentOwner.current.getName();
        if (name) {
          return ' Check the render method of `' + name + '`.';
        }
      }
      return '';
    }

    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */
    var ownerHasKeyUseWarning = {};

    var loggedTypeFailures = {};

    var NUMERIC_PROPERTY_REGEX = /^\d+$/;

    /**
     * Gets the instance's name for use in warnings.
     *
     * @internal
     * @return {?string} Display name or undefined
     */
    function getName(instance) {
      var publicInstance = instance && instance.getPublicInstance();
      if (!publicInstance) {
        return undefined;
      }
      var constructor = publicInstance.constructor;
      if (!constructor) {
        return undefined;
      }
      return constructor.displayName || constructor.name || undefined;
    }

    /**
     * Gets the current owner's displayName for use in warnings.
     *
     * @internal
     * @return {?string} Display name or undefined
     */
    function getCurrentOwnerDisplayName() {
      var current = ReactCurrentOwner.current;
      return (
        current && getName(current) || undefined
      );
    }

    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */
    function validateExplicitKey(element, parentType) {
      if (element._store.validated || element.key != null) {
        return;
      }
      element._store.validated = true;

      warnAndMonitorForKeyUse(
        'Each child in an array or iterator should have a unique "key" prop.',
        element,
        parentType
      );
    }

    /**
     * Warn if the key is being defined as an object property but has an incorrect
     * value.
     *
     * @internal
     * @param {string} name Property name of the key.
     * @param {ReactElement} element Component that requires a key.
     * @param {*} parentType element's parent's type.
     */
    function validatePropertyKey(name, element, parentType) {
      if (!NUMERIC_PROPERTY_REGEX.test(name)) {
        return;
      }
      warnAndMonitorForKeyUse(
        'Child objects should have non-numeric keys so ordering is preserved.',
        element,
        parentType
      );
    }

    /**
     * Shared warning and monitoring code for the key warnings.
     *
     * @internal
     * @param {string} message The base warning that gets output.
     * @param {ReactElement} element Component that requires a key.
     * @param {*} parentType element's parent's type.
     */
    function warnAndMonitorForKeyUse(message, element, parentType) {
      var ownerName = getCurrentOwnerDisplayName();
      var parentName = typeof parentType === 'string' ?
        parentType : parentType.displayName || parentType.name;

      var useName = ownerName || parentName;
      var memoizer = ownerHasKeyUseWarning[message] || (
        (ownerHasKeyUseWarning[message] = {})
      );
      if (memoizer.hasOwnProperty(useName)) {
        return;
      }
      memoizer[useName] = true;

      var parentOrOwnerAddendum =
        ownerName ? (" Check the render method of " + ownerName + ".") :
        parentName ? (" Check the React.render call using <" + parentName + ">.") :
        '';

      // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.
      var childOwnerAddendum = '';
      if (element &&
        element._owner &&
        element._owner !== ReactCurrentOwner.current) {
        // Name of the component that originally created this child.
        var childOwnerName = getName(element._owner);

        childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
      }

      (false ? warning(
        false,
        message + '%s%s See https://fb.me/react-warning-keys for more information.',
        parentOrOwnerAddendum,
        childOwnerAddendum
      ) : null);
    }

    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */
    function validateChildKeys(node, parentType) {
      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];
          if (ReactElement.isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (ReactElement.isValidElement(node)) {
        // This element was passed in a valid location.
        node._store.validated = true;
      } else if (node) {
        var iteratorFn = getIteratorFn(node);
        // Entry iterators provide implicit keys.
        if (iteratorFn) {
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step;
            while (!(step = iterator.next()).done) {
              if (ReactElement.isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        } else if (typeof node === 'object') {
          var fragment = ReactFragment.extractIfFragment(node);
          for (var key in fragment) {
            if (fragment.hasOwnProperty(key)) {
              validatePropertyKey(key, fragment[key], parentType);
            }
          }
        }
      }
    }

    /**
     * Assert that the props are valid
     *
     * @param {string} componentName Name of the component for error messages.
     * @param {object} propTypes Map of prop name to a ReactPropType
     * @param {object} props
     * @param {string} location e.g. "prop", "context", "child context"
     * @private
     */
    function checkPropTypes(componentName, propTypes, props, location) {
      for (var propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
          var error;
          // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            (false ? invariant(
              typeof propTypes[propName] === 'function',
              '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
              componentName || 'React class',
              ReactPropTypeLocationNames[location],
              propName
            ) : invariant(typeof propTypes[propName] === 'function'));
            error = propTypes[propName](props, propName, componentName, location);
          } catch (ex) {
            error = ex;
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;

            var addendum = getDeclarationErrorAddendum(this);
            (false ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
          }
        }
      }
    }

    var warnedPropsMutations = {};

    /**
     * Warn about mutating props when setting `propName` on `element`.
     *
     * @param {string} propName The string key within props that was set
     * @param {ReactElement} element
     */
    function warnForPropsMutation(propName, element) {
      var type = element.type;
      var elementName = typeof type === 'string' ? type : type.displayName;
      var ownerName = element._owner ?
        element._owner.getPublicInstance().constructor.displayName : null;

      var warningKey = propName + '|' + elementName + '|' + ownerName;
      if (warnedPropsMutations.hasOwnProperty(warningKey)) {
        return;
      }
      warnedPropsMutations[warningKey] = true;

      var elementInfo = '';
      if (elementName) {
        elementInfo = ' <' + elementName + ' />';
      }
      var ownerInfo = '';
      if (ownerName) {
        ownerInfo = ' The element was created by ' + ownerName + '.';
      }

      (false ? warning(
        false,
        'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
        'correct value when initially creating the element or use ' +
        'React.cloneElement to make a new element with updated props.%s',
        propName,
        elementInfo,
        ownerInfo
      ) : null);
    }

    // Inline Object.is polyfill
    function is(a, b) {
      if (a !== a) {
        // NaN
        return b !== b;
      }
      if (a === 0 && b === 0) {
        // +-0
        return 1 / a === 1 / b;
      }
      return a === b;
    }

    /**
     * Given an element, check if its props have been mutated since element
     * creation (or the last call to this function). In particular, check if any
     * new props have been added, which we can't directly catch by defining warning
     * properties on the props object.
     *
     * @param {ReactElement} element
     */
    function checkAndWarnForMutatedProps(element) {
      if (!element._store) {
        // Element was created using `new ReactElement` directly or with
        // `ReactElement.createElement`; skip mutation checking
        return;
      }

      var originalProps = element._store.originalProps;
      var props = element.props;

      for (var propName in props) {
        if (props.hasOwnProperty(propName)) {
          if (!originalProps.hasOwnProperty(propName) ||
            !is(originalProps[propName], props[propName])) {
            warnForPropsMutation(propName, element);

            // Copy over the new value so that the two props objects match again
            originalProps[propName] = props[propName];
          }
        }
      }
    }

    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */
    function validatePropTypes(element) {
      if (element.type == null) {
        // This has already warned. Don't throw.
        return;
      }
      // Extract the component class from the element. Converts string types
      // to a composite class which may have propTypes.
      // TODO: Validating a string's propTypes is not decoupled from the
      // rendering target which is problematic.
      var componentClass = ReactNativeComponent.getComponentClassForElement(
        element
      );
      var name = componentClass.displayName || componentClass.name;
      if (componentClass.propTypes) {
        checkPropTypes(
          name,
          componentClass.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (typeof componentClass.getDefaultProps === 'function') {
        (false ? warning(
          componentClass.getDefaultProps.isReactClassApproved,
          'getDefaultProps is only used on classic React.createClass ' +
          'definitions. Use a static property named `defaultProps` instead.'
        ) : null);
      }
    }

    var ReactElementValidator = {

      checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

      createElement: function(type, props, children) {
        // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        (false ? warning(
          type != null,
          'React.createElement: type should not be null or undefined. It should ' +
          'be a string (for DOM elements) or a ReactClass (for composite ' +
          'components).'
        ) : null);

        var element = ReactElement.createElement.apply(this, arguments);

        // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) {
          return element;
        }

        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }

        validatePropTypes(element);

        return element;
      },

      createFactory: function(type) {
        var validatedFactory = ReactElementValidator.createElement.bind(
          null,
          type
        );
        // Legacy hook TODO: Warn if this is accessed
        validatedFactory.type = type;

        if (false) {
          try {
            Object.defineProperty(
              validatedFactory,
              'type', {
                enumerable: false,
                get: function() {
                  ("production" !== process.env.NODE_ENV ? warning(
                    false,
                    'Factory.type is deprecated. Access the class directly ' +
                    'before passing it to createFactory.'
                  ) : null);
                  Object.defineProperty(this, 'type', {
                    value: type
                  });
                  return type;
                }
              }
            );
          } catch (x) {
            // IE will fail on defineProperty (es5-shim/sham too)
          }
        }

        return validatedFactory;
      },

      cloneElement: function(element, props, children) {
        var newElement = ReactElement.cloneElement.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }

    };

    module.exports = ReactElementValidator;

    /***/
  }),
  /* 254 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactPropTypeLocations
     */

    'use strict';

    var keyMirror = __webpack_require__(227);

    var ReactPropTypeLocations = keyMirror({
      prop: null,
      context: null,
      childContext: null
    });

    module.exports = ReactPropTypeLocations;

    /***/
  }),
  /* 255 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactPropTypeLocationNames
     */

    'use strict';

    var ReactPropTypeLocationNames = {};

    if (false) {
      ReactPropTypeLocationNames = {
        prop: 'prop',
        context: 'context',
        childContext: 'child context'
      };
    }

    module.exports = ReactPropTypeLocationNames;

    /***/
  }),
  /* 256 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactNativeComponent
     */

    'use strict';

    var assign = __webpack_require__(234);
    var invariant = __webpack_require__(228);

    var autoGenerateWrapperClass = null;
    var genericComponentClass = null;
    // This registry keeps track of wrapper classes around native tags
    var tagToComponentClass = {};
    var textComponentClass = null;

    var ReactNativeComponentInjection = {
      // This accepts a class that receives the tag string. This is a catch all
      // that can render any kind of tag.
      injectGenericComponentClass: function(componentClass) {
        genericComponentClass = componentClass;
      },
      // This accepts a text component class that takes the text string to be
      // rendered as props.
      injectTextComponentClass: function(componentClass) {
        textComponentClass = componentClass;
      },
      // This accepts a keyed object with classes as values. Each key represents a
      // tag. That particular tag will use this class instead of the generic one.
      injectComponentClasses: function(componentClasses) {
        assign(tagToComponentClass, componentClasses);
      },
      // Temporary hack since we expect DOM refs to behave like composites,
      // for this release.
      injectAutoWrapper: function(wrapperFactory) {
        autoGenerateWrapperClass = wrapperFactory;
      }
    };

    /**
     * Get a composite component wrapper class for a specific tag.
     *
     * @param {ReactElement} element The tag for which to get the class.
     * @return {function} The React class constructor function.
     */
    function getComponentClassForElement(element) {
      if (typeof element.type === 'function') {
        return element.type;
      }
      var tag = element.type;
      var componentClass = tagToComponentClass[tag];
      if (componentClass == null) {
        tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
      }
      return componentClass;
    }

    /**
     * Get a native internal component class for a specific tag.
     *
     * @param {ReactElement} element The element to create.
     * @return {function} The internal class constructor function.
     */
    function createInternalComponent(element) {
      (false ? invariant(
        genericComponentClass,
        'There is no registered component for the tag %s',
        element.type
      ) : invariant(genericComponentClass));
      return new genericComponentClass(element.type, element.props);
    }

    /**
     * @param {ReactText} text
     * @return {ReactComponent}
     */
    function createInstanceForText(text) {
      return new textComponentClass(text);
    }

    /**
     * @param {ReactComponent} component
     * @return {boolean}
     */
    function isTextComponent(component) {
      return component instanceof textComponentClass;
    }

    var ReactNativeComponent = {
      getComponentClassForElement: getComponentClassForElement,
      createInternalComponent: createInternalComponent,
      createInstanceForText: createInstanceForText,
      isTextComponent: isTextComponent,
      injection: ReactNativeComponentInjection
    };

    module.exports = ReactNativeComponent;

    /***/
  }),
  /* 257 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule Transaction
     */

    'use strict';

    var invariant = __webpack_require__(228);

    /**
     * `Transaction` creates a black box that is able to wrap any method such that
     * certain invariants are maintained before and after the method is invoked
     * (Even if an exception is thrown while invoking the wrapped method). Whoever
     * instantiates a transaction can provide enforcers of the invariants at
     * creation time. The `Transaction` class itself will supply one additional
     * automatic invariant for you - the invariant that any transaction instance
     * should not be run while it is already being run. You would typically create a
     * single instance of a `Transaction` for reuse multiple times, that potentially
     * is used to wrap several different methods. Wrappers are extremely simple -
     * they only require implementing two methods.
     *
     * <pre>
     *                       wrappers (injected at creation time)
     *                                      +        +
     *                                      |        |
     *                    +-----------------|--------|--------------+
     *                    |                 v        |              |
     *                    |      +---------------+   |              |
     *                    |   +--|    wrapper1   |---|----+         |
     *                    |   |  +---------------+   v    |         |
     *                    |   |          +-------------+  |         |
     *                    |   |     +----|   wrapper2  |--------+   |
     *                    |   |     |    +-------------+  |     |   |
     *                    |   |     |                     |     |   |
     *                    |   v     v                     v     v   | wrapper
     *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
     * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
     * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
     *                    | |   | |   |   |         |   |   | |   | |
     *                    | |   | |   |   |         |   |   | |   | |
     *                    | |   | |   |   |         |   |   | |   | |
     *                    | +---+ +---+   +---------+   +---+ +---+ |
     *                    |  initialize                    close    |
     *                    +-----------------------------------------+
     * </pre>
     *
     * Use cases:
     * - Preserving the input selection ranges before/after reconciliation.
     *   Restoring selection even in the event of an unexpected error.
     * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
     *   while guaranteeing that afterwards, the event system is reactivated.
     * - Flushing a queue of collected DOM mutations to the main UI thread after a
     *   reconciliation takes place in a worker thread.
     * - Invoking any collected `componentDidUpdate` callbacks after rendering new
     *   content.
     * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
     *   to preserve the `scrollTop` (an automatic scroll aware DOM).
     * - (Future use case): Layout calculations before and after DOM updates.
     *
     * Transactional plugin API:
     * - A module that has an `initialize` method that returns any precomputation.
     * - and a `close` method that accepts the precomputation. `close` is invoked
     *   when the wrapped process is completed, or has failed.
     *
     * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
     * that implement `initialize` and `close`.
     * @return {Transaction} Single transaction for reuse in thread.
     *
     * @class Transaction
     */
    var Mixin = {
      /**
       * Sets up this instance so that it is prepared for collecting metrics. Does
       * so such that this setup method may be used on an instance that is already
       * initialized, in a way that does not consume additional memory upon reuse.
       * That can be useful if you decide to make your subclass of this mixin a
       * "PooledClass".
       */
      reinitializeTransaction: function() {
        this.transactionWrappers = this.getTransactionWrappers();
        if (!this.wrapperInitData) {
          this.wrapperInitData = [];
        } else {
          this.wrapperInitData.length = 0;
        }
        this._isInTransaction = false;
      },

      _isInTransaction: false,

      /**
       * @abstract
       * @return {Array<TransactionWrapper>} Array of transaction wrappers.
       */
      getTransactionWrappers: null,

      isInTransaction: function() {
        return !!this._isInTransaction;
      },

      /**
       * Executes the function within a safety window. Use this for the top level
       * methods that result in large amounts of computation/mutations that would
       * need to be safety checked.
       *
       * @param {function} method Member of scope to call.
       * @param {Object} scope Scope to invoke from.
       * @param {Object?=} args... Arguments to pass to the method (optional).
       *                           Helps prevent need to bind in many cases.
       * @return Return value from `method`.
       */
      perform: function(method, scope, a, b, c, d, e, f) {
        (false ? invariant(
          !this.isInTransaction(),
          'Transaction.perform(...): Cannot initialize a transaction when there ' +
          'is already an outstanding transaction.'
        ) : invariant(!this.isInTransaction()));
        var errorThrown;
        var ret;
        try {
          this._isInTransaction = true;
          // Catching errors makes debugging more difficult, so we start with
          // errorThrown set to true before setting it to false after calling
          // close -- if it's still set to true in the finally block, it means
          // one of these calls threw.
          errorThrown = true;
          this.initializeAll(0);
          ret = method.call(scope, a, b, c, d, e, f);
          errorThrown = false;
        } finally {
          try {
            if (errorThrown) {
              // If `method` throws, prefer to show that stack trace over any thrown
              // by invoking `closeAll`.
              try {
                this.closeAll(0);
              } catch (err) {}
            } else {
              // Since `method` didn't throw, we don't want to silence the exception
              // here.
              this.closeAll(0);
            }
          } finally {
            this._isInTransaction = false;
          }
        }
        return ret;
      },

      initializeAll: function(startIndex) {
        var transactionWrappers = this.transactionWrappers;
        for (var i = startIndex; i < transactionWrappers.length; i++) {
          var wrapper = transactionWrappers[i];
          try {
            // Catching errors makes debugging more difficult, so we start with the
            // OBSERVED_ERROR state before overwriting it with the real return value
            // of initialize -- if it's still set to OBSERVED_ERROR in the finally
            // block, it means wrapper.initialize threw.
            this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
            this.wrapperInitData[i] = wrapper.initialize ?
              wrapper.initialize.call(this) :
              null;
          } finally {
            if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
              // The initializer for wrapper i threw an error; initialize the
              // remaining wrappers but silence any exceptions from them to ensure
              // that the first error is the one to bubble up.
              try {
                this.initializeAll(i + 1);
              } catch (err) {}
            }
          }
        }
      },

      /**
       * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
       * them the respective return values of `this.transactionWrappers.init[i]`
       * (`close`rs that correspond to initializers that failed will not be
       * invoked).
       */
      closeAll: function(startIndex) {
        (false ? invariant(
          this.isInTransaction(),
          'Transaction.closeAll(): Cannot close transaction when none are open.'
        ) : invariant(this.isInTransaction()));
        var transactionWrappers = this.transactionWrappers;
        for (var i = startIndex; i < transactionWrappers.length; i++) {
          var wrapper = transactionWrappers[i];
          var initData = this.wrapperInitData[i];
          var errorThrown;
          try {
            // Catching errors makes debugging more difficult, so we start with
            // errorThrown set to true before setting it to false after calling
            // close -- if it's still set to true in the finally block, it means
            // wrapper.close threw.
            errorThrown = true;
            if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
              wrapper.close.call(this, initData);
            }
            errorThrown = false;
          } finally {
            if (errorThrown) {
              // The closer for wrapper i threw an error; close the remaining
              // wrappers but silence any exceptions from them to ensure that the
              // first error is the one to bubble up.
              try {
                this.closeAll(i + 1);
              } catch (e) {}
            }
          }
        }
        this.wrapperInitData.length = 0;
      }
    };

    var Transaction = {

      Mixin: Mixin,

      /**
       * Token to look for to determine if an error occured.
       */
      OBSERVED_ERROR: {}

    };

    module.exports = Transaction;

    /***/
  }),
  /* 258 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactClass
     */

    'use strict';

    var ReactComponent = __webpack_require__(243);
    var ReactCurrentOwner = __webpack_require__(238);
    var ReactElement = __webpack_require__(232);
    var ReactErrorUtils = __webpack_require__(259);
    var ReactInstanceMap = __webpack_require__(246);
    var ReactLifeCycle = __webpack_require__(245);
    var ReactPropTypeLocations = __webpack_require__(254);
    var ReactPropTypeLocationNames = __webpack_require__(255);
    var ReactUpdateQueue = __webpack_require__(244);

    var assign = __webpack_require__(234);
    var invariant = __webpack_require__(228);
    var keyMirror = __webpack_require__(227);
    var keyOf = __webpack_require__(260);
    var warning = __webpack_require__(236);

    var MIXINS_KEY = keyOf({ mixins: null });

    /**
     * Policies that describe methods in `ReactClassInterface`.
     */
    var SpecPolicy = keyMirror({
      /**
       * These methods may be defined only once by the class specification or mixin.
       */
      DEFINE_ONCE: null,
      /**
       * These methods may be defined by both the class specification and mixins.
       * Subsequent definitions will be chained. These methods must return void.
       */
      DEFINE_MANY: null,
      /**
       * These methods are overriding the base class.
       */
      OVERRIDE_BASE: null,
      /**
       * These methods are similar to DEFINE_MANY, except we assume they return
       * objects. We try to merge the keys of the return values of all the mixed in
       * functions. If there is a key conflict we throw.
       */
      DEFINE_MANY_MERGED: null
    });

    var injectedMixins = [];

    /**
     * Composite components are higher-level components that compose other composite
     * or native components.
     *
     * To create a new type of `ReactClass`, pass a specification of
     * your new class to `React.createClass`. The only requirement of your class
     * specification is that you implement a `render` method.
     *
     *   var MyComponent = React.createClass({
     *     render: function() {
     *       return <div>Hello World</div>;
     *     }
     *   });
     *
     * The class specification supports a specific protocol of methods that have
     * special meaning (e.g. `render`). See `ReactClassInterface` for
     * more the comprehensive protocol. Any other properties and methods in the
     * class specification will available on the prototype.
     *
     * @interface ReactClassInterface
     * @internal
     */
    var ReactClassInterface = {

      /**
       * An array of Mixin objects to include when defining your component.
       *
       * @type {array}
       * @optional
       */
      mixins: SpecPolicy.DEFINE_MANY,

      /**
       * An object containing properties and methods that should be defined on
       * the component's constructor instead of its prototype (static methods).
       *
       * @type {object}
       * @optional
       */
      statics: SpecPolicy.DEFINE_MANY,

      /**
       * Definition of prop types for this component.
       *
       * @type {object}
       * @optional
       */
      propTypes: SpecPolicy.DEFINE_MANY,

      /**
       * Definition of context types for this component.
       *
       * @type {object}
       * @optional
       */
      contextTypes: SpecPolicy.DEFINE_MANY,

      /**
       * Definition of context types this component sets for its children.
       *
       * @type {object}
       * @optional
       */
      childContextTypes: SpecPolicy.DEFINE_MANY,

      // ==== Definition methods ====

      /**
       * Invoked when the component is mounted. Values in the mapping will be set on
       * `this.props` if that prop is not specified (i.e. using an `in` check).
       *
       * This method is invoked before `getInitialState` and therefore cannot rely
       * on `this.state` or use `this.setState`.
       *
       * @return {object}
       * @optional
       */
      getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

      /**
       * Invoked once before the component is mounted. The return value will be used
       * as the initial value of `this.state`.
       *
       *   getInitialState: function() {
       *     return {
       *       isOn: false,
       *       fooBaz: new BazFoo()
       *     }
       *   }
       *
       * @return {object}
       * @optional
       */
      getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

      /**
       * @return {object}
       * @optional
       */
      getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

      /**
       * Uses props from `this.props` and state from `this.state` to render the
       * structure of the component.
       *
       * No guarantees are made about when or how often this method is invoked, so
       * it must not have side effects.
       *
       *   render: function() {
       *     var name = this.props.name;
       *     return <div>Hello, {name}!</div>;
       *   }
       *
       * @return {ReactComponent}
       * @nosideeffects
       * @required
       */
      render: SpecPolicy.DEFINE_ONCE,

      // ==== Delegate methods ====

      /**
       * Invoked when the component is initially created and about to be mounted.
       * This may have side effects, but any external subscriptions or data created
       * by this method must be cleaned up in `componentWillUnmount`.
       *
       * @optional
       */
      componentWillMount: SpecPolicy.DEFINE_MANY,

      /**
       * Invoked when the component has been mounted and has a DOM representation.
       * However, there is no guarantee that the DOM node is in the document.
       *
       * Use this as an opportunity to operate on the DOM when the component has
       * been mounted (initialized and rendered) for the first time.
       *
       * @param {DOMElement} rootNode DOM element representing the component.
       * @optional
       */
      componentDidMount: SpecPolicy.DEFINE_MANY,

      /**
       * Invoked before the component receives new props.
       *
       * Use this as an opportunity to react to a prop transition by updating the
       * state using `this.setState`. Current props are accessed via `this.props`.
       *
       *   componentWillReceiveProps: function(nextProps, nextContext) {
       *     this.setState({
       *       likesIncreasing: nextProps.likeCount > this.props.likeCount
       *     });
       *   }
       *
       * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
       * transition may cause a state change, but the opposite is not true. If you
       * need it, you are probably looking for `componentWillUpdate`.
       *
       * @param {object} nextProps
       * @optional
       */
      componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

      /**
       * Invoked while deciding if the component should be updated as a result of
       * receiving new props, state and/or context.
       *
       * Use this as an opportunity to `return false` when you're certain that the
       * transition to the new props/state/context will not require a component
       * update.
       *
       *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
       *     return !equal(nextProps, this.props) ||
       *       !equal(nextState, this.state) ||
       *       !equal(nextContext, this.context);
       *   }
       *
       * @param {object} nextProps
       * @param {?object} nextState
       * @param {?object} nextContext
       * @return {boolean} True if the component should update.
       * @optional
       */
      shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

      /**
       * Invoked when the component is about to update due to a transition from
       * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
       * and `nextContext`.
       *
       * Use this as an opportunity to perform preparation before an update occurs.
       *
       * NOTE: You **cannot** use `this.setState()` in this method.
       *
       * @param {object} nextProps
       * @param {?object} nextState
       * @param {?object} nextContext
       * @param {ReactReconcileTransaction} transaction
       * @optional
       */
      componentWillUpdate: SpecPolicy.DEFINE_MANY,

      /**
       * Invoked when the component's DOM representation has been updated.
       *
       * Use this as an opportunity to operate on the DOM when the component has
       * been updated.
       *
       * @param {object} prevProps
       * @param {?object} prevState
       * @param {?object} prevContext
       * @param {DOMElement} rootNode DOM element representing the component.
       * @optional
       */
      componentDidUpdate: SpecPolicy.DEFINE_MANY,

      /**
       * Invoked when the component is about to be removed from its parent and have
       * its DOM representation destroyed.
       *
       * Use this as an opportunity to deallocate any external resources.
       *
       * NOTE: There is no `componentDidUnmount` since your component will have been
       * destroyed by that point.
       *
       * @optional
       */
      componentWillUnmount: SpecPolicy.DEFINE_MANY,

      // ==== Advanced methods ====

      /**
       * Updates the component's currently mounted DOM representation.
       *
       * By default, this implements React's rendering and reconciliation algorithm.
       * Sophisticated clients may wish to override this.
       *
       * @param {ReactReconcileTransaction} transaction
       * @internal
       * @overridable
       */
      updateComponent: SpecPolicy.OVERRIDE_BASE

    };

    /**
     * Mapping from class specification keys to special processing functions.
     *
     * Although these are declared like instance properties in the specification
     * when defining classes using `React.createClass`, they are actually static
     * and are accessible on the constructor instead of the prototype. Despite
     * being static, they must be defined outside of the "statics" key under
     * which all other static methods are defined.
     */
    var RESERVED_SPEC_KEYS = {
      displayName: function(Constructor, displayName) {
        Constructor.displayName = displayName;
      },
      mixins: function(Constructor, mixins) {
        if (mixins) {
          for (var i = 0; i < mixins.length; i++) {
            mixSpecIntoComponent(Constructor, mixins[i]);
          }
        }
      },
      childContextTypes: function(Constructor, childContextTypes) {
        if (false) {
          validateTypeDef(
            Constructor,
            childContextTypes,
            ReactPropTypeLocations.childContext
          );
        }
        Constructor.childContextTypes = assign({},
          Constructor.childContextTypes,
          childContextTypes
        );
      },
      contextTypes: function(Constructor, contextTypes) {
        if (false) {
          validateTypeDef(
            Constructor,
            contextTypes,
            ReactPropTypeLocations.context
          );
        }
        Constructor.contextTypes = assign({},
          Constructor.contextTypes,
          contextTypes
        );
      },
      /**
       * Special case getDefaultProps which should move into statics but requires
       * automatic merging.
       */
      getDefaultProps: function(Constructor, getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(
            Constructor.getDefaultProps,
            getDefaultProps
          );
        } else {
          Constructor.getDefaultProps = getDefaultProps;
        }
      },
      propTypes: function(Constructor, propTypes) {
        if (false) {
          validateTypeDef(
            Constructor,
            propTypes,
            ReactPropTypeLocations.prop
          );
        }
        Constructor.propTypes = assign({},
          Constructor.propTypes,
          propTypes
        );
      },
      statics: function(Constructor, statics) {
        mixStaticSpecIntoComponent(Constructor, statics);
      }
    };

    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {
          // use a warning instead of an invariant so components
          // don't show up in prod but not in __DEV__
          (false ? warning(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
            'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          ) : null);
        }
      }
    }

    function validateMethodOverride(proto, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
        ReactClassInterface[name] :
        null;

      // Disallow overriding of base class methods unless explicitly allowed.
      if (ReactClassMixin.hasOwnProperty(name)) {
        (false ? invariant(
          specPolicy === SpecPolicy.OVERRIDE_BASE,
          'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
          name
        ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
      }

      // Disallow defining methods more than once unless explicitly allowed.
      if (proto.hasOwnProperty(name)) {
        (false ? invariant(
          specPolicy === SpecPolicy.DEFINE_MANY ||
          specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
          'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
          name
        ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
          specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
      }
    }

    /**
     * Mixin helper which handles policy validation and reserved
     * specification keys when building React classses.
     */
    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        return;
      }

      (false ? invariant(
        typeof spec !== 'function',
        'ReactClass: You\'re attempting to ' +
        'use a component class as a mixin. Instead, just use a regular object.'
      ) : invariant(typeof spec !== 'function'));
      (false ? invariant(
        !ReactElement.isValidElement(spec),
        'ReactClass: You\'re attempting to ' +
        'use a component as a mixin. Instead, just use a regular object.'
      ) : invariant(!ReactElement.isValidElement(spec)));

      var proto = Constructor.prototype;

      // By handling mixins before any other properties, we ensure the same
      // chaining order is applied to methods with DEFINE_MANY policy, whether
      // mixins are listed before or after these methods in the spec.
      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }

      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }

        if (name === MIXINS_KEY) {
          // We have already handled mixins in a special case above
          continue;
        }

        var property = spec[name];
        validateMethodOverride(proto, name);

        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          // Setup methods on prototype:
          // The following member methods should not be automatically bound:
          // 1. Expected ReactClass methods (in the "interface").
          // 2. Overridden methods (that were mixed in).
          var isReactClassMethod =
            ReactClassInterface.hasOwnProperty(name);
          var isAlreadyDefined = proto.hasOwnProperty(name);
          var markedDontBind = property && property.__reactDontBind;
          var isFunction = typeof property === 'function';
          var shouldAutoBind =
            isFunction &&
            !isReactClassMethod &&
            !isAlreadyDefined &&
            !markedDontBind;

          if (shouldAutoBind) {
            if (!proto.__reactAutoBindMap) {
              proto.__reactAutoBindMap = {};
            }
            proto.__reactAutoBindMap[name] = property;
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];

              // These cases should already be caught by validateMethodOverride
              (false ? invariant(
                isReactClassMethod && (
                  (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
                ),
                'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
                specPolicy,
                name
              ) : invariant(isReactClassMethod && (
                (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
              )));

              // For methods which are defined more than once, call the existing
              // methods before calling the new property, merging if appropriate.
              if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;
              if (false) {
                // Add verbose displayName to the function, which helps when looking
                // at profiling tools.
                if (typeof property === 'function' && spec.displayName) {
                  proto[name].displayName = spec.displayName + '_' + name;
                }
              }
            }
          }
        }
      }
    }

    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }
      for (var name in statics) {
        var property = statics[name];
        if (!statics.hasOwnProperty(name)) {
          continue;
        }

        var isReserved = name in RESERVED_SPEC_KEYS;
        (false ? invariant(
          !isReserved,
          'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
          name
        ) : invariant(!isReserved));

        var isInherited = name in Constructor;
        (false ? invariant(
          !isInherited,
          'ReactClass: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be ' +
          'due to a mixin.',
          name
        ) : invariant(!isInherited));
        Constructor[name] = property;
      }
    }

    /**
     * Merge two objects, but throw if both contain the same key.
     *
     * @param {object} one The first object, which is mutated.
     * @param {object} two The second object
     * @return {object} one after it has been mutated to contain everything in two.
     */
    function mergeIntoWithNoDuplicateKeys(one, two) {
      (false ? invariant(
        one && two && typeof one === 'object' && typeof two === 'object',
        'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
      ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          (false ? invariant(
            one[key] === undefined,
            'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
            key
          ) : invariant(one[key] === undefined));
          one[key] = two[key];
        }
      }
      return one;
    }

    /**
     * Creates a function that invokes two functions and merges their return values.
     *
     * @param {function} one Function to invoke first.
     * @param {function} two Function to invoke second.
     * @return {function} Function that invokes the two argument functions.
     * @private
     */
    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);
        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }
        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }

    /**
     * Creates a function that invokes two functions and ignores their return vales.
     *
     * @param {function} one Function to invoke first.
     * @param {function} two Function to invoke second.
     * @return {function} Function that invokes the two argument functions.
     * @private
     */
    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }

    /**
     * Binds a method to the component.
     *
     * @param {object} component Component whose method is going to be bound.
     * @param {function} method Method to be bound.
     * @return {function} The bound method.
     */
    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);
      if (false) {
        boundMethod.__reactBoundContext = component;
        boundMethod.__reactBoundMethod = method;
        boundMethod.__reactBoundArguments = null;
        var componentName = component.constructor.displayName;
        var _bind = boundMethod.bind;
        /* eslint-disable block-scoped-var, no-undef */
        boundMethod.bind = function(newThis) {
          for (var args = [], $__0 = 1, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);
          // User is trying to bind() an autobound method; we effectively will
          // ignore the value of "this" that the user is trying to use, so
          // let's warn.
          if (newThis !== component && newThis !== null) {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'bind(): React component methods may only be bound to the ' +
              'component instance. See %s',
              componentName
            ) : null);
          } else if (!args.length) {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'bind(): You are binding a component method to the component. ' +
              'React does this for you automatically in a high-performance ' +
              'way, so you can safely remove this call. See %s',
              componentName
            ) : null);
            return boundMethod;
          }
          var reboundMethod = _bind.apply(boundMethod, arguments);
          reboundMethod.__reactBoundContext = component;
          reboundMethod.__reactBoundMethod = method;
          reboundMethod.__reactBoundArguments = args;
          return reboundMethod;
          /* eslint-enable */
        };
      }
      return boundMethod;
    }

    /**
     * Binds all auto-bound methods in a component.
     *
     * @param {object} component Component whose method is going to be bound.
     */
    function bindAutoBindMethods(component) {
      for (var autoBindKey in component.__reactAutoBindMap) {
        if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
          var method = component.__reactAutoBindMap[autoBindKey];
          component[autoBindKey] = bindAutoBindMethod(
            component,
            ReactErrorUtils.guard(
              method,
              component.constructor.displayName + '.' + autoBindKey
            )
          );
        }
      }
    }

    var typeDeprecationDescriptor = {
      enumerable: false,
      get: function() {
        var displayName = this.displayName || this.name || 'Component';
        (false ? warning(
          false,
          '%s.type is deprecated. Use %s directly to access the class.',
          displayName,
          displayName
        ) : null);
        Object.defineProperty(this, 'type', {
          value: this
        });
        return this;
      }
    };

    /**
     * Add more to the ReactClass base class. These are all legacy features and
     * therefore not already part of the modern ReactComponent.
     */
    var ReactClassMixin = {

      /**
       * TODO: This will be deprecated because state should always keep a consistent
       * type signature and the only use case for this, is to avoid that.
       */
      replaceState: function(newState, callback) {
        ReactUpdateQueue.enqueueReplaceState(this, newState);
        if (callback) {
          ReactUpdateQueue.enqueueCallback(this, callback);
        }
      },

      /**
       * Checks whether or not this composite component is mounted.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function() {
        if (false) {
          var owner = ReactCurrentOwner.current;
          if (owner !== null) {
            ("production" !== process.env.NODE_ENV ? warning(
              owner._warnedAboutRefsInRender,
              '%s is accessing isMounted inside its render() function. ' +
              'render() should be a pure function of props and state. It should ' +
              'never access something that requires stale data from the previous ' +
              'render, such as refs. Move this logic to componentDidMount and ' +
              'componentDidUpdate instead.',
              owner.getName() || 'A component'
            ) : null);
            owner._warnedAboutRefsInRender = true;
          }
        }
        var internalInstance = ReactInstanceMap.get(this);
        return (
          internalInstance &&
          internalInstance !== ReactLifeCycle.currentlyMountingInstance
        );
      },

      /**
       * Sets a subset of the props.
       *
       * @param {object} partialProps Subset of the next props.
       * @param {?function} callback Called after props are updated.
       * @final
       * @public
       * @deprecated
       */
      setProps: function(partialProps, callback) {
        ReactUpdateQueue.enqueueSetProps(this, partialProps);
        if (callback) {
          ReactUpdateQueue.enqueueCallback(this, callback);
        }
      },

      /**
       * Replace all the props.
       *
       * @param {object} newProps Subset of the next props.
       * @param {?function} callback Called after props are updated.
       * @final
       * @public
       * @deprecated
       */
      replaceProps: function(newProps, callback) {
        ReactUpdateQueue.enqueueReplaceProps(this, newProps);
        if (callback) {
          ReactUpdateQueue.enqueueCallback(this, callback);
        }
      }
    };

    var ReactClassComponent = function() {};
    assign(
      ReactClassComponent.prototype,
      ReactComponent.prototype,
      ReactClassMixin
    );

    /**
     * Module for creating composite components.
     *
     * @class ReactClass
     */
    var ReactClass = {

      /**
       * Creates a composite component class given a class specification.
       *
       * @param {object} spec Class specification (which must define `render`).
       * @return {function} Component constructor function.
       * @public
       */
      createClass: function(spec) {
        var Constructor = function(props, context) {
          // This constructor is overridden by mocks. The argument is used
          // by mocks to assert on what gets mounted.

          if (false) {
            ("production" !== process.env.NODE_ENV ? warning(
              this instanceof Constructor,
              'Something is calling a React component directly. Use a factory or ' +
              'JSX instead. See: https://fb.me/react-legacyfactory'
            ) : null);
          }

          // Wire up auto-binding
          if (this.__reactAutoBindMap) {
            bindAutoBindMethods(this);
          }

          this.props = props;
          this.context = context;
          this.state = null;

          // ReactClasses doesn't have constructors. Instead, they use the
          // getInitialState and componentWillMount methods for initialization.

          var initialState = this.getInitialState ? this.getInitialState() : null;
          if (false) {
            // We allow auto-mocks to proceed as if they're returning null.
            if (typeof initialState === 'undefined' &&
              this.getInitialState._isMockFunction) {
              // This is probably bad practice. Consider warning here and
              // deprecating this convenience.
              initialState = null;
            }
          }
          (false ? invariant(
            typeof initialState === 'object' && !Array.isArray(initialState),
            '%s.getInitialState(): must return an object or null',
            Constructor.displayName || 'ReactCompositeComponent'
          ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

          this.state = initialState;
        };
        Constructor.prototype = new ReactClassComponent();
        Constructor.prototype.constructor = Constructor;

        injectedMixins.forEach(
          mixSpecIntoComponent.bind(null, Constructor)
        );

        mixSpecIntoComponent(Constructor, spec);

        // Initialize the defaultProps property after all mixins have been merged
        if (Constructor.getDefaultProps) {
          Constructor.defaultProps = Constructor.getDefaultProps();
        }

        if (false) {
          // This is a tag to indicate that the use of these method names is ok,
          // since it's used with createClass. If it's not, then it's likely a
          // mistake so we'll warn you to use the static property, property
          // initializer or constructor respectively.
          if (Constructor.getDefaultProps) {
            Constructor.getDefaultProps.isReactClassApproved = {};
          }
          if (Constructor.prototype.getInitialState) {
            Constructor.prototype.getInitialState.isReactClassApproved = {};
          }
        }

        (false ? invariant(
          Constructor.prototype.render,
          'createClass(...): Class specification must implement a `render` method.'
        ) : invariant(Constructor.prototype.render));

        if (false) {
          ("production" !== process.env.NODE_ENV ? warning(
            !Constructor.prototype.componentShouldUpdate,
            '%s has a method called ' +
            'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
            'The name is phrased as a question because the function is ' +
            'expected to return a value.',
            spec.displayName || 'A component'
          ) : null);
        }

        // Reduce time spent doing lookups by setting these on the prototype.
        for (var methodName in ReactClassInterface) {
          if (!Constructor.prototype[methodName]) {
            Constructor.prototype[methodName] = null;
          }
        }

        // Legacy hook
        Constructor.type = Constructor;
        if (false) {
          try {
            Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
          } catch (x) {
            // IE will fail on defineProperty (es5-shim/sham too)
          }
        }

        return Constructor;
      },

      injection: {
        injectMixin: function(mixin) {
          injectedMixins.push(mixin);
        }
      }

    };

    module.exports = ReactClass;

    /***/
  }),
  /* 259 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactErrorUtils
     * @typechecks
     */

    "use strict";

    var ReactErrorUtils = {
      /**
       * Creates a guarded version of a function. This is supposed to make debugging
       * of event handlers easier. To aid debugging with the browser's debugger,
       * this currently simply returns the original function.
       *
       * @param {function} func Function to be executed
       * @param {string} name The name of the guard
       * @return {function}
       */
      guard: function(func, name) {
        return func;
      }
    };

    module.exports = ReactErrorUtils;

    /***/
  }),
  /* 260 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule keyOf
     */

    /**
     * Allows extraction of a minified key. Let's the build system minify keys
     * without loosing the ability to dynamically use key strings as values
     * themselves. Pass in an object with a single key/val pair and it will return
     * you the string key of that single record. Suppose you want to grab the
     * value for a key 'className' inside of an object. Key/val minification may
     * have aliased that key to be 'xa12'. keyOf({className: null}) will return
     * 'xa12' in that case. Resolve keys you want to use once at startup time, then
     * reuse those resolutions.
     */
    var keyOf = function(oneKeyObj) {
      var key;
      for (key in oneKeyObj) {
        if (!oneKeyObj.hasOwnProperty(key)) {
          continue;
        }
        return key;
      }
      return null;
    };

    module.exports = keyOf;

    /***/
  }),
  /* 261 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOM
     * @typechecks static-only
     */

    'use strict';

    var ReactElement = __webpack_require__(232);
    var ReactElementValidator = __webpack_require__(253);

    var mapObject = __webpack_require__(262);

    /**
     * Create a factory that creates HTML tag elements.
     *
     * @param {string} tag Tag name (e.g. `div`).
     * @private
     */
    function createDOMFactory(tag) {
      if (false) {
        return ReactElementValidator.createFactory(tag);
      }
      return ReactElement.createFactory(tag);
    }

    /**
     * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
     * This is also accessible via `React.DOM`.
     *
     * @public
     */
    var ReactDOM = mapObject({
      a: 'a',
      abbr: 'abbr',
      address: 'address',
      area: 'area',
      article: 'article',
      aside: 'aside',
      audio: 'audio',
      b: 'b',
      base: 'base',
      bdi: 'bdi',
      bdo: 'bdo',
      big: 'big',
      blockquote: 'blockquote',
      body: 'body',
      br: 'br',
      button: 'button',
      canvas: 'canvas',
      caption: 'caption',
      cite: 'cite',
      code: 'code',
      col: 'col',
      colgroup: 'colgroup',
      data: 'data',
      datalist: 'datalist',
      dd: 'dd',
      del: 'del',
      details: 'details',
      dfn: 'dfn',
      dialog: 'dialog',
      div: 'div',
      dl: 'dl',
      dt: 'dt',
      em: 'em',
      embed: 'embed',
      fieldset: 'fieldset',
      figcaption: 'figcaption',
      figure: 'figure',
      footer: 'footer',
      form: 'form',
      h1: 'h1',
      h2: 'h2',
      h3: 'h3',
      h4: 'h4',
      h5: 'h5',
      h6: 'h6',
      head: 'head',
      header: 'header',
      hr: 'hr',
      html: 'html',
      i: 'i',
      iframe: 'iframe',
      img: 'img',
      input: 'input',
      ins: 'ins',
      kbd: 'kbd',
      keygen: 'keygen',
      label: 'label',
      legend: 'legend',
      li: 'li',
      link: 'link',
      main: 'main',
      map: 'map',
      mark: 'mark',
      menu: 'menu',
      menuitem: 'menuitem',
      meta: 'meta',
      meter: 'meter',
      nav: 'nav',
      noscript: 'noscript',
      object: 'object',
      ol: 'ol',
      optgroup: 'optgroup',
      option: 'option',
      output: 'output',
      p: 'p',
      param: 'param',
      picture: 'picture',
      pre: 'pre',
      progress: 'progress',
      q: 'q',
      rp: 'rp',
      rt: 'rt',
      ruby: 'ruby',
      s: 's',
      samp: 'samp',
      script: 'script',
      section: 'section',
      select: 'select',
      small: 'small',
      source: 'source',
      span: 'span',
      strong: 'strong',
      style: 'style',
      sub: 'sub',
      summary: 'summary',
      sup: 'sup',
      table: 'table',
      tbody: 'tbody',
      td: 'td',
      textarea: 'textarea',
      tfoot: 'tfoot',
      th: 'th',
      thead: 'thead',
      time: 'time',
      title: 'title',
      tr: 'tr',
      track: 'track',
      u: 'u',
      ul: 'ul',
      'var': 'var',
      video: 'video',
      wbr: 'wbr',

      // SVG
      circle: 'circle',
      clipPath: 'clipPath',
      defs: 'defs',
      ellipse: 'ellipse',
      g: 'g',
      line: 'line',
      linearGradient: 'linearGradient',
      mask: 'mask',
      path: 'path',
      pattern: 'pattern',
      polygon: 'polygon',
      polyline: 'polyline',
      radialGradient: 'radialGradient',
      rect: 'rect',
      stop: 'stop',
      svg: 'svg',
      text: 'text',
      tspan: 'tspan'

    }, createDOMFactory);

    module.exports = ReactDOM;

    /***/
  }),
  /* 262 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule mapObject
     */

    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    /**
     * Executes the provided `callback` once for each enumerable own property in the
     * object and constructs a new object from the results. The `callback` is
     * invoked with three arguments:
     *
     *  - the property value
     *  - the property name
     *  - the object being traversed
     *
     * Properties that are added after the call to `mapObject` will not be visited
     * by `callback`. If the values of existing properties are changed, the value
     * passed to `callback` will be the value at the time `mapObject` visits them.
     * Properties that are deleted before being visited are not visited.
     *
     * @grep function objectMap()
     * @grep function objMap()
     *
     * @param {?object} object
     * @param {function} callback
     * @param {*} context
     * @return {?object}
     */
    function mapObject(object, callback, context) {
      if (!object) {
        return null;
      }
      var result = {};
      for (var name in object) {
        if (hasOwnProperty.call(object, name)) {
          result[name] = callback.call(context, object[name], name, object);
        }
      }
      return result;
    }

    module.exports = mapObject;

    /***/
  }),
  /* 263 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMTextComponent
     * @typechecks static-only
     */

    'use strict';

    var DOMPropertyOperations = __webpack_require__(264);
    var ReactComponentBrowserEnvironment =
      __webpack_require__(268);
    var ReactDOMComponent = __webpack_require__(308);

    var assign = __webpack_require__(234);
    var escapeTextContentForBrowser = __webpack_require__(267);

    /**
     * Text nodes violate a couple assumptions that React makes about components:
     *
     *  - When mounting text into the DOM, adjacent text nodes are merged.
     *  - Text nodes cannot be assigned a React root ID.
     *
     * This component is used to wrap strings in elements so that they can undergo
     * the same reconciliation that is applied to elements.
     *
     * TODO: Investigate representing React components in the DOM with text nodes.
     *
     * @class ReactDOMTextComponent
     * @extends ReactComponent
     * @internal
     */
    var ReactDOMTextComponent = function(props) {
      // This constructor and its argument is currently used by mocks.
    };

    assign(ReactDOMTextComponent.prototype, {

      /**
       * @param {ReactText} text
       * @internal
       */
      construct: function(text) {
        // TODO: This is really a ReactText (ReactNode), not a ReactElement
        this._currentElement = text;
        this._stringText = '' + text;

        // Properties
        this._rootNodeID = null;
        this._mountIndex = 0;
      },

      /**
       * Creates the markup for this text node. This node is not intended to have
       * any features besides containing text content.
       *
       * @param {string} rootID DOM ID of the root node.
       * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
       * @return {string} Markup for this text node.
       * @internal
       */
      mountComponent: function(rootID, transaction, context) {
        this._rootNodeID = rootID;
        var escapedText = escapeTextContentForBrowser(this._stringText);

        if (transaction.renderToStaticMarkup) {
          // Normally we'd wrap this in a `span` for the reasons stated above, but
          // since this is a situation where React won't take over (static pages),
          // we can simply return the text as it is.
          return escapedText;
        }

        return (
          '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
          escapedText +
          '</span>'
        );
      },

      /**
       * Updates this component by updating the text content.
       *
       * @param {ReactText} nextText The next text content
       * @param {ReactReconcileTransaction} transaction
       * @internal
       */
      receiveComponent: function(nextText, transaction) {
        if (nextText !== this._currentElement) {
          this._currentElement = nextText;
          var nextStringText = '' + nextText;
          if (nextStringText !== this._stringText) {
            // TODO: Save this as pending props and use performUpdateIfNecessary
            // and/or updateComponent to do the actual update for consistency with
            // other component types?
            this._stringText = nextStringText;
            ReactDOMComponent.BackendIDOperations.updateTextContentByID(
              this._rootNodeID,
              nextStringText
            );
          }
        }
      },

      unmountComponent: function() {
        ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
      }

    });

    module.exports = ReactDOMTextComponent;

    /***/
  }),
  /* 264 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule DOMPropertyOperations
     * @typechecks static-only
     */

    'use strict';

    var DOMProperty = __webpack_require__(265);

    var quoteAttributeValueForBrowser = __webpack_require__(266);
    var warning = __webpack_require__(236);

    function shouldIgnoreValue(name, value) {
      return value == null ||
        (DOMProperty.hasBooleanValue[name] && !value) ||
        (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
        (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
        (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
    }

    if (false) {
      var reactProps = {
        children: true,
        dangerouslySetInnerHTML: true,
        key: true,
        ref: true
      };
      var warnedProperties = {};

      var warnUnknownProperty = function(name) {
        if (reactProps.hasOwnProperty(name) && reactProps[name] ||
          warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
          return;
        }

        warnedProperties[name] = true;
        var lowerCasedName = name.toLowerCase();

        // data-* attributes should be lowercase; suggest the lowercase version
        var standardName = (
          DOMProperty.isCustomAttribute(lowerCasedName) ?
          lowerCasedName :
          DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
          DOMProperty.getPossibleStandardName[lowerCasedName] :
          null
        );

        // For now, only warn when we have a suggested correction. This prevents
        // logging too much when using transferPropsTo.
        ("production" !== process.env.NODE_ENV ? warning(
          standardName == null,
          'Unknown DOM property %s. Did you mean %s?',
          name,
          standardName
        ) : null);

      };
    }

    /**
     * Operations for dealing with DOM properties.
     */
    var DOMPropertyOperations = {

      /**
       * Creates markup for the ID property.
       *
       * @param {string} id Unescaped ID.
       * @return {string} Markup string.
       */
      createMarkupForID: function(id) {
        return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
          quoteAttributeValueForBrowser(id);
      },

      /**
       * Creates markup for a property.
       *
       * @param {string} name
       * @param {*} value
       * @return {?string} Markup string, or null if the property was invalid.
       */
      createMarkupForProperty: function(name, value) {
        if (DOMProperty.isStandardName.hasOwnProperty(name) &&
          DOMProperty.isStandardName[name]) {
          if (shouldIgnoreValue(name, value)) {
            return '';
          }
          var attributeName = DOMProperty.getAttributeName[name];
          if (DOMProperty.hasBooleanValue[name] ||
            (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
            return attributeName;
          }
          return attributeName + '=' + quoteAttributeValueForBrowser(value);
        } else if (DOMProperty.isCustomAttribute(name)) {
          if (value == null) {
            return '';
          }
          return name + '=' + quoteAttributeValueForBrowser(value);
        } else if (false) {
          warnUnknownProperty(name);
        }
        return null;
      },

      /**
       * Sets the value for a property on a node.
       *
       * @param {DOMElement} node
       * @param {string} name
       * @param {*} value
       */
      setValueForProperty: function(node, name, value) {
        if (DOMProperty.isStandardName.hasOwnProperty(name) &&
          DOMProperty.isStandardName[name]) {
          var mutationMethod = DOMProperty.getMutationMethod[name];
          if (mutationMethod) {
            mutationMethod(node, value);
          } else if (shouldIgnoreValue(name, value)) {
            this.deleteValueForProperty(node, name);
          } else if (DOMProperty.mustUseAttribute[name]) {
            // `setAttribute` with objects becomes only `[object]` in IE8/9,
            // ('' + value) makes it output the correct toString()-value.
            node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
          } else {
            var propName = DOMProperty.getPropertyName[name];
            // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
            // property type before comparing; only `value` does and is string.
            if (!DOMProperty.hasSideEffects[name] ||
              ('' + node[propName]) !== ('' + value)) {
              // Contrary to `setAttribute`, object properties are properly
              // `toString`ed by IE8/9.
              node[propName] = value;
            }
          }
        } else if (DOMProperty.isCustomAttribute(name)) {
          if (value == null) {
            node.removeAttribute(name);
          } else {
            node.setAttribute(name, '' + value);
          }
        } else if (false) {
          warnUnknownProperty(name);
        }
      },

      /**
       * Deletes the value for a property on a node.
       *
       * @param {DOMElement} node
       * @param {string} name
       */
      deleteValueForProperty: function(node, name) {
        if (DOMProperty.isStandardName.hasOwnProperty(name) &&
          DOMProperty.isStandardName[name]) {
          var mutationMethod = DOMProperty.getMutationMethod[name];
          if (mutationMethod) {
            mutationMethod(node, undefined);
          } else if (DOMProperty.mustUseAttribute[name]) {
            node.removeAttribute(DOMProperty.getAttributeName[name]);
          } else {
            var propName = DOMProperty.getPropertyName[name];
            var defaultValue = DOMProperty.getDefaultValueForProperty(
              node.nodeName,
              propName
            );
            if (!DOMProperty.hasSideEffects[name] ||
              ('' + node[propName]) !== defaultValue) {
              node[propName] = defaultValue;
            }
          }
        } else if (DOMProperty.isCustomAttribute(name)) {
          node.removeAttribute(name);
        } else if (false) {
          warnUnknownProperty(name);
        }
      }

    };

    module.exports = DOMPropertyOperations;

    /***/
  }),
  /* 265 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule DOMProperty
     * @typechecks static-only
     */

    /*jslint bitwise: true */

    'use strict';

    var invariant = __webpack_require__(228);

    function checkMask(value, bitmask) {
      return (value & bitmask) === bitmask;
    }

    var DOMPropertyInjection = {
      /**
       * Mapping from normalized, camelcased property names to a configuration that
       * specifies how the associated DOM property should be accessed or rendered.
       */
      MUST_USE_ATTRIBUTE: 0x1,
      MUST_USE_PROPERTY: 0x2,
      HAS_SIDE_EFFECTS: 0x4,
      HAS_BOOLEAN_VALUE: 0x8,
      HAS_NUMERIC_VALUE: 0x10,
      HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
      HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

      /**
       * Inject some specialized knowledge about the DOM. This takes a config object
       * with the following properties:
       *
       * isCustomAttribute: function that given an attribute name will return true
       * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
       * attributes where it's impossible to enumerate all of the possible
       * attribute names,
       *
       * Properties: object mapping DOM property name to one of the
       * DOMPropertyInjection constants or null. If your attribute isn't in here,
       * it won't get written to the DOM.
       *
       * DOMAttributeNames: object mapping React attribute name to the DOM
       * attribute name. Attribute names not specified use the **lowercase**
       * normalized name.
       *
       * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
       * Property names not specified use the normalized name.
       *
       * DOMMutationMethods: Properties that require special mutation methods. If
       * `value` is undefined, the mutation method should unset the property.
       *
       * @param {object} domPropertyConfig the config as described above.
       */
      injectDOMPropertyConfig: function(domPropertyConfig) {
        var Properties = domPropertyConfig.Properties || {};
        var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
        var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
        var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

        if (domPropertyConfig.isCustomAttribute) {
          DOMProperty._isCustomAttributeFunctions.push(
            domPropertyConfig.isCustomAttribute
          );
        }

        for (var propName in Properties) {
          (false ? invariant(
            !DOMProperty.isStandardName.hasOwnProperty(propName),
            'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
            '\'%s\' which has already been injected. You may be accidentally ' +
            'injecting the same DOM property config twice, or you may be ' +
            'injecting two configs that have conflicting property names.',
            propName
          ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

          DOMProperty.isStandardName[propName] = true;

          var lowerCased = propName.toLowerCase();
          DOMProperty.getPossibleStandardName[lowerCased] = propName;

          if (DOMAttributeNames.hasOwnProperty(propName)) {
            var attributeName = DOMAttributeNames[propName];
            DOMProperty.getPossibleStandardName[attributeName] = propName;
            DOMProperty.getAttributeName[propName] = attributeName;
          } else {
            DOMProperty.getAttributeName[propName] = lowerCased;
          }

          DOMProperty.getPropertyName[propName] =
            DOMPropertyNames.hasOwnProperty(propName) ?
            DOMPropertyNames[propName] :
            propName;

          if (DOMMutationMethods.hasOwnProperty(propName)) {
            DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
          } else {
            DOMProperty.getMutationMethod[propName] = null;
          }

          var propConfig = Properties[propName];
          DOMProperty.mustUseAttribute[propName] =
            checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
          DOMProperty.mustUseProperty[propName] =
            checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
          DOMProperty.hasSideEffects[propName] =
            checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
          DOMProperty.hasBooleanValue[propName] =
            checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
          DOMProperty.hasNumericValue[propName] =
            checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
          DOMProperty.hasPositiveNumericValue[propName] =
            checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
          DOMProperty.hasOverloadedBooleanValue[propName] =
            checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

          (false ? invariant(
            !DOMProperty.mustUseAttribute[propName] ||
            !DOMProperty.mustUseProperty[propName],
            'DOMProperty: Cannot require using both attribute and property: %s',
            propName
          ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
            !DOMProperty.mustUseProperty[propName]));
          (false ? invariant(
            DOMProperty.mustUseProperty[propName] ||
            !DOMProperty.hasSideEffects[propName],
            'DOMProperty: Properties that have side effects must use property: %s',
            propName
          ) : invariant(DOMProperty.mustUseProperty[propName] ||
            !DOMProperty.hasSideEffects[propName]));
          (false ? invariant(
            !!DOMProperty.hasBooleanValue[propName] +
            !!DOMProperty.hasNumericValue[propName] +
            !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
            'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
            'numeric value, but not a combination: %s',
            propName
          ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
            !!DOMProperty.hasNumericValue[propName] +
            !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
        }
      }
    };
    var defaultValueCache = {};

    /**
     * DOMProperty exports lookup objects that can be used like functions:
     *
     *   > DOMProperty.isValid['id']
     *   true
     *   > DOMProperty.isValid['foobar']
     *   undefined
     *
     * Although this may be confusing, it performs better in general.
     *
     * @see http://jsperf.com/key-exists
     * @see http://jsperf.com/key-missing
     */
    var DOMProperty = {

      ID_ATTRIBUTE_NAME: 'data-reactid',

      /**
       * Checks whether a property name is a standard property.
       * @type {Object}
       */
      isStandardName: {},

      /**
       * Mapping from lowercase property names to the properly cased version, used
       * to warn in the case of missing properties.
       * @type {Object}
       */
      getPossibleStandardName: {},

      /**
       * Mapping from normalized names to attribute names that differ. Attribute
       * names are used when rendering markup or with `*Attribute()`.
       * @type {Object}
       */
      getAttributeName: {},

      /**
       * Mapping from normalized names to properties on DOM node instances.
       * (This includes properties that mutate due to external factors.)
       * @type {Object}
       */
      getPropertyName: {},

      /**
       * Mapping from normalized names to mutation methods. This will only exist if
       * mutation cannot be set simply by the property or `setAttribute()`.
       * @type {Object}
       */
      getMutationMethod: {},

      /**
       * Whether the property must be accessed and mutated as an object property.
       * @type {Object}
       */
      mustUseAttribute: {},

      /**
       * Whether the property must be accessed and mutated using `*Attribute()`.
       * (This includes anything that fails `<propName> in <element>`.)
       * @type {Object}
       */
      mustUseProperty: {},

      /**
       * Whether or not setting a value causes side effects such as triggering
       * resources to be loaded or text selection changes. We must ensure that
       * the value is only set if it has changed.
       * @type {Object}
       */
      hasSideEffects: {},

      /**
       * Whether the property should be removed when set to a falsey value.
       * @type {Object}
       */
      hasBooleanValue: {},

      /**
       * Whether the property must be numeric or parse as a
       * numeric and should be removed when set to a falsey value.
       * @type {Object}
       */
      hasNumericValue: {},

      /**
       * Whether the property must be positive numeric or parse as a positive
       * numeric and should be removed when set to a falsey value.
       * @type {Object}
       */
      hasPositiveNumericValue: {},

      /**
       * Whether the property can be used as a flag as well as with a value. Removed
       * when strictly equal to false; present without a value when strictly equal
       * to true; present with a value otherwise.
       * @type {Object}
       */
      hasOverloadedBooleanValue: {},

      /**
       * All of the isCustomAttribute() functions that have been injected.
       */
      _isCustomAttributeFunctions: [],

      /**
       * Checks whether a property name is a custom attribute.
       * @method
       */
      isCustomAttribute: function(attributeName) {
        for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
          var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
          if (isCustomAttributeFn(attributeName)) {
            return true;
          }
        }
        return false;
      },

      /**
       * Returns the default property value for a DOM property (i.e., not an
       * attribute). Most default values are '' or false, but not all. Worse yet,
       * some (in particular, `type`) vary depending on the type of element.
       *
       * TODO: Is it better to grab all the possible properties when creating an
       * element to avoid having to create the same element twice?
       */
      getDefaultValueForProperty: function(nodeName, prop) {
        var nodeDefaults = defaultValueCache[nodeName];
        var testElement;
        if (!nodeDefaults) {
          defaultValueCache[nodeName] = nodeDefaults = {};
        }
        if (!(prop in nodeDefaults)) {
          testElement = document.createElement(nodeName);
          nodeDefaults[prop] = testElement[prop];
        }
        return nodeDefaults[prop];
      },

      injection: DOMPropertyInjection
    };

    module.exports = DOMProperty;

    /***/
  }),
  /* 266 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule quoteAttributeValueForBrowser
     */

    'use strict';

    var escapeTextContentForBrowser = __webpack_require__(267);

    /**
     * Escapes attribute value to prevent scripting attacks.
     *
     * @param {*} value Value to escape.
     * @return {string} An escaped string.
     */
    function quoteAttributeValueForBrowser(value) {
      return '"' + escapeTextContentForBrowser(value) + '"';
    }

    module.exports = quoteAttributeValueForBrowser;

    /***/
  }),
  /* 267 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule escapeTextContentForBrowser
     */

    'use strict';

    var ESCAPE_LOOKUP = {
      '&': '&amp;',
      '>': '&gt;',
      '<': '&lt;',
      '"': '&quot;',
      '\'': '&#x27;'
    };

    var ESCAPE_REGEX = /[&><"']/g;

    function escaper(match) {
      return ESCAPE_LOOKUP[match];
    }

    /**
     * Escapes text to prevent scripting attacks.
     *
     * @param {*} text Text value to escape.
     * @return {string} An escaped string.
     */
    function escapeTextContentForBrowser(text) {
      return ('' + text).replace(ESCAPE_REGEX, escaper);
    }

    module.exports = escapeTextContentForBrowser;

    /***/
  }),
  /* 268 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactComponentBrowserEnvironment
     */

    /*jslint evil: true */

    'use strict';

    var ReactDOMIDOperations = __webpack_require__(269);
    var ReactMount = __webpack_require__(288);

    /**
     * Abstracts away all functionality of the reconciler that requires knowledge of
     * the browser context. TODO: These callers should be refactored to avoid the
     * need for this injection.
     */
    var ReactComponentBrowserEnvironment = {

      processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

      replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

      /**
       * If a particular environment requires that some resources be cleaned up,
       * specify this in the injected Mixin. In the DOM, we would likely want to
       * purge any cached node ID lookups.
       *
       * @private
       */
      unmountIDFromEnvironment: function(rootNodeID) {
        ReactMount.purgeID(rootNodeID);
      }

    };

    module.exports = ReactComponentBrowserEnvironment;

    /***/
  }),
  /* 269 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMIDOperations
     * @typechecks static-only
     */

    /*jslint evil: true */

    'use strict';

    var CSSPropertyOperations = __webpack_require__(270);
    var DOMChildrenOperations = __webpack_require__(279);
    var DOMPropertyOperations = __webpack_require__(264);
    var ReactMount = __webpack_require__(288);
    var ReactPerf = __webpack_require__(249);

    var invariant = __webpack_require__(228);
    var setInnerHTML = __webpack_require__(287);

    /**
     * Errors for properties that should not be updated with `updatePropertyById()`.
     *
     * @type {object}
     * @private
     */
    var INVALID_PROPERTY_ERRORS = {
      dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
      style: '`style` must be set using `updateStylesByID()`.'
    };

    /**
     * Operations used to process updates to DOM nodes. This is made injectable via
     * `ReactDOMComponent.BackendIDOperations`.
     */
    var ReactDOMIDOperations = {

      /**
       * Updates a DOM node with new property values. This should only be used to
       * update DOM properties in `DOMProperty`.
       *
       * @param {string} id ID of the node to update.
       * @param {string} name A valid property name, see `DOMProperty`.
       * @param {*} value New value of the property.
       * @internal
       */
      updatePropertyByID: function(id, name, value) {
        var node = ReactMount.getNode(id);
        (false ? invariant(
          !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
          'updatePropertyByID(...): %s',
          INVALID_PROPERTY_ERRORS[name]
        ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertantly setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (value != null) {
          DOMPropertyOperations.setValueForProperty(node, name, value);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, name);
        }
      },

      /**
       * Updates a DOM node to remove a property. This should only be used to remove
       * DOM properties in `DOMProperty`.
       *
       * @param {string} id ID of the node to update.
       * @param {string} name A property name to remove, see `DOMProperty`.
       * @internal
       */
      deletePropertyByID: function(id, name, value) {
        var node = ReactMount.getNode(id);
        (false ? invariant(
          !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
          'updatePropertyByID(...): %s',
          INVALID_PROPERTY_ERRORS[name]
        ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
        DOMPropertyOperations.deleteValueForProperty(node, name, value);
      },

      /**
       * Updates a DOM node with new style values. If a value is specified as '',
       * the corresponding style property will be unset.
       *
       * @param {string} id ID of the node to update.
       * @param {object} styles Mapping from styles to values.
       * @internal
       */
      updateStylesByID: function(id, styles) {
        var node = ReactMount.getNode(id);
        CSSPropertyOperations.setValueForStyles(node, styles);
      },

      /**
       * Updates a DOM node's innerHTML.
       *
       * @param {string} id ID of the node to update.
       * @param {string} html An HTML string.
       * @internal
       */
      updateInnerHTMLByID: function(id, html) {
        var node = ReactMount.getNode(id);
        setInnerHTML(node, html);
      },

      /**
       * Updates a DOM node's text content set by `props.content`.
       *
       * @param {string} id ID of the node to update.
       * @param {string} content Text content.
       * @internal
       */
      updateTextContentByID: function(id, content) {
        var node = ReactMount.getNode(id);
        DOMChildrenOperations.updateTextContent(node, content);
      },

      /**
       * Replaces a DOM node that exists in the document with markup.
       *
       * @param {string} id ID of child to be replaced.
       * @param {string} markup Dangerous markup to inject in place of child.
       * @internal
       * @see {Danger.dangerouslyReplaceNodeWithMarkup}
       */
      dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
        var node = ReactMount.getNode(id);
        DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
      },

      /**
       * Updates a component's children by processing a series of updates.
       *
       * @param {array<object>} updates List of update configurations.
       * @param {array<string>} markup List of markup strings.
       * @internal
       */
      dangerouslyProcessChildrenUpdates: function(updates, markup) {
        for (var i = 0; i < updates.length; i++) {
          updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
        }
        DOMChildrenOperations.processUpdates(updates, markup);
      }
    };

    ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
      updatePropertyByID: 'updatePropertyByID',
      deletePropertyByID: 'deletePropertyByID',
      updateStylesByID: 'updateStylesByID',
      updateInnerHTMLByID: 'updateInnerHTMLByID',
      updateTextContentByID: 'updateTextContentByID',
      dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
      dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
    });

    module.exports = ReactDOMIDOperations;

    /***/
  }),
  /* 270 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule CSSPropertyOperations
     * @typechecks static-only
     */

    'use strict';

    var CSSProperty = __webpack_require__(271);
    var ExecutionEnvironment = __webpack_require__(272);

    var camelizeStyleName = __webpack_require__(273);
    var dangerousStyleValue = __webpack_require__(275);
    var hyphenateStyleName = __webpack_require__(276);
    var memoizeStringOnly = __webpack_require__(278);
    var warning = __webpack_require__(236);

    var processStyleName = memoizeStringOnly(function(styleName) {
      return hyphenateStyleName(styleName);
    });

    var styleFloatAccessor = 'cssFloat';
    if (ExecutionEnvironment.canUseDOM) {
      // IE8 only supports accessing cssFloat (standard) as styleFloat
      if (document.documentElement.style.cssFloat === undefined) {
        styleFloatAccessor = 'styleFloat';
      }
    }

    if (false) {
      // 'msTransform' is correct, but the other prefixes should be capitalized
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

      // style values shouldn't contain a semicolon
      var badStyleValueWithSemicolonPattern = /;\s*$/;

      var warnedStyleNames = {};
      var warnedStyleValues = {};

      var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Unsupported style property %s. Did you mean %s?',
          name,
          camelizeStyleName(name)
        ) : null);
      };

      var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Unsupported vendor-prefixed style property %s. Did you mean %s?',
          name,
          name.charAt(0).toUpperCase() + name.slice(1)
        ) : null);
      };

      var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }

        warnedStyleValues[value] = true;
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Style property values shouldn\'t contain a semicolon. ' +
          'Try "%s: %s" instead.',
          name,
          value.replace(badStyleValueWithSemicolonPattern, '')
        ) : null);
      };

      /**
       * @param {string} name
       * @param {*} value
       */
      var warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }
      };
    }

    /**
     * Operations for dealing with CSS properties.
     */
    var CSSPropertyOperations = {

      /**
       * Serializes a mapping of style properties for use as inline styles:
       *
       *   > createMarkupForStyles({width: '200px', height: 0})
       *   "width:200px;height:0;"
       *
       * Undefined values are ignored so that declarative programming is easier.
       * The result should be HTML-escaped before insertion into the DOM.
       *
       * @param {object} styles
       * @return {?string}
       */
      createMarkupForStyles: function(styles) {
        var serialized = '';
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var styleValue = styles[styleName];
          if (false) {
            warnValidStyle(styleName, styleValue);
          }
          if (styleValue != null) {
            serialized += processStyleName(styleName) + ':';
            serialized += dangerousStyleValue(styleName, styleValue) + ';';
          }
        }
        return serialized || null;
      },

      /**
       * Sets the value for multiple styles on a node.  If a value is specified as
       * '' (empty string), the corresponding style property will be unset.
       *
       * @param {DOMElement} node
       * @param {object} styles
       */
      setValueForStyles: function(node, styles) {
        var style = node.style;
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          if (false) {
            warnValidStyle(styleName, styles[styleName]);
          }
          var styleValue = dangerousStyleValue(styleName, styles[styleName]);
          if (styleName === 'float') {
            styleName = styleFloatAccessor;
          }
          if (styleValue) {
            style[styleName] = styleValue;
          } else {
            var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
            if (expansion) {
              // Shorthand property that IE8 won't like unsetting, so unset each
              // component to placate it
              for (var individualStyleName in expansion) {
                style[individualStyleName] = '';
              }
            } else {
              style[styleName] = '';
            }
          }
        }
      }

    };

    module.exports = CSSPropertyOperations;

    /***/
  }),
  /* 271 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule CSSProperty
     */

    'use strict';

    /**
     * CSS properties which accept numbers but are not in units of "px".
     */
    var isUnitlessNumber = {
      boxFlex: true,
      boxFlexGroup: true,
      columnCount: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      widows: true,
      zIndex: true,
      zoom: true,

      // SVG-related properties
      fillOpacity: true,
      strokeDashoffset: true,
      strokeOpacity: true,
      strokeWidth: true
    };

    /**
     * @param {string} prefix vendor-specific prefix, eg: Webkit
     * @param {string} key style name, eg: transitionDuration
     * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
     * WebkitTransitionDuration
     */
    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }

    /**
     * Support style names that may come passed in prefixed by adding permutations
     * of vendor prefixes.
     */
    var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

    // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });

    /**
     * Most style properties can be unset by doing .style[prop] = '' but IE8
     * doesn't like doing that with shorthand properties so for the properties that
     * IE8 breaks on, which are listed here, we instead unset each of the
     * individual properties. See http://bugs.jquery.com/ticket/12385.
     * The 4-value 'clock' properties like margin, padding, border-width seem to
     * behave without any problems. Curiously, list-style works too without any
     * special prodding.
     */
    var shorthandPropertyExpansions = {
      background: {
        backgroundImage: true,
        backgroundPosition: true,
        backgroundRepeat: true,
        backgroundColor: true
      },
      border: {
        borderWidth: true,
        borderStyle: true,
        borderColor: true
      },
      borderBottom: {
        borderBottomWidth: true,
        borderBottomStyle: true,
        borderBottomColor: true
      },
      borderLeft: {
        borderLeftWidth: true,
        borderLeftStyle: true,
        borderLeftColor: true
      },
      borderRight: {
        borderRightWidth: true,
        borderRightStyle: true,
        borderRightColor: true
      },
      borderTop: {
        borderTopWidth: true,
        borderTopStyle: true,
        borderTopColor: true
      },
      font: {
        fontStyle: true,
        fontVariant: true,
        fontWeight: true,
        fontSize: true,
        lineHeight: true,
        fontFamily: true
      }
    };

    var CSSProperty = {
      isUnitlessNumber: isUnitlessNumber,
      shorthandPropertyExpansions: shorthandPropertyExpansions
    };

    module.exports = CSSProperty;

    /***/
  }),
  /* 272 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ExecutionEnvironment
     */

    /*jslint evil: true */

    "use strict";

    var canUseDOM = !!(
      (typeof window !== 'undefined' &&
        window.document && window.document.createElement)
    );

    /**
     * Simple, lightweight module assisting with the detection and context of
     * Worker. Helps avoid circular dependencies and allows code to reason about
     * whether or not they are in a Worker, even if they never include the main
     * `ReactWorker` dependency.
     */
    var ExecutionEnvironment = {

      canUseDOM: canUseDOM,

      canUseWorkers: typeof Worker !== 'undefined',

      canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

      canUseViewport: canUseDOM && !!window.screen,

      isInWorker: !canUseDOM // For now, this is true - might change in the future.

    };

    module.exports = ExecutionEnvironment;

    /***/
  }),
  /* 273 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule camelizeStyleName
     * @typechecks
     */

    "use strict";

    var camelize = __webpack_require__(274);

    var msPattern = /^-ms-/;

    /**
     * Camelcases a hyphenated CSS property name, for example:
     *
     *   > camelizeStyleName('background-color')
     *   < "backgroundColor"
     *   > camelizeStyleName('-moz-transition')
     *   < "MozTransition"
     *   > camelizeStyleName('-ms-transition')
     *   < "msTransition"
     *
     * As Andi Smith suggests
     * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
     * is converted to lowercase `ms`.
     *
     * @param {string} string
     * @return {string}
     */
    function camelizeStyleName(string) {
      return camelize(string.replace(msPattern, 'ms-'));
    }

    module.exports = camelizeStyleName;

    /***/
  }),
  /* 274 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule camelize
     * @typechecks
     */

    var _hyphenPattern = /-(.)/g;

    /**
     * Camelcases a hyphenated string, for example:
     *
     *   > camelize('background-color')
     *   < "backgroundColor"
     *
     * @param {string} string
     * @return {string}
     */
    function camelize(string) {
      return string.replace(_hyphenPattern, function(_, character) {
        return character.toUpperCase();
      });
    }

    module.exports = camelize;

    /***/
  }),
  /* 275 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule dangerousStyleValue
     * @typechecks static-only
     */

    'use strict';

    var CSSProperty = __webpack_require__(271);

    var isUnitlessNumber = CSSProperty.isUnitlessNumber;

    /**
     * Convert a value into the proper css writable value. The style name `name`
     * should be logical (no hyphens), as specified
     * in `CSSProperty.isUnitlessNumber`.
     *
     * @param {string} name CSS property name such as `topMargin`.
     * @param {*} value CSS property value such as `10px`.
     * @return {string} Normalized style value with dimensions applied.
     */
    function dangerousStyleValue(name, value) {
      // Note that we've removed escapeTextForBrowser() calls here since the
      // whole string will be escaped when the attribute is injected into
      // the markup. If you provide unsafe user data here they can inject
      // arbitrary CSS which may be problematic (I couldn't repro this):
      // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
      // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
      // This is not an XSS hole but instead a potential CSS injection issue
      // which has lead to a greater discussion about how we're going to
      // trust URLs moving forward. See #2115901

      var isEmpty = value == null || typeof value === 'boolean' || value === '';
      if (isEmpty) {
        return '';
      }

      var isNonNumeric = isNaN(value);
      if (isNonNumeric || value === 0 ||
        isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
        return '' + value; // cast to string
      }

      if (typeof value === 'string') {
        value = value.trim();
      }
      return value + 'px';
    }

    module.exports = dangerousStyleValue;

    /***/
  }),
  /* 276 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule hyphenateStyleName
     * @typechecks
     */

    "use strict";

    var hyphenate = __webpack_require__(277);

    var msPattern = /^ms-/;

    /**
     * Hyphenates a camelcased CSS property name, for example:
     *
     *   > hyphenateStyleName('backgroundColor')
     *   < "background-color"
     *   > hyphenateStyleName('MozTransition')
     *   < "-moz-transition"
     *   > hyphenateStyleName('msTransition')
     *   < "-ms-transition"
     *
     * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
     * is converted to `-ms-`.
     *
     * @param {string} string
     * @return {string}
     */
    function hyphenateStyleName(string) {
      return hyphenate(string).replace(msPattern, '-ms-');
    }

    module.exports = hyphenateStyleName;

    /***/
  }),
  /* 277 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule hyphenate
     * @typechecks
     */

    var _uppercasePattern = /([A-Z])/g;

    /**
     * Hyphenates a camelcased string, for example:
     *
     *   > hyphenate('backgroundColor')
     *   < "background-color"
     *
     * For CSS style names, use `hyphenateStyleName` instead which works properly
     * with all vendor prefixes, including `ms`.
     *
     * @param {string} string
     * @return {string}
     */
    function hyphenate(string) {
      return string.replace(_uppercasePattern, '-$1').toLowerCase();
    }

    module.exports = hyphenate;

    /***/
  }),
  /* 278 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule memoizeStringOnly
     * @typechecks static-only
     */

    'use strict';

    /**
     * Memoizes the return value of a function that accepts one string argument.
     *
     * @param {function} callback
     * @return {function}
     */
    function memoizeStringOnly(callback) {
      var cache = {};
      return function(string) {
        if (!cache.hasOwnProperty(string)) {
          cache[string] = callback.call(this, string);
        }
        return cache[string];
      };
    }

    module.exports = memoizeStringOnly;

    /***/
  }),
  /* 279 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule DOMChildrenOperations
     * @typechecks static-only
     */

    'use strict';

    var Danger = __webpack_require__(280);
    var ReactMultiChildUpdateTypes = __webpack_require__(285);

    var setTextContent = __webpack_require__(286);
    var invariant = __webpack_require__(228);

    /**
     * Inserts `childNode` as a child of `parentNode` at the `index`.
     *
     * @param {DOMElement} parentNode Parent node in which to insert.
     * @param {DOMElement} childNode Child node to insert.
     * @param {number} index Index at which to insert the child.
     * @internal
     */
    function insertChildAt(parentNode, childNode, index) {
      // By exploiting arrays returning `undefined` for an undefined index, we can
      // rely exclusively on `insertBefore(node, null)` instead of also using
      // `appendChild(node)`. However, using `undefined` is not allowed by all
      // browsers so we must replace it with `null`.
      parentNode.insertBefore(
        childNode,
        parentNode.childNodes[index] || null
      );
    }

    /**
     * Operations for updating with DOM children.
     */
    var DOMChildrenOperations = {

      dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

      updateTextContent: setTextContent,

      /**
       * Updates a component's children by processing a series of updates. The
       * update configurations are each expected to have a `parentNode` property.
       *
       * @param {array<object>} updates List of update configurations.
       * @param {array<string>} markupList List of markup strings.
       * @internal
       */
      processUpdates: function(updates, markupList) {
        var update;
        // Mapping from parent IDs to initial child orderings.
        var initialChildren = null;
        // List of children that will be moved or removed.
        var updatedChildren = null;

        for (var i = 0; i < updates.length; i++) {
          update = updates[i];
          if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
            update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
            var updatedIndex = update.fromIndex;
            var updatedChild = update.parentNode.childNodes[updatedIndex];
            var parentID = update.parentID;

            (false ? invariant(
              updatedChild,
              'processUpdates(): Unable to find child %s of element. This ' +
              'probably means the DOM was unexpectedly mutated (e.g., by the ' +
              'browser), usually due to forgetting a <tbody> when using tables, ' +
              'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
              'in an <svg> parent. Try inspecting the child nodes of the element ' +
              'with React ID `%s`.',
              updatedIndex,
              parentID
            ) : invariant(updatedChild));

            initialChildren = initialChildren || {};
            initialChildren[parentID] = initialChildren[parentID] || [];
            initialChildren[parentID][updatedIndex] = updatedChild;

            updatedChildren = updatedChildren || [];
            updatedChildren.push(updatedChild);
          }
        }

        var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

        // Remove updated children first so that `toIndex` is consistent.
        if (updatedChildren) {
          for (var j = 0; j < updatedChildren.length; j++) {
            updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
          }
        }

        for (var k = 0; k < updates.length; k++) {
          update = updates[k];
          switch (update.type) {
            case ReactMultiChildUpdateTypes.INSERT_MARKUP:
              insertChildAt(
                update.parentNode,
                renderedMarkup[update.markupIndex],
                update.toIndex
              );
              break;
            case ReactMultiChildUpdateTypes.MOVE_EXISTING:
              insertChildAt(
                update.parentNode,
                initialChildren[update.parentID][update.fromIndex],
                update.toIndex
              );
              break;
            case ReactMultiChildUpdateTypes.TEXT_CONTENT:
              setTextContent(
                update.parentNode,
                update.textContent
              );
              break;
            case ReactMultiChildUpdateTypes.REMOVE_NODE:
              // Already removed by the for-loop above.
              break;
          }
        }
      }

    };

    module.exports = DOMChildrenOperations;

    /***/
  }),
  /* 280 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule Danger
     * @typechecks static-only
     */

    /*jslint evil: true, sub: true */

    'use strict';

    var ExecutionEnvironment = __webpack_require__(272);

    var createNodesFromMarkup = __webpack_require__(281);
    var emptyFunction = __webpack_require__(237);
    var getMarkupWrap = __webpack_require__(284);
    var invariant = __webpack_require__(228);

    var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
    var RESULT_INDEX_ATTR = 'data-danger-index';

    /**
     * Extracts the `nodeName` from a string of markup.
     *
     * NOTE: Extracting the `nodeName` does not require a regular expression match
     * because we make assumptions about React-generated markup (i.e. there are no
     * spaces surrounding the opening tag and there is at least one attribute).
     *
     * @param {string} markup String of markup.
     * @return {string} Node name of the supplied markup.
     * @see http://jsperf.com/extract-nodename
     */
    function getNodeName(markup) {
      return markup.substring(1, markup.indexOf(' '));
    }

    var Danger = {

      /**
       * Renders markup into an array of nodes. The markup is expected to render
       * into a list of root nodes. Also, the length of `resultList` and
       * `markupList` should be the same.
       *
       * @param {array<string>} markupList List of markup strings to render.
       * @return {array<DOMElement>} List of rendered nodes.
       * @internal
       */
      dangerouslyRenderMarkup: function(markupList) {
        (false ? invariant(
          ExecutionEnvironment.canUseDOM,
          'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
          'thread. Make sure `window` and `document` are available globally ' +
          'before requiring React when unit testing or use ' +
          'React.renderToString for server rendering.'
        ) : invariant(ExecutionEnvironment.canUseDOM));
        var nodeName;
        var markupByNodeName = {};
        // Group markup by `nodeName` if a wrap is necessary, else by '*'.
        for (var i = 0; i < markupList.length; i++) {
          (false ? invariant(
            markupList[i],
            'dangerouslyRenderMarkup(...): Missing markup.'
          ) : invariant(markupList[i]));
          nodeName = getNodeName(markupList[i]);
          nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
          markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
          markupByNodeName[nodeName][i] = markupList[i];
        }
        var resultList = [];
        var resultListAssignmentCount = 0;
        for (nodeName in markupByNodeName) {
          if (!markupByNodeName.hasOwnProperty(nodeName)) {
            continue;
          }
          var markupListByNodeName = markupByNodeName[nodeName];

          // This for-in loop skips the holes of the sparse array. The order of
          // iteration should follow the order of assignment, which happens to match
          // numerical index order, but we don't rely on that.
          var resultIndex;
          for (resultIndex in markupListByNodeName) {
            if (markupListByNodeName.hasOwnProperty(resultIndex)) {
              var markup = markupListByNodeName[resultIndex];

              // Push the requested markup with an additional RESULT_INDEX_ATTR
              // attribute.  If the markup does not start with a < character, it
              // will be discarded below (with an appropriate console.error).
              markupListByNodeName[resultIndex] = markup.replace(
                OPEN_TAG_NAME_EXP,
                // This index will be parsed back out below.
                '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
              );
            }
          }

          // Render each group of markup with similar wrapping `nodeName`.
          var renderNodes = createNodesFromMarkup(
            markupListByNodeName.join(''),
            emptyFunction // Do nothing special with <script> tags.
          );

          for (var j = 0; j < renderNodes.length; ++j) {
            var renderNode = renderNodes[j];
            if (renderNode.hasAttribute &&
              renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

              resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
              renderNode.removeAttribute(RESULT_INDEX_ATTR);

              (false ? invariant(
                !resultList.hasOwnProperty(resultIndex),
                'Danger: Assigning to an already-occupied result index.'
              ) : invariant(!resultList.hasOwnProperty(resultIndex)));

              resultList[resultIndex] = renderNode;

              // This should match resultList.length and markupList.length when
              // we're done.
              resultListAssignmentCount += 1;

            } else if (false) {
              console.error(
                'Danger: Discarding unexpected node:',
                renderNode
              );
            }
          }
        }

        // Although resultList was populated out of order, it should now be a dense
        // array.
        (false ? invariant(
          resultListAssignmentCount === resultList.length,
          'Danger: Did not assign to every index of resultList.'
        ) : invariant(resultListAssignmentCount === resultList.length));

        (false ? invariant(
          resultList.length === markupList.length,
          'Danger: Expected markup to render %s nodes, but rendered %s.',
          markupList.length,
          resultList.length
        ) : invariant(resultList.length === markupList.length));

        return resultList;
      },

      /**
       * Replaces a node with a string of markup at its current position within its
       * parent. The markup must render into a single root node.
       *
       * @param {DOMElement} oldChild Child node to replace.
       * @param {string} markup Markup to render in place of the child node.
       * @internal
       */
      dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
        (false ? invariant(
          ExecutionEnvironment.canUseDOM,
          'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
          'worker thread. Make sure `window` and `document` are available ' +
          'globally before requiring React when unit testing or use ' +
          'React.renderToString for server rendering.'
        ) : invariant(ExecutionEnvironment.canUseDOM));
        (false ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
        (false ? invariant(
          oldChild.tagName.toLowerCase() !== 'html',
          'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
          '<html> node. This is because browser quirks make this unreliable ' +
          'and/or slow. If you want to render to the root you must use ' +
          'server rendering. See React.renderToString().'
        ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

        var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
        oldChild.parentNode.replaceChild(newChild, oldChild);
      }

    };

    module.exports = Danger;

    /***/
  }),
  /* 281 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule createNodesFromMarkup
     * @typechecks
     */

    /*jslint evil: true, sub: true */

    var ExecutionEnvironment = __webpack_require__(272);

    var createArrayFromMixed = __webpack_require__(282);
    var getMarkupWrap = __webpack_require__(284);
    var invariant = __webpack_require__(228);

    /**
     * Dummy container used to render all markup.
     */
    var dummyNode =
      ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

    /**
     * Pattern used by `getNodeName`.
     */
    var nodeNamePattern = /^\s*<(\w+)/;

    /**
     * Extracts the `nodeName` of the first element in a string of markup.
     *
     * @param {string} markup String of markup.
     * @return {?string} Node name of the supplied markup.
     */
    function getNodeName(markup) {
      var nodeNameMatch = markup.match(nodeNamePattern);
      return nodeNameMatch && nodeNameMatch[1].toLowerCase();
    }

    /**
     * Creates an array containing the nodes rendered from the supplied markup. The
     * optionally supplied `handleScript` function will be invoked once for each
     * <script> element that is rendered. If no `handleScript` function is supplied,
     * an exception is thrown if any <script> elements are rendered.
     *
     * @param {string} markup A string of valid HTML markup.
     * @param {?function} handleScript Invoked once for each rendered <script>.
     * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
     */
    function createNodesFromMarkup(markup, handleScript) {
      var node = dummyNode;
      (false ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
      var nodeName = getNodeName(markup);

      var wrap = nodeName && getMarkupWrap(nodeName);
      if (wrap) {
        node.innerHTML = wrap[1] + markup + wrap[2];

        var wrapDepth = wrap[0];
        while (wrapDepth--) {
          node = node.lastChild;
        }
      } else {
        node.innerHTML = markup;
      }

      var scripts = node.getElementsByTagName('script');
      if (scripts.length) {
        (false ? invariant(
          handleScript,
          'createNodesFromMarkup(...): Unexpected <script> element rendered.'
        ) : invariant(handleScript));
        createArrayFromMixed(scripts).forEach(handleScript);
      }

      var nodes = createArrayFromMixed(node.childNodes);
      while (node.lastChild) {
        node.removeChild(node.lastChild);
      }
      return nodes;
    }

    module.exports = createNodesFromMarkup;

    /***/
  }),
  /* 282 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule createArrayFromMixed
     * @typechecks
     */

    var toArray = __webpack_require__(283);

    /**
     * Perform a heuristic test to determine if an object is "array-like".
     *
     *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
     *   Joshu replied: "Mu."
     *
     * This function determines if its argument has "array nature": it returns
     * true if the argument is an actual array, an `arguments' object, or an
     * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
     *
     * It will return false for other array-like objects like Filelist.
     *
     * @param {*} obj
     * @return {boolean}
     */
    function hasArrayNature(obj) {
      return (
        // not null/false
        !!obj &&
        // arrays are objects, NodeLists are functions in Safari
        (typeof obj == 'object' || typeof obj == 'function') &&
        // quacks like an array
        ('length' in obj) &&
        // not window
        !('setInterval' in obj) &&
        // no DOM node should be considered an array-like
        // a 'select' element has 'length' and 'item' properties on IE8
        (typeof obj.nodeType != 'number') &&
        (
          // a real array
          ( // HTMLCollection/NodeList
            (Array.isArray(obj) ||
              // arguments
              ('callee' in obj) || 'item' in obj))
        )
      );
    }

    /**
     * Ensure that the argument is an array by wrapping it in an array if it is not.
     * Creates a copy of the argument if it is already an array.
     *
     * This is mostly useful idiomatically:
     *
     *   var createArrayFromMixed = require('createArrayFromMixed');
     *
     *   function takesOneOrMoreThings(things) {
     *     things = createArrayFromMixed(things);
     *     ...
     *   }
     *
     * This allows you to treat `things' as an array, but accept scalars in the API.
     *
     * If you need to convert an array-like object, like `arguments`, into an array
     * use toArray instead.
     *
     * @param {*} obj
     * @return {array}
     */
    function createArrayFromMixed(obj) {
      if (!hasArrayNature(obj)) {
        return [obj];
      } else if (Array.isArray(obj)) {
        return obj.slice();
      } else {
        return toArray(obj);
      }
    }

    module.exports = createArrayFromMixed;

    /***/
  }),
  /* 283 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule toArray
     * @typechecks
     */

    var invariant = __webpack_require__(228);

    /**
     * Convert array-like objects to arrays.
     *
     * This API assumes the caller knows the contents of the data type. For less
     * well defined inputs use createArrayFromMixed.
     *
     * @param {object|function|filelist} obj
     * @return {array}
     */
    function toArray(obj) {
      var length = obj.length;

      // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
      // old versions of Safari).
      (false ? invariant(
        !Array.isArray(obj) &&
        (typeof obj === 'object' || typeof obj === 'function'),
        'toArray: Array-like object expected'
      ) : invariant(!Array.isArray(obj) &&
        (typeof obj === 'object' || typeof obj === 'function')));

      (false ? invariant(
        typeof length === 'number',
        'toArray: Object needs a length property'
      ) : invariant(typeof length === 'number'));

      (false ? invariant(
        length === 0 ||
        (length - 1) in obj,
        'toArray: Object should have keys for indices'
      ) : invariant(length === 0 ||
        (length - 1) in obj));

      // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
      // without method will throw during the slice call and skip straight to the
      // fallback.
      if (obj.hasOwnProperty) {
        try {
          return Array.prototype.slice.call(obj);
        } catch (e) {
          // IE < 9 does not support Array#slice on collections objects
        }
      }

      // Fall back to copying key by key. This assumes all keys have a value,
      // so will not preserve sparsely populated inputs.
      var ret = Array(length);
      for (var ii = 0; ii < length; ii++) {
        ret[ii] = obj[ii];
      }
      return ret;
    }

    module.exports = toArray;

    /***/
  }),
  /* 284 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getMarkupWrap
     */

    var ExecutionEnvironment = __webpack_require__(272);

    var invariant = __webpack_require__(228);

    /**
     * Dummy container used to detect which wraps are necessary.
     */
    var dummyNode =
      ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

    /**
     * Some browsers cannot use `innerHTML` to render certain elements standalone,
     * so we wrap them, render the wrapped nodes, then extract the desired node.
     *
     * In IE8, certain elements cannot render alone, so wrap all elements ('*').
     */
    var shouldWrap = {
      // Force wrapping for SVG elements because if they get created inside a <div>,
      // they will be initialized in the wrong namespace (and will not display).
      'circle': true,
      'clipPath': true,
      'defs': true,
      'ellipse': true,
      'g': true,
      'line': true,
      'linearGradient': true,
      'path': true,
      'polygon': true,
      'polyline': true,
      'radialGradient': true,
      'rect': true,
      'stop': true,
      'text': true
    };

    var selectWrap = [1, '<select multiple="true">', '</select>'];
    var tableWrap = [1, '<table>', '</table>'];
    var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

    var svgWrap = [1, '<svg>', '</svg>'];

    var markupWrap = {
      '*': [1, '?<div>', '</div>'],

      'area': [1, '<map>', '</map>'],
      'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
      'legend': [1, '<fieldset>', '</fieldset>'],
      'param': [1, '<object>', '</object>'],
      'tr': [2, '<table><tbody>', '</tbody></table>'],

      'optgroup': selectWrap,
      'option': selectWrap,

      'caption': tableWrap,
      'colgroup': tableWrap,
      'tbody': tableWrap,
      'tfoot': tableWrap,
      'thead': tableWrap,

      'td': trWrap,
      'th': trWrap,

      'circle': svgWrap,
      'clipPath': svgWrap,
      'defs': svgWrap,
      'ellipse': svgWrap,
      'g': svgWrap,
      'line': svgWrap,
      'linearGradient': svgWrap,
      'path': svgWrap,
      'polygon': svgWrap,
      'polyline': svgWrap,
      'radialGradient': svgWrap,
      'rect': svgWrap,
      'stop': svgWrap,
      'text': svgWrap
    };

    /**
     * Gets the markup wrap configuration for the supplied `nodeName`.
     *
     * NOTE: This lazily detects which wraps are necessary for the current browser.
     *
     * @param {string} nodeName Lowercase `nodeName`.
     * @return {?array} Markup wrap configuration, if applicable.
     */
    function getMarkupWrap(nodeName) {
      (false ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
      if (!markupWrap.hasOwnProperty(nodeName)) {
        nodeName = '*';
      }
      if (!shouldWrap.hasOwnProperty(nodeName)) {
        if (nodeName === '*') {
          dummyNode.innerHTML = '<link />';
        } else {
          dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
        }
        shouldWrap[nodeName] = !dummyNode.firstChild;
      }
      return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
    }

    module.exports = getMarkupWrap;

    /***/
  }),
  /* 285 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactMultiChildUpdateTypes
     */

    'use strict';

    var keyMirror = __webpack_require__(227);

    /**
     * When a component's children are updated, a series of update configuration
     * objects are created in order to batch and serialize the required changes.
     *
     * Enumerates all the possible types of update configurations.
     *
     * @internal
     */
    var ReactMultiChildUpdateTypes = keyMirror({
      INSERT_MARKUP: null,
      MOVE_EXISTING: null,
      REMOVE_NODE: null,
      TEXT_CONTENT: null
    });

    module.exports = ReactMultiChildUpdateTypes;

    /***/
  }),
  /* 286 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule setTextContent
     */

    'use strict';

    var ExecutionEnvironment = __webpack_require__(272);
    var escapeTextContentForBrowser = __webpack_require__(267);
    var setInnerHTML = __webpack_require__(287);

    /**
     * Set the textContent property of a node, ensuring that whitespace is preserved
     * even in IE8. innerText is a poor substitute for textContent and, among many
     * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
     * as it should.
     *
     * @param {DOMElement} node
     * @param {string} text
     * @internal
     */
    var setTextContent = function(node, text) {
      node.textContent = text;
    };

    if (ExecutionEnvironment.canUseDOM) {
      if (!('textContent' in document.documentElement)) {
        setTextContent = function(node, text) {
          setInnerHTML(node, escapeTextContentForBrowser(text));
        };
      }
    }

    module.exports = setTextContent;

    /***/
  }),
  /* 287 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule setInnerHTML
     */

    /* globals MSApp */

    'use strict';

    var ExecutionEnvironment = __webpack_require__(272);

    var WHITESPACE_TEST = /^[ \r\n\t\f]/;
    var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

    /**
     * Set the innerHTML property of a node, ensuring that whitespace is preserved
     * even in IE8.
     *
     * @param {DOMElement} node
     * @param {string} html
     * @internal
     */
    var setInnerHTML = function(node, html) {
      node.innerHTML = html;
    };

    // Win8 apps: Allow all html to be inserted
    if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
      setInnerHTML = function(node, html) {
        MSApp.execUnsafeLocalFunction(function() {
          node.innerHTML = html;
        });
      };
    }

    if (ExecutionEnvironment.canUseDOM) {
      // IE8: When updating a just created node with innerHTML only leading
      // whitespace is removed. When updating an existing node with innerHTML
      // whitespace in root TextNodes is also collapsed.
      // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

      // Feature detection; only IE8 is known to behave improperly like this.
      var testElement = document.createElement('div');
      testElement.innerHTML = ' ';
      if (testElement.innerHTML === '') {
        setInnerHTML = function(node, html) {
          // Magic theory: IE8 supposedly differentiates between added and updated
          // nodes when processing innerHTML, innerHTML on updated nodes suffers
          // from worse whitespace behavior. Re-adding a node like this triggers
          // the initial and more favorable whitespace behavior.
          // TODO: What to do on a detached node?
          if (node.parentNode) {
            node.parentNode.replaceChild(node, node);
          }

          // We also implement a workaround for non-visible tags disappearing into
          // thin air on IE8, this only happens if there is no visible text
          // in-front of the non-visible tags. Piggyback on the whitespace fix
          // and simply check if any non-visible tags appear in the source.
          if (WHITESPACE_TEST.test(html) ||
            html[0] === '<' && NONVISIBLE_TEST.test(html)) {
            // Recover leading whitespace by temporarily prepending any character.
            // \uFEFF has the potential advantage of being zero-width/invisible.
            node.innerHTML = '\uFEFF' + html;

            // deleteData leaves an empty `TextNode` which offsets the index of all
            // children. Definitely want to avoid this.
            var textNode = node.firstChild;
            if (textNode.data.length === 1) {
              node.removeChild(textNode);
            } else {
              textNode.deleteData(0, 1);
            }
          } else {
            node.innerHTML = html;
          }
        };
      }
    }

    module.exports = setInnerHTML;

    /***/
  }),
  /* 288 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactMount
     */

    'use strict';

    var DOMProperty = __webpack_require__(265);
    var ReactBrowserEventEmitter = __webpack_require__(289);
    var ReactCurrentOwner = __webpack_require__(238);
    var ReactElement = __webpack_require__(232);
    var ReactElementValidator = __webpack_require__(253);
    var ReactEmptyComponent = __webpack_require__(297);
    var ReactInstanceHandles = __webpack_require__(240);
    var ReactInstanceMap = __webpack_require__(246);
    var ReactMarkupChecksum = __webpack_require__(298);
    var ReactPerf = __webpack_require__(249);
    var ReactReconciler = __webpack_require__(250);
    var ReactUpdateQueue = __webpack_require__(244);
    var ReactUpdates = __webpack_require__(247);

    var emptyObject = __webpack_require__(235);
    var containsNode = __webpack_require__(300);
    var getReactRootElementInContainer = __webpack_require__(303);
    var instantiateReactComponent = __webpack_require__(304);
    var invariant = __webpack_require__(228);
    var setInnerHTML = __webpack_require__(287);
    var shouldUpdateReactComponent = __webpack_require__(307);
    var warning = __webpack_require__(236);

    var SEPARATOR = ReactInstanceHandles.SEPARATOR;

    var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
    var nodeCache = {};

    var ELEMENT_NODE_TYPE = 1;
    var DOC_NODE_TYPE = 9;

    /** Mapping from reactRootID to React component instance. */
    var instancesByReactRootID = {};

    /** Mapping from reactRootID to `container` nodes. */
    var containersByReactRootID = {};

    if (false) {
      /** __DEV__-only mapping from reactRootID to root elements. */
      var rootElementsByReactRootID = {};
    }

    // Used to store breadth-first search state in findComponentRoot.
    var findComponentRootReusableArray = [];

    /**
     * Finds the index of the first character
     * that's not common between the two given strings.
     *
     * @return {number} the index of the character where the strings diverge
     */
    function firstDifferenceIndex(string1, string2) {
      var minLen = Math.min(string1.length, string2.length);
      for (var i = 0; i < minLen; i++) {
        if (string1.charAt(i) !== string2.charAt(i)) {
          return i;
        }
      }
      return string1.length === string2.length ? -1 : minLen;
    }

    /**
     * @param {DOMElement} container DOM element that may contain a React component.
     * @return {?string} A "reactRoot" ID, if a React component is rendered.
     */
    function getReactRootID(container) {
      var rootElement = getReactRootElementInContainer(container);
      return rootElement && ReactMount.getID(rootElement);
    }

    /**
     * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
     * element can return its control whose name or ID equals ATTR_NAME. All
     * DOM nodes support `getAttributeNode` but this can also get called on
     * other objects so just return '' if we're given something other than a
     * DOM node (such as window).
     *
     * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
     * @return {string} ID of the supplied `domNode`.
     */
    function getID(node) {
      var id = internalGetID(node);
      if (id) {
        if (nodeCache.hasOwnProperty(id)) {
          var cached = nodeCache[id];
          if (cached !== node) {
            (false ? invariant(
              !isValid(cached, id),
              'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
              ATTR_NAME, id
            ) : invariant(!isValid(cached, id)));

            nodeCache[id] = node;
          }
        } else {
          nodeCache[id] = node;
        }
      }

      return id;
    }

    function internalGetID(node) {
      // If node is something like a window, document, or text node, none of
      // which support attributes or a .getAttribute method, gracefully return
      // the empty string, as if the attribute were missing.
      return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
    }

    /**
     * Sets the React-specific ID of the given node.
     *
     * @param {DOMElement} node The DOM node whose ID will be set.
     * @param {string} id The value of the ID attribute.
     */
    function setID(node, id) {
      var oldID = internalGetID(node);
      if (oldID !== id) {
        delete nodeCache[oldID];
      }
      node.setAttribute(ATTR_NAME, id);
      nodeCache[id] = node;
    }

    /**
     * Finds the node with the supplied React-generated DOM ID.
     *
     * @param {string} id A React-generated DOM ID.
     * @return {DOMElement} DOM node with the suppled `id`.
     * @internal
     */
    function getNode(id) {
      if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
        nodeCache[id] = ReactMount.findReactNodeByID(id);
      }
      return nodeCache[id];
    }

    /**
     * Finds the node with the supplied public React instance.
     *
     * @param {*} instance A public React instance.
     * @return {?DOMElement} DOM node with the suppled `id`.
     * @internal
     */
    function getNodeFromInstance(instance) {
      var id = ReactInstanceMap.get(instance)._rootNodeID;
      if (ReactEmptyComponent.isNullComponentID(id)) {
        return null;
      }
      if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
        nodeCache[id] = ReactMount.findReactNodeByID(id);
      }
      return nodeCache[id];
    }

    /**
     * A node is "valid" if it is contained by a currently mounted container.
     *
     * This means that the node does not have to be contained by a document in
     * order to be considered valid.
     *
     * @param {?DOMElement} node The candidate DOM node.
     * @param {string} id The expected ID of the node.
     * @return {boolean} Whether the node is contained by a mounted container.
     */
    function isValid(node, id) {
      if (node) {
        (false ? invariant(
          internalGetID(node) === id,
          'ReactMount: Unexpected modification of `%s`',
          ATTR_NAME
        ) : invariant(internalGetID(node) === id));

        var container = ReactMount.findReactContainerForID(id);
        if (container && containsNode(container, node)) {
          return true;
        }
      }

      return false;
    }

    /**
     * Causes the cache to forget about one React-specific ID.
     *
     * @param {string} id The ID to forget.
     */
    function purgeID(id) {
      delete nodeCache[id];
    }

    var deepestNodeSoFar = null;

    function findDeepestCachedAncestorImpl(ancestorID) {
      var ancestor = nodeCache[ancestorID];
      if (ancestor && isValid(ancestor, ancestorID)) {
        deepestNodeSoFar = ancestor;
      } else {
        // This node isn't populated in the cache, so presumably none of its
        // descendants are. Break out of the loop.
        return false;
      }
    }

    /**
     * Return the deepest cached node whose ID is a prefix of `targetID`.
     */
    function findDeepestCachedAncestor(targetID) {
      deepestNodeSoFar = null;
      ReactInstanceHandles.traverseAncestors(
        targetID,
        findDeepestCachedAncestorImpl
      );

      var foundNode = deepestNodeSoFar;
      deepestNodeSoFar = null;
      return foundNode;
    }

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {ReactComponent} componentInstance The instance to mount.
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     */
    function mountComponentIntoNode(
      componentInstance,
      rootID,
      container,
      transaction,
      shouldReuseMarkup) {
      var markup = ReactReconciler.mountComponent(
        componentInstance, rootID, transaction, emptyObject
      );
      componentInstance._isTopLevel = true;
      ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
    }

    /**
     * Batched mount.
     *
     * @param {ReactComponent} componentInstance The instance to mount.
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     */
    function batchedMountComponentIntoNode(
      componentInstance,
      rootID,
      container,
      shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        mountComponentIntoNode,
        null,
        componentInstance,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    }

    /**
     * Mounting is the process of initializing a React component by creating its
     * representative DOM elements and inserting them into a supplied `container`.
     * Any prior content inside `container` is destroyed in the process.
     *
     *   ReactMount.render(
     *     component,
     *     document.getElementById('container')
     *   );
     *
     *   <div id="container">                   <-- Supplied `container`.
     *     <div data-reactid=".3">              <-- Rendered reactRoot of React
     *       // ...                                 component.
     *     </div>
     *   </div>
     *
     * Inside of `container`, the first element rendered is the "reactRoot".
     */
    var ReactMount = {
      /** Exposed for debugging purposes **/
      _instancesByReactRootID: instancesByReactRootID,

      /**
       * This is a hook provided to support rendering React components while
       * ensuring that the apparent scroll position of its `container` does not
       * change.
       *
       * @param {DOMElement} container The `container` being rendered into.
       * @param {function} renderCallback This must be called once to do the render.
       */
      scrollMonitor: function(container, renderCallback) {
        renderCallback();
      },

      /**
       * Take a component that's already mounted into the DOM and replace its props
       * @param {ReactComponent} prevComponent component instance already in the DOM
       * @param {ReactElement} nextElement component instance to render
       * @param {DOMElement} container container to render into
       * @param {?function} callback function triggered on completion
       */
      _updateRootComponent: function(
        prevComponent,
        nextElement,
        container,
        callback) {
        if (false) {
          ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
        }

        ReactMount.scrollMonitor(container, function() {
          ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
          if (callback) {
            ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
          }
        });

        if (false) {
          // Record the root element in case it later gets transplanted.
          rootElementsByReactRootID[getReactRootID(container)] =
            getReactRootElementInContainer(container);
        }

        return prevComponent;
      },

      /**
       * Register a component into the instance map and starts scroll value
       * monitoring
       * @param {ReactComponent} nextComponent component instance to render
       * @param {DOMElement} container container to render into
       * @return {string} reactRoot ID prefix
       */
      _registerComponent: function(nextComponent, container) {
        (false ? invariant(
          container && (
            (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
          ),
          '_registerComponent(...): Target container is not a DOM element.'
        ) : invariant(container && (
          (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
        )));

        ReactBrowserEventEmitter.ensureScrollValueMonitoring();

        var reactRootID = ReactMount.registerContainer(container);
        instancesByReactRootID[reactRootID] = nextComponent;
        return reactRootID;
      },

      /**
       * Render a new component into the DOM.
       * @param {ReactElement} nextElement element to render
       * @param {DOMElement} container container to render into
       * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
       * @return {ReactComponent} nextComponent
       */
      _renderNewRootComponent: function(
        nextElement,
        container,
        shouldReuseMarkup
      ) {
        // Various parts of our code (such as ReactCompositeComponent's
        // _renderValidatedComponent) assume that calls to render aren't nested;
        // verify that that's the case.
        (false ? warning(
          ReactCurrentOwner.current == null,
          '_renderNewRootComponent(): Render methods should be a pure function ' +
          'of props and state; triggering nested component updates from ' +
          'render is not allowed. If necessary, trigger nested updates in ' +
          'componentDidUpdate.'
        ) : null);

        var componentInstance = instantiateReactComponent(nextElement, null);
        var reactRootID = ReactMount._registerComponent(
          componentInstance,
          container
        );

        // The initial render is synchronous but any updates that happen during
        // rendering, in componentWillMount or componentDidMount, will be batched
        // according to the current batching strategy.

        ReactUpdates.batchedUpdates(
          batchedMountComponentIntoNode,
          componentInstance,
          reactRootID,
          container,
          shouldReuseMarkup
        );

        if (false) {
          // Record the root element in case it later gets transplanted.
          rootElementsByReactRootID[reactRootID] =
            getReactRootElementInContainer(container);
        }

        return componentInstance;
      },

      /**
       * Renders a React component into the DOM in the supplied `container`.
       *
       * If the React component was previously rendered into `container`, this will
       * perform an update on it and only mutate the DOM as necessary to reflect the
       * latest React component.
       *
       * @param {ReactElement} nextElement Component element to render.
       * @param {DOMElement} container DOM element to render into.
       * @param {?function} callback function triggered on completion
       * @return {ReactComponent} Component instance rendered in `container`.
       */
      render: function(nextElement, container, callback) {
        (false ? invariant(
          ReactElement.isValidElement(nextElement),
          'React.render(): Invalid component element.%s',
          (
            typeof nextElement === 'string' ?
            ' Instead of passing an element string, make sure to instantiate ' +
            'it by passing it to React.createElement.' :
            typeof nextElement === 'function' ?
            ' Instead of passing a component class, make sure to instantiate ' +
            'it by passing it to React.createElement.' :
            // Check if it quacks like an element
            nextElement != null && nextElement.props !== undefined ?
            ' This may be caused by unintentionally loading two independent ' +
            'copies of React.' :
            ''
          )
        ) : invariant(ReactElement.isValidElement(nextElement)));

        var prevComponent = instancesByReactRootID[getReactRootID(container)];

        if (prevComponent) {
          var prevElement = prevComponent._currentElement;
          if (shouldUpdateReactComponent(prevElement, nextElement)) {
            return ReactMount._updateRootComponent(
              prevComponent,
              nextElement,
              container,
              callback
            ).getPublicInstance();
          } else {
            ReactMount.unmountComponentAtNode(container);
          }
        }

        var reactRootElement = getReactRootElementInContainer(container);
        var containerHasReactMarkup =
          reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

        if (false) {
          if (!containerHasReactMarkup || reactRootElement.nextSibling) {
            var rootElementSibling = reactRootElement;
            while (rootElementSibling) {
              if (ReactMount.isRenderedByReact(rootElementSibling)) {
                ("production" !== process.env.NODE_ENV ? warning(
                  false,
                  'render(): Target node has markup rendered by React, but there ' +
                  'are unrelated nodes as well. This is most commonly caused by ' +
                  'white-space inserted around server-rendered markup.'
                ) : null);
                break;
              }

              rootElementSibling = rootElementSibling.nextSibling;
            }
          }
        }

        var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

        var component = ReactMount._renderNewRootComponent(
          nextElement,
          container,
          shouldReuseMarkup
        ).getPublicInstance();
        if (callback) {
          callback.call(component);
        }
        return component;
      },

      /**
       * Constructs a component instance of `constructor` with `initialProps` and
       * renders it into the supplied `container`.
       *
       * @param {function} constructor React component constructor.
       * @param {?object} props Initial props of the component instance.
       * @param {DOMElement} container DOM element to render into.
       * @return {ReactComponent} Component instance rendered in `container`.
       */
      constructAndRenderComponent: function(constructor, props, container) {
        var element = ReactElement.createElement(constructor, props);
        return ReactMount.render(element, container);
      },

      /**
       * Constructs a component instance of `constructor` with `initialProps` and
       * renders it into a container node identified by supplied `id`.
       *
       * @param {function} componentConstructor React component constructor
       * @param {?object} props Initial props of the component instance.
       * @param {string} id ID of the DOM element to render into.
       * @return {ReactComponent} Component instance rendered in the container node.
       */
      constructAndRenderComponentByID: function(constructor, props, id) {
        var domNode = document.getElementById(id);
        (false ? invariant(
          domNode,
          'Tried to get element with id of "%s" but it is not present on the page.',
          id
        ) : invariant(domNode));
        return ReactMount.constructAndRenderComponent(constructor, props, domNode);
      },

      /**
       * Registers a container node into which React components will be rendered.
       * This also creates the "reactRoot" ID that will be assigned to the element
       * rendered within.
       *
       * @param {DOMElement} container DOM element to register as a container.
       * @return {string} The "reactRoot" ID of elements rendered within.
       */
      registerContainer: function(container) {
        var reactRootID = getReactRootID(container);
        if (reactRootID) {
          // If one exists, make sure it is a valid "reactRoot" ID.
          reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
        }
        if (!reactRootID) {
          // No valid "reactRoot" ID found, create one.
          reactRootID = ReactInstanceHandles.createReactRootID();
        }
        containersByReactRootID[reactRootID] = container;
        return reactRootID;
      },

      /**
       * Unmounts and destroys the React component rendered in the `container`.
       *
       * @param {DOMElement} container DOM element containing a React component.
       * @return {boolean} True if a component was found in and unmounted from
       *                   `container`
       */
      unmountComponentAtNode: function(container) {
        // Various parts of our code (such as ReactCompositeComponent's
        // _renderValidatedComponent) assume that calls to render aren't nested;
        // verify that that's the case. (Strictly speaking, unmounting won't cause a
        // render but we still don't expect to be in a render call here.)
        (false ? warning(
          ReactCurrentOwner.current == null,
          'unmountComponentAtNode(): Render methods should be a pure function of ' +
          'props and state; triggering nested component updates from render is ' +
          'not allowed. If necessary, trigger nested updates in ' +
          'componentDidUpdate.'
        ) : null);

        (false ? invariant(
          container && (
            (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
          ),
          'unmountComponentAtNode(...): Target container is not a DOM element.'
        ) : invariant(container && (
          (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
        )));

        var reactRootID = getReactRootID(container);
        var component = instancesByReactRootID[reactRootID];
        if (!component) {
          return false;
        }
        ReactMount.unmountComponentFromNode(component, container);
        delete instancesByReactRootID[reactRootID];
        delete containersByReactRootID[reactRootID];
        if (false) {
          delete rootElementsByReactRootID[reactRootID];
        }
        return true;
      },

      /**
       * Unmounts a component and removes it from the DOM.
       *
       * @param {ReactComponent} instance React component instance.
       * @param {DOMElement} container DOM element to unmount from.
       * @final
       * @internal
       * @see {ReactMount.unmountComponentAtNode}
       */
      unmountComponentFromNode: function(instance, container) {
        ReactReconciler.unmountComponent(instance);

        if (container.nodeType === DOC_NODE_TYPE) {
          container = container.documentElement;
        }

        // http://jsperf.com/emptying-a-node
        while (container.lastChild) {
          container.removeChild(container.lastChild);
        }
      },

      /**
       * Finds the container DOM element that contains React component to which the
       * supplied DOM `id` belongs.
       *
       * @param {string} id The ID of an element rendered by a React component.
       * @return {?DOMElement} DOM element that contains the `id`.
       */
      findReactContainerForID: function(id) {
        var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
        var container = containersByReactRootID[reactRootID];

        if (false) {
          var rootElement = rootElementsByReactRootID[reactRootID];
          if (rootElement && rootElement.parentNode !== container) {
            ("production" !== process.env.NODE_ENV ? invariant(
              // Call internalGetID here because getID calls isValid which calls
              // findReactContainerForID (this function).
              internalGetID(rootElement) === reactRootID,
              'ReactMount: Root element ID differed from reactRootID.'
            ) : invariant( // Call internalGetID here because getID calls isValid which calls
              // findReactContainerForID (this function).
              internalGetID(rootElement) === reactRootID));

            var containerChild = container.firstChild;
            if (containerChild &&
              reactRootID === internalGetID(containerChild)) {
              // If the container has a new child with the same ID as the old
              // root element, then rootElementsByReactRootID[reactRootID] is
              // just stale and needs to be updated. The case that deserves a
              // warning is when the container is empty.
              rootElementsByReactRootID[reactRootID] = containerChild;
            } else {
              ("production" !== process.env.NODE_ENV ? warning(
                false,
                'ReactMount: Root element has been removed from its original ' +
                'container. New container:', rootElement.parentNode
              ) : null);
            }
          }
        }

        return container;
      },

      /**
       * Finds an element rendered by React with the supplied ID.
       *
       * @param {string} id ID of a DOM node in the React component.
       * @return {DOMElement} Root DOM node of the React component.
       */
      findReactNodeByID: function(id) {
        var reactRoot = ReactMount.findReactContainerForID(id);
        return ReactMount.findComponentRoot(reactRoot, id);
      },

      /**
       * True if the supplied `node` is rendered by React.
       *
       * @param {*} node DOM Element to check.
       * @return {boolean} True if the DOM Element appears to be rendered by React.
       * @internal
       */
      isRenderedByReact: function(node) {
        if (node.nodeType !== 1) {
          // Not a DOMElement, therefore not a React component
          return false;
        }
        var id = ReactMount.getID(node);
        return id ? id.charAt(0) === SEPARATOR : false;
      },

      /**
       * Traverses up the ancestors of the supplied node to find a node that is a
       * DOM representation of a React component.
       *
       * @param {*} node
       * @return {?DOMEventTarget}
       * @internal
       */
      getFirstReactDOM: function(node) {
        var current = node;
        while (current && current.parentNode !== current) {
          if (ReactMount.isRenderedByReact(current)) {
            return current;
          }
          current = current.parentNode;
        }
        return null;
      },

      /**
       * Finds a node with the supplied `targetID` inside of the supplied
       * `ancestorNode`.  Exploits the ID naming scheme to perform the search
       * quickly.
       *
       * @param {DOMEventTarget} ancestorNode Search from this root.
       * @pararm {string} targetID ID of the DOM representation of the component.
       * @return {DOMEventTarget} DOM node with the supplied `targetID`.
       * @internal
       */
      findComponentRoot: function(ancestorNode, targetID) {
        var firstChildren = findComponentRootReusableArray;
        var childIndex = 0;

        var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

        firstChildren[0] = deepestAncestor.firstChild;
        firstChildren.length = 1;

        while (childIndex < firstChildren.length) {
          var child = firstChildren[childIndex++];
          var targetChild;

          while (child) {
            var childID = ReactMount.getID(child);
            if (childID) {
              // Even if we find the node we're looking for, we finish looping
              // through its siblings to ensure they're cached so that we don't have
              // to revisit this node again. Otherwise, we make n^2 calls to getID
              // when visiting the many children of a single node in order.

              if (targetID === childID) {
                targetChild = child;
              } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
                // If we find a child whose ID is an ancestor of the given ID,
                // then we can be sure that we only want to search the subtree
                // rooted at this child, so we can throw out the rest of the
                // search state.
                firstChildren.length = childIndex = 0;
                firstChildren.push(child.firstChild);
              }

            } else {
              // If this child had no ID, then there's a chance that it was
              // injected automatically by the browser, as when a `<table>`
              // element sprouts an extra `<tbody>` child as a side effect of
              // `.innerHTML` parsing. Optimistically continue down this
              // branch, but not before examining the other siblings.
              firstChildren.push(child.firstChild);
            }

            child = child.nextSibling;
          }

          if (targetChild) {
            // Emptying firstChildren/findComponentRootReusableArray is
            // not necessary for correctness, but it helps the GC reclaim
            // any nodes that were left at the end of the search.
            firstChildren.length = 0;

            return targetChild;
          }
        }

        firstChildren.length = 0;

        (false ? invariant(
          false,
          'findComponentRoot(..., %s): Unable to find element. This probably ' +
          'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
          'usually due to forgetting a <tbody> when using tables, nesting tags ' +
          'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
          'parent. ' +
          'Try inspecting the child nodes of the element with React ID `%s`.',
          targetID,
          ReactMount.getID(ancestorNode)
        ) : invariant(false));
      },

      _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
        (false ? invariant(
          container && (
            (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
          ),
          'mountComponentIntoNode(...): Target container is not valid.'
        ) : invariant(container && (
          (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
        )));

        if (shouldReuseMarkup) {
          var rootElement = getReactRootElementInContainer(container);
          if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
            return;
          } else {
            var checksum = rootElement.getAttribute(
              ReactMarkupChecksum.CHECKSUM_ATTR_NAME
            );
            rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

            var rootMarkup = rootElement.outerHTML;
            rootElement.setAttribute(
              ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
              checksum
            );

            var diffIndex = firstDifferenceIndex(markup, rootMarkup);
            var difference = ' (client) ' +
              markup.substring(diffIndex - 20, diffIndex + 20) +
              '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

            (false ? invariant(
              container.nodeType !== DOC_NODE_TYPE,
              'You\'re trying to render a component to the document using ' +
              'server rendering but the checksum was invalid. This usually ' +
              'means you rendered a different component type or props on ' +
              'the client from the one on the server, or your render() ' +
              'methods are impure. React cannot handle this case due to ' +
              'cross-browser quirks by rendering at the document root. You ' +
              'should look for environment dependent code in your components ' +
              'and ensure the props are the same client and server side:\n%s',
              difference
            ) : invariant(container.nodeType !== DOC_NODE_TYPE));

            if (false) {
              ("production" !== process.env.NODE_ENV ? warning(
                false,
                'React attempted to reuse markup in a container but the ' +
                'checksum was invalid. This generally means that you are ' +
                'using server rendering and the markup generated on the ' +
                'server was not what the client was expecting. React injected ' +
                'new markup to compensate which works but you have lost many ' +
                'of the benefits of server rendering. Instead, figure out ' +
                'why the markup being generated is different on the client ' +
                'or server:\n%s',
                difference
              ) : null);
            }
          }
        }

        (false ? invariant(
          container.nodeType !== DOC_NODE_TYPE,
          'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See React.renderToString() for server rendering.'
        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

        setInnerHTML(container, markup);
      },

      /**
       * React ID utilities.
       */

      getReactRootID: getReactRootID,

      getID: getID,

      setID: setID,

      getNode: getNode,

      getNodeFromInstance: getNodeFromInstance,

      purgeID: purgeID
    };

    ReactPerf.measureMethods(ReactMount, 'ReactMount', {
      _renderNewRootComponent: '_renderNewRootComponent',
      _mountImageIntoNode: '_mountImageIntoNode'
    });

    module.exports = ReactMount;

    /***/
  }),
  /* 289 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactBrowserEventEmitter
     * @typechecks static-only
     */

    'use strict';

    var EventConstants = __webpack_require__(226);
    var EventPluginHub = __webpack_require__(290);
    var EventPluginRegistry = __webpack_require__(291);
    var ReactEventEmitterMixin = __webpack_require__(294);
    var ViewportMetrics = __webpack_require__(295);

    var assign = __webpack_require__(234);
    var isEventSupported = __webpack_require__(296);

    /**
     * Summary of `ReactBrowserEventEmitter` event handling:
     *
     *  - Top-level delegation is used to trap most native browser events. This
     *    may only occur in the main thread and is the responsibility of
     *    ReactEventListener, which is injected and can therefore support pluggable
     *    event sources. This is the only work that occurs in the main thread.
     *
     *  - We normalize and de-duplicate events to account for browser quirks. This
     *    may be done in the worker thread.
     *
     *  - Forward these native events (with the associated top-level type used to
     *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
     *    to extract any synthetic events.
     *
     *  - The `EventPluginHub` will then process each event by annotating them with
     *    "dispatches", a sequence of listeners and IDs that care about that event.
     *
     *  - The `EventPluginHub` then dispatches the events.
     *
     * Overview of React and the event system:
     *
     * +------------+    .
     * |    DOM     |    .
     * +------------+    .
     *       |           .
     *       v           .
     * +------------+    .
     * | ReactEvent |    .
     * |  Listener  |    .
     * +------------+    .                         +-----------+
     *       |           .               +--------+|SimpleEvent|
     *       |           .               |         |Plugin     |
     * +-----|------+    .               v         +-----------+
     * |     |      |    .    +--------------+                    +------------+
     * |     +-----------.--->|EventPluginHub|                    |    Event   |
     * |            |    .    |              |     +-----------+  | Propagators|
     * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
     * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
     * |            |    .    |              |     +-----------+  |  utilities |
     * |     +-----------.--->|              |                    +------------+
     * |     |      |    .    +--------------+
     * +-----|------+    .                ^        +-----------+
     *       |           .                |        |Enter/Leave|
     *       +           .                +-------+|Plugin     |
     * +-------------+   .                         +-----------+
     * | application |   .
     * |-------------|   .
     * |             |   .
     * |             |   .
     * +-------------+   .
     *                   .
     *    React Core     .  General Purpose Event Plugin System
     */

    var alreadyListeningTo = {};
    var isMonitoringScrollValue = false;
    var reactTopListenersCounter = 0;

    // For events like 'submit' which don't consistently bubble (which we trap at a
    // lower node than `document`), binding at `document` would cause duplicate
    // events so we don't include them here
    var topEventMapping = {
      topBlur: 'blur',
      topChange: 'change',
      topClick: 'click',
      topCompositionEnd: 'compositionend',
      topCompositionStart: 'compositionstart',
      topCompositionUpdate: 'compositionupdate',
      topContextMenu: 'contextmenu',
      topCopy: 'copy',
      topCut: 'cut',
      topDoubleClick: 'dblclick',
      topDrag: 'drag',
      topDragEnd: 'dragend',
      topDragEnter: 'dragenter',
      topDragExit: 'dragexit',
      topDragLeave: 'dragleave',
      topDragOver: 'dragover',
      topDragStart: 'dragstart',
      topDrop: 'drop',
      topFocus: 'focus',
      topInput: 'input',
      topKeyDown: 'keydown',
      topKeyPress: 'keypress',
      topKeyUp: 'keyup',
      topMouseDown: 'mousedown',
      topMouseMove: 'mousemove',
      topMouseOut: 'mouseout',
      topMouseOver: 'mouseover',
      topMouseUp: 'mouseup',
      topPaste: 'paste',
      topScroll: 'scroll',
      topSelectionChange: 'selectionchange',
      topTextInput: 'textInput',
      topTouchCancel: 'touchcancel',
      topTouchEnd: 'touchend',
      topTouchMove: 'touchmove',
      topTouchStart: 'touchstart',
      topWheel: 'wheel'
    };

    /**
     * To ensure no conflicts with other potential React instances on the page
     */
    var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

    function getListeningForDocument(mountAt) {
      // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
      // directly.
      if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
        mountAt[topListenersIDKey] = reactTopListenersCounter++;
        alreadyListeningTo[mountAt[topListenersIDKey]] = {};
      }
      return alreadyListeningTo[mountAt[topListenersIDKey]];
    }

    /**
     * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
     * example:
     *
     *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
     *
     * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
     *
     * @internal
     */
    var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

      /**
       * Injectable event backend
       */
      ReactEventListener: null,

      injection: {
        /**
         * @param {object} ReactEventListener
         */
        injectReactEventListener: function(ReactEventListener) {
          ReactEventListener.setHandleTopLevel(
            ReactBrowserEventEmitter.handleTopLevel
          );
          ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
        }
      },

      /**
       * Sets whether or not any created callbacks should be enabled.
       *
       * @param {boolean} enabled True if callbacks should be enabled.
       */
      setEnabled: function(enabled) {
        if (ReactBrowserEventEmitter.ReactEventListener) {
          ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
        }
      },

      /**
       * @return {boolean} True if callbacks are enabled.
       */
      isEnabled: function() {
        return !!(
          (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
        );
      },

      /**
       * We listen for bubbled touch events on the document object.
       *
       * Firefox v8.01 (and possibly others) exhibited strange behavior when
       * mounting `onmousemove` events at some node that was not the document
       * element. The symptoms were that if your mouse is not moving over something
       * contained within that mount point (for example on the background) the
       * top-level listeners for `onmousemove` won't be called. However, if you
       * register the `mousemove` on the document object, then it will of course
       * catch all `mousemove`s. This along with iOS quirks, justifies restricting
       * top-level listeners to the document object only, at least for these
       * movement types of events and possibly all events.
       *
       * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
       *
       * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
       * they bubble to document.
       *
       * @param {string} registrationName Name of listener (e.g. `onClick`).
       * @param {object} contentDocumentHandle Document which owns the container
       */
      listenTo: function(registrationName, contentDocumentHandle) {
        var mountAt = contentDocumentHandle;
        var isListening = getListeningForDocument(mountAt);
        var dependencies = EventPluginRegistry.
        registrationNameDependencies[registrationName];

        var topLevelTypes = EventConstants.topLevelTypes;
        for (var i = 0, l = dependencies.length; i < l; i++) {
          var dependency = dependencies[i];
          if (!(
              (isListening.hasOwnProperty(dependency) && isListening[dependency])
            )) {
            if (dependency === topLevelTypes.topWheel) {
              if (isEventSupported('wheel')) {
                ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                  topLevelTypes.topWheel,
                  'wheel',
                  mountAt
                );
              } else if (isEventSupported('mousewheel')) {
                ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                  topLevelTypes.topWheel,
                  'mousewheel',
                  mountAt
                );
              } else {
                // Firefox needs to capture a different mouse scroll event.
                // @see http://www.quirksmode.org/dom/events/tests/scroll.html
                ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                  topLevelTypes.topWheel,
                  'DOMMouseScroll',
                  mountAt
                );
              }
            } else if (dependency === topLevelTypes.topScroll) {

              if (isEventSupported('scroll', true)) {
                ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
                  topLevelTypes.topScroll,
                  'scroll',
                  mountAt
                );
              } else {
                ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                  topLevelTypes.topScroll,
                  'scroll',
                  ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
                );
              }
            } else if (dependency === topLevelTypes.topFocus ||
              dependency === topLevelTypes.topBlur) {

              if (isEventSupported('focus', true)) {
                ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
                  topLevelTypes.topFocus,
                  'focus',
                  mountAt
                );
                ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
                  topLevelTypes.topBlur,
                  'blur',
                  mountAt
                );
              } else if (isEventSupported('focusin')) {
                // IE has `focusin` and `focusout` events which bubble.
                // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
                ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                  topLevelTypes.topFocus,
                  'focusin',
                  mountAt
                );
                ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                  topLevelTypes.topBlur,
                  'focusout',
                  mountAt
                );
              }

              // to make sure blur and focus event listeners are only attached once
              isListening[topLevelTypes.topBlur] = true;
              isListening[topLevelTypes.topFocus] = true;
            } else if (topEventMapping.hasOwnProperty(dependency)) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                dependency,
                topEventMapping[dependency],
                mountAt
              );
            }

            isListening[dependency] = true;
          }
        }
      },

      trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
        return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
          topLevelType,
          handlerBaseName,
          handle
        );
      },

      trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
        return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
          topLevelType,
          handlerBaseName,
          handle
        );
      },

      /**
       * Listens to window scroll and resize events. We cache scroll values so that
       * application code can access them without triggering reflows.
       *
       * NOTE: Scroll events do not bubble.
       *
       * @see http://www.quirksmode.org/dom/events/scroll.html
       */
      ensureScrollValueMonitoring: function() {
        if (!isMonitoringScrollValue) {
          var refresh = ViewportMetrics.refreshScrollValues;
          ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
          isMonitoringScrollValue = true;
        }
      },

      eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

      registrationNameModules: EventPluginHub.registrationNameModules,

      putListener: EventPluginHub.putListener,

      getListener: EventPluginHub.getListener,

      deleteListener: EventPluginHub.deleteListener,

      deleteAllListeners: EventPluginHub.deleteAllListeners

    });

    module.exports = ReactBrowserEventEmitter;

    /***/
  }),
  /* 290 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule EventPluginHub
     */

    'use strict';

    var EventPluginRegistry = __webpack_require__(291);
    var EventPluginUtils = __webpack_require__(225);

    var accumulateInto = __webpack_require__(292);
    var forEachAccumulated = __webpack_require__(293);
    var invariant = __webpack_require__(228);

    /**
     * Internal store for event listeners
     */
    var listenerBank = {};

    /**
     * Internal queue of events that have accumulated their dispatches and are
     * waiting to have their dispatches executed.
     */
    var eventQueue = null;

    /**
     * Dispatches an event and releases it back into the pool, unless persistent.
     *
     * @param {?object} event Synthetic event to be dispatched.
     * @private
     */
    var executeDispatchesAndRelease = function(event) {
      if (event) {
        var executeDispatch = EventPluginUtils.executeDispatch;
        // Plugins can provide custom behavior when dispatching events.
        var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
        if (PluginModule && PluginModule.executeDispatch) {
          executeDispatch = PluginModule.executeDispatch;
        }
        EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

        if (!event.isPersistent()) {
          event.constructor.release(event);
        }
      }
    };

    /**
     * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
     *   hierarchy given ids of the logical DOM elements involved.
     */
    var InstanceHandle = null;

    function validateInstanceHandle() {
      var valid =
        InstanceHandle &&
        InstanceHandle.traverseTwoPhase &&
        InstanceHandle.traverseEnterLeave;
      (false ? invariant(
        valid,
        'InstanceHandle not injected before use!'
      ) : invariant(valid));
    }

    /**
     * This is a unified interface for event plugins to be installed and configured.
     *
     * Event plugins can implement the following properties:
     *
     *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
     *     Required. When a top-level event is fired, this method is expected to
     *     extract synthetic events that will in turn be queued and dispatched.
     *
     *   `eventTypes` {object}
     *     Optional, plugins that fire events must publish a mapping of registration
     *     names that are used to register listeners. Values of this mapping must
     *     be objects that contain `registrationName` or `phasedRegistrationNames`.
     *
     *   `executeDispatch` {function(object, function, string)}
     *     Optional, allows plugins to override how an event gets dispatched. By
     *     default, the listener is simply invoked.
     *
     * Each plugin that is injected into `EventsPluginHub` is immediately operable.
     *
     * @public
     */
    var EventPluginHub = {

      /**
       * Methods for injecting dependencies.
       */
      injection: {

        /**
         * @param {object} InjectedMount
         * @public
         */
        injectMount: EventPluginUtils.injection.injectMount,

        /**
         * @param {object} InjectedInstanceHandle
         * @public
         */
        injectInstanceHandle: function(InjectedInstanceHandle) {
          InstanceHandle = InjectedInstanceHandle;
          if (false) {
            validateInstanceHandle();
          }
        },

        getInstanceHandle: function() {
          if (false) {
            validateInstanceHandle();
          }
          return InstanceHandle;
        },

        /**
         * @param {array} InjectedEventPluginOrder
         * @public
         */
        injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

        /**
         * @param {object} injectedNamesToPlugins Map from names to plugin modules.
         */
        injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

      },

      eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

      registrationNameModules: EventPluginRegistry.registrationNameModules,

      /**
       * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
       *
       * @param {string} id ID of the DOM element.
       * @param {string} registrationName Name of listener (e.g. `onClick`).
       * @param {?function} listener The callback to store.
       */
      putListener: function(id, registrationName, listener) {
        (false ? invariant(
          !listener || typeof listener === 'function',
          'Expected %s listener to be a function, instead got type %s',
          registrationName, typeof listener
        ) : invariant(!listener || typeof listener === 'function'));

        var bankForRegistrationName =
          listenerBank[registrationName] || (listenerBank[registrationName] = {});
        bankForRegistrationName[id] = listener;
      },

      /**
       * @param {string} id ID of the DOM element.
       * @param {string} registrationName Name of listener (e.g. `onClick`).
       * @return {?function} The stored callback.
       */
      getListener: function(id, registrationName) {
        var bankForRegistrationName = listenerBank[registrationName];
        return bankForRegistrationName && bankForRegistrationName[id];
      },

      /**
       * Deletes a listener from the registration bank.
       *
       * @param {string} id ID of the DOM element.
       * @param {string} registrationName Name of listener (e.g. `onClick`).
       */
      deleteListener: function(id, registrationName) {
        var bankForRegistrationName = listenerBank[registrationName];
        if (bankForRegistrationName) {
          delete bankForRegistrationName[id];
        }
      },

      /**
       * Deletes all listeners for the DOM element with the supplied ID.
       *
       * @param {string} id ID of the DOM element.
       */
      deleteAllListeners: function(id) {
        for (var registrationName in listenerBank) {
          delete listenerBank[registrationName][id];
        }
      },

      /**
       * Allows registered plugins an opportunity to extract events from top-level
       * native browser events.
       *
       * @param {string} topLevelType Record from `EventConstants`.
       * @param {DOMEventTarget} topLevelTarget The listening component root node.
       * @param {string} topLevelTargetID ID of `topLevelTarget`.
       * @param {object} nativeEvent Native browser event.
       * @return {*} An accumulation of synthetic events.
       * @internal
       */
      extractEvents: function(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent) {
        var events;
        var plugins = EventPluginRegistry.plugins;
        for (var i = 0, l = plugins.length; i < l; i++) {
          // Not every plugin in the ordering may be loaded at runtime.
          var possiblePlugin = plugins[i];
          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(
              topLevelType,
              topLevelTarget,
              topLevelTargetID,
              nativeEvent
            );
            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }
        return events;
      },

      /**
       * Enqueues a synthetic event that should be dispatched when
       * `processEventQueue` is invoked.
       *
       * @param {*} events An accumulation of synthetic events.
       * @internal
       */
      enqueueEvents: function(events) {
        if (events) {
          eventQueue = accumulateInto(eventQueue, events);
        }
      },

      /**
       * Dispatches all synthetic events on the event queue.
       *
       * @internal
       */
      processEventQueue: function() {
        // Set `eventQueue` to null before processing it so that we can tell if more
        // events get enqueued while processing.
        var processingEventQueue = eventQueue;
        eventQueue = null;
        forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
        (false ? invariant(
          !eventQueue,
          'processEventQueue(): Additional events were enqueued while processing ' +
          'an event queue. Support for this has not yet been implemented.'
        ) : invariant(!eventQueue));
      },

      /**
       * These are needed for tests only. Do not use!
       */
      __purge: function() {
        listenerBank = {};
      },

      __getListenerBank: function() {
        return listenerBank;
      }

    };

    module.exports = EventPluginHub;

    /***/
  }),
  /* 291 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule EventPluginRegistry
     * @typechecks static-only
     */

    'use strict';

    var invariant = __webpack_require__(228);

    /**
     * Injectable ordering of event plugins.
     */
    var EventPluginOrder = null;

    /**
     * Injectable mapping from names to event plugin modules.
     */
    var namesToPlugins = {};

    /**
     * Recomputes the plugin list using the injected plugins and plugin ordering.
     *
     * @private
     */
    function recomputePluginOrdering() {
      if (!EventPluginOrder) {
        // Wait until an `EventPluginOrder` is injected.
        return;
      }
      for (var pluginName in namesToPlugins) {
        var PluginModule = namesToPlugins[pluginName];
        var pluginIndex = EventPluginOrder.indexOf(pluginName);
        (false ? invariant(
          pluginIndex > -1,
          'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
          'the plugin ordering, `%s`.',
          pluginName
        ) : invariant(pluginIndex > -1));
        if (EventPluginRegistry.plugins[pluginIndex]) {
          continue;
        }
        (false ? invariant(
          PluginModule.extractEvents,
          'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
          'method, but `%s` does not.',
          pluginName
        ) : invariant(PluginModule.extractEvents));
        EventPluginRegistry.plugins[pluginIndex] = PluginModule;
        var publishedEvents = PluginModule.eventTypes;
        for (var eventName in publishedEvents) {
          (false ? invariant(
            publishEventForPlugin(
              publishedEvents[eventName],
              PluginModule,
              eventName
            ),
            'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
            eventName,
            pluginName
          ) : invariant(publishEventForPlugin(
            publishedEvents[eventName],
            PluginModule,
            eventName
          )));
        }
      }
    }

    /**
     * Publishes an event so that it can be dispatched by the supplied plugin.
     *
     * @param {object} dispatchConfig Dispatch configuration for the event.
     * @param {object} PluginModule Plugin publishing the event.
     * @return {boolean} True if the event was successfully published.
     * @private
     */
    function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
      (false ? invariant(
        !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
        'EventPluginHub: More than one plugin attempted to publish the same ' +
        'event name, `%s`.',
        eventName
      ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
      EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
      if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
            var phasedRegistrationName = phasedRegistrationNames[phaseName];
            publishRegistrationName(
              phasedRegistrationName,
              PluginModule,
              eventName
            );
          }
        }
        return true;
      } else if (dispatchConfig.registrationName) {
        publishRegistrationName(
          dispatchConfig.registrationName,
          PluginModule,
          eventName
        );
        return true;
      }
      return false;
    }

    /**
     * Publishes a registration name that is used to identify dispatched events and
     * can be used with `EventPluginHub.putListener` to register listeners.
     *
     * @param {string} registrationName Registration name to add.
     * @param {object} PluginModule Plugin publishing the event.
     * @private
     */
    function publishRegistrationName(registrationName, PluginModule, eventName) {
      (false ? invariant(
        !EventPluginRegistry.registrationNameModules[registrationName],
        'EventPluginHub: More than one plugin attempted to publish the same ' +
        'registration name, `%s`.',
        registrationName
      ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
      EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
      EventPluginRegistry.registrationNameDependencies[registrationName] =
        PluginModule.eventTypes[eventName].dependencies;
    }

    /**
     * Registers plugins so that they can extract and dispatch events.
     *
     * @see {EventPluginHub}
     */
    var EventPluginRegistry = {

      /**
       * Ordered list of injected plugins.
       */
      plugins: [],

      /**
       * Mapping from event name to dispatch config
       */
      eventNameDispatchConfigs: {},

      /**
       * Mapping from registration name to plugin module
       */
      registrationNameModules: {},

      /**
       * Mapping from registration name to event name
       */
      registrationNameDependencies: {},

      /**
       * Injects an ordering of plugins (by plugin name). This allows the ordering
       * to be decoupled from injection of the actual plugins so that ordering is
       * always deterministic regardless of packaging, on-the-fly injection, etc.
       *
       * @param {array} InjectedEventPluginOrder
       * @internal
       * @see {EventPluginHub.injection.injectEventPluginOrder}
       */
      injectEventPluginOrder: function(InjectedEventPluginOrder) {
        (false ? invariant(
          !EventPluginOrder,
          'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
          'once. You are likely trying to load more than one copy of React.'
        ) : invariant(!EventPluginOrder));
        // Clone the ordering so it cannot be dynamically mutated.
        EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
        recomputePluginOrdering();
      },

      /**
       * Injects plugins to be used by `EventPluginHub`. The plugin names must be
       * in the ordering injected by `injectEventPluginOrder`.
       *
       * Plugins can be injected as part of page initialization or on-the-fly.
       *
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       * @internal
       * @see {EventPluginHub.injection.injectEventPluginsByName}
       */
      injectEventPluginsByName: function(injectedNamesToPlugins) {
        var isOrderingDirty = false;
        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }
          var PluginModule = injectedNamesToPlugins[pluginName];
          if (!namesToPlugins.hasOwnProperty(pluginName) ||
            namesToPlugins[pluginName] !== PluginModule) {
            (false ? invariant(
              !namesToPlugins[pluginName],
              'EventPluginRegistry: Cannot inject two different event plugins ' +
              'using the same name, `%s`.',
              pluginName
            ) : invariant(!namesToPlugins[pluginName]));
            namesToPlugins[pluginName] = PluginModule;
            isOrderingDirty = true;
          }
        }
        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      },

      /**
       * Looks up the plugin for the supplied event.
       *
       * @param {object} event A synthetic event.
       * @return {?object} The plugin that created the supplied event.
       * @internal
       */
      getPluginModuleForEvent: function(event) {
        var dispatchConfig = event.dispatchConfig;
        if (dispatchConfig.registrationName) {
          return EventPluginRegistry.registrationNameModules[
            dispatchConfig.registrationName
          ] || null;
        }
        for (var phase in dispatchConfig.phasedRegistrationNames) {
          if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
            continue;
          }
          var PluginModule = EventPluginRegistry.registrationNameModules[
            dispatchConfig.phasedRegistrationNames[phase]
          ];
          if (PluginModule) {
            return PluginModule;
          }
        }
        return null;
      },

      /**
       * Exposed for unit testing.
       * @private
       */
      _resetEventPlugins: function() {
        EventPluginOrder = null;
        for (var pluginName in namesToPlugins) {
          if (namesToPlugins.hasOwnProperty(pluginName)) {
            delete namesToPlugins[pluginName];
          }
        }
        EventPluginRegistry.plugins.length = 0;

        var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
        for (var eventName in eventNameDispatchConfigs) {
          if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
            delete eventNameDispatchConfigs[eventName];
          }
        }

        var registrationNameModules = EventPluginRegistry.registrationNameModules;
        for (var registrationName in registrationNameModules) {
          if (registrationNameModules.hasOwnProperty(registrationName)) {
            delete registrationNameModules[registrationName];
          }
        }
      }

    };

    module.exports = EventPluginRegistry;

    /***/
  }),
  /* 292 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule accumulateInto
     */

    'use strict';

    var invariant = __webpack_require__(228);

    /**
     *
     * Accumulates items that must not be null or undefined into the first one. This
     * is used to conserve memory by avoiding array allocations, and thus sacrifices
     * API cleanness. Since `current` can be null before being passed in and not
     * null after this function, make sure to assign it back to `current`:
     *
     * `a = accumulateInto(a, b);`
     *
     * This API should be sparingly used. Try `accumulate` for something cleaner.
     *
     * @return {*|array<*>} An accumulation of items.
     */

    function accumulateInto(current, next) {
      (false ? invariant(
        next != null,
        'accumulateInto(...): Accumulated items must not be null or undefined.'
      ) : invariant(next != null));
      if (current == null) {
        return next;
      }

      // Both are not empty. Warning: Never call x.concat(y) when you are not
      // certain that x is an Array (x could be a string with concat method).
      var currentIsArray = Array.isArray(current);
      var nextIsArray = Array.isArray(next);

      if (currentIsArray && nextIsArray) {
        current.push.apply(current, next);
        return current;
      }

      if (currentIsArray) {
        current.push(next);
        return current;
      }

      if (nextIsArray) {
        // A bit too dangerous to mutate `next`.
        return [current].concat(next);
      }

      return [current, next];
    }

    module.exports = accumulateInto;

    /***/
  }),
  /* 293 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule forEachAccumulated
     */

    'use strict';

    /**
     * @param {array} an "accumulation" of items which is either an Array or
     * a single item. Useful when paired with the `accumulate` module. This is a
     * simple utility that allows us to reason about a collection of items, but
     * handling the case when there is exactly one item (and we do not need to
     * allocate an array).
     */
    var forEachAccumulated = function(arr, cb, scope) {
      if (Array.isArray(arr)) {
        arr.forEach(cb, scope);
      } else if (arr) {
        cb.call(scope, arr);
      }
    };

    module.exports = forEachAccumulated;

    /***/
  }),
  /* 294 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactEventEmitterMixin
     */

    'use strict';

    var EventPluginHub = __webpack_require__(290);

    function runEventQueueInBatch(events) {
      EventPluginHub.enqueueEvents(events);
      EventPluginHub.processEventQueue();
    }

    var ReactEventEmitterMixin = {

      /**
       * Streams a fired top-level event to `EventPluginHub` where plugins have the
       * opportunity to create `ReactEvent`s to be dispatched.
       *
       * @param {string} topLevelType Record from `EventConstants`.
       * @param {object} topLevelTarget The listening component root node.
       * @param {string} topLevelTargetID ID of `topLevelTarget`.
       * @param {object} nativeEvent Native environment event.
       */
      handleTopLevel: function(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent) {
        var events = EventPluginHub.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );

        runEventQueueInBatch(events);
      }
    };

    module.exports = ReactEventEmitterMixin;

    /***/
  }),
  /* 295 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ViewportMetrics
     */

    'use strict';

    var ViewportMetrics = {

      currentScrollLeft: 0,

      currentScrollTop: 0,

      refreshScrollValues: function(scrollPosition) {
        ViewportMetrics.currentScrollLeft = scrollPosition.x;
        ViewportMetrics.currentScrollTop = scrollPosition.y;
      }

    };

    module.exports = ViewportMetrics;

    /***/
  }),
  /* 296 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule isEventSupported
     */

    'use strict';

    var ExecutionEnvironment = __webpack_require__(272);

    var useHasFeature;
    if (ExecutionEnvironment.canUseDOM) {
      useHasFeature =
        document.implementation &&
        document.implementation.hasFeature &&
        // always returns true in newer browsers as per the standard.
        // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
        document.implementation.hasFeature('', '') !== true;
    }

    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @param {?boolean} capture Check if the capture phase is supported.
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function isEventSupported(eventNameSuffix, capture) {
      if (!ExecutionEnvironment.canUseDOM ||
        capture && !('addEventListener' in document)) {
        return false;
      }

      var eventName = 'on' + eventNameSuffix;
      var isSupported = eventName in document;

      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }

      if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
        // This is the only way to test support for the `wheel` event in IE9+.
        isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
      }

      return isSupported;
    }

    module.exports = isEventSupported;

    /***/
  }),
  /* 297 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactEmptyComponent
     */

    'use strict';

    var ReactElement = __webpack_require__(232);
    var ReactInstanceMap = __webpack_require__(246);

    var invariant = __webpack_require__(228);

    var component;
    // This registry keeps track of the React IDs of the components that rendered to
    // `null` (in reality a placeholder such as `noscript`)
    var nullComponentIDsRegistry = {};

    var ReactEmptyComponentInjection = {
      injectEmptyComponent: function(emptyComponent) {
        component = ReactElement.createFactory(emptyComponent);
      }
    };

    var ReactEmptyComponentType = function() {};
    ReactEmptyComponentType.prototype.componentDidMount = function() {
      var internalInstance = ReactInstanceMap.get(this);
      // TODO: Make sure we run these methods in the correct order, we shouldn't
      // need this check. We're going to assume if we're here it means we ran
      // componentWillUnmount already so there is no internal instance (it gets
      // removed as part of the unmounting process).
      if (!internalInstance) {
        return;
      }
      registerNullComponentID(internalInstance._rootNodeID);
    };
    ReactEmptyComponentType.prototype.componentWillUnmount = function() {
      var internalInstance = ReactInstanceMap.get(this);
      // TODO: Get rid of this check. See TODO in componentDidMount.
      if (!internalInstance) {
        return;
      }
      deregisterNullComponentID(internalInstance._rootNodeID);
    };
    ReactEmptyComponentType.prototype.render = function() {
      (false ? invariant(
        component,
        'Trying to return null from a render, but no null placeholder component ' +
        'was injected.'
      ) : invariant(component));
      return component();
    };

    var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

    /**
     * Mark the component as having rendered to null.
     * @param {string} id Component's `_rootNodeID`.
     */
    function registerNullComponentID(id) {
      nullComponentIDsRegistry[id] = true;
    }

    /**
     * Unmark the component as having rendered to null: it renders to something now.
     * @param {string} id Component's `_rootNodeID`.
     */
    function deregisterNullComponentID(id) {
      delete nullComponentIDsRegistry[id];
    }

    /**
     * @param {string} id Component's `_rootNodeID`.
     * @return {boolean} True if the component is rendered to null.
     */
    function isNullComponentID(id) {
      return !!nullComponentIDsRegistry[id];
    }

    var ReactEmptyComponent = {
      emptyElement: emptyElement,
      injection: ReactEmptyComponentInjection,
      isNullComponentID: isNullComponentID
    };

    module.exports = ReactEmptyComponent;

    /***/
  }),
  /* 298 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactMarkupChecksum
     */

    'use strict';

    var adler32 = __webpack_require__(299);

    var ReactMarkupChecksum = {
      CHECKSUM_ATTR_NAME: 'data-react-checksum',

      /**
       * @param {string} markup Markup string
       * @return {string} Markup string with checksum attribute attached
       */
      addChecksumToMarkup: function(markup) {
        var checksum = adler32(markup);
        return markup.replace(
          '>',
          ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
        );
      },

      /**
       * @param {string} markup to use
       * @param {DOMElement} element root React element
       * @returns {boolean} whether or not the markup is the same
       */
      canReuseMarkup: function(markup, element) {
        var existingChecksum = element.getAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
        );
        existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
        var markupChecksum = adler32(markup);
        return markupChecksum === existingChecksum;
      }
    };

    module.exports = ReactMarkupChecksum;

    /***/
  }),
  /* 299 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule adler32
     */

    /* jslint bitwise:true */

    'use strict';

    var MOD = 65521;

    // This is a clean-room implementation of adler32 designed for detecting
    // if markup is not what we expect it to be. It does not need to be
    // cryptographically strong, only reasonably good at detecting if markup
    // generated on the server is different than that on the client.
    function adler32(data) {
      var a = 1;
      var b = 0;
      for (var i = 0; i < data.length; i++) {
        a = (a + data.charCodeAt(i)) % MOD;
        b = (b + a) % MOD;
      }
      return a | (b << 16);
    }

    module.exports = adler32;

    /***/
  }),
  /* 300 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule containsNode
     * @typechecks
     */

    var isTextNode = __webpack_require__(301);

    /*jslint bitwise:true */

    /**
     * Checks if a given DOM node contains or is another DOM node.
     *
     * @param {?DOMNode} outerNode Outer DOM node.
     * @param {?DOMNode} innerNode Inner DOM node.
     * @return {boolean} True if `outerNode` contains or is `innerNode`.
     */
    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if (outerNode.contains) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }

    module.exports = containsNode;

    /***/
  }),
  /* 301 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule isTextNode
     * @typechecks
     */

    var isNode = __webpack_require__(302);

    /**
     * @param {*} object The object to check.
     * @return {boolean} Whether or not the object is a DOM text node.
     */
    function isTextNode(object) {
      return isNode(object) && object.nodeType == 3;
    }

    module.exports = isTextNode;

    /***/
  }),
  /* 302 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule isNode
     * @typechecks
     */

    /**
     * @param {*} object The object to check.
     * @return {boolean} Whether or not the object is a DOM node.
     */
    function isNode(object) {
      return !!(object && (
        ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
          typeof object.nodeType === 'number' &&
          typeof object.nodeName === 'string'))
      ));
    }

    module.exports = isNode;

    /***/
  }),
  /* 303 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getReactRootElementInContainer
     */

    'use strict';

    var DOC_NODE_TYPE = 9;

    /**
     * @param {DOMElement|DOMDocument} container DOM element that may contain
     *                                           a React component
     * @return {?*} DOM element that may have the reactRoot ID, or null.
     */
    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }

      if (container.nodeType === DOC_NODE_TYPE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }

    module.exports = getReactRootElementInContainer;

    /***/
  }),
  /* 304 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule instantiateReactComponent
     * @typechecks static-only
     */

    'use strict';

    var ReactCompositeComponent = __webpack_require__(305);
    var ReactEmptyComponent = __webpack_require__(297);
    var ReactNativeComponent = __webpack_require__(256);

    var assign = __webpack_require__(234);
    var invariant = __webpack_require__(228);
    var warning = __webpack_require__(236);

    // To avoid a cyclic dependency, we create the final class in this module
    var ReactCompositeComponentWrapper = function() {};
    assign(
      ReactCompositeComponentWrapper.prototype,
      ReactCompositeComponent.Mixin, {
        _instantiateReactComponent: instantiateReactComponent
      }
    );

    /**
     * Check if the type reference is a known internal type. I.e. not a user
     * provided composite type.
     *
     * @param {function} type
     * @return {boolean} Returns true if this is a valid internal type.
     */
    function isInternalComponentType(type) {
      return (
        typeof type === 'function' &&
        typeof type.prototype !== 'undefined' &&
        typeof type.prototype.mountComponent === 'function' &&
        typeof type.prototype.receiveComponent === 'function'
      );
    }

    /**
     * Given a ReactNode, create an instance that will actually be mounted.
     *
     * @param {ReactNode} node
     * @param {*} parentCompositeType The composite type that resolved this.
     * @return {object} A new instance of the element's constructor.
     * @protected
     */
    function instantiateReactComponent(node, parentCompositeType) {
      var instance;

      if (node === null || node === false) {
        node = ReactEmptyComponent.emptyElement;
      }

      if (typeof node === 'object') {
        var element = node;
        if (false) {
          ("production" !== process.env.NODE_ENV ? warning(
            element && (typeof element.type === 'function' ||
              typeof element.type === 'string'),
            'Only functions or strings can be mounted as React components.'
          ) : null);
        }

        // Special case string values
        if (parentCompositeType === element.type &&
          typeof element.type === 'string') {
          // Avoid recursion if the wrapper renders itself.
          instance = ReactNativeComponent.createInternalComponent(element);
          // All native components are currently wrapped in a composite so we're
          // safe to assume that this is what we should instantiate.
        } else if (isInternalComponentType(element.type)) {
          // This is temporarily available for custom components that are not string
          // represenations. I.e. ART. Once those are updated to use the string
          // representation, we can drop this code path.
          instance = new element.type(element);
        } else {
          instance = new ReactCompositeComponentWrapper();
        }
      } else if (typeof node === 'string' || typeof node === 'number') {
        instance = ReactNativeComponent.createInstanceForText(node);
      } else {
        (false ? invariant(
          false,
          'Encountered invalid React node of type %s',
          typeof node
        ) : invariant(false));
      }

      if (false) {
        ("production" !== process.env.NODE_ENV ? warning(
          typeof instance.construct === 'function' &&
          typeof instance.mountComponent === 'function' &&
          typeof instance.receiveComponent === 'function' &&
          typeof instance.unmountComponent === 'function',
          'Only React Components can be mounted.'
        ) : null);
      }

      // Sets up the instance. This can probably just move into the constructor now.
      instance.construct(node);

      // These two fields are used by the DOM and ART diffing algorithms
      // respectively. Instead of using expandos on components, we should be
      // storing the state needed by the diffing algorithms elsewhere.
      instance._mountIndex = 0;
      instance._mountImage = null;

      if (false) {
        instance._isOwnerNecessary = false;
        instance._warnedAboutRefsInRender = false;
      }

      // Internal instances should fully constructed at this point, so they should
      // not get any new fields added to them at this point.
      if (false) {
        if (Object.preventExtensions) {
          Object.preventExtensions(instance);
        }
      }

      return instance;
    }

    module.exports = instantiateReactComponent;

    /***/
  }),
  /* 305 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactCompositeComponent
     */

    'use strict';

    var ReactComponentEnvironment = __webpack_require__(306);
    var ReactContext = __webpack_require__(233);
    var ReactCurrentOwner = __webpack_require__(238);
    var ReactElement = __webpack_require__(232);
    var ReactElementValidator = __webpack_require__(253);
    var ReactInstanceMap = __webpack_require__(246);
    var ReactLifeCycle = __webpack_require__(245);
    var ReactNativeComponent = __webpack_require__(256);
    var ReactPerf = __webpack_require__(249);
    var ReactPropTypeLocations = __webpack_require__(254);
    var ReactPropTypeLocationNames = __webpack_require__(255);
    var ReactReconciler = __webpack_require__(250);
    var ReactUpdates = __webpack_require__(247);

    var assign = __webpack_require__(234);
    var emptyObject = __webpack_require__(235);
    var invariant = __webpack_require__(228);
    var shouldUpdateReactComponent = __webpack_require__(307);
    var warning = __webpack_require__(236);

    function getDeclarationErrorAddendum(component) {
      var owner = component._currentElement._owner || null;
      if (owner) {
        var name = owner.getName();
        if (name) {
          return ' Check the render method of `' + name + '`.';
        }
      }
      return '';
    }

    /**
     * ------------------ The Life-Cycle of a Composite Component ------------------
     *
     * - constructor: Initialization of state. The instance is now retained.
     *   - componentWillMount
     *   - render
     *   - [children's constructors]
     *     - [children's componentWillMount and render]
     *     - [children's componentDidMount]
     *     - componentDidMount
     *
     *       Update Phases:
     *       - componentWillReceiveProps (only called if parent updated)
     *       - shouldComponentUpdate
     *         - componentWillUpdate
     *           - render
     *           - [children's constructors or receive props phases]
     *         - componentDidUpdate
     *
     *     - componentWillUnmount
     *     - [children's componentWillUnmount]
     *   - [children destroyed]
     * - (destroyed): The instance is now blank, released by React and ready for GC.
     *
     * -----------------------------------------------------------------------------
     */

    /**
     * An incrementing ID assigned to each component when it is mounted. This is
     * used to enforce the order in which `ReactUpdates` updates dirty components.
     *
     * @private
     */
    var nextMountID = 1;

    /**
     * @lends {ReactCompositeComponent.prototype}
     */
    var ReactCompositeComponentMixin = {

      /**
       * Base constructor for all composite component.
       *
       * @param {ReactElement} element
       * @final
       * @internal
       */
      construct: function(element) {
        this._currentElement = element;
        this._rootNodeID = null;
        this._instance = null;

        // See ReactUpdateQueue
        this._pendingElement = null;
        this._pendingStateQueue = null;
        this._pendingReplaceState = false;
        this._pendingForceUpdate = false;

        this._renderedComponent = null;

        this._context = null;
        this._mountOrder = 0;
        this._isTopLevel = false;

        // See ReactUpdates and ReactUpdateQueue.
        this._pendingCallbacks = null;
      },

      /**
       * Initializes the component, renders markup, and registers event listeners.
       *
       * @param {string} rootID DOM ID of the root node.
       * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
       * @return {?string} Rendered markup to be inserted into the DOM.
       * @final
       * @internal
       */
      mountComponent: function(rootID, transaction, context) {
        this._context = context;
        this._mountOrder = nextMountID++;
        this._rootNodeID = rootID;

        var publicProps = this._processProps(this._currentElement.props);
        var publicContext = this._processContext(this._currentElement._context);

        var Component = ReactNativeComponent.getComponentClassForElement(
          this._currentElement
        );

        // Initialize the public class
        var inst = new Component(publicProps, publicContext);

        if (false) {
          // This will throw later in _renderValidatedComponent, but add an early
          // warning now to help debugging
          ("production" !== process.env.NODE_ENV ? warning(
            inst.render != null,
            '%s(...): No `render` method found on the returned component ' +
            'instance: you may have forgotten to define `render` in your ' +
            'component or you may have accidentally tried to render an element ' +
            'whose type is a function that isn\'t a React component.',
            Component.displayName || Component.name || 'Component'
          ) : null);
        }

        // These should be set up in the constructor, but as a convenience for
        // simpler class abstractions, we set them up after the fact.
        inst.props = publicProps;
        inst.context = publicContext;
        inst.refs = emptyObject;

        this._instance = inst;

        // Store a reference from the instance back to the internal representation
        ReactInstanceMap.set(inst, this);

        if (false) {
          this._warnIfContextsDiffer(this._currentElement._context, context);
        }

        if (false) {
          // Since plain JS classes are defined without any special initialization
          // logic, we can not catch common errors early. Therefore, we have to
          // catch them here, at initialization time, instead.
          ("production" !== process.env.NODE_ENV ? warning(
            !inst.getInitialState ||
            inst.getInitialState.isReactClassApproved,
            'getInitialState was defined on %s, a plain JavaScript class. ' +
            'This is only supported for classes created using React.createClass. ' +
            'Did you mean to define a state property instead?',
            this.getName() || 'a component'
          ) : null);
          ("production" !== process.env.NODE_ENV ? warning(
            !inst.getDefaultProps ||
            inst.getDefaultProps.isReactClassApproved,
            'getDefaultProps was defined on %s, a plain JavaScript class. ' +
            'This is only supported for classes created using React.createClass. ' +
            'Use a static property to define defaultProps instead.',
            this.getName() || 'a component'
          ) : null);
          ("production" !== process.env.NODE_ENV ? warning(
            !inst.propTypes,
            'propTypes was defined as an instance property on %s. Use a static ' +
            'property to define propTypes instead.',
            this.getName() || 'a component'
          ) : null);
          ("production" !== process.env.NODE_ENV ? warning(
            !inst.contextTypes,
            'contextTypes was defined as an instance property on %s. Use a ' +
            'static property to define contextTypes instead.',
            this.getName() || 'a component'
          ) : null);
          ("production" !== process.env.NODE_ENV ? warning(
            typeof inst.componentShouldUpdate !== 'function',
            '%s has a method called ' +
            'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
            'The name is phrased as a question because the function is ' +
            'expected to return a value.',
            (this.getName() || 'A component')
          ) : null);
        }

        var initialState = inst.state;
        if (initialState === undefined) {
          inst.state = initialState = null;
        }
        (false ? invariant(
          typeof initialState === 'object' && !Array.isArray(initialState),
          '%s.state: must be set to an object or null',
          this.getName() || 'ReactCompositeComponent'
        ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

        this._pendingStateQueue = null;
        this._pendingReplaceState = false;
        this._pendingForceUpdate = false;

        var childContext;
        var renderedElement;

        var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
        ReactLifeCycle.currentlyMountingInstance = this;
        try {
          if (inst.componentWillMount) {
            inst.componentWillMount();
            // When mounting, calls to `setState` by `componentWillMount` will set
            // `this._pendingStateQueue` without triggering a re-render.
            if (this._pendingStateQueue) {
              inst.state = this._processPendingState(inst.props, inst.context);
            }
          }

          childContext = this._getValidatedChildContext(context);
          renderedElement = this._renderValidatedComponent(childContext);
        } finally {
          ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
        }

        this._renderedComponent = this._instantiateReactComponent(
          renderedElement,
          this._currentElement.type // The wrapping type
        );

        var markup = ReactReconciler.mountComponent(
          this._renderedComponent,
          rootID,
          transaction,
          this._mergeChildContext(context, childContext)
        );
        if (inst.componentDidMount) {
          transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
        }

        return markup;
      },

      /**
       * Releases any resources allocated by `mountComponent`.
       *
       * @final
       * @internal
       */
      unmountComponent: function() {
        var inst = this._instance;

        if (inst.componentWillUnmount) {
          var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
          ReactLifeCycle.currentlyUnmountingInstance = this;
          try {
            inst.componentWillUnmount();
          } finally {
            ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
          }
        }

        ReactReconciler.unmountComponent(this._renderedComponent);
        this._renderedComponent = null;

        // Reset pending fields
        this._pendingStateQueue = null;
        this._pendingReplaceState = false;
        this._pendingForceUpdate = false;
        this._pendingCallbacks = null;
        this._pendingElement = null;

        // These fields do not really need to be reset since this object is no
        // longer accessible.
        this._context = null;
        this._rootNodeID = null;

        // Delete the reference from the instance to this internal representation
        // which allow the internals to be properly cleaned up even if the user
        // leaks a reference to the public instance.
        ReactInstanceMap.remove(inst);

        // Some existing components rely on inst.props even after they've been
        // destroyed (in event handlers).
        // TODO: inst.props = null;
        // TODO: inst.state = null;
        // TODO: inst.context = null;
      },

      /**
       * Schedule a partial update to the props. Only used for internal testing.
       *
       * @param {object} partialProps Subset of the next props.
       * @param {?function} callback Called after props are updated.
       * @final
       * @internal
       */
      _setPropsInternal: function(partialProps, callback) {
        // This is a deoptimized path. We optimize for always having an element.
        // This creates an extra internal element.
        var element = this._pendingElement || this._currentElement;
        this._pendingElement = ReactElement.cloneAndReplaceProps(
          element,
          assign({}, element.props, partialProps)
        );
        ReactUpdates.enqueueUpdate(this, callback);
      },

      /**
       * Filters the context object to only contain keys specified in
       * `contextTypes`
       *
       * @param {object} context
       * @return {?object}
       * @private
       */
      _maskContext: function(context) {
        var maskedContext = null;
        // This really should be getting the component class for the element,
        // but we know that we're not going to need it for built-ins.
        if (typeof this._currentElement.type === 'string') {
          return emptyObject;
        }
        var contextTypes = this._currentElement.type.contextTypes;
        if (!contextTypes) {
          return emptyObject;
        }
        maskedContext = {};
        for (var contextName in contextTypes) {
          maskedContext[contextName] = context[contextName];
        }
        return maskedContext;
      },

      /**
       * Filters the context object to only contain keys specified in
       * `contextTypes`, and asserts that they are valid.
       *
       * @param {object} context
       * @return {?object}
       * @private
       */
      _processContext: function(context) {
        var maskedContext = this._maskContext(context);
        if (false) {
          var Component = ReactNativeComponent.getComponentClassForElement(
            this._currentElement
          );
          if (Component.contextTypes) {
            this._checkPropTypes(
              Component.contextTypes,
              maskedContext,
              ReactPropTypeLocations.context
            );
          }
        }
        return maskedContext;
      },

      /**
       * @param {object} currentContext
       * @return {object}
       * @private
       */
      _getValidatedChildContext: function(currentContext) {
        var inst = this._instance;
        var childContext = inst.getChildContext && inst.getChildContext();
        if (childContext) {
          (false ? invariant(
            typeof inst.constructor.childContextTypes === 'object',
            '%s.getChildContext(): childContextTypes must be defined in order to ' +
            'use getChildContext().',
            this.getName() || 'ReactCompositeComponent'
          ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
          if (false) {
            this._checkPropTypes(
              inst.constructor.childContextTypes,
              childContext,
              ReactPropTypeLocations.childContext
            );
          }
          for (var name in childContext) {
            (false ? invariant(
              name in inst.constructor.childContextTypes,
              '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
              this.getName() || 'ReactCompositeComponent',
              name
            ) : invariant(name in inst.constructor.childContextTypes));
          }
          return childContext;
        }
        return null;
      },

      _mergeChildContext: function(currentContext, childContext) {
        if (childContext) {
          return assign({}, currentContext, childContext);
        }
        return currentContext;
      },

      /**
       * Processes props by setting default values for unspecified props and
       * asserting that the props are valid. Does not mutate its argument; returns
       * a new props object with defaults merged in.
       *
       * @param {object} newProps
       * @return {object}
       * @private
       */
      _processProps: function(newProps) {
        if (false) {
          var Component = ReactNativeComponent.getComponentClassForElement(
            this._currentElement
          );
          if (Component.propTypes) {
            this._checkPropTypes(
              Component.propTypes,
              newProps,
              ReactPropTypeLocations.prop
            );
          }
        }
        return newProps;
      },

      /**
       * Assert that the props are valid
       *
       * @param {object} propTypes Map of prop name to a ReactPropType
       * @param {object} props
       * @param {string} location e.g. "prop", "context", "child context"
       * @private
       */
      _checkPropTypes: function(propTypes, props, location) {
        // TODO: Stop validating prop types here and only use the element
        // validation.
        var componentName = this.getName();
        for (var propName in propTypes) {
          if (propTypes.hasOwnProperty(propName)) {
            var error;
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              (false ? invariant(
                typeof propTypes[propName] === 'function',
                '%s: %s type `%s` is invalid; it must be a function, usually ' +
                'from React.PropTypes.',
                componentName || 'React class',
                ReactPropTypeLocationNames[location],
                propName
              ) : invariant(typeof propTypes[propName] === 'function'));
              error = propTypes[propName](props, propName, componentName, location);
            } catch (ex) {
              error = ex;
            }
            if (error instanceof Error) {
              // We may want to extend this logic for similar errors in
              // React.render calls, so I'm abstracting it away into
              // a function to minimize refactoring in the future
              var addendum = getDeclarationErrorAddendum(this);

              if (location === ReactPropTypeLocations.prop) {
                // Preface gives us something to blacklist in warning module
                (false ? warning(
                  false,
                  'Failed Composite propType: %s%s',
                  error.message,
                  addendum
                ) : null);
              } else {
                (false ? warning(
                  false,
                  'Failed Context Types: %s%s',
                  error.message,
                  addendum
                ) : null);
              }
            }
          }
        }
      },

      receiveComponent: function(nextElement, transaction, nextContext) {
        var prevElement = this._currentElement;
        var prevContext = this._context;

        this._pendingElement = null;

        this.updateComponent(
          transaction,
          prevElement,
          nextElement,
          prevContext,
          nextContext
        );
      },

      /**
       * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
       * is set, update the component.
       *
       * @param {ReactReconcileTransaction} transaction
       * @internal
       */
      performUpdateIfNecessary: function(transaction) {
        if (this._pendingElement != null) {
          ReactReconciler.receiveComponent(
            this,
            this._pendingElement || this._currentElement,
            transaction,
            this._context
          );
        }

        if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
          if (false) {
            ReactElementValidator.checkAndWarnForMutatedProps(
              this._currentElement
            );
          }

          this.updateComponent(
            transaction,
            this._currentElement,
            this._currentElement,
            this._context,
            this._context
          );
        }
      },

      /**
       * Compare two contexts, warning if they are different
       * TODO: Remove this check when owner-context is removed
       */
      _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
        ownerBasedContext = this._maskContext(ownerBasedContext);
        parentBasedContext = this._maskContext(parentBasedContext);
        var parentKeys = Object.keys(parentBasedContext).sort();
        var displayName = this.getName() || 'ReactCompositeComponent';
        for (var i = 0; i < parentKeys.length; i++) {
          var key = parentKeys[i];
          (false ? warning(
            ownerBasedContext[key] === parentBasedContext[key],
            'owner-based and parent-based contexts differ ' +
            '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
            '(see: http://fb.me/react-context-by-parent)',
            ownerBasedContext[key],
            parentBasedContext[key],
            key,
            displayName
          ) : null);
        }
      },

      /**
       * Perform an update to a mounted component. The componentWillReceiveProps and
       * shouldComponentUpdate methods are called, then (assuming the update isn't
       * skipped) the remaining update lifecycle methods are called and the DOM
       * representation is updated.
       *
       * By default, this implements React's rendering and reconciliation algorithm.
       * Sophisticated clients may wish to override this.
       *
       * @param {ReactReconcileTransaction} transaction
       * @param {ReactElement} prevParentElement
       * @param {ReactElement} nextParentElement
       * @internal
       * @overridable
       */
      updateComponent: function(
        transaction,
        prevParentElement,
        nextParentElement,
        prevUnmaskedContext,
        nextUnmaskedContext
      ) {
        var inst = this._instance;

        var nextContext = inst.context;
        var nextProps = inst.props;

        // Distinguish between a props update versus a simple state update
        if (prevParentElement !== nextParentElement) {
          nextContext = this._processContext(nextParentElement._context);
          nextProps = this._processProps(nextParentElement.props);

          if (false) {
            if (nextUnmaskedContext != null) {
              this._warnIfContextsDiffer(
                nextParentElement._context,
                nextUnmaskedContext
              );
            }
          }

          // An update here will schedule an update but immediately set
          // _pendingStateQueue which will ensure that any state updates gets
          // immediately reconciled instead of waiting for the next batch.

          if (inst.componentWillReceiveProps) {
            inst.componentWillReceiveProps(nextProps, nextContext);
          }
        }

        var nextState = this._processPendingState(nextProps, nextContext);

        var shouldUpdate =
          this._pendingForceUpdate ||
          !inst.shouldComponentUpdate ||
          inst.shouldComponentUpdate(nextProps, nextState, nextContext);

        if (false) {
          ("production" !== process.env.NODE_ENV ? warning(
            typeof shouldUpdate !== 'undefined',
            '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
            'boolean value. Make sure to return true or false.',
            this.getName() || 'ReactCompositeComponent'
          ) : null);
        }

        if (shouldUpdate) {
          this._pendingForceUpdate = false;
          // Will set `this.props`, `this.state` and `this.context`.
          this._performComponentUpdate(
            nextParentElement,
            nextProps,
            nextState,
            nextContext,
            transaction,
            nextUnmaskedContext
          );
        } else {
          // If it's determined that a component should not update, we still want
          // to set props and state but we shortcut the rest of the update.
          this._currentElement = nextParentElement;
          this._context = nextUnmaskedContext;
          inst.props = nextProps;
          inst.state = nextState;
          inst.context = nextContext;
        }
      },

      _processPendingState: function(props, context) {
        var inst = this._instance;
        var queue = this._pendingStateQueue;
        var replace = this._pendingReplaceState;
        this._pendingReplaceState = false;
        this._pendingStateQueue = null;

        if (!queue) {
          return inst.state;
        }

        if (replace && queue.length === 1) {
          return queue[0];
        }

        var nextState = assign({}, replace ? queue[0] : inst.state);
        for (var i = replace ? 1 : 0; i < queue.length; i++) {
          var partial = queue[i];
          assign(
            nextState,
            typeof partial === 'function' ?
            partial.call(inst, nextState, props, context) :
            partial
          );
        }

        return nextState;
      },

      /**
       * Merges new props and state, notifies delegate methods of update and
       * performs update.
       *
       * @param {ReactElement} nextElement Next element
       * @param {object} nextProps Next public object to set as properties.
       * @param {?object} nextState Next object to set as state.
       * @param {?object} nextContext Next public object to set as context.
       * @param {ReactReconcileTransaction} transaction
       * @param {?object} unmaskedContext
       * @private
       */
      _performComponentUpdate: function(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction,
        unmaskedContext
      ) {
        var inst = this._instance;

        var prevProps = inst.props;
        var prevState = inst.state;
        var prevContext = inst.context;

        if (inst.componentWillUpdate) {
          inst.componentWillUpdate(nextProps, nextState, nextContext);
        }

        this._currentElement = nextElement;
        this._context = unmaskedContext;
        inst.props = nextProps;
        inst.state = nextState;
        inst.context = nextContext;

        this._updateRenderedComponent(transaction, unmaskedContext);

        if (inst.componentDidUpdate) {
          transaction.getReactMountReady().enqueue(
            inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
            inst
          );
        }
      },

      /**
       * Call the component's `render` method and update the DOM accordingly.
       *
       * @param {ReactReconcileTransaction} transaction
       * @internal
       */
      _updateRenderedComponent: function(transaction, context) {
        var prevComponentInstance = this._renderedComponent;
        var prevRenderedElement = prevComponentInstance._currentElement;
        var childContext = this._getValidatedChildContext();
        var nextRenderedElement = this._renderValidatedComponent(childContext);
        if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
          ReactReconciler.receiveComponent(
            prevComponentInstance,
            nextRenderedElement,
            transaction,
            this._mergeChildContext(context, childContext)
          );
        } else {
          // These two IDs are actually the same! But nothing should rely on that.
          var thisID = this._rootNodeID;
          var prevComponentID = prevComponentInstance._rootNodeID;
          ReactReconciler.unmountComponent(prevComponentInstance);

          this._renderedComponent = this._instantiateReactComponent(
            nextRenderedElement,
            this._currentElement.type
          );
          var nextMarkup = ReactReconciler.mountComponent(
            this._renderedComponent,
            thisID,
            transaction,
            this._mergeChildContext(context, childContext)
          );
          this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
        }
      },

      /**
       * @protected
       */
      _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
        ReactComponentEnvironment.replaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      },

      /**
       * @protected
       */
      _renderValidatedComponentWithoutOwnerOrContext: function() {
        var inst = this._instance;
        var renderedComponent = inst.render();
        if (false) {
          // We allow auto-mocks to proceed as if they're returning null.
          if (typeof renderedComponent === 'undefined' &&
            inst.render._isMockFunction) {
            // This is probably bad practice. Consider warning here and
            // deprecating this convenience.
            renderedComponent = null;
          }
        }

        return renderedComponent;
      },

      /**
       * @private
       */
      _renderValidatedComponent: function(childContext) {
        var renderedComponent;
        var previousContext = ReactContext.current;
        ReactContext.current = this._mergeChildContext(
          this._currentElement._context,
          childContext
        );
        ReactCurrentOwner.current = this;
        try {
          renderedComponent =
            this._renderValidatedComponentWithoutOwnerOrContext();
        } finally {
          ReactContext.current = previousContext;
          ReactCurrentOwner.current = null;
        }
        (false ? invariant(
          // TODO: An `isValidNode` function would probably be more appropriate
          renderedComponent === null || renderedComponent === false ||
          ReactElement.isValidElement(renderedComponent),
          '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
          this.getName() || 'ReactCompositeComponent'
        ) : invariant( // TODO: An `isValidNode` function would probably be more appropriate
          renderedComponent === null || renderedComponent === false ||
          ReactElement.isValidElement(renderedComponent)));
        return renderedComponent;
      },

      /**
       * Lazily allocates the refs object and stores `component` as `ref`.
       *
       * @param {string} ref Reference name.
       * @param {component} component Component to store as `ref`.
       * @final
       * @private
       */
      attachRef: function(ref, component) {
        var inst = this.getPublicInstance();
        var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
        refs[ref] = component.getPublicInstance();
      },

      /**
       * Detaches a reference name.
       *
       * @param {string} ref Name to dereference.
       * @final
       * @private
       */
      detachRef: function(ref) {
        var refs = this.getPublicInstance().refs;
        delete refs[ref];
      },

      /**
       * Get a text description of the component that can be used to identify it
       * in error messages.
       * @return {string} The name or null.
       * @internal
       */
      getName: function() {
        var type = this._currentElement.type;
        var constructor = this._instance && this._instance.constructor;
        return (
          type.displayName || (constructor && constructor.displayName) ||
          type.name || (constructor && constructor.name) ||
          null
        );
      },

      /**
       * Get the publicly accessible representation of this component - i.e. what
       * is exposed by refs and returned by React.render. Can be null for stateless
       * components.
       *
       * @return {ReactComponent} the public component instance.
       * @internal
       */
      getPublicInstance: function() {
        return this._instance;
      },

      // Stub
      _instantiateReactComponent: null

    };

    ReactPerf.measureMethods(
      ReactCompositeComponentMixin,
      'ReactCompositeComponent', {
        mountComponent: 'mountComponent',
        updateComponent: 'updateComponent',
        _renderValidatedComponent: '_renderValidatedComponent'
      }
    );

    var ReactCompositeComponent = {

      Mixin: ReactCompositeComponentMixin

    };

    module.exports = ReactCompositeComponent;

    /***/
  }),
  /* 306 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactComponentEnvironment
     */

    'use strict';

    var invariant = __webpack_require__(228);

    var injected = false;

    var ReactComponentEnvironment = {

      /**
       * Optionally injectable environment dependent cleanup hook. (server vs.
       * browser etc). Example: A browser system caches DOM nodes based on component
       * ID and must remove that cache entry when this instance is unmounted.
       */
      unmountIDFromEnvironment: null,

      /**
       * Optionally injectable hook for swapping out mount images in the middle of
       * the tree.
       */
      replaceNodeWithMarkupByID: null,

      /**
       * Optionally injectable hook for processing a queue of child updates. Will
       * later move into MultiChildComponents.
       */
      processChildrenUpdates: null,

      injection: {
        injectEnvironment: function(environment) {
          (false ? invariant(
            !injected,
            'ReactCompositeComponent: injectEnvironment() can only be called once.'
          ) : invariant(!injected));
          ReactComponentEnvironment.unmountIDFromEnvironment =
            environment.unmountIDFromEnvironment;
          ReactComponentEnvironment.replaceNodeWithMarkupByID =
            environment.replaceNodeWithMarkupByID;
          ReactComponentEnvironment.processChildrenUpdates =
            environment.processChildrenUpdates;
          injected = true;
        }
      }

    };

    module.exports = ReactComponentEnvironment;

    /***/
  }),
  /* 307 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule shouldUpdateReactComponent
     * @typechecks static-only
     */

    'use strict';

    var warning = __webpack_require__(236);

    /**
     * Given a `prevElement` and `nextElement`, determines if the existing
     * instance should be updated as opposed to being destroyed or replaced by a new
     * instance. Both arguments are elements. This ensures that this logic can
     * operate on stateless trees without any backing instance.
     *
     * @param {?object} prevElement
     * @param {?object} nextElement
     * @return {boolean} True if the existing instance should be updated.
     * @protected
     */
    function shouldUpdateReactComponent(prevElement, nextElement) {
      if (prevElement != null && nextElement != null) {
        var prevType = typeof prevElement;
        var nextType = typeof nextElement;
        if (prevType === 'string' || prevType === 'number') {
          return (nextType === 'string' || nextType === 'number');
        } else {
          if (nextType === 'object' &&
            prevElement.type === nextElement.type &&
            prevElement.key === nextElement.key) {
            var ownersMatch = prevElement._owner === nextElement._owner;
            var prevName = null;
            var nextName = null;
            var nextDisplayName = null;
            if (false) {
              if (!ownersMatch) {
                if (prevElement._owner != null &&
                  prevElement._owner.getPublicInstance() != null &&
                  prevElement._owner.getPublicInstance().constructor != null) {
                  prevName =
                    prevElement._owner.getPublicInstance().constructor.displayName;
                }
                if (nextElement._owner != null &&
                  nextElement._owner.getPublicInstance() != null &&
                  nextElement._owner.getPublicInstance().constructor != null) {
                  nextName =
                    nextElement._owner.getPublicInstance().constructor.displayName;
                }
                if (nextElement.type != null &&
                  nextElement.type.displayName != null) {
                  nextDisplayName = nextElement.type.displayName;
                }
                if (nextElement.type != null && typeof nextElement.type === 'string') {
                  nextDisplayName = nextElement.type;
                }
                if (typeof nextElement.type !== 'string' ||
                  nextElement.type === 'input' ||
                  nextElement.type === 'textarea') {
                  if ((prevElement._owner != null &&
                      prevElement._owner._isOwnerNecessary === false) ||
                    (nextElement._owner != null &&
                      nextElement._owner._isOwnerNecessary === false)) {
                    if (prevElement._owner != null) {
                      prevElement._owner._isOwnerNecessary = true;
                    }
                    if (nextElement._owner != null) {
                      nextElement._owner._isOwnerNecessary = true;
                    }
                    ("production" !== process.env.NODE_ENV ? warning(
                      false,
                      '<%s /> is being rendered by both %s and %s using the same ' +
                      'key (%s) in the same place. Currently, this means that ' +
                      'they don\'t preserve state. This behavior should be very ' +
                      'rare so we\'re considering deprecating it. Please contact ' +
                      'the React team and explain your use case so that we can ' +
                      'take that into consideration.',
                      nextDisplayName || 'Unknown Component',
                      prevName || '[Unknown]',
                      nextName || '[Unknown]',
                      prevElement.key
                    ) : null);
                  }
                }
              }
            }
            return ownersMatch;
          }
        }
      }
      return false;
    }

    module.exports = shouldUpdateReactComponent;

    /***/
  }),
  /* 308 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMComponent
     * @typechecks static-only
     */

    /* global hasOwnProperty:true */

    'use strict';

    var CSSPropertyOperations = __webpack_require__(270);
    var DOMProperty = __webpack_require__(265);
    var DOMPropertyOperations = __webpack_require__(264);
    var ReactBrowserEventEmitter = __webpack_require__(289);
    var ReactComponentBrowserEnvironment =
      __webpack_require__(268);
    var ReactMount = __webpack_require__(288);
    var ReactMultiChild = __webpack_require__(309);
    var ReactPerf = __webpack_require__(249);

    var assign = __webpack_require__(234);
    var escapeTextContentForBrowser = __webpack_require__(267);
    var invariant = __webpack_require__(228);
    var isEventSupported = __webpack_require__(296);
    var keyOf = __webpack_require__(260);
    var warning = __webpack_require__(236);

    var deleteListener = ReactBrowserEventEmitter.deleteListener;
    var listenTo = ReactBrowserEventEmitter.listenTo;
    var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

    // For quickly matching children type, to test if can be treated as content.
    var CONTENT_TYPES = { 'string': true, 'number': true };

    var STYLE = keyOf({ style: null });

    var ELEMENT_NODE_TYPE = 1;

    /**
     * Optionally injectable operations for mutating the DOM
     */
    var BackendIDOperations = null;

    /**
     * @param {?object} props
     */
    function assertValidProps(props) {
      if (!props) {
        return;
      }
      // Note the use of `==` which checks for null or undefined.
      if (props.dangerouslySetInnerHTML != null) {
        (false ? invariant(
          props.children == null,
          'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
        ) : invariant(props.children == null));
        (false ? invariant(
          typeof props.dangerouslySetInnerHTML === 'object' &&
          '__html' in props.dangerouslySetInnerHTML,
          '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
          'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
          'for more information.'
        ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
          '__html' in props.dangerouslySetInnerHTML));
      }
      if (false) {
        ("production" !== process.env.NODE_ENV ? warning(
          props.innerHTML == null,
          'Directly setting property `innerHTML` is not permitted. ' +
          'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
        ) : null);
        ("production" !== process.env.NODE_ENV ? warning(
          !props.contentEditable || props.children == null,
          'A component is `contentEditable` and contains `children` managed by ' +
          'React. It is now your responsibility to guarantee that none of ' +
          'those nodes are unexpectedly modified or duplicated. This is ' +
          'probably not intentional.'
        ) : null);
      }
      (false ? invariant(
        props.style == null || typeof props.style === 'object',
        'The `style` prop expects a mapping from style properties to values, ' +
        'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
        'using JSX.'
      ) : invariant(props.style == null || typeof props.style === 'object'));
    }

    function putListener(id, registrationName, listener, transaction) {
      if (false) {
        // IE8 has no API for event capturing and the `onScroll` event doesn't
        // bubble.
        ("production" !== process.env.NODE_ENV ? warning(
          registrationName !== 'onScroll' || isEventSupported('scroll', true),
          'This browser doesn\'t support the `onScroll` event'
        ) : null);
      }
      var container = ReactMount.findReactContainerForID(id);
      if (container) {
        var doc = container.nodeType === ELEMENT_NODE_TYPE ?
          container.ownerDocument :
          container;
        listenTo(registrationName, doc);
      }
      transaction.getPutListenerQueue().enqueuePutListener(
        id,
        registrationName,
        listener
      );
    }

    // For HTML, certain tags should omit their close tag. We keep a whitelist for
    // those special cased tags.

    var omittedCloseTags = {
      'area': true,
      'base': true,
      'br': true,
      'col': true,
      'embed': true,
      'hr': true,
      'img': true,
      'input': true,
      'keygen': true,
      'link': true,
      'meta': true,
      'param': true,
      'source': true,
      'track': true,
      'wbr': true
      // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };

    // We accept any tag to be rendered but since this gets injected into abitrary
    // HTML, we want to make sure that it's a safe tag.
    // http://www.w3.org/TR/REC-xml/#NT-Name

    var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
    var validatedTagCache = {};
    var hasOwnProperty = {}.hasOwnProperty;

    function validateDangerousTag(tag) {
      if (!hasOwnProperty.call(validatedTagCache, tag)) {
        (false ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
        validatedTagCache[tag] = true;
      }
    }

    /**
     * Creates a new React class that is idempotent and capable of containing other
     * React components. It accepts event listeners and DOM properties that are
     * valid according to `DOMProperty`.
     *
     *  - Event listeners: `onClick`, `onMouseDown`, etc.
     *  - DOM properties: `className`, `name`, `title`, etc.
     *
     * The `style` property functions differently from the DOM API. It accepts an
     * object mapping of style properties to values.
     *
     * @constructor ReactDOMComponent
     * @extends ReactMultiChild
     */
    function ReactDOMComponent(tag) {
      validateDangerousTag(tag);
      this._tag = tag;
      this._renderedChildren = null;
      this._previousStyleCopy = null;
      this._rootNodeID = null;
    }

    ReactDOMComponent.displayName = 'ReactDOMComponent';

    ReactDOMComponent.Mixin = {

      construct: function(element) {
        this._currentElement = element;
      },

      /**
       * Generates root tag markup then recurses. This method has side effects and
       * is not idempotent.
       *
       * @internal
       * @param {string} rootID The root DOM ID for this node.
       * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
       * @return {string} The computed markup.
       */
      mountComponent: function(rootID, transaction, context) {
        this._rootNodeID = rootID;
        assertValidProps(this._currentElement.props);
        var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
        return (
          this._createOpenTagMarkupAndPutListeners(transaction) +
          this._createContentMarkup(transaction, context) +
          closeTag
        );
      },

      /**
       * Creates markup for the open tag and all attributes.
       *
       * This method has side effects because events get registered.
       *
       * Iterating over object properties is faster than iterating over arrays.
       * @see http://jsperf.com/obj-vs-arr-iteration
       *
       * @private
       * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
       * @return {string} Markup of opening tag.
       */
      _createOpenTagMarkupAndPutListeners: function(transaction) {
        var props = this._currentElement.props;
        var ret = '<' + this._tag;

        for (var propKey in props) {
          if (!props.hasOwnProperty(propKey)) {
            continue;
          }
          var propValue = props[propKey];
          if (propValue == null) {
            continue;
          }
          if (registrationNameModules.hasOwnProperty(propKey)) {
            putListener(this._rootNodeID, propKey, propValue, transaction);
          } else {
            if (propKey === STYLE) {
              if (propValue) {
                propValue = this._previousStyleCopy = assign({}, props.style);
              }
              propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
            }
            var markup =
              DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
            if (markup) {
              ret += ' ' + markup;
            }
          }
        }

        // For static pages, no need to put React ID and checksum. Saves lots of
        // bytes.
        if (transaction.renderToStaticMarkup) {
          return ret + '>';
        }

        var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
        return ret + ' ' + markupForID + '>';
      },

      /**
       * Creates markup for the content between the tags.
       *
       * @private
       * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
       * @param {object} context
       * @return {string} Content markup.
       */
      _createContentMarkup: function(transaction, context) {
        var prefix = '';
        if (this._tag === 'listing' ||
          this._tag === 'pre' ||
          this._tag === 'textarea') {
          // Add an initial newline because browsers ignore the first newline in
          // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
          prefix = '\n';
        }

        var props = this._currentElement.props;

        // Intentional use of != to avoid catching zero/false.
        var innerHTML = props.dangerouslySetInnerHTML;
        if (innerHTML != null) {
          if (innerHTML.__html != null) {
            return prefix + innerHTML.__html;
          }
        } else {
          var contentToUse =
            CONTENT_TYPES[typeof props.children] ? props.children : null;
          var childrenToUse = contentToUse != null ? null : props.children;
          if (contentToUse != null) {
            return prefix + escapeTextContentForBrowser(contentToUse);
          } else if (childrenToUse != null) {
            var mountImages = this.mountChildren(
              childrenToUse,
              transaction,
              context
            );
            return prefix + mountImages.join('');
          }
        }
        return prefix;
      },

      receiveComponent: function(nextElement, transaction, context) {
        var prevElement = this._currentElement;
        this._currentElement = nextElement;
        this.updateComponent(transaction, prevElement, nextElement, context);
      },

      /**
       * Updates a native DOM component after it has already been allocated and
       * attached to the DOM. Reconciles the root DOM node, then recurses.
       *
       * @param {ReactReconcileTransaction} transaction
       * @param {ReactElement} prevElement
       * @param {ReactElement} nextElement
       * @internal
       * @overridable
       */
      updateComponent: function(transaction, prevElement, nextElement, context) {
        assertValidProps(this._currentElement.props);
        this._updateDOMProperties(prevElement.props, transaction);
        this._updateDOMChildren(prevElement.props, transaction, context);
      },

      /**
       * Reconciles the properties by detecting differences in property values and
       * updating the DOM as necessary. This function is probably the single most
       * critical path for performance optimization.
       *
       * TODO: Benchmark whether checking for changed values in memory actually
       *       improves performance (especially statically positioned elements).
       * TODO: Benchmark the effects of putting this at the top since 99% of props
       *       do not change for a given reconciliation.
       * TODO: Benchmark areas that can be improved with caching.
       *
       * @private
       * @param {object} lastProps
       * @param {ReactReconcileTransaction} transaction
       */
      _updateDOMProperties: function(lastProps, transaction) {
        var nextProps = this._currentElement.props;
        var propKey;
        var styleName;
        var styleUpdates;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) ||
            !lastProps.hasOwnProperty(propKey)) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = this._previousStyleCopy;
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = '';
              }
            }
            this._previousStyleCopy = null;
          } else if (registrationNameModules.hasOwnProperty(propKey)) {
            deleteListener(this._rootNodeID, propKey);
          } else if (
            DOMProperty.isStandardName[propKey] ||
            DOMProperty.isCustomAttribute(propKey)) {
            BackendIDOperations.deletePropertyByID(
              this._rootNodeID,
              propKey
            );
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = propKey === STYLE ?
            this._previousStyleCopy :
            lastProps[propKey];
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
            continue;
          }
          if (propKey === STYLE) {
            if (nextProp) {
              nextProp = this._previousStyleCopy = assign({}, nextProp);
            } else {
              this._previousStyleCopy = null;
            }
            if (lastProp) {
              // Unset styles on `lastProp` but not on `nextProp`.
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) &&
                  (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  styleUpdates = styleUpdates || {};
                  styleUpdates[styleName] = '';
                }
              }
              // Update styles that changed since `lastProp`.
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) &&
                  lastProp[styleName] !== nextProp[styleName]) {
                  styleUpdates = styleUpdates || {};
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              // Relies on `updateStylesByID` not mutating `styleUpdates`.
              styleUpdates = nextProp;
            }
          } else if (registrationNameModules.hasOwnProperty(propKey)) {
            putListener(this._rootNodeID, propKey, nextProp, transaction);
          } else if (
            DOMProperty.isStandardName[propKey] ||
            DOMProperty.isCustomAttribute(propKey)) {
            BackendIDOperations.updatePropertyByID(
              this._rootNodeID,
              propKey,
              nextProp
            );
          }
        }
        if (styleUpdates) {
          BackendIDOperations.updateStylesByID(
            this._rootNodeID,
            styleUpdates
          );
        }
      },

      /**
       * Reconciles the children with the various properties that affect the
       * children content.
       *
       * @param {object} lastProps
       * @param {ReactReconcileTransaction} transaction
       */
      _updateDOMChildren: function(lastProps, transaction, context) {
        var nextProps = this._currentElement.props;

        var lastContent =
          CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
        var nextContent =
          CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

        var lastHtml =
          lastProps.dangerouslySetInnerHTML &&
          lastProps.dangerouslySetInnerHTML.__html;
        var nextHtml =
          nextProps.dangerouslySetInnerHTML &&
          nextProps.dangerouslySetInnerHTML.__html;

        // Note the use of `!=` which checks for null or undefined.
        var lastChildren = lastContent != null ? null : lastProps.children;
        var nextChildren = nextContent != null ? null : nextProps.children;

        // If we're switching from children to content/html or vice versa, remove
        // the old content
        var lastHasContentOrHtml = lastContent != null || lastHtml != null;
        var nextHasContentOrHtml = nextContent != null || nextHtml != null;
        if (lastChildren != null && nextChildren == null) {
          this.updateChildren(null, transaction, context);
        } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
          this.updateTextContent('');
        }

        if (nextContent != null) {
          if (lastContent !== nextContent) {
            this.updateTextContent('' + nextContent);
          }
        } else if (nextHtml != null) {
          if (lastHtml !== nextHtml) {
            BackendIDOperations.updateInnerHTMLByID(
              this._rootNodeID,
              nextHtml
            );
          }
        } else if (nextChildren != null) {
          this.updateChildren(nextChildren, transaction, context);
        }
      },

      /**
       * Destroys all event registrations for this instance. Does not remove from
       * the DOM. That must be done by the parent.
       *
       * @internal
       */
      unmountComponent: function() {
        this.unmountChildren();
        ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
        ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
        this._rootNodeID = null;
      }

    };

    ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
      mountComponent: 'mountComponent',
      updateComponent: 'updateComponent'
    });

    assign(
      ReactDOMComponent.prototype,
      ReactDOMComponent.Mixin,
      ReactMultiChild.Mixin
    );

    ReactDOMComponent.injection = {
      injectIDOperations: function(IDOperations) {
        ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
      }
    };

    module.exports = ReactDOMComponent;

    /***/
  }),
  /* 309 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactMultiChild
     * @typechecks static-only
     */

    'use strict';

    var ReactComponentEnvironment = __webpack_require__(306);
    var ReactMultiChildUpdateTypes = __webpack_require__(285);

    var ReactReconciler = __webpack_require__(250);
    var ReactChildReconciler = __webpack_require__(310);

    /**
     * Updating children of a component may trigger recursive updates. The depth is
     * used to batch recursive updates to render markup more efficiently.
     *
     * @type {number}
     * @private
     */
    var updateDepth = 0;

    /**
     * Queue of update configuration objects.
     *
     * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
     *
     * @type {array<object>}
     * @private
     */
    var updateQueue = [];

    /**
     * Queue of markup to be rendered.
     *
     * @type {array<string>}
     * @private
     */
    var markupQueue = [];

    /**
     * Enqueues markup to be rendered and inserted at a supplied index.
     *
     * @param {string} parentID ID of the parent component.
     * @param {string} markup Markup that renders into an element.
     * @param {number} toIndex Destination index.
     * @private
     */
    function enqueueMarkup(parentID, markup, toIndex) {
      // NOTE: Null values reduce hidden classes.
      updateQueue.push({
        parentID: parentID,
        parentNode: null,
        type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
        markupIndex: markupQueue.push(markup) - 1,
        textContent: null,
        fromIndex: null,
        toIndex: toIndex
      });
    }

    /**
     * Enqueues moving an existing element to another index.
     *
     * @param {string} parentID ID of the parent component.
     * @param {number} fromIndex Source index of the existing element.
     * @param {number} toIndex Destination index of the element.
     * @private
     */
    function enqueueMove(parentID, fromIndex, toIndex) {
      // NOTE: Null values reduce hidden classes.
      updateQueue.push({
        parentID: parentID,
        parentNode: null,
        type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
        markupIndex: null,
        textContent: null,
        fromIndex: fromIndex,
        toIndex: toIndex
      });
    }

    /**
     * Enqueues removing an element at an index.
     *
     * @param {string} parentID ID of the parent component.
     * @param {number} fromIndex Index of the element to remove.
     * @private
     */
    function enqueueRemove(parentID, fromIndex) {
      // NOTE: Null values reduce hidden classes.
      updateQueue.push({
        parentID: parentID,
        parentNode: null,
        type: ReactMultiChildUpdateTypes.REMOVE_NODE,
        markupIndex: null,
        textContent: null,
        fromIndex: fromIndex,
        toIndex: null
      });
    }

    /**
     * Enqueues setting the text content.
     *
     * @param {string} parentID ID of the parent component.
     * @param {string} textContent Text content to set.
     * @private
     */
    function enqueueTextContent(parentID, textContent) {
      // NOTE: Null values reduce hidden classes.
      updateQueue.push({
        parentID: parentID,
        parentNode: null,
        type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
        markupIndex: null,
        textContent: textContent,
        fromIndex: null,
        toIndex: null
      });
    }

    /**
     * Processes any enqueued updates.
     *
     * @private
     */
    function processQueue() {
      if (updateQueue.length) {
        ReactComponentEnvironment.processChildrenUpdates(
          updateQueue,
          markupQueue
        );
        clearQueue();
      }
    }

    /**
     * Clears any enqueued updates.
     *
     * @private
     */
    function clearQueue() {
      updateQueue.length = 0;
      markupQueue.length = 0;
    }

    /**
     * ReactMultiChild are capable of reconciling multiple children.
     *
     * @class ReactMultiChild
     * @internal
     */
    var ReactMultiChild = {

      /**
       * Provides common functionality for components that must reconcile multiple
       * children. This is used by `ReactDOMComponent` to mount, update, and
       * unmount child components.
       *
       * @lends {ReactMultiChild.prototype}
       */
      Mixin: {

        /**
         * Generates a "mount image" for each of the supplied children. In the case
         * of `ReactDOMComponent`, a mount image is a string of markup.
         *
         * @param {?object} nestedChildren Nested child maps.
         * @return {array} An array of mounted representations.
         * @internal
         */
        mountChildren: function(nestedChildren, transaction, context) {
          var children = ReactChildReconciler.instantiateChildren(
            nestedChildren, transaction, context
          );
          this._renderedChildren = children;
          var mountImages = [];
          var index = 0;
          for (var name in children) {
            if (children.hasOwnProperty(name)) {
              var child = children[name];
              // Inlined for performance, see `ReactInstanceHandles.createReactID`.
              var rootID = this._rootNodeID + name;
              var mountImage = ReactReconciler.mountComponent(
                child,
                rootID,
                transaction,
                context
              );
              child._mountIndex = index;
              mountImages.push(mountImage);
              index++;
            }
          }
          return mountImages;
        },

        /**
         * Replaces any rendered children with a text content string.
         *
         * @param {string} nextContent String of content.
         * @internal
         */
        updateTextContent: function(nextContent) {
          updateDepth++;
          var errorThrown = true;
          try {
            var prevChildren = this._renderedChildren;
            // Remove any rendered children.
            ReactChildReconciler.unmountChildren(prevChildren);
            // TODO: The setTextContent operation should be enough
            for (var name in prevChildren) {
              if (prevChildren.hasOwnProperty(name)) {
                this._unmountChildByName(prevChildren[name], name);
              }
            }
            // Set new text content.
            this.setTextContent(nextContent);
            errorThrown = false;
          } finally {
            updateDepth--;
            if (!updateDepth) {
              if (errorThrown) {
                clearQueue();
              } else {
                processQueue();
              }
            }
          }
        },

        /**
         * Updates the rendered children with new children.
         *
         * @param {?object} nextNestedChildren Nested child maps.
         * @param {ReactReconcileTransaction} transaction
         * @internal
         */
        updateChildren: function(nextNestedChildren, transaction, context) {
          updateDepth++;
          var errorThrown = true;
          try {
            this._updateChildren(nextNestedChildren, transaction, context);
            errorThrown = false;
          } finally {
            updateDepth--;
            if (!updateDepth) {
              if (errorThrown) {
                clearQueue();
              } else {
                processQueue();
              }
            }

          }
        },

        /**
         * Improve performance by isolating this hot code path from the try/catch
         * block in `updateChildren`.
         *
         * @param {?object} nextNestedChildren Nested child maps.
         * @param {ReactReconcileTransaction} transaction
         * @final
         * @protected
         */
        _updateChildren: function(nextNestedChildren, transaction, context) {
          var prevChildren = this._renderedChildren;
          var nextChildren = ReactChildReconciler.updateChildren(
            prevChildren, nextNestedChildren, transaction, context
          );
          this._renderedChildren = nextChildren;
          if (!nextChildren && !prevChildren) {
            return;
          }
          var name;
          // `nextIndex` will increment for each child in `nextChildren`, but
          // `lastIndex` will be the last index visited in `prevChildren`.
          var lastIndex = 0;
          var nextIndex = 0;
          for (name in nextChildren) {
            if (!nextChildren.hasOwnProperty(name)) {
              continue;
            }
            var prevChild = prevChildren && prevChildren[name];
            var nextChild = nextChildren[name];
            if (prevChild === nextChild) {
              this.moveChild(prevChild, nextIndex, lastIndex);
              lastIndex = Math.max(prevChild._mountIndex, lastIndex);
              prevChild._mountIndex = nextIndex;
            } else {
              if (prevChild) {
                // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
                lastIndex = Math.max(prevChild._mountIndex, lastIndex);
                this._unmountChildByName(prevChild, name);
              }
              // The child must be instantiated before it's mounted.
              this._mountChildByNameAtIndex(
                nextChild, name, nextIndex, transaction, context
              );
            }
            nextIndex++;
          }
          // Remove children that are no longer present.
          for (name in prevChildren) {
            if (prevChildren.hasOwnProperty(name) &&
              !(nextChildren && nextChildren.hasOwnProperty(name))) {
              this._unmountChildByName(prevChildren[name], name);
            }
          }
        },

        /**
         * Unmounts all rendered children. This should be used to clean up children
         * when this component is unmounted.
         *
         * @internal
         */
        unmountChildren: function() {
          var renderedChildren = this._renderedChildren;
          ReactChildReconciler.unmountChildren(renderedChildren);
          this._renderedChildren = null;
        },

        /**
         * Moves a child component to the supplied index.
         *
         * @param {ReactComponent} child Component to move.
         * @param {number} toIndex Destination index of the element.
         * @param {number} lastIndex Last index visited of the siblings of `child`.
         * @protected
         */
        moveChild: function(child, toIndex, lastIndex) {
          // If the index of `child` is less than `lastIndex`, then it needs to
          // be moved. Otherwise, we do not need to move it because a child will be
          // inserted or moved before `child`.
          if (child._mountIndex < lastIndex) {
            enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
          }
        },

        /**
         * Creates a child component.
         *
         * @param {ReactComponent} child Component to create.
         * @param {string} mountImage Markup to insert.
         * @protected
         */
        createChild: function(child, mountImage) {
          enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
        },

        /**
         * Removes a child component.
         *
         * @param {ReactComponent} child Child to remove.
         * @protected
         */
        removeChild: function(child) {
          enqueueRemove(this._rootNodeID, child._mountIndex);
        },

        /**
         * Sets this text content string.
         *
         * @param {string} textContent Text content to set.
         * @protected
         */
        setTextContent: function(textContent) {
          enqueueTextContent(this._rootNodeID, textContent);
        },

        /**
         * Mounts a child with the supplied name.
         *
         * NOTE: This is part of `updateChildren` and is here for readability.
         *
         * @param {ReactComponent} child Component to mount.
         * @param {string} name Name of the child.
         * @param {number} index Index at which to insert the child.
         * @param {ReactReconcileTransaction} transaction
         * @private
         */
        _mountChildByNameAtIndex: function(
          child,
          name,
          index,
          transaction,
          context) {
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(
            child,
            rootID,
            transaction,
            context
          );
          child._mountIndex = index;
          this.createChild(child, mountImage);
        },

        /**
         * Unmounts a rendered child by name.
         *
         * NOTE: This is part of `updateChildren` and is here for readability.
         *
         * @param {ReactComponent} child Component to unmount.
         * @param {string} name Name of the child in `this._renderedChildren`.
         * @private
         */
        _unmountChildByName: function(child, name) {
          this.removeChild(child);
          child._mountIndex = null;
        }

      }

    };

    module.exports = ReactMultiChild;

    /***/
  }),
  /* 310 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactChildReconciler
     * @typechecks static-only
     */

    'use strict';

    var ReactReconciler = __webpack_require__(250);

    var flattenChildren = __webpack_require__(311);
    var instantiateReactComponent = __webpack_require__(304);
    var shouldUpdateReactComponent = __webpack_require__(307);

    /**
     * ReactChildReconciler provides helpers for initializing or updating a set of
     * children. Its output is suitable for passing it onto ReactMultiChild which
     * does diffed reordering and insertion.
     */
    var ReactChildReconciler = {

      /**
       * Generates a "mount image" for each of the supplied children. In the case
       * of `ReactDOMComponent`, a mount image is a string of markup.
       *
       * @param {?object} nestedChildNodes Nested child maps.
       * @return {?object} A set of child instances.
       * @internal
       */
      instantiateChildren: function(nestedChildNodes, transaction, context) {
        var children = flattenChildren(nestedChildNodes);
        for (var name in children) {
          if (children.hasOwnProperty(name)) {
            var child = children[name];
            // The rendered children must be turned into instances as they're
            // mounted.
            var childInstance = instantiateReactComponent(child, null);
            children[name] = childInstance;
          }
        }
        return children;
      },

      /**
       * Updates the rendered children and returns a new set of children.
       *
       * @param {?object} prevChildren Previously initialized set of children.
       * @param {?object} nextNestedChildNodes Nested child maps.
       * @param {ReactReconcileTransaction} transaction
       * @param {object} context
       * @return {?object} A new set of child instances.
       * @internal
       */
      updateChildren: function(
        prevChildren,
        nextNestedChildNodes,
        transaction,
        context) {
        // We currently don't have a way to track moves here but if we use iterators
        // instead of for..in we can zip the iterators and check if an item has
        // moved.
        // TODO: If nothing has changed, return the prevChildren object so that we
        // can quickly bailout if nothing has changed.
        var nextChildren = flattenChildren(nextNestedChildNodes);
        if (!nextChildren && !prevChildren) {
          return null;
        }
        var name;
        for (name in nextChildren) {
          if (!nextChildren.hasOwnProperty(name)) {
            continue;
          }
          var prevChild = prevChildren && prevChildren[name];
          var prevElement = prevChild && prevChild._currentElement;
          var nextElement = nextChildren[name];
          if (shouldUpdateReactComponent(prevElement, nextElement)) {
            ReactReconciler.receiveComponent(
              prevChild, nextElement, transaction, context
            );
            nextChildren[name] = prevChild;
          } else {
            if (prevChild) {
              ReactReconciler.unmountComponent(prevChild, name);
            }
            // The child must be instantiated before it's mounted.
            var nextChildInstance = instantiateReactComponent(
              nextElement,
              null
            );
            nextChildren[name] = nextChildInstance;
          }
        }
        // Unmount children that are no longer present.
        for (name in prevChildren) {
          if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren.hasOwnProperty(name))) {
            ReactReconciler.unmountComponent(prevChildren[name]);
          }
        }
        return nextChildren;
      },

      /**
       * Unmounts all rendered children. This should be used to clean up children
       * when this component is unmounted.
       *
       * @param {?object} renderedChildren Previously initialized set of children.
       * @internal
       */
      unmountChildren: function(renderedChildren) {
        for (var name in renderedChildren) {
          var renderedChild = renderedChildren[name];
          ReactReconciler.unmountComponent(renderedChild);
        }
      }

    };

    module.exports = ReactChildReconciler;

    /***/
  }),
  /* 311 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule flattenChildren
     */

    'use strict';

    var traverseAllChildren = __webpack_require__(239);
    var warning = __webpack_require__(236);

    /**
     * @param {function} traverseContext Context passed through traversal.
     * @param {?ReactComponent} child React child component.
     * @param {!string} name String name of key path to child.
     */
    function flattenSingleChildIntoContext(traverseContext, child, name) {
      // We found a component instance.
      var result = traverseContext;
      var keyUnique = !result.hasOwnProperty(name);
      if (false) {
        ("production" !== process.env.NODE_ENV ? warning(
          keyUnique,
          'flattenChildren(...): Encountered two children with the same key, ' +
          '`%s`. Child keys must be unique; when two children share a key, only ' +
          'the first child will be used.',
          name
        ) : null);
      }
      if (keyUnique && child != null) {
        result[name] = child;
      }
    }

    /**
     * Flattens children that are typically specified as `props.children`. Any null
     * children will not be included in the resulting object.
     * @return {!object} flattened children keyed by name.
     */
    function flattenChildren(children) {
      if (children == null) {
        return children;
      }
      var result = {};
      traverseAllChildren(children, flattenSingleChildIntoContext, result);
      return result;
    }

    module.exports = flattenChildren;

    /***/
  }),
  /* 312 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDefaultInjection
     */

    'use strict';

    var BeforeInputEventPlugin = __webpack_require__(313);
    var ChangeEventPlugin = __webpack_require__(321);
    var ClientReactRootIndex = __webpack_require__(323);
    var DefaultEventPluginOrder = __webpack_require__(324);
    var EnterLeaveEventPlugin = __webpack_require__(325);
    var ExecutionEnvironment = __webpack_require__(272);
    var HTMLDOMPropertyConfig = __webpack_require__(329);
    var MobileSafariClickEventPlugin = __webpack_require__(330);
    var ReactBrowserComponentMixin = __webpack_require__(331);
    var ReactClass = __webpack_require__(258);
    var ReactComponentBrowserEnvironment =
      __webpack_require__(268);
    var ReactDefaultBatchingStrategy = __webpack_require__(333);
    var ReactDOMComponent = __webpack_require__(308);
    var ReactDOMButton = __webpack_require__(334);
    var ReactDOMForm = __webpack_require__(337);
    var ReactDOMImg = __webpack_require__(339);
    var ReactDOMIDOperations = __webpack_require__(269);
    var ReactDOMIframe = __webpack_require__(340);
    var ReactDOMInput = __webpack_require__(341);
    var ReactDOMOption = __webpack_require__(344);
    var ReactDOMSelect = __webpack_require__(345);
    var ReactDOMTextarea = __webpack_require__(346);
    var ReactDOMTextComponent = __webpack_require__(263);
    var ReactElement = __webpack_require__(232);
    var ReactEventListener = __webpack_require__(347);
    var ReactInjection = __webpack_require__(350);
    var ReactInstanceHandles = __webpack_require__(240);
    var ReactMount = __webpack_require__(288);
    var ReactReconcileTransaction = __webpack_require__(351);
    var SelectEventPlugin = __webpack_require__(357);
    var ServerReactRootIndex = __webpack_require__(359);
    var SimpleEventPlugin = __webpack_require__(360);
    var SVGDOMPropertyConfig = __webpack_require__(369);

    var createFullPageComponent = __webpack_require__(370);

    function autoGenerateWrapperClass(type) {
      return ReactClass.createClass({
        tagName: type.toUpperCase(),
        render: function() {
          return new ReactElement(
            type,
            null,
            null,
            null,
            null,
            this.props
          );
        }
      });
    }

    function inject() {
      ReactInjection.EventEmitter.injectReactEventListener(
        ReactEventListener
      );

      /**
       * Inject modules for resolving DOM hierarchy and plugin ordering.
       */
      ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
      ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
      ReactInjection.EventPluginHub.injectMount(ReactMount);

      /**
       * Some important event plugins included by default (without having to require
       * them).
       */
      ReactInjection.EventPluginHub.injectEventPluginsByName({
        SimpleEventPlugin: SimpleEventPlugin,
        EnterLeaveEventPlugin: EnterLeaveEventPlugin,
        ChangeEventPlugin: ChangeEventPlugin,
        MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
        SelectEventPlugin: SelectEventPlugin,
        BeforeInputEventPlugin: BeforeInputEventPlugin
      });

      ReactInjection.NativeComponent.injectGenericComponentClass(
        ReactDOMComponent
      );

      ReactInjection.NativeComponent.injectTextComponentClass(
        ReactDOMTextComponent
      );

      ReactInjection.NativeComponent.injectAutoWrapper(
        autoGenerateWrapperClass
      );

      // This needs to happen before createFullPageComponent() otherwise the mixin
      // won't be included.
      ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

      ReactInjection.NativeComponent.injectComponentClasses({
        'button': ReactDOMButton,
        'form': ReactDOMForm,
        'iframe': ReactDOMIframe,
        'img': ReactDOMImg,
        'input': ReactDOMInput,
        'option': ReactDOMOption,
        'select': ReactDOMSelect,
        'textarea': ReactDOMTextarea,

        'html': createFullPageComponent('html'),
        'head': createFullPageComponent('head'),
        'body': createFullPageComponent('body')
      });

      ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
      ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

      ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

      ReactInjection.Updates.injectReconcileTransaction(
        ReactReconcileTransaction
      );
      ReactInjection.Updates.injectBatchingStrategy(
        ReactDefaultBatchingStrategy
      );

      ReactInjection.RootIndex.injectCreateReactRootIndex(
        ExecutionEnvironment.canUseDOM ?
        ClientReactRootIndex.createReactRootIndex :
        ServerReactRootIndex.createReactRootIndex
      );

      ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
      ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

      if (false) {
        var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
        if ((/[?&]react_perf\b/).test(url)) {
          var ReactDefaultPerf = require("./ReactDefaultPerf");
          ReactDefaultPerf.start();
        }
      }
    }

    module.exports = {
      inject: inject
    };

    /***/
  }),
  /* 313 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015 Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule BeforeInputEventPlugin
     * @typechecks static-only
     */

    'use strict';

    var EventConstants = __webpack_require__(226);
    var EventPropagators = __webpack_require__(314);
    var ExecutionEnvironment = __webpack_require__(272);
    var FallbackCompositionState = __webpack_require__(315);
    var SyntheticCompositionEvent = __webpack_require__(317);
    var SyntheticInputEvent = __webpack_require__(320);

    var keyOf = __webpack_require__(260);

    var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;

    var canUseCompositionEvent = (
      ExecutionEnvironment.canUseDOM &&
      'CompositionEvent' in window
    );

    var documentMode = null;
    if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
      documentMode = document.documentMode;
    }

    // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = (
      ExecutionEnvironment.canUseDOM &&
      'TextEvent' in window &&
      !documentMode &&
      !isPresto()
    );

    // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = (
      ExecutionEnvironment.canUseDOM &&
      (
        (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
      )
    );

    /**
     * Opera <= 12 includes TextEvent in window, but does not fire
     * text input events. Rely on keypress instead.
     */
    function isPresto() {
      var opera = window.opera;
      return (
        typeof opera === 'object' &&
        typeof opera.version === 'function' &&
        parseInt(opera.version(), 10) <= 12
      );
    }

    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

    var topLevelTypes = EventConstants.topLevelTypes;

    // Events and their corresponding property names.
    var eventTypes = {
      beforeInput: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onBeforeInput: null }),
          captured: keyOf({ onBeforeInputCapture: null })
        },
        dependencies: [
          topLevelTypes.topCompositionEnd,
          topLevelTypes.topKeyPress,
          topLevelTypes.topTextInput,
          topLevelTypes.topPaste
        ]
      },
      compositionEnd: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onCompositionEnd: null }),
          captured: keyOf({ onCompositionEndCapture: null })
        },
        dependencies: [
          topLevelTypes.topBlur,
          topLevelTypes.topCompositionEnd,
          topLevelTypes.topKeyDown,
          topLevelTypes.topKeyPress,
          topLevelTypes.topKeyUp,
          topLevelTypes.topMouseDown
        ]
      },
      compositionStart: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onCompositionStart: null }),
          captured: keyOf({ onCompositionStartCapture: null })
        },
        dependencies: [
          topLevelTypes.topBlur,
          topLevelTypes.topCompositionStart,
          topLevelTypes.topKeyDown,
          topLevelTypes.topKeyPress,
          topLevelTypes.topKeyUp,
          topLevelTypes.topMouseDown
        ]
      },
      compositionUpdate: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onCompositionUpdate: null }),
          captured: keyOf({ onCompositionUpdateCapture: null })
        },
        dependencies: [
          topLevelTypes.topBlur,
          topLevelTypes.topCompositionUpdate,
          topLevelTypes.topKeyDown,
          topLevelTypes.topKeyPress,
          topLevelTypes.topKeyUp,
          topLevelTypes.topMouseDown
        ]
      }
    };

    // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;

    /**
     * Return whether a native keypress event is assumed to be a command.
     * This is required because Firefox fires `keypress` events for key commands
     * (cut, copy, select-all, etc.) even though no character is inserted.
     */
    function isKeypressCommand(nativeEvent) {
      return (
        (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
        // ctrlKey && altKey is equivalent to AltGr, and is not a command.
        !(nativeEvent.ctrlKey && nativeEvent.altKey)
      );
    }

    /**
     * Translate native top level events into event types.
     *
     * @param {string} topLevelType
     * @return {object}
     */
    function getCompositionEventType(topLevelType) {
      switch (topLevelType) {
        case topLevelTypes.topCompositionStart:
          return eventTypes.compositionStart;
        case topLevelTypes.topCompositionEnd:
          return eventTypes.compositionEnd;
        case topLevelTypes.topCompositionUpdate:
          return eventTypes.compositionUpdate;
      }
    }

    /**
     * Does our fallback best-guess model think this event signifies that
     * composition has begun?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */
    function isFallbackCompositionStart(topLevelType, nativeEvent) {
      return (
        topLevelType === topLevelTypes.topKeyDown &&
        nativeEvent.keyCode === START_KEYCODE
      );
    }

    /**
     * Does our fallback mode think that this event is the end of composition?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */
    function isFallbackCompositionEnd(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyUp:
          // Command keys insert or clear IME input.
          return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
        case topLevelTypes.topKeyDown:
          // Expect IME keyCode on each keydown. If we get any other
          // code we must have exited earlier.
          return (nativeEvent.keyCode !== START_KEYCODE);
        case topLevelTypes.topKeyPress:
        case topLevelTypes.topMouseDown:
        case topLevelTypes.topBlur:
          // Events are not possible without cancelling IME.
          return true;
        default:
          return false;
      }
    }

    /**
     * Google Input Tools provides composition data via a CustomEvent,
     * with the `data` property populated in the `detail` object. If this
     * is available on the event object, use it. If not, this is a plain
     * composition event and we have nothing special to extract.
     *
     * @param {object} nativeEvent
     * @return {?string}
     */
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === 'object' && 'data' in detail) {
        return detail.data;
      }
      return null;
    }

    // Track the current IME composition fallback object, if any.
    var currentComposition = null;

    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {?object} A SyntheticCompositionEvent.
     */
    function extractCompositionEvent(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    ) {
      var eventType;
      var fallbackData;

      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(topLevelType);
      } else if (!currentComposition) {
        if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
          eventType = eventTypes.compositionStart;
        }
      } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionEnd;
      }

      if (!eventType) {
        return null;
      }

      if (useFallbackCompositionData) {
        // The current composition is stored statically and must not be
        // overwritten while composition continues.
        if (!currentComposition && eventType === eventTypes.compositionStart) {
          currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
        } else if (eventType === eventTypes.compositionEnd) {
          if (currentComposition) {
            fallbackData = currentComposition.getData();
          }
        }
      }

      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );

      if (fallbackData) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
      } else {
        var customData = getDataFromCustomEvent(nativeEvent);
        if (customData !== null) {
          event.data = customData;
        }
      }

      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }

    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The string corresponding to this `beforeInput` event.
     */
    function getNativeBeforeInputChars(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case topLevelTypes.topCompositionEnd:
          return getDataFromCustomEvent(nativeEvent);
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return null;
          }

          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          var chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }

          return chars;

        default:
          // For other native event types, do nothing.
          return null;
      }
    }

    /**
     * For browsers that do not provide the `textInput` event, extract the
     * appropriate string to use for SyntheticInputEvent.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The fallback string for this `beforeInput` event.
     */
    function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
      // If we are currently composing (IME) and using a fallback to do so,
      // try to extract the composed characters from the fallback object.
      if (currentComposition) {
        if (
          topLevelType === topLevelTypes.topCompositionEnd ||
          isFallbackCompositionEnd(topLevelType, nativeEvent)
        ) {
          var chars = currentComposition.getData();
          FallbackCompositionState.release(currentComposition);
          currentComposition = null;
          return chars;
        }
        return null;
      }

      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          return null;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            return String.fromCharCode(nativeEvent.which);
          }
          return null;
        case topLevelTypes.topCompositionEnd:
          return useFallbackCompositionData ? null : nativeEvent.data;
        default:
          return null;
      }
    }

    /**
     * Extract a SyntheticInputEvent for `beforeInput`, based on either native
     * `textInput` or fallback behavior.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {?object} A SyntheticInputEvent.
     */
    function extractBeforeInputEvent(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    ) {
      var chars;

      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
      }

      // If no characters are being inserted, no BeforeInput event should
      // be fired.
      if (!chars) {
        return null;
      }

      var event = SyntheticInputEvent.getPooled(
        eventTypes.beforeInput,
        topLevelTargetID,
        nativeEvent
      );

      event.data = chars;
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }

    /**
     * Create an `onBeforeInput` event to match
     * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
     *
     * This event plugin is based on the native `textInput` event
     * available in Chrome, Safari, Opera, and IE. This event fires after
     * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
     *
     * `beforeInput` is spec'd but not implemented in any browsers, and
     * the `input` event does not provide any useful information about what has
     * actually been added, contrary to the spec. Thus, `textInput` is the best
     * available event to identify the characters that have actually been inserted
     * into the target node.
     *
     * This plugin is also responsible for emitting `composition` events, thus
     * allowing us to share composition fallback code for both `beforeInput` and
     * `composition` event types.
     */
    var BeforeInputEventPlugin = {

      eventTypes: eventTypes,

      /**
       * @param {string} topLevelType Record from `EventConstants`.
       * @param {DOMEventTarget} topLevelTarget The listening component root node.
       * @param {string} topLevelTargetID ID of `topLevelTarget`.
       * @param {object} nativeEvent Native browser event.
       * @return {*} An accumulation of synthetic events.
       * @see {EventPluginHub.extractEvents}
       */
      extractEvents: function(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      ) {
        return [
          extractCompositionEvent(
            topLevelType,
            topLevelTarget,
            topLevelTargetID,
            nativeEvent
          ),
          extractBeforeInputEvent(
            topLevelType,
            topLevelTarget,
            topLevelTargetID,
            nativeEvent
          )
        ];
      }
    };

    module.exports = BeforeInputEventPlugin;

    /***/
  }),
  /* 314 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule EventPropagators
     */

    'use strict';

    var EventConstants = __webpack_require__(226);
    var EventPluginHub = __webpack_require__(290);

    var accumulateInto = __webpack_require__(292);
    var forEachAccumulated = __webpack_require__(293);

    var PropagationPhases = EventConstants.PropagationPhases;
    var getListener = EventPluginHub.getListener;

    /**
     * Some event types have a notion of different registration names for different
     * "phases" of propagation. This finds listeners by a given phase.
     */
    function listenerAtPhase(id, event, propagationPhase) {
      var registrationName =
        event.dispatchConfig.phasedRegistrationNames[propagationPhase];
      return getListener(id, registrationName);
    }

    /**
     * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
     * here, allows us to not have to bind or create functions for each event.
     * Mutating the event's members allows us to not have to create a wrapping
     * "dispatch" object that pairs the event with the listener.
     */
    function accumulateDirectionalDispatches(domID, upwards, event) {
      if (false) {
        if (!domID) {
          throw new Error('Dispatching id must not be null');
        }
      }
      var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
      var listener = listenerAtPhase(domID, event, phase);
      if (listener) {
        event._dispatchListeners =
          accumulateInto(event._dispatchListeners, listener);
        event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
      }
    }

    /**
     * Collect dispatches (must be entirely collected before dispatching - see unit
     * tests). Lazily allocate the array to conserve memory.  We must loop through
     * each event and perform the traversal for each one. We can not perform a
     * single traversal for the entire collection of events because each event may
     * have a different target.
     */
    function accumulateTwoPhaseDispatchesSingle(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
          event.dispatchMarker,
          accumulateDirectionalDispatches,
          event
        );
      }
    }

    /**
     * Accumulates without regard to direction, does not look for phased
     * registration names. Same as `accumulateDirectDispatchesSingle` but without
     * requiring that the `dispatchMarker` be the same as the dispatched ID.
     */
    function accumulateDispatches(id, ignoredDirection, event) {
      if (event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName;
        var listener = getListener(id, registrationName);
        if (listener) {
          event._dispatchListeners =
            accumulateInto(event._dispatchListeners, listener);
          event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
        }
      }
    }

    /**
     * Accumulates dispatches on an `SyntheticEvent`, but only for the
     * `dispatchMarker`.
     * @param {SyntheticEvent} event
     */
    function accumulateDirectDispatchesSingle(event) {
      if (event && event.dispatchConfig.registrationName) {
        accumulateDispatches(event.dispatchMarker, null, event);
      }
    }

    function accumulateTwoPhaseDispatches(events) {
      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
    }

    function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
      EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
        fromID,
        toID,
        accumulateDispatches,
        leave,
        enter
      );
    }

    function accumulateDirectDispatches(events) {
      forEachAccumulated(events, accumulateDirectDispatchesSingle);
    }

    /**
     * A small set of propagation patterns, each of which will accept a small amount
     * of information, and generate a set of "dispatch ready event objects" - which
     * are sets of events that have already been annotated with a set of dispatched
     * listener functions/ids. The API is designed this way to discourage these
     * propagation strategies from actually executing the dispatches, since we
     * always want to collect the entire set of dispatches before executing event a
     * single one.
     *
     * @constructor EventPropagators
     */
    var EventPropagators = {
      accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
      accumulateDirectDispatches: accumulateDirectDispatches,
      accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
    };

    module.exports = EventPropagators;

    /***/
  }),
  /* 315 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule FallbackCompositionState
     * @typechecks static-only
     */

    'use strict';

    var PooledClass = __webpack_require__(230);

    var assign = __webpack_require__(234);
    var getTextContentAccessor = __webpack_require__(316);

    /**
     * This helper class stores information about text content of a target node,
     * allowing comparison of content before and after a given event.
     *
     * Identify the node where selection currently begins, then observe
     * both its text content and its current position in the DOM. Since the
     * browser may natively replace the target node during composition, we can
     * use its position to find its replacement.
     *
     * @param {DOMEventTarget} root
     */
    function FallbackCompositionState(root) {
      this._root = root;
      this._startText = this.getText();
      this._fallbackText = null;
    }

    assign(FallbackCompositionState.prototype, {
      /**
       * Get current text of input.
       *
       * @return {string}
       */
      getText: function() {
        if ('value' in this._root) {
          return this._root.value;
        }
        return this._root[getTextContentAccessor()];
      },

      /**
       * Determine the differing substring between the initially stored
       * text content and the current content.
       *
       * @return {string}
       */
      getData: function() {
        if (this._fallbackText) {
          return this._fallbackText;
        }

        var start;
        var startValue = this._startText;
        var startLength = startValue.length;
        var end;
        var endValue = this.getText();
        var endLength = endValue.length;

        for (start = 0; start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }

        var minEnd = startLength - start;
        for (end = 1; end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }

        var sliceTail = end > 1 ? 1 - end : undefined;
        this._fallbackText = endValue.slice(start, sliceTail);
        return this._fallbackText;
      }
    });

    PooledClass.addPoolingTo(FallbackCompositionState);

    module.exports = FallbackCompositionState;

    /***/
  }),
  /* 316 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getTextContentAccessor
     */

    'use strict';

    var ExecutionEnvironment = __webpack_require__(272);

    var contentKey = null;

    /**
     * Gets the key used to access text content on a DOM node.
     *
     * @return {?string} Key used to access text content.
     * @internal
     */
    function getTextContentAccessor() {
      if (!contentKey && ExecutionEnvironment.canUseDOM) {
        // Prefer textContent to innerText because many browsers support both but
        // SVG <text> elements don't support innerText even when <div> does.
        contentKey = 'textContent' in document.documentElement ?
          'textContent' :
          'innerText';
      }
      return contentKey;
    }

    module.exports = getTextContentAccessor;

    /***/
  }),
  /* 317 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticCompositionEvent
     * @typechecks static-only
     */

    'use strict';

    var SyntheticEvent = __webpack_require__(318);

    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
     */
    var CompositionEventInterface = {
      data: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticCompositionEvent(
      dispatchConfig,
      dispatchMarker,
      nativeEvent) {
      SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
    }

    SyntheticEvent.augmentClass(
      SyntheticCompositionEvent,
      CompositionEventInterface
    );

    module.exports = SyntheticCompositionEvent;

    /***/
  }),
  /* 318 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticEvent
     * @typechecks static-only
     */

    'use strict';

    var PooledClass = __webpack_require__(230);

    var assign = __webpack_require__(234);
    var emptyFunction = __webpack_require__(237);
    var getEventTarget = __webpack_require__(319);

    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var EventInterface = {
      type: null,
      target: getEventTarget,
      // currentTarget is set when dispatching; no use in copying it here
      currentTarget: emptyFunction.thatReturnsNull,
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null
    };

    /**
     * Synthetic events are dispatched by event plugins, typically in response to a
     * top-level event delegation handler.
     *
     * These systems should generally use pooling to reduce the frequency of garbage
     * collection. The system should check `isPersistent` to determine whether the
     * event should be released into the pool after being dispatched. Users that
     * need a persisted event should invoke `persist`.
     *
     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
     * normalizing browser quirks. Subclasses do not necessarily have to implement a
     * DOM interface; custom application-specific events can also subclass this.
     *
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     */
    function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
      this.dispatchConfig = dispatchConfig;
      this.dispatchMarker = dispatchMarker;
      this.nativeEvent = nativeEvent;

      var Interface = this.constructor.Interface;
      for (var propName in Interface) {
        if (!Interface.hasOwnProperty(propName)) {
          continue;
        }
        var normalize = Interface[propName];
        if (normalize) {
          this[propName] = normalize(nativeEvent);
        } else {
          this[propName] = nativeEvent[propName];
        }
      }

      var defaultPrevented = nativeEvent.defaultPrevented != null ?
        nativeEvent.defaultPrevented :
        nativeEvent.returnValue === false;
      if (defaultPrevented) {
        this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
      } else {
        this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
      }
      this.isPropagationStopped = emptyFunction.thatReturnsFalse;
    }

    assign(SyntheticEvent.prototype, {

      preventDefault: function() {
        this.defaultPrevented = true;
        var event = this.nativeEvent;
        if (event.preventDefault) {
          event.preventDefault();
        } else {
          event.returnValue = false;
        }
        this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
      },

      stopPropagation: function() {
        var event = this.nativeEvent;
        if (event.stopPropagation) {
          event.stopPropagation();
        } else {
          event.cancelBubble = true;
        }
        this.isPropagationStopped = emptyFunction.thatReturnsTrue;
      },

      /**
       * We release all dispatched `SyntheticEvent`s after each event loop, adding
       * them back into the pool. This allows a way to hold onto a reference that
       * won't be added back into the pool.
       */
      persist: function() {
        this.isPersistent = emptyFunction.thatReturnsTrue;
      },

      /**
       * Checks if this event should be released back into the pool.
       *
       * @return {boolean} True if this should not be released, false otherwise.
       */
      isPersistent: emptyFunction.thatReturnsFalse,

      /**
       * `PooledClass` looks for `destructor` on each instance it releases.
       */
      destructor: function() {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
          this[propName] = null;
        }
        this.dispatchConfig = null;
        this.dispatchMarker = null;
        this.nativeEvent = null;
      }

    });

    SyntheticEvent.Interface = EventInterface;

    /**
     * Helper to reduce boilerplate when creating subclasses.
     *
     * @param {function} Class
     * @param {?object} Interface
     */
    SyntheticEvent.augmentClass = function(Class, Interface) {
      var Super = this;

      var prototype = Object.create(Super.prototype);
      assign(prototype, Class.prototype);
      Class.prototype = prototype;
      Class.prototype.constructor = Class;

      Class.Interface = assign({}, Super.Interface, Interface);
      Class.augmentClass = Super.augmentClass;

      PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
    };

    PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

    module.exports = SyntheticEvent;

    /***/
  }),
  /* 319 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getEventTarget
     * @typechecks static-only
     */

    'use strict';

    /**
     * Gets the target node from a native browser event by accounting for
     * inconsistencies in browser DOM APIs.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {DOMEventTarget} Target node.
     */
    function getEventTarget(nativeEvent) {
      var target = nativeEvent.target || nativeEvent.srcElement || window;
      // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
      // @see http://www.quirksmode.org/js/events_properties.html
      return target.nodeType === 3 ? target.parentNode : target;
    }

    module.exports = getEventTarget;

    /***/
  }),
  /* 320 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticInputEvent
     * @typechecks static-only
     */

    'use strict';

    var SyntheticEvent = __webpack_require__(318);

    /**
     * @interface Event
     * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
     *      /#events-inputevents
     */
    var InputEventInterface = {
      data: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticInputEvent(
      dispatchConfig,
      dispatchMarker,
      nativeEvent) {
      SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
    }

    SyntheticEvent.augmentClass(
      SyntheticInputEvent,
      InputEventInterface
    );

    module.exports = SyntheticInputEvent;

    /***/
  }),
  /* 321 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ChangeEventPlugin
     */

    'use strict';

    var EventConstants = __webpack_require__(226);
    var EventPluginHub = __webpack_require__(290);
    var EventPropagators = __webpack_require__(314);
    var ExecutionEnvironment = __webpack_require__(272);
    var ReactUpdates = __webpack_require__(247);
    var SyntheticEvent = __webpack_require__(318);

    var isEventSupported = __webpack_require__(296);
    var isTextInputElement = __webpack_require__(322);
    var keyOf = __webpack_require__(260);

    var topLevelTypes = EventConstants.topLevelTypes;

    var eventTypes = {
      change: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onChange: null }),
          captured: keyOf({ onChangeCapture: null })
        },
        dependencies: [
          topLevelTypes.topBlur,
          topLevelTypes.topChange,
          topLevelTypes.topClick,
          topLevelTypes.topFocus,
          topLevelTypes.topInput,
          topLevelTypes.topKeyDown,
          topLevelTypes.topKeyUp,
          topLevelTypes.topSelectionChange
        ]
      }
    };

    /**
     * For IE shims
     */
    var activeElement = null;
    var activeElementID = null;
    var activeElementValue = null;
    var activeElementValueProp = null;

    /**
     * SECTION: handle `change` event
     */
    function shouldUseChangeEvent(elem) {
      return (
        elem.nodeName === 'SELECT' ||
        (elem.nodeName === 'INPUT' && elem.type === 'file')
      );
    }

    var doesChangeEventBubble = false;
    if (ExecutionEnvironment.canUseDOM) {
      // See `handleChange` comment below
      doesChangeEventBubble = isEventSupported('change') && (
        (!('documentMode' in document) || document.documentMode > 8)
      );
    }

    function manualDispatchChangeEvent(nativeEvent) {
      var event = SyntheticEvent.getPooled(
        eventTypes.change,
        activeElementID,
        nativeEvent
      );
      EventPropagators.accumulateTwoPhaseDispatches(event);

      // If change and propertychange bubbled, we'd just bind to it like all the
      // other events and have it go through ReactBrowserEventEmitter. Since it
      // doesn't, we manually listen for the events and so we have to enqueue and
      // process the abstract event manually.
      //
      // Batching is necessary here in order to ensure that all event handlers run
      // before the next rerender (including event handlers attached to ancestor
      // elements instead of directly on the input). Without this, controlled
      // components don't work properly in conjunction with event bubbling because
      // the component is rerendered and the value reverted before all the event
      // handlers can run. See https://github.com/facebook/react/issues/708.
      ReactUpdates.batchedUpdates(runEventInBatch, event);
    }

    function runEventInBatch(event) {
      EventPluginHub.enqueueEvents(event);
      EventPluginHub.processEventQueue();
    }

    function startWatchingForChangeEventIE8(target, targetID) {
      activeElement = target;
      activeElementID = targetID;
      activeElement.attachEvent('onchange', manualDispatchChangeEvent);
    }

    function stopWatchingForChangeEventIE8() {
      if (!activeElement) {
        return;
      }
      activeElement.detachEvent('onchange', manualDispatchChangeEvent);
      activeElement = null;
      activeElementID = null;
    }

    function getTargetIDForChangeEvent(
      topLevelType,
      topLevelTarget,
      topLevelTargetID) {
      if (topLevelType === topLevelTypes.topChange) {
        return topLevelTargetID;
      }
    }

    function handleEventsForChangeEventIE8(
      topLevelType,
      topLevelTarget,
      topLevelTargetID) {
      if (topLevelType === topLevelTypes.topFocus) {
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForChangeEventIE8();
        startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
      } else if (topLevelType === topLevelTypes.topBlur) {
        stopWatchingForChangeEventIE8();
      }
    }

    /**
     * SECTION: handle `input` event
     */
    var isInputEventSupported = false;
    if (ExecutionEnvironment.canUseDOM) {
      // IE9 claims to support the input event but fails to trigger it when
      // deleting text, so we ignore its input events
      isInputEventSupported = isEventSupported('input') && (
        (!('documentMode' in document) || document.documentMode > 9)
      );
    }

    /**
     * (For old IE.) Replacement getter/setter for the `value` property that gets
     * set on the active element.
     */
    var newValueProp = {
      get: function() {
        return activeElementValueProp.get.call(this);
      },
      set: function(val) {
        // Cast to a string so we can do equality checks.
        activeElementValue = '' + val;
        activeElementValueProp.set.call(this, val);
      }
    };

    /**
     * (For old IE.) Starts tracking propertychange events on the passed-in element
     * and override the value property so that we can distinguish user events from
     * value changes in JS.
     */
    function startWatchingForValueChange(target, targetID) {
      activeElement = target;
      activeElementID = targetID;
      activeElementValue = target.value;
      activeElementValueProp = Object.getOwnPropertyDescriptor(
        target.constructor.prototype,
        'value'
      );

      Object.defineProperty(activeElement, 'value', newValueProp);
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }

    /**
     * (For old IE.) Removes the event listeners from the currently-tracked element,
     * if any exists.
     */
    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }

      // delete restores the original property definition
      delete activeElement.value;
      activeElement.detachEvent('onpropertychange', handlePropertyChange);

      activeElement = null;
      activeElementID = null;
      activeElementValue = null;
      activeElementValueProp = null;
    }

    /**
     * (For old IE.) Handles a propertychange event, sending a `change` event if
     * the value of the active element has changed.
     */
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== 'value') {
        return;
      }
      var value = nativeEvent.srcElement.value;
      if (value === activeElementValue) {
        return;
      }
      activeElementValue = value;

      manualDispatchChangeEvent(nativeEvent);
    }

    /**
     * If a `change` event should be fired, returns the target's ID.
     */
    function getTargetIDForInputEvent(
      topLevelType,
      topLevelTarget,
      topLevelTargetID) {
      if (topLevelType === topLevelTypes.topInput) {
        // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
        // what we want so fall through here and trigger an abstract event
        return topLevelTargetID;
      }
    }

    // For IE8 and IE9.
    function handleEventsForInputEventIE(
      topLevelType,
      topLevelTarget,
      topLevelTargetID) {
      if (topLevelType === topLevelTypes.topFocus) {
        // In IE8, we can capture almost all .value changes by adding a
        // propertychange handler and looking for events with propertyName
        // equal to 'value'
        // In IE9, propertychange fires for most input events but is buggy and
        // doesn't fire when text is deleted, but conveniently, selectionchange
        // appears to fire in all of the remaining cases so we catch those and
        // forward the event if the value has changed
        // In either case, we don't want to call the event handler if the value
        // is changed from JS so we redefine a setter for `.value` that updates
        // our activeElementValue variable, allowing us to ignore those changes
        //
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForValueChange();
        startWatchingForValueChange(topLevelTarget, topLevelTargetID);
      } else if (topLevelType === topLevelTypes.topBlur) {
        stopWatchingForValueChange();
      }
    }

    // For IE8 and IE9.
    function getTargetIDForInputEventIE(
      topLevelType,
      topLevelTarget,
      topLevelTargetID) {
      if (topLevelType === topLevelTypes.topSelectionChange ||
        topLevelType === topLevelTypes.topKeyUp ||
        topLevelType === topLevelTypes.topKeyDown) {
        // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        if (activeElement && activeElement.value !== activeElementValue) {
          activeElementValue = activeElement.value;
          return activeElementID;
        }
      }
    }

    /**
     * SECTION: handle `click` event
     */
    function shouldUseClickEvent(elem) {
      // Use the `click` event to detect changes to checkbox and radio inputs.
      // This approach works across all browsers, whereas `change` does not fire
      // until `blur` in IE8.
      return (
        elem.nodeName === 'INPUT' &&
        (elem.type === 'checkbox' || elem.type === 'radio')
      );
    }

    function getTargetIDForClickEvent(
      topLevelType,
      topLevelTarget,
      topLevelTargetID) {
      if (topLevelType === topLevelTypes.topClick) {
        return topLevelTargetID;
      }
    }

    /**
     * This plugin creates an `onChange` event that normalizes change events
     * across form elements. This event fires at a time when it's possible to
     * change the element's value without seeing a flicker.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - select
     */
    var ChangeEventPlugin = {

      eventTypes: eventTypes,

      /**
       * @param {string} topLevelType Record from `EventConstants`.
       * @param {DOMEventTarget} topLevelTarget The listening component root node.
       * @param {string} topLevelTargetID ID of `topLevelTarget`.
       * @param {object} nativeEvent Native browser event.
       * @return {*} An accumulation of synthetic events.
       * @see {EventPluginHub.extractEvents}
       */
      extractEvents: function(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent) {

        var getTargetIDFunc, handleEventFunc;
        if (shouldUseChangeEvent(topLevelTarget)) {
          if (doesChangeEventBubble) {
            getTargetIDFunc = getTargetIDForChangeEvent;
          } else {
            handleEventFunc = handleEventsForChangeEventIE8;
          }
        } else if (isTextInputElement(topLevelTarget)) {
          if (isInputEventSupported) {
            getTargetIDFunc = getTargetIDForInputEvent;
          } else {
            getTargetIDFunc = getTargetIDForInputEventIE;
            handleEventFunc = handleEventsForInputEventIE;
          }
        } else if (shouldUseClickEvent(topLevelTarget)) {
          getTargetIDFunc = getTargetIDForClickEvent;
        }

        if (getTargetIDFunc) {
          var targetID = getTargetIDFunc(
            topLevelType,
            topLevelTarget,
            topLevelTargetID
          );
          if (targetID) {
            var event = SyntheticEvent.getPooled(
              eventTypes.change,
              targetID,
              nativeEvent
            );
            EventPropagators.accumulateTwoPhaseDispatches(event);
            return event;
          }
        }

        if (handleEventFunc) {
          handleEventFunc(
            topLevelType,
            topLevelTarget,
            topLevelTargetID
          );
        }
      }

    };

    module.exports = ChangeEventPlugin;

    /***/
  }),
  /* 322 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule isTextInputElement
     */

    'use strict';

    /**
     * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
     */
    var supportedInputTypes = {
      'color': true,
      'date': true,
      'datetime': true,
      'datetime-local': true,
      'email': true,
      'month': true,
      'number': true,
      'password': true,
      'range': true,
      'search': true,
      'tel': true,
      'text': true,
      'time': true,
      'url': true,
      'week': true
    };

    function isTextInputElement(elem) {
      return elem && (
        (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
      );
    }

    module.exports = isTextInputElement;

    /***/
  }),
  /* 323 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ClientReactRootIndex
     * @typechecks
     */

    'use strict';

    var nextReactRootIndex = 0;

    var ClientReactRootIndex = {
      createReactRootIndex: function() {
        return nextReactRootIndex++;
      }
    };

    module.exports = ClientReactRootIndex;

    /***/
  }),
  /* 324 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule DefaultEventPluginOrder
     */

    'use strict';

    var keyOf = __webpack_require__(260);

    /**
     * Module that is injectable into `EventPluginHub`, that specifies a
     * deterministic ordering of `EventPlugin`s. A convenient way to reason about
     * plugins, without having to package every one of them. This is better than
     * having plugins be ordered in the same order that they are injected because
     * that ordering would be influenced by the packaging order.
     * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
     * preventing default on events is convenient in `SimpleEventPlugin` handlers.
     */
    var DefaultEventPluginOrder = [
      keyOf({ ResponderEventPlugin: null }),
      keyOf({ SimpleEventPlugin: null }),
      keyOf({ TapEventPlugin: null }),
      keyOf({ EnterLeaveEventPlugin: null }),
      keyOf({ ChangeEventPlugin: null }),
      keyOf({ SelectEventPlugin: null }),
      keyOf({ BeforeInputEventPlugin: null }),
      keyOf({ AnalyticsEventPlugin: null }),
      keyOf({ MobileSafariClickEventPlugin: null })
    ];

    module.exports = DefaultEventPluginOrder;

    /***/
  }),
  /* 325 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule EnterLeaveEventPlugin
     * @typechecks static-only
     */

    'use strict';

    var EventConstants = __webpack_require__(226);
    var EventPropagators = __webpack_require__(314);
    var SyntheticMouseEvent = __webpack_require__(326);

    var ReactMount = __webpack_require__(288);
    var keyOf = __webpack_require__(260);

    var topLevelTypes = EventConstants.topLevelTypes;
    var getFirstReactDOM = ReactMount.getFirstReactDOM;

    var eventTypes = {
      mouseEnter: {
        registrationName: keyOf({ onMouseEnter: null }),
        dependencies: [
          topLevelTypes.topMouseOut,
          topLevelTypes.topMouseOver
        ]
      },
      mouseLeave: {
        registrationName: keyOf({ onMouseLeave: null }),
        dependencies: [
          topLevelTypes.topMouseOut,
          topLevelTypes.topMouseOver
        ]
      }
    };

    var extractedEvents = [null, null];

    var EnterLeaveEventPlugin = {

      eventTypes: eventTypes,

      /**
       * For almost every interaction we care about, there will be both a top-level
       * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
       * we do not extract duplicate events. However, moving the mouse into the
       * browser from outside will not fire a `mouseout` event. In this case, we use
       * the `mouseover` top-level event.
       *
       * @param {string} topLevelType Record from `EventConstants`.
       * @param {DOMEventTarget} topLevelTarget The listening component root node.
       * @param {string} topLevelTargetID ID of `topLevelTarget`.
       * @param {object} nativeEvent Native browser event.
       * @return {*} An accumulation of synthetic events.
       * @see {EventPluginHub.extractEvents}
       */
      extractEvents: function(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent) {
        if (topLevelType === topLevelTypes.topMouseOver &&
          (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
          return null;
        }
        if (topLevelType !== topLevelTypes.topMouseOut &&
          topLevelType !== topLevelTypes.topMouseOver) {
          // Must not be a mouse in or mouse out - ignoring.
          return null;
        }

        var win;
        if (topLevelTarget.window === topLevelTarget) {
          // `topLevelTarget` is probably a window object.
          win = topLevelTarget;
        } else {
          // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
          var doc = topLevelTarget.ownerDocument;
          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }

        var from, to;
        if (topLevelType === topLevelTypes.topMouseOut) {
          from = topLevelTarget;
          to =
            getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
            win;
        } else {
          from = win;
          to = topLevelTarget;
        }

        if (from === to) {
          // Nothing pertains to our managed components.
          return null;
        }

        var fromID = from ? ReactMount.getID(from) : '';
        var toID = to ? ReactMount.getID(to) : '';

        var leave = SyntheticMouseEvent.getPooled(
          eventTypes.mouseLeave,
          fromID,
          nativeEvent
        );
        leave.type = 'mouseleave';
        leave.target = from;
        leave.relatedTarget = to;

        var enter = SyntheticMouseEvent.getPooled(
          eventTypes.mouseEnter,
          toID,
          nativeEvent
        );
        enter.type = 'mouseenter';
        enter.target = to;
        enter.relatedTarget = from;

        EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

        extractedEvents[0] = leave;
        extractedEvents[1] = enter;

        return extractedEvents;
      }

    };

    module.exports = EnterLeaveEventPlugin;

    /***/
  }),
  /* 326 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticMouseEvent
     * @typechecks static-only
     */

    'use strict';

    var SyntheticUIEvent = __webpack_require__(327);
    var ViewportMetrics = __webpack_require__(295);

    var getEventModifierState = __webpack_require__(328);

    /**
     * @interface MouseEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var MouseEventInterface = {
      screenX: null,
      screenY: null,
      clientX: null,
      clientY: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      getModifierState: getEventModifierState,
      button: function(event) {
        // Webkit, Firefox, IE9+
        // which:  1 2 3
        // button: 0 1 2 (standard)
        var button = event.button;
        if ('which' in event) {
          return button;
        }
        // IE<9
        // which:  undefined
        // button: 0 0 0
        // button: 1 4 2 (onmouseup)
        return button === 2 ? 2 : button === 4 ? 1 : 0;
      },
      buttons: null,
      relatedTarget: function(event) {
        return event.relatedTarget || (
          ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
        );
      },
      // "Proprietary" Interface.
      pageX: function(event) {
        return 'pageX' in event ?
          event.pageX :
          event.clientX + ViewportMetrics.currentScrollLeft;
      },
      pageY: function(event) {
        return 'pageY' in event ?
          event.pageY :
          event.clientY + ViewportMetrics.currentScrollTop;
      }
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
      SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
    }

    SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

    module.exports = SyntheticMouseEvent;

    /***/
  }),
  /* 327 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticUIEvent
     * @typechecks static-only
     */

    'use strict';

    var SyntheticEvent = __webpack_require__(318);

    var getEventTarget = __webpack_require__(319);

    /**
     * @interface UIEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var UIEventInterface = {
      view: function(event) {
        if (event.view) {
          return event.view;
        }

        var target = getEventTarget(event);
        if (target != null && target.window === target) {
          // target is a window object
          return target;
        }

        var doc = target.ownerDocument;
        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
        if (doc) {
          return doc.defaultView || doc.parentWindow;
        } else {
          return window;
        }
      },
      detail: function(event) {
        return event.detail || 0;
      }
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticEvent}
     */
    function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
      SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
    }

    SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

    module.exports = SyntheticUIEvent;

    /***/
  }),
  /* 328 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getEventModifierState
     * @typechecks static-only
     */

    'use strict';

    /**
     * Translation from modifier key to the associated property in the event.
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
     */

    var modifierKeyToProp = {
      'Alt': 'altKey',
      'Control': 'ctrlKey',
      'Meta': 'metaKey',
      'Shift': 'shiftKey'
    };

    // IE8 does not implement getModifierState so we simply map it to the only
    // modifier keys exposed by the event itself, does not support Lock-keys.
    // Currently, all major browsers except Chrome seems to support Lock-keys.
    function modifierStateGetter(keyArg) {
      /*jshint validthis:true */
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }

    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }

    module.exports = getEventModifierState;

    /***/
  }),
  /* 329 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule HTMLDOMPropertyConfig
     */

    /*jslint bitwise: true*/

    'use strict';

    var DOMProperty = __webpack_require__(265);
    var ExecutionEnvironment = __webpack_require__(272);

    var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
    var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
    var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
    var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
    var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
    var HAS_POSITIVE_NUMERIC_VALUE =
      DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
    var HAS_OVERLOADED_BOOLEAN_VALUE =
      DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

    var hasSVG;
    if (ExecutionEnvironment.canUseDOM) {
      var implementation = document.implementation;
      hasSVG = (
        implementation &&
        implementation.hasFeature &&
        implementation.hasFeature(
          'http://www.w3.org/TR/SVG11/feature#BasicStructure',
          '1.1'
        )
      );
    }

    var HTMLDOMPropertyConfig = {
      isCustomAttribute: RegExp.prototype.test.bind(
        /^(data|aria)-[a-z_][a-z\d_.\-]*$/
      ),
      Properties: {
        /**
         * Standard Properties
         */
        accept: null,
        acceptCharset: null,
        accessKey: null,
        action: null,
        allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
        allowTransparency: MUST_USE_ATTRIBUTE,
        alt: null,
        async: HAS_BOOLEAN_VALUE,
        autoComplete: null,
        // autoFocus is polyfilled/normalized by AutoFocusMixin
        // autoFocus: HAS_BOOLEAN_VALUE,
        autoPlay: HAS_BOOLEAN_VALUE,
        cellPadding: null,
        cellSpacing: null,
        charSet: MUST_USE_ATTRIBUTE,
        checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        classID: MUST_USE_ATTRIBUTE,
        // To set className on SVG elements, it's necessary to use .setAttribute;
        // this works on HTML elements too in all browsers except IE8. Conveniently,
        // IE8 doesn't support SVG and so we can simply use the attribute in
        // browsers that support SVG and the property in browsers that don't,
        // regardless of whether the element is HTML or SVG.
        className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
        cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
        colSpan: null,
        content: null,
        contentEditable: null,
        contextMenu: MUST_USE_ATTRIBUTE,
        controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        coords: null,
        crossOrigin: null,
        data: null, // For `<object />` acts as `src`.
        dateTime: MUST_USE_ATTRIBUTE,
        defer: HAS_BOOLEAN_VALUE,
        dir: null,
        disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
        download: HAS_OVERLOADED_BOOLEAN_VALUE,
        draggable: null,
        encType: null,
        form: MUST_USE_ATTRIBUTE,
        formAction: MUST_USE_ATTRIBUTE,
        formEncType: MUST_USE_ATTRIBUTE,
        formMethod: MUST_USE_ATTRIBUTE,
        formNoValidate: HAS_BOOLEAN_VALUE,
        formTarget: MUST_USE_ATTRIBUTE,
        frameBorder: MUST_USE_ATTRIBUTE,
        headers: null,
        height: MUST_USE_ATTRIBUTE,
        hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
        high: null,
        href: null,
        hrefLang: null,
        htmlFor: null,
        httpEquiv: null,
        icon: null,
        id: MUST_USE_PROPERTY,
        label: null,
        lang: null,
        list: MUST_USE_ATTRIBUTE,
        loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        low: null,
        manifest: MUST_USE_ATTRIBUTE,
        marginHeight: null,
        marginWidth: null,
        max: null,
        maxLength: MUST_USE_ATTRIBUTE,
        media: MUST_USE_ATTRIBUTE,
        mediaGroup: null,
        method: null,
        min: null,
        multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        name: null,
        noValidate: HAS_BOOLEAN_VALUE,
        open: HAS_BOOLEAN_VALUE,
        optimum: null,
        pattern: null,
        placeholder: null,
        poster: null,
        preload: null,
        radioGroup: null,
        readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        rel: null,
        required: HAS_BOOLEAN_VALUE,
        role: MUST_USE_ATTRIBUTE,
        rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
        rowSpan: null,
        sandbox: null,
        scope: null,
        scoped: HAS_BOOLEAN_VALUE,
        scrolling: null,
        seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
        selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        shape: null,
        size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
        sizes: MUST_USE_ATTRIBUTE,
        span: HAS_POSITIVE_NUMERIC_VALUE,
        spellCheck: null,
        src: null,
        srcDoc: MUST_USE_PROPERTY,
        srcSet: MUST_USE_ATTRIBUTE,
        start: HAS_NUMERIC_VALUE,
        step: null,
        style: null,
        tabIndex: null,
        target: null,
        title: null,
        type: null,
        useMap: null,
        value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
        width: MUST_USE_ATTRIBUTE,
        wmode: MUST_USE_ATTRIBUTE,

        /**
         * Non-standard Properties
         */
        // autoCapitalize and autoCorrect are supported in Mobile Safari for
        // keyboard hints.
        autoCapitalize: null,
        autoCorrect: null,
        // itemProp, itemScope, itemType are for
        // Microdata support. See http://schema.org/docs/gs.html
        itemProp: MUST_USE_ATTRIBUTE,
        itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
        itemType: MUST_USE_ATTRIBUTE,
        // itemID and itemRef are for Microdata support as well but
        // only specified in the the WHATWG spec document. See
        // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
        itemID: MUST_USE_ATTRIBUTE,
        itemRef: MUST_USE_ATTRIBUTE,
        // property is supported for OpenGraph in meta tags.
        property: null,
        // IE-only attribute that controls focus behavior
        unselectable: MUST_USE_ATTRIBUTE
      },
      DOMAttributeNames: {
        acceptCharset: 'accept-charset',
        className: 'class',
        htmlFor: 'for',
        httpEquiv: 'http-equiv'
      },
      DOMPropertyNames: {
        autoCapitalize: 'autocapitalize',
        autoComplete: 'autocomplete',
        autoCorrect: 'autocorrect',
        autoFocus: 'autofocus',
        autoPlay: 'autoplay',
        // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
        // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
        encType: 'encoding',
        hrefLang: 'hreflang',
        radioGroup: 'radiogroup',
        spellCheck: 'spellcheck',
        srcDoc: 'srcdoc',
        srcSet: 'srcset'
      }
    };

    module.exports = HTMLDOMPropertyConfig;

    /***/
  }),
  /* 330 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule MobileSafariClickEventPlugin
     * @typechecks static-only
     */

    'use strict';

    var EventConstants = __webpack_require__(226);

    var emptyFunction = __webpack_require__(237);

    var topLevelTypes = EventConstants.topLevelTypes;

    /**
     * Mobile Safari does not fire properly bubble click events on non-interactive
     * elements, which means delegated click listeners do not fire. The workaround
     * for this bug involves attaching an empty click listener on the target node.
     *
     * This particular plugin works around the bug by attaching an empty click
     * listener on `touchstart` (which does fire on every element).
     */
    var MobileSafariClickEventPlugin = {

      eventTypes: null,

      /**
       * @param {string} topLevelType Record from `EventConstants`.
       * @param {DOMEventTarget} topLevelTarget The listening component root node.
       * @param {string} topLevelTargetID ID of `topLevelTarget`.
       * @param {object} nativeEvent Native browser event.
       * @return {*} An accumulation of synthetic events.
       * @see {EventPluginHub.extractEvents}
       */
      extractEvents: function(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent) {
        if (topLevelType === topLevelTypes.topTouchStart) {
          var target = nativeEvent.target;
          if (target && !target.onclick) {
            target.onclick = emptyFunction;
          }
        }
      }

    };

    module.exports = MobileSafariClickEventPlugin;

    /***/
  }),
  /* 331 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactBrowserComponentMixin
     */

    'use strict';

    var findDOMNode = __webpack_require__(332);

    var ReactBrowserComponentMixin = {
      /**
       * Returns the DOM node rendered by this component.
       *
       * @return {DOMElement} The root node of this component.
       * @final
       * @protected
       */
      getDOMNode: function() {
        return findDOMNode(this);
      }
    };

    module.exports = ReactBrowserComponentMixin;

    /***/
  }),
  /* 332 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule findDOMNode
     * @typechecks static-only
     */

    'use strict';

    var ReactCurrentOwner = __webpack_require__(238);
    var ReactInstanceMap = __webpack_require__(246);
    var ReactMount = __webpack_require__(288);

    var invariant = __webpack_require__(228);
    var isNode = __webpack_require__(302);
    var warning = __webpack_require__(236);

    /**
     * Returns the DOM node rendered by this element.
     *
     * @param {ReactComponent|DOMElement} componentOrElement
     * @return {DOMElement} The root node of this element.
     */
    function findDOMNode(componentOrElement) {
      if (false) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null) {
          ("production" !== process.env.NODE_ENV ? warning(
            owner._warnedAboutRefsInRender,
            '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
            'render() should be a pure function of props and state. It should ' +
            'never access something that requires stale data from the previous ' +
            'render, such as refs. Move this logic to componentDidMount and ' +
            'componentDidUpdate instead.',
            owner.getName() || 'A component'
          ) : null);
          owner._warnedAboutRefsInRender = true;
        }
      }
      if (componentOrElement == null) {
        return null;
      }
      if (isNode(componentOrElement)) {
        return componentOrElement;
      }
      if (ReactInstanceMap.has(componentOrElement)) {
        return ReactMount.getNodeFromInstance(componentOrElement);
      }
      (false ? invariant(
        componentOrElement.render == null ||
        typeof componentOrElement.render !== 'function',
        'Component (with keys: %s) contains `render` method ' +
        'but is not mounted in the DOM',
        Object.keys(componentOrElement)
      ) : invariant(componentOrElement.render == null ||
        typeof componentOrElement.render !== 'function'));
      (false ? invariant(
        false,
        'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
        Object.keys(componentOrElement)
      ) : invariant(false));
    }

    module.exports = findDOMNode;

    /***/
  }),
  /* 333 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDefaultBatchingStrategy
     */

    'use strict';

    var ReactUpdates = __webpack_require__(247);
    var Transaction = __webpack_require__(257);

    var assign = __webpack_require__(234);
    var emptyFunction = __webpack_require__(237);

    var RESET_BATCHED_UPDATES = {
      initialize: emptyFunction,
      close: function() {
        ReactDefaultBatchingStrategy.isBatchingUpdates = false;
      }
    };

    var FLUSH_BATCHED_UPDATES = {
      initialize: emptyFunction,
      close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
    };

    var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

    function ReactDefaultBatchingStrategyTransaction() {
      this.reinitializeTransaction();
    }

    assign(
      ReactDefaultBatchingStrategyTransaction.prototype,
      Transaction.Mixin, {
        getTransactionWrappers: function() {
          return TRANSACTION_WRAPPERS;
        }
      }
    );

    var transaction = new ReactDefaultBatchingStrategyTransaction();

    var ReactDefaultBatchingStrategy = {
      isBatchingUpdates: false,

      /**
       * Call the provided function in a context within which calls to `setState`
       * and friends are batched such that components aren't updated unnecessarily.
       */
      batchedUpdates: function(callback, a, b, c, d) {
        var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

        ReactDefaultBatchingStrategy.isBatchingUpdates = true;

        // The code is written this way to avoid extra allocations
        if (alreadyBatchingUpdates) {
          callback(a, b, c, d);
        } else {
          transaction.perform(callback, null, a, b, c, d);
        }
      }
    };

    module.exports = ReactDefaultBatchingStrategy;

    /***/
  }),
  /* 334 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMButton
     */

    'use strict';

    var AutoFocusMixin = __webpack_require__(335);
    var ReactBrowserComponentMixin = __webpack_require__(331);
    var ReactClass = __webpack_require__(258);
    var ReactElement = __webpack_require__(232);

    var keyMirror = __webpack_require__(227);

    var button = ReactElement.createFactory('button');

    var mouseListenerNames = keyMirror({
      onClick: true,
      onDoubleClick: true,
      onMouseDown: true,
      onMouseMove: true,
      onMouseUp: true,
      onClickCapture: true,
      onDoubleClickCapture: true,
      onMouseDownCapture: true,
      onMouseMoveCapture: true,
      onMouseUpCapture: true
    });

    /**
     * Implements a <button> native component that does not receive mouse events
     * when `disabled` is set.
     */
    var ReactDOMButton = ReactClass.createClass({
      displayName: 'ReactDOMButton',
      tagName: 'BUTTON',

      mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

      render: function() {
        var props = {};

        // Copy the props; except the mouse listeners if we're disabled
        for (var key in this.props) {
          if (this.props.hasOwnProperty(key) &&
            (!this.props.disabled || !mouseListenerNames[key])) {
            props[key] = this.props[key];
          }
        }

        return button(props, this.props.children);
      }

    });

    module.exports = ReactDOMButton;

    /***/
  }),
  /* 335 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule AutoFocusMixin
     * @typechecks static-only
     */

    'use strict';

    var focusNode = __webpack_require__(336);

    var AutoFocusMixin = {
      componentDidMount: function() {
        if (this.props.autoFocus) {
          focusNode(this.getDOMNode());
        }
      }
    };

    module.exports = AutoFocusMixin;

    /***/
  }),
  /* 336 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule focusNode
     */

    "use strict";

    /**
     * @param {DOMElement} node input/textarea to focus
     */
    function focusNode(node) {
      // IE8 can throw "Can't move focus to the control because it is invisible,
      // not enabled, or of a type that does not accept the focus." for all kinds of
      // reasons that are too expensive and fragile to test.
      try {
        node.focus();
      } catch (e) {}
    }

    module.exports = focusNode;

    /***/
  }),
  /* 337 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMForm
     */

    'use strict';

    var EventConstants = __webpack_require__(226);
    var LocalEventTrapMixin = __webpack_require__(338);
    var ReactBrowserComponentMixin = __webpack_require__(331);
    var ReactClass = __webpack_require__(258);
    var ReactElement = __webpack_require__(232);

    var form = ReactElement.createFactory('form');

    /**
     * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
     * to capture it on the <form> element itself. There are lots of hacks we could
     * do to accomplish this, but the most reliable is to make <form> a
     * composite component and use `componentDidMount` to attach the event handlers.
     */
    var ReactDOMForm = ReactClass.createClass({
      displayName: 'ReactDOMForm',
      tagName: 'FORM',

      mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

      render: function() {
        // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
        // `jshint` fails to parse JSX so in order for linting to work in the open
        // source repo, we need to just use `ReactDOM.form`.
        return form(this.props);
      },

      componentDidMount: function() {
        this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
        this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
      }
    });

    module.exports = ReactDOMForm;

    /***/
  }),
  /* 338 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule LocalEventTrapMixin
     */

    'use strict';

    var ReactBrowserEventEmitter = __webpack_require__(289);

    var accumulateInto = __webpack_require__(292);
    var forEachAccumulated = __webpack_require__(293);
    var invariant = __webpack_require__(228);

    function remove(event) {
      event.remove();
    }

    var LocalEventTrapMixin = {
      trapBubbledEvent: function(topLevelType, handlerBaseName) {
        (false ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
        // If a component renders to null or if another component fatals and causes
        // the state of the tree to be corrupted, `node` here can be null.
        var node = this.getDOMNode();
        (false ? invariant(
          node,
          'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
        ) : invariant(node));
        var listener = ReactBrowserEventEmitter.trapBubbledEvent(
          topLevelType,
          handlerBaseName,
          node
        );
        this._localEventListeners =
          accumulateInto(this._localEventListeners, listener);
      },

      // trapCapturedEvent would look nearly identical. We don't implement that
      // method because it isn't currently needed.

      componentWillUnmount: function() {
        if (this._localEventListeners) {
          forEachAccumulated(this._localEventListeners, remove);
        }
      }
    };

    module.exports = LocalEventTrapMixin;

    /***/
  }),
  /* 339 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMImg
     */

    'use strict';

    var EventConstants = __webpack_require__(226);
    var LocalEventTrapMixin = __webpack_require__(338);
    var ReactBrowserComponentMixin = __webpack_require__(331);
    var ReactClass = __webpack_require__(258);
    var ReactElement = __webpack_require__(232);

    var img = ReactElement.createFactory('img');

    /**
     * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
     * capture it on the <img> element itself. There are lots of hacks we could do
     * to accomplish this, but the most reliable is to make <img> a composite
     * component and use `componentDidMount` to attach the event handlers.
     */
    var ReactDOMImg = ReactClass.createClass({
      displayName: 'ReactDOMImg',
      tagName: 'IMG',

      mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

      render: function() {
        return img(this.props);
      },

      componentDidMount: function() {
        this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
        this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
      }
    });

    module.exports = ReactDOMImg;

    /***/
  }),
  /* 340 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMIframe
     */

    'use strict';

    var EventConstants = __webpack_require__(226);
    var LocalEventTrapMixin = __webpack_require__(338);
    var ReactBrowserComponentMixin = __webpack_require__(331);
    var ReactClass = __webpack_require__(258);
    var ReactElement = __webpack_require__(232);

    var iframe = ReactElement.createFactory('iframe');

    /**
     * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
     * capture it on the <iframe> element itself. There are lots of hacks we could
     * do to accomplish this, but the most reliable is to make <iframe> a composite
     * component and use `componentDidMount` to attach the event handlers.
     */
    var ReactDOMIframe = ReactClass.createClass({
      displayName: 'ReactDOMIframe',
      tagName: 'IFRAME',

      mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

      render: function() {
        return iframe(this.props);
      },

      componentDidMount: function() {
        this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
      }
    });

    module.exports = ReactDOMIframe;

    /***/
  }),
  /* 341 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMInput
     */

    'use strict';

    var AutoFocusMixin = __webpack_require__(335);
    var DOMPropertyOperations = __webpack_require__(264);
    var LinkedValueUtils = __webpack_require__(342);
    var ReactBrowserComponentMixin = __webpack_require__(331);
    var ReactClass = __webpack_require__(258);
    var ReactElement = __webpack_require__(232);
    var ReactMount = __webpack_require__(288);
    var ReactUpdates = __webpack_require__(247);

    var assign = __webpack_require__(234);
    var invariant = __webpack_require__(228);

    var input = ReactElement.createFactory('input');

    var instancesByReactID = {};

    function forceUpdateIfMounted() {
      /*jshint validthis:true */
      if (this.isMounted()) {
        this.forceUpdate();
      }
    }

    /**
     * Implements an <input> native component that allows setting these optional
     * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
     *
     * If `checked` or `value` are not supplied (or null/undefined), user actions
     * that affect the checked state or value will trigger updates to the element.
     *
     * If they are supplied (and not null/undefined), the rendered element will not
     * trigger updates to the element. Instead, the props must change in order for
     * the rendered element to be updated.
     *
     * The rendered element will be initialized as unchecked (or `defaultChecked`)
     * with an empty value (or `defaultValue`).
     *
     * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
     */
    var ReactDOMInput = ReactClass.createClass({
      displayName: 'ReactDOMInput',
      tagName: 'INPUT',

      mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

      getInitialState: function() {
        var defaultValue = this.props.defaultValue;
        return {
          initialChecked: this.props.defaultChecked || false,
          initialValue: defaultValue != null ? defaultValue : null
        };
      },

      render: function() {
        // Clone `this.props` so we don't mutate the input.
        var props = assign({}, this.props);

        props.defaultChecked = null;
        props.defaultValue = null;

        var value = LinkedValueUtils.getValue(this);
        props.value = value != null ? value : this.state.initialValue;

        var checked = LinkedValueUtils.getChecked(this);
        props.checked = checked != null ? checked : this.state.initialChecked;

        props.onChange = this._handleChange;

        return input(props, this.props.children);
      },

      componentDidMount: function() {
        var id = ReactMount.getID(this.getDOMNode());
        instancesByReactID[id] = this;
      },

      componentWillUnmount: function() {
        var rootNode = this.getDOMNode();
        var id = ReactMount.getID(rootNode);
        delete instancesByReactID[id];
      },

      componentDidUpdate: function(prevProps, prevState, prevContext) {
        var rootNode = this.getDOMNode();
        if (this.props.checked != null) {
          DOMPropertyOperations.setValueForProperty(
            rootNode,
            'checked',
            this.props.checked || false
          );
        }

        var value = LinkedValueUtils.getValue(this);
        if (value != null) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
        }
      },

      _handleChange: function(event) {
        var returnValue;
        var onChange = LinkedValueUtils.getOnChange(this);
        if (onChange) {
          returnValue = onChange.call(this, event);
        }
        // Here we use asap to wait until all updates have propagated, which
        // is important when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        ReactUpdates.asap(forceUpdateIfMounted, this);

        var name = this.props.name;
        if (this.props.type === 'radio' && name != null) {
          var rootNode = this.getDOMNode();
          var queryRoot = rootNode;

          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }

          // If `rootNode.form` was non-null, then we could try `form.elements`,
          // but that sometimes behaves strangely in IE8. We could also try using
          // `form.getElementsByName`, but that will only return direct children
          // and won't include inputs that use the HTML5 `form=` attribute. Since
          // the input might not even be in a form, let's just use the global
          // `querySelectorAll` to ensure we don't miss anything.
          var group = queryRoot.querySelectorAll(
            'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

          for (var i = 0, groupLen = group.length; i < groupLen; i++) {
            var otherNode = group[i];
            if (otherNode === rootNode ||
              otherNode.form !== rootNode.form) {
              continue;
            }
            var otherID = ReactMount.getID(otherNode);
            (false ? invariant(
              otherID,
              'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
              'same `name` is not supported.'
            ) : invariant(otherID));
            var otherInstance = instancesByReactID[otherID];
            (false ? invariant(
              otherInstance,
              'ReactDOMInput: Unknown radio button ID %s.',
              otherID
            ) : invariant(otherInstance));
            // If this is a controlled radio button group, forcing the input that
            // was previously checked to update will cause it to be come re-checked
            // as appropriate.
            ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
          }
        }

        return returnValue;
      }

    });

    module.exports = ReactDOMInput;

    /***/
  }),
  /* 342 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule LinkedValueUtils
     * @typechecks static-only
     */

    'use strict';

    var ReactPropTypes = __webpack_require__(343);

    var invariant = __webpack_require__(228);

    var hasReadOnlyValue = {
      'button': true,
      'checkbox': true,
      'image': true,
      'hidden': true,
      'radio': true,
      'reset': true,
      'submit': true
    };

    function _assertSingleLink(input) {
      (false ? invariant(
        input.props.checkedLink == null || input.props.valueLink == null,
        'Cannot provide a checkedLink and a valueLink. If you want to use ' +
        'checkedLink, you probably don\'t want to use valueLink and vice versa.'
      ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
    }

    function _assertValueLink(input) {
      _assertSingleLink(input);
      (false ? invariant(
        input.props.value == null && input.props.onChange == null,
        'Cannot provide a valueLink and a value or onChange event. If you want ' +
        'to use value or onChange, you probably don\'t want to use valueLink.'
      ) : invariant(input.props.value == null && input.props.onChange == null));
    }

    function _assertCheckedLink(input) {
      _assertSingleLink(input);
      (false ? invariant(
        input.props.checked == null && input.props.onChange == null,
        'Cannot provide a checkedLink and a checked property or onChange event. ' +
        'If you want to use checked or onChange, you probably don\'t want to ' +
        'use checkedLink'
      ) : invariant(input.props.checked == null && input.props.onChange == null));
    }

    /**
     * @param {SyntheticEvent} e change event to handle
     */
    function _handleLinkedValueChange(e) {
      /*jshint validthis:true */
      this.props.valueLink.requestChange(e.target.value);
    }

    /**
     * @param {SyntheticEvent} e change event to handle
     */
    function _handleLinkedCheckChange(e) {
      /*jshint validthis:true */
      this.props.checkedLink.requestChange(e.target.checked);
    }

    /**
     * Provide a linked `value` attribute for controlled forms. You should not use
     * this outside of the ReactDOM controlled form components.
     */
    var LinkedValueUtils = {
      Mixin: {
        propTypes: {
          value: function(props, propName, componentName) {
            if (!props[propName] ||
              hasReadOnlyValue[props.type] ||
              props.onChange ||
              props.readOnly ||
              props.disabled) {
              return null;
            }
            return new Error(
              'You provided a `value` prop to a form field without an ' +
              '`onChange` handler. This will render a read-only field. If ' +
              'the field should be mutable use `defaultValue`. Otherwise, ' +
              'set either `onChange` or `readOnly`.'
            );
          },
          checked: function(props, propName, componentName) {
            if (!props[propName] ||
              props.onChange ||
              props.readOnly ||
              props.disabled) {
              return null;
            }
            return new Error(
              'You provided a `checked` prop to a form field without an ' +
              '`onChange` handler. This will render a read-only field. If ' +
              'the field should be mutable use `defaultChecked`. Otherwise, ' +
              'set either `onChange` or `readOnly`.'
            );
          },
          onChange: ReactPropTypes.func
        }
      },

      /**
       * @param {ReactComponent} input Form component
       * @return {*} current value of the input either from value prop or link.
       */
      getValue: function(input) {
        if (input.props.valueLink) {
          _assertValueLink(input);
          return input.props.valueLink.value;
        }
        return input.props.value;
      },

      /**
       * @param {ReactComponent} input Form component
       * @return {*} current checked status of the input either from checked prop
       *             or link.
       */
      getChecked: function(input) {
        if (input.props.checkedLink) {
          _assertCheckedLink(input);
          return input.props.checkedLink.value;
        }
        return input.props.checked;
      },

      /**
       * @param {ReactComponent} input Form component
       * @return {function} change callback either from onChange prop or link.
       */
      getOnChange: function(input) {
        if (input.props.valueLink) {
          _assertValueLink(input);
          return _handleLinkedValueChange;
        } else if (input.props.checkedLink) {
          _assertCheckedLink(input);
          return _handleLinkedCheckChange;
        }
        return input.props.onChange;
      }
    };

    module.exports = LinkedValueUtils;

    /***/
  }),
  /* 343 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactPropTypes
     */

    'use strict';

    var ReactElement = __webpack_require__(232);
    var ReactFragment = __webpack_require__(231);
    var ReactPropTypeLocationNames = __webpack_require__(255);

    var emptyFunction = __webpack_require__(237);

    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */

    var ANONYMOUS = '<<anonymous>>';

    var elementTypeChecker = createElementTypeChecker();
    var nodeTypeChecker = createNodeChecker();

    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),

      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: elementTypeChecker,
      instanceOf: createInstanceTypeChecker,
      node: nodeTypeChecker,
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker
    };

    function createChainableTypeChecker(validate) {
      function checkType(isRequired, props, propName, componentName, location) {
        componentName = componentName || ANONYMOUS;
        if (props[propName] == null) {
          var locationName = ReactPropTypeLocationNames[location];
          if (isRequired) {
            return new Error(
              ("Required " + locationName + " `" + propName + "` was not specified in ") +
              ("`" + componentName + "`.")
            );
          }
          return null;
        } else {
          return validate(props, propName, componentName, location);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);

      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          var locationName = ReactPropTypeLocationNames[location];
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);

          return new Error(
            ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
            ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunction.thatReturns(null));
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location) {
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var locationName = ReactPropTypeLocationNames[location];
          var propType = getPropType(propValue);
          return new Error(
            ("Invalid " + locationName + " `" + propName + "` of type ") +
            ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
          );
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location) {
        if (!ReactElement.isValidElement(props[propName])) {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error(
            ("Invalid " + locationName + " `" + propName + "` supplied to ") +
            ("`" + componentName + "`, expected a ReactElement.")
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location) {
        if (!(props[propName] instanceof expectedClass)) {
          var locationName = ReactPropTypeLocationNames[location];
          var expectedClassName = expectedClass.name || ANONYMOUS;
          return new Error(
            ("Invalid " + locationName + " `" + propName + "` supplied to ") +
            ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      function validate(props, propName, componentName, location) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (propValue === expectedValues[i]) {
            return null;
          }
        }

        var locationName = ReactPropTypeLocationNames[location];
        var valuesString = JSON.stringify(expectedValues);
        return new Error(
          ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
          ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
        );
      }
      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error(
            ("Invalid " + locationName + " `" + propName + "` of type ") +
            ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
          );
        }
        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      function validate(props, propName, componentName, location) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (checker(props, propName, componentName, location) == null) {
            return null;
          }
        }

        var locationName = ReactPropTypeLocationNames[location];
        return new Error(
          ("Invalid " + locationName + " `" + propName + "` supplied to ") +
          ("`" + componentName + "`.")
        );
      }
      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location) {
        if (!isNode(props[propName])) {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error(
            ("Invalid " + locationName + " `" + propName + "` supplied to ") +
            ("`" + componentName + "`, expected a ReactNode.")
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          var locationName = ReactPropTypeLocationNames[location];
          return new Error(
            ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
            ("supplied to `" + componentName + "`, expected `object`.")
          );
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (!checker) {
            continue;
          }
          var error = checker(propValue, key, componentName, location);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;
        case 'boolean':
          return !propValue;
        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || ReactElement.isValidElement(propValue)) {
            return true;
          }
          propValue = ReactFragment.extractIfFragment(propValue);
          for (var k in propValue) {
            if (!isNode(propValue[k])) {
              return false;
            }
          }
          return true;
        default:
          return false;
      }
    }

    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return 'array';
      }
      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }
      return propType;
    }

    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
      var propType = getPropType(propValue);
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }
      return propType;
    }

    module.exports = ReactPropTypes;

    /***/
  }),
  /* 344 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMOption
     */

    'use strict';

    var ReactBrowserComponentMixin = __webpack_require__(331);
    var ReactClass = __webpack_require__(258);
    var ReactElement = __webpack_require__(232);

    var warning = __webpack_require__(236);

    var option = ReactElement.createFactory('option');

    /**
     * Implements an <option> native component that warns when `selected` is set.
     */
    var ReactDOMOption = ReactClass.createClass({
      displayName: 'ReactDOMOption',
      tagName: 'OPTION',

      mixins: [ReactBrowserComponentMixin],

      componentWillMount: function() {
        // TODO (yungsters): Remove support for `selected` in <option>.
        if (false) {
          ("production" !== process.env.NODE_ENV ? warning(
            this.props.selected == null,
            'Use the `defaultValue` or `value` props on <select> instead of ' +
            'setting `selected` on <option>.'
          ) : null);
        }
      },

      render: function() {
        return option(this.props, this.props.children);
      }

    });

    module.exports = ReactDOMOption;

    /***/
  }),
  /* 345 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMSelect
     */

    'use strict';

    var AutoFocusMixin = __webpack_require__(335);
    var LinkedValueUtils = __webpack_require__(342);
    var ReactBrowserComponentMixin = __webpack_require__(331);
    var ReactClass = __webpack_require__(258);
    var ReactElement = __webpack_require__(232);
    var ReactUpdates = __webpack_require__(247);

    var assign = __webpack_require__(234);

    var select = ReactElement.createFactory('select');

    function updateOptionsIfPendingUpdateAndMounted() {
      /*jshint validthis:true */
      if (this._pendingUpdate) {
        this._pendingUpdate = false;
        var value = LinkedValueUtils.getValue(this);
        if (value != null && this.isMounted()) {
          updateOptions(this, value);
        }
      }
    }

    /**
     * Validation function for `value` and `defaultValue`.
     * @private
     */
    function selectValueType(props, propName, componentName) {
      if (props[propName] == null) {
        return null;
      }
      if (props.multiple) {
        if (!Array.isArray(props[propName])) {
          return new Error(
            ("The `" + propName + "` prop supplied to <select> must be an array if ") +
            ("`multiple` is true.")
          );
        }
      } else {
        if (Array.isArray(props[propName])) {
          return new Error(
            ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
            ("value if `multiple` is false.")
          );
        }
      }
    }

    /**
     * @param {ReactComponent} component Instance of ReactDOMSelect
     * @param {*} propValue A stringable (with `multiple`, a list of stringables).
     * @private
     */
    function updateOptions(component, propValue) {
      var selectedValue, i, l;
      var options = component.getDOMNode().options;

      if (component.props.multiple) {
        selectedValue = {};
        for (i = 0, l = propValue.length; i < l; i++) {
          selectedValue['' + propValue[i]] = true;
        }
        for (i = 0, l = options.length; i < l; i++) {
          var selected = selectedValue.hasOwnProperty(options[i].value);
          if (options[i].selected !== selected) {
            options[i].selected = selected;
          }
        }
      } else {
        // Do not set `select.value` as exact behavior isn't consistent across all
        // browsers for all cases.
        selectedValue = '' + propValue;
        for (i = 0, l = options.length; i < l; i++) {
          if (options[i].value === selectedValue) {
            options[i].selected = true;
            return;
          }
        }
        if (options.length) {
          options[0].selected = true;
        }
      }
    }

    /**
     * Implements a <select> native component that allows optionally setting the
     * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
     * stringable. If `multiple` is true, the prop must be an array of stringables.
     *
     * If `value` is not supplied (or null/undefined), user actions that change the
     * selected option will trigger updates to the rendered options.
     *
     * If it is supplied (and not null/undefined), the rendered options will not
     * update in response to user actions. Instead, the `value` prop must change in
     * order for the rendered options to update.
     *
     * If `defaultValue` is provided, any options with the supplied values will be
     * selected.
     */
    var ReactDOMSelect = ReactClass.createClass({
      displayName: 'ReactDOMSelect',
      tagName: 'SELECT',

      mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

      propTypes: {
        defaultValue: selectValueType,
        value: selectValueType
      },

      render: function() {
        // Clone `this.props` so we don't mutate the input.
        var props = assign({}, this.props);

        props.onChange = this._handleChange;
        props.value = null;

        return select(props, this.props.children);
      },

      componentWillMount: function() {
        this._pendingUpdate = false;
      },

      componentDidMount: function() {
        var value = LinkedValueUtils.getValue(this);
        if (value != null) {
          updateOptions(this, value);
        } else if (this.props.defaultValue != null) {
          updateOptions(this, this.props.defaultValue);
        }
      },

      componentDidUpdate: function(prevProps) {
        var value = LinkedValueUtils.getValue(this);
        if (value != null) {
          this._pendingUpdate = false;
          updateOptions(this, value);
        } else if (!prevProps.multiple !== !this.props.multiple) {
          // For simplicity, reapply `defaultValue` if `multiple` is toggled.
          if (this.props.defaultValue != null) {
            updateOptions(this, this.props.defaultValue);
          } else {
            // Revert the select back to its default unselected state.
            updateOptions(this, this.props.multiple ? [] : '');
          }
        }
      },

      _handleChange: function(event) {
        var returnValue;
        var onChange = LinkedValueUtils.getOnChange(this);
        if (onChange) {
          returnValue = onChange.call(this, event);
        }

        this._pendingUpdate = true;
        ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
        return returnValue;
      }

    });

    module.exports = ReactDOMSelect;

    /***/
  }),
  /* 346 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMTextarea
     */

    'use strict';

    var AutoFocusMixin = __webpack_require__(335);
    var DOMPropertyOperations = __webpack_require__(264);
    var LinkedValueUtils = __webpack_require__(342);
    var ReactBrowserComponentMixin = __webpack_require__(331);
    var ReactClass = __webpack_require__(258);
    var ReactElement = __webpack_require__(232);
    var ReactUpdates = __webpack_require__(247);

    var assign = __webpack_require__(234);
    var invariant = __webpack_require__(228);

    var warning = __webpack_require__(236);

    var textarea = ReactElement.createFactory('textarea');

    function forceUpdateIfMounted() {
      /*jshint validthis:true */
      if (this.isMounted()) {
        this.forceUpdate();
      }
    }

    /**
     * Implements a <textarea> native component that allows setting `value`, and
     * `defaultValue`. This differs from the traditional DOM API because value is
     * usually set as PCDATA children.
     *
     * If `value` is not supplied (or null/undefined), user actions that affect the
     * value will trigger updates to the element.
     *
     * If `value` is supplied (and not null/undefined), the rendered element will
     * not trigger updates to the element. Instead, the `value` prop must change in
     * order for the rendered element to be updated.
     *
     * The rendered element will be initialized with an empty value, the prop
     * `defaultValue` if specified, or the children content (deprecated).
     */
    var ReactDOMTextarea = ReactClass.createClass({
      displayName: 'ReactDOMTextarea',
      tagName: 'TEXTAREA',

      mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

      getInitialState: function() {
        var defaultValue = this.props.defaultValue;
        // TODO (yungsters): Remove support for children content in <textarea>.
        var children = this.props.children;
        if (children != null) {
          if (false) {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'Use the `defaultValue` or `value` props instead of setting ' +
              'children on <textarea>.'
            ) : null);
          }
          (false ? invariant(
            defaultValue == null,
            'If you supply `defaultValue` on a <textarea>, do not pass children.'
          ) : invariant(defaultValue == null));
          if (Array.isArray(children)) {
            (false ? invariant(
              children.length <= 1,
              '<textarea> can only have at most one child.'
            ) : invariant(children.length <= 1));
            children = children[0];
          }

          defaultValue = '' + children;
        }
        if (defaultValue == null) {
          defaultValue = '';
        }
        var value = LinkedValueUtils.getValue(this);
        return {
          // We save the initial value so that `ReactDOMComponent` doesn't update
          // `textContent` (unnecessary since we update value).
          // The initial value can be a boolean or object so that's why it's
          // forced to be a string.
          initialValue: '' + (value != null ? value : defaultValue)
        };
      },

      render: function() {
        // Clone `this.props` so we don't mutate the input.
        var props = assign({}, this.props);

        (false ? invariant(
          props.dangerouslySetInnerHTML == null,
          '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
        ) : invariant(props.dangerouslySetInnerHTML == null));

        props.defaultValue = null;
        props.value = null;
        props.onChange = this._handleChange;

        // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.
        return textarea(props, this.state.initialValue);
      },

      componentDidUpdate: function(prevProps, prevState, prevContext) {
        var value = LinkedValueUtils.getValue(this);
        if (value != null) {
          var rootNode = this.getDOMNode();
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
        }
      },

      _handleChange: function(event) {
        var returnValue;
        var onChange = LinkedValueUtils.getOnChange(this);
        if (onChange) {
          returnValue = onChange.call(this, event);
        }
        ReactUpdates.asap(forceUpdateIfMounted, this);
        return returnValue;
      }

    });

    module.exports = ReactDOMTextarea;

    /***/
  }),
  /* 347 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactEventListener
     * @typechecks static-only
     */

    'use strict';

    var EventListener = __webpack_require__(348);
    var ExecutionEnvironment = __webpack_require__(272);
    var PooledClass = __webpack_require__(230);
    var ReactInstanceHandles = __webpack_require__(240);
    var ReactMount = __webpack_require__(288);
    var ReactUpdates = __webpack_require__(247);

    var assign = __webpack_require__(234);
    var getEventTarget = __webpack_require__(319);
    var getUnboundedScrollPosition = __webpack_require__(349);

    /**
     * Finds the parent React component of `node`.
     *
     * @param {*} node
     * @return {?DOMEventTarget} Parent container, or `null` if the specified node
     *                           is not nested.
     */
    function findParent(node) {
      // TODO: It may be a good idea to cache this to prevent unnecessary DOM
      // traversal, but caching is difficult to do correctly without using a
      // mutation observer to listen for all DOM changes.
      var nodeID = ReactMount.getID(node);
      var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
      var container = ReactMount.findReactContainerForID(rootID);
      var parent = ReactMount.getFirstReactDOM(container);
      return parent;
    }

    // Used to store ancestor hierarchy in top level callback
    function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
      this.topLevelType = topLevelType;
      this.nativeEvent = nativeEvent;
      this.ancestors = [];
    }
    assign(TopLevelCallbackBookKeeping.prototype, {
      destructor: function() {
        this.topLevelType = null;
        this.nativeEvent = null;
        this.ancestors.length = 0;
      }
    });
    PooledClass.addPoolingTo(
      TopLevelCallbackBookKeeping,
      PooledClass.twoArgumentPooler
    );

    function handleTopLevelImpl(bookKeeping) {
      var topLevelTarget = ReactMount.getFirstReactDOM(
        getEventTarget(bookKeeping.nativeEvent)
      ) || window;

      // Loop through the hierarchy, in case there's any nested components.
      // It's important that we build the array of ancestors before calling any
      // event handlers, because event handlers can modify the DOM, leading to
      // inconsistencies with ReactMount's node cache. See #1105.
      var ancestor = topLevelTarget;
      while (ancestor) {
        bookKeeping.ancestors.push(ancestor);
        ancestor = findParent(ancestor);
      }

      for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
        topLevelTarget = bookKeeping.ancestors[i];
        var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
        ReactEventListener._handleTopLevel(
          bookKeeping.topLevelType,
          topLevelTarget,
          topLevelTargetID,
          bookKeeping.nativeEvent
        );
      }
    }

    function scrollValueMonitor(cb) {
      var scrollPosition = getUnboundedScrollPosition(window);
      cb(scrollPosition);
    }

    var ReactEventListener = {
      _enabled: true,
      _handleTopLevel: null,

      WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

      setHandleTopLevel: function(handleTopLevel) {
        ReactEventListener._handleTopLevel = handleTopLevel;
      },

      setEnabled: function(enabled) {
        ReactEventListener._enabled = !!enabled;
      },

      isEnabled: function() {
        return ReactEventListener._enabled;
      },

      /**
       * Traps top-level events by using event bubbling.
       *
       * @param {string} topLevelType Record from `EventConstants`.
       * @param {string} handlerBaseName Event name (e.g. "click").
       * @param {object} handle Element on which to attach listener.
       * @return {object} An object with a remove function which will forcefully
       *                  remove the listener.
       * @internal
       */
      trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
        var element = handle;
        if (!element) {
          return null;
        }
        return EventListener.listen(
          element,
          handlerBaseName,
          ReactEventListener.dispatchEvent.bind(null, topLevelType)
        );
      },

      /**
       * Traps a top-level event by using event capturing.
       *
       * @param {string} topLevelType Record from `EventConstants`.
       * @param {string} handlerBaseName Event name (e.g. "click").
       * @param {object} handle Element on which to attach listener.
       * @return {object} An object with a remove function which will forcefully
       *                  remove the listener.
       * @internal
       */
      trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
        var element = handle;
        if (!element) {
          return null;
        }
        return EventListener.capture(
          element,
          handlerBaseName,
          ReactEventListener.dispatchEvent.bind(null, topLevelType)
        );
      },

      monitorScrollValue: function(refresh) {
        var callback = scrollValueMonitor.bind(null, refresh);
        EventListener.listen(window, 'scroll', callback);
      },

      dispatchEvent: function(topLevelType, nativeEvent) {
        if (!ReactEventListener._enabled) {
          return;
        }

        var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
          topLevelType,
          nativeEvent
        );
        try {
          // Event queue being processed in the same cycle allows
          // `preventDefault`.
          ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
        } finally {
          TopLevelCallbackBookKeeping.release(bookKeeping);
        }
      }
    };

    module.exports = ReactEventListener;

    /***/
  }),
  /* 348 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * @providesModule EventListener
     * @typechecks
     */

    var emptyFunction = __webpack_require__(237);

    /**
     * Upstream version of event listener. Does not take into account specific
     * nature of platform.
     */
    var EventListener = {
      /**
       * Listen to DOM events during the bubble phase.
       *
       * @param {DOMEventTarget} target DOM element to register listener on.
       * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
       * @param {function} callback Callback function.
       * @return {object} Object with a `remove` method.
       */
      listen: function(target, eventType, callback) {
        if (target.addEventListener) {
          target.addEventListener(eventType, callback, false);
          return {
            remove: function() {
              target.removeEventListener(eventType, callback, false);
            }
          };
        } else if (target.attachEvent) {
          target.attachEvent('on' + eventType, callback);
          return {
            remove: function() {
              target.detachEvent('on' + eventType, callback);
            }
          };
        }
      },

      /**
       * Listen to DOM events during the capture phase.
       *
       * @param {DOMEventTarget} target DOM element to register listener on.
       * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
       * @param {function} callback Callback function.
       * @return {object} Object with a `remove` method.
       */
      capture: function(target, eventType, callback) {
        if (!target.addEventListener) {
          if (false) {
            console.error(
              'Attempted to listen to events during the capture phase on a ' +
              'browser that does not support the capture phase. Your application ' +
              'will not receive some events.'
            );
          }
          return {
            remove: emptyFunction
          };
        } else {
          target.addEventListener(eventType, callback, true);
          return {
            remove: function() {
              target.removeEventListener(eventType, callback, true);
            }
          };
        }
      },

      registerDefault: function() {}
    };

    module.exports = EventListener;

    /***/
  }),
  /* 349 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getUnboundedScrollPosition
     * @typechecks
     */

    "use strict";

    /**
     * Gets the scroll position of the supplied element or window.
     *
     * The return values are unbounded, unlike `getScrollPosition`. This means they
     * may be negative or exceed the element boundaries (which is possible using
     * inertial scrolling).
     *
     * @param {DOMWindow|DOMElement} scrollable
     * @return {object} Map with `x` and `y` keys.
     */
    function getUnboundedScrollPosition(scrollable) {
      if (scrollable === window) {
        return {
          x: window.pageXOffset || document.documentElement.scrollLeft,
          y: window.pageYOffset || document.documentElement.scrollTop
        };
      }
      return {
        x: scrollable.scrollLeft,
        y: scrollable.scrollTop
      };
    }

    module.exports = getUnboundedScrollPosition;

    /***/
  }),
  /* 350 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactInjection
     */

    'use strict';

    var DOMProperty = __webpack_require__(265);
    var EventPluginHub = __webpack_require__(290);
    var ReactComponentEnvironment = __webpack_require__(306);
    var ReactClass = __webpack_require__(258);
    var ReactEmptyComponent = __webpack_require__(297);
    var ReactBrowserEventEmitter = __webpack_require__(289);
    var ReactNativeComponent = __webpack_require__(256);
    var ReactDOMComponent = __webpack_require__(308);
    var ReactPerf = __webpack_require__(249);
    var ReactRootIndex = __webpack_require__(241);
    var ReactUpdates = __webpack_require__(247);

    var ReactInjection = {
      Component: ReactComponentEnvironment.injection,
      Class: ReactClass.injection,
      DOMComponent: ReactDOMComponent.injection,
      DOMProperty: DOMProperty.injection,
      EmptyComponent: ReactEmptyComponent.injection,
      EventPluginHub: EventPluginHub.injection,
      EventEmitter: ReactBrowserEventEmitter.injection,
      NativeComponent: ReactNativeComponent.injection,
      Perf: ReactPerf.injection,
      RootIndex: ReactRootIndex.injection,
      Updates: ReactUpdates.injection
    };

    module.exports = ReactInjection;

    /***/
  }),
  /* 351 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactReconcileTransaction
     * @typechecks static-only
     */

    'use strict';

    var CallbackQueue = __webpack_require__(248);
    var PooledClass = __webpack_require__(230);
    var ReactBrowserEventEmitter = __webpack_require__(289);
    var ReactInputSelection = __webpack_require__(352);
    var ReactPutListenerQueue = __webpack_require__(356);
    var Transaction = __webpack_require__(257);

    var assign = __webpack_require__(234);

    /**
     * Ensures that, when possible, the selection range (currently selected text
     * input) is not disturbed by performing the transaction.
     */
    var SELECTION_RESTORATION = {
      /**
       * @return {Selection} Selection information.
       */
      initialize: ReactInputSelection.getSelectionInformation,
      /**
       * @param {Selection} sel Selection information returned from `initialize`.
       */
      close: ReactInputSelection.restoreSelection
    };

    /**
     * Suppresses events (blur/focus) that could be inadvertently dispatched due to
     * high level DOM manipulations (like temporarily removing a text input from the
     * DOM).
     */
    var EVENT_SUPPRESSION = {
      /**
       * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
       * the reconciliation.
       */
      initialize: function() {
        var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
        ReactBrowserEventEmitter.setEnabled(false);
        return currentlyEnabled;
      },

      /**
       * @param {boolean} previouslyEnabled Enabled status of
       *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
       *   restores the previous value.
       */
      close: function(previouslyEnabled) {
        ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
      }
    };

    /**
     * Provides a queue for collecting `componentDidMount` and
     * `componentDidUpdate` callbacks during the the transaction.
     */
    var ON_DOM_READY_QUEUEING = {
      /**
       * Initializes the internal `onDOMReady` queue.
       */
      initialize: function() {
        this.reactMountReady.reset();
      },

      /**
       * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
       */
      close: function() {
        this.reactMountReady.notifyAll();
      }
    };

    var PUT_LISTENER_QUEUEING = {
      initialize: function() {
        this.putListenerQueue.reset();
      },

      close: function() {
        this.putListenerQueue.putListeners();
      }
    };

    /**
     * Executed within the scope of the `Transaction` instance. Consider these as
     * being member methods, but with an implied ordering while being isolated from
     * each other.
     */
    var TRANSACTION_WRAPPERS = [
      PUT_LISTENER_QUEUEING,
      SELECTION_RESTORATION,
      EVENT_SUPPRESSION,
      ON_DOM_READY_QUEUEING
    ];

    /**
     * Currently:
     * - The order that these are listed in the transaction is critical:
     * - Suppresses events.
     * - Restores selection range.
     *
     * Future:
     * - Restore document/overflow scroll positions that were unintentionally
     *   modified via DOM insertions above the top viewport boundary.
     * - Implement/integrate with customized constraint based layout system and keep
     *   track of which dimensions must be remeasured.
     *
     * @class ReactReconcileTransaction
     */
    function ReactReconcileTransaction() {
      this.reinitializeTransaction();
      // Only server-side rendering really needs this option (see
      // `ReactServerRendering`), but server-side uses
      // `ReactServerRenderingTransaction` instead. This option is here so that it's
      // accessible and defaults to false when `ReactDOMComponent` and
      // `ReactTextComponent` checks it in `mountComponent`.`
      this.renderToStaticMarkup = false;
      this.reactMountReady = CallbackQueue.getPooled(null);
      this.putListenerQueue = ReactPutListenerQueue.getPooled();
    }

    var Mixin = {
      /**
       * @see Transaction
       * @abstract
       * @final
       * @return {array<object>} List of operation wrap proceedures.
       *   TODO: convert to array<TransactionWrapper>
       */
      getTransactionWrappers: function() {
        return TRANSACTION_WRAPPERS;
      },

      /**
       * @return {object} The queue to collect `onDOMReady` callbacks with.
       */
      getReactMountReady: function() {
        return this.reactMountReady;
      },

      getPutListenerQueue: function() {
        return this.putListenerQueue;
      },

      /**
       * `PooledClass` looks for this, and will invoke this before allowing this
       * instance to be resused.
       */
      destructor: function() {
        CallbackQueue.release(this.reactMountReady);
        this.reactMountReady = null;

        ReactPutListenerQueue.release(this.putListenerQueue);
        this.putListenerQueue = null;
      }
    };

    assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

    PooledClass.addPoolingTo(ReactReconcileTransaction);

    module.exports = ReactReconcileTransaction;

    /***/
  }),
  /* 352 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactInputSelection
     */

    'use strict';

    var ReactDOMSelection = __webpack_require__(353);

    var containsNode = __webpack_require__(300);
    var focusNode = __webpack_require__(336);
    var getActiveElement = __webpack_require__(355);

    function isInDocument(node) {
      return containsNode(document.documentElement, node);
    }

    /**
     * @ReactInputSelection: React input selection module. Based on Selection.js,
     * but modified to be suitable for react and has a couple of bug fixes (doesn't
     * assume buttons have range selections allowed).
     * Input selection module for React.
     */
    var ReactInputSelection = {

      hasSelectionCapabilities: function(elem) {
        return elem && (
          ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
            elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
        );
      },

      getSelectionInformation: function() {
        var focusedElem = getActiveElement();
        return {
          focusedElem: focusedElem,
          selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
            ReactInputSelection.getSelection(focusedElem) : null
        };
      },

      /**
       * @restoreSelection: If any selection information was potentially lost,
       * restore it. This is useful when performing operations that could remove dom
       * nodes and place them back in, resulting in focus being lost.
       */
      restoreSelection: function(priorSelectionInformation) {
        var curFocusedElem = getActiveElement();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem &&
          isInDocument(priorFocusedElem)) {
          if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
            ReactInputSelection.setSelection(
              priorFocusedElem,
              priorSelectionRange
            );
          }
          focusNode(priorFocusedElem);
        }
      },

      /**
       * @getSelection: Gets the selection bounds of a focused textarea, input or
       * contentEditable node.
       * -@input: Look up selection bounds of this input
       * -@return {start: selectionStart, end: selectionEnd}
       */
      getSelection: function(input) {
        var selection;

        if ('selectionStart' in input) {
          // Modern browser with input or textarea.
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else if (document.selection && input.nodeName === 'INPUT') {
          // IE8 input.
          var range = document.selection.createRange();
          // There can only be one selection per document in IE, so it must
          // be in our element.
          if (range.parentElement() === input) {
            selection = {
              start: -range.moveStart('character', -input.value.length),
              end: -range.moveEnd('character', -input.value.length)
            };
          }
        } else {
          // Content editable or old IE textarea.
          selection = ReactDOMSelection.getOffsets(input);
        }

        return selection || { start: 0, end: 0 };
      },

      /**
       * @setSelection: Sets the selection bounds of a textarea or input and focuses
       * the input.
       * -@input     Set selection bounds of this input or textarea
       * -@offsets   Object of same form that is returned from get*
       */
      setSelection: function(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (typeof end === 'undefined') {
          end = start;
        }

        if ('selectionStart' in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else if (document.selection && input.nodeName === 'INPUT') {
          var range = input.createTextRange();
          range.collapse(true);
          range.moveStart('character', start);
          range.moveEnd('character', end - start);
          range.select();
        } else {
          ReactDOMSelection.setOffsets(input, offsets);
        }
      }
    };

    module.exports = ReactInputSelection;

    /***/
  }),
  /* 353 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactDOMSelection
     */

    'use strict';

    var ExecutionEnvironment = __webpack_require__(272);

    var getNodeForCharacterOffset = __webpack_require__(354);
    var getTextContentAccessor = __webpack_require__(316);

    /**
     * While `isCollapsed` is available on the Selection object and `collapsed`
     * is available on the Range object, IE11 sometimes gets them wrong.
     * If the anchor/focus nodes and offsets are the same, the range is collapsed.
     */
    function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
      return anchorNode === focusNode && anchorOffset === focusOffset;
    }

    /**
     * Get the appropriate anchor and focus node/offset pairs for IE.
     *
     * The catch here is that IE's selection API doesn't provide information
     * about whether the selection is forward or backward, so we have to
     * behave as though it's always forward.
     *
     * IE text differs from modern selection in that it behaves as though
     * block elements end with a new line. This means character offsets will
     * differ between the two APIs.
     *
     * @param {DOMElement} node
     * @return {object}
     */
    function getIEOffsets(node) {
      var selection = document.selection;
      var selectedRange = selection.createRange();
      var selectedLength = selectedRange.text.length;

      // Duplicate selection so we can move range without breaking user selection.
      var fromStart = selectedRange.duplicate();
      fromStart.moveToElementText(node);
      fromStart.setEndPoint('EndToStart', selectedRange);

      var startOffset = fromStart.text.length;
      var endOffset = startOffset + selectedLength;

      return {
        start: startOffset,
        end: endOffset
      };
    }

    /**
     * @param {DOMElement} node
     * @return {?object}
     */
    function getModernOffsets(node) {
      var selection = window.getSelection && window.getSelection();

      if (!selection || selection.rangeCount === 0) {
        return null;
      }

      var anchorNode = selection.anchorNode;
      var anchorOffset = selection.anchorOffset;
      var focusNode = selection.focusNode;
      var focusOffset = selection.focusOffset;

      var currentRange = selection.getRangeAt(0);

      // If the node and offset values are the same, the selection is collapsed.
      // `Selection.isCollapsed` is available natively, but IE sometimes gets
      // this value wrong.
      var isSelectionCollapsed = isCollapsed(
        selection.anchorNode,
        selection.anchorOffset,
        selection.focusNode,
        selection.focusOffset
      );

      var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

      var tempRange = currentRange.cloneRange();
      tempRange.selectNodeContents(node);
      tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

      var isTempRangeCollapsed = isCollapsed(
        tempRange.startContainer,
        tempRange.startOffset,
        tempRange.endContainer,
        tempRange.endOffset
      );

      var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
      var end = start + rangeLength;

      // Detect whether the selection is backward.
      var detectionRange = document.createRange();
      detectionRange.setStart(anchorNode, anchorOffset);
      detectionRange.setEnd(focusNode, focusOffset);
      var isBackward = detectionRange.collapsed;

      return {
        start: isBackward ? end : start,
        end: isBackward ? start : end
      };
    }

    /**
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */
    function setIEOffsets(node, offsets) {
      var range = document.selection.createRange().duplicate();
      var start, end;

      if (typeof offsets.end === 'undefined') {
        start = offsets.start;
        end = start;
      } else if (offsets.start > offsets.end) {
        start = offsets.end;
        end = offsets.start;
      } else {
        start = offsets.start;
        end = offsets.end;
      }

      range.moveToElementText(node);
      range.moveStart('character', start);
      range.setEndPoint('EndToStart', range);
      range.moveEnd('character', end - start);
      range.select();
    }

    /**
     * In modern non-IE browsers, we can support both forward and backward
     * selections.
     *
     * Note: IE10+ supports the Selection object, but it does not support
     * the `extend` method, which means that even in modern IE, it's not possible
     * to programatically create a backward selection. Thus, for all IE
     * versions, we use the old IE API to create our selections.
     *
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */
    function setModernOffsets(node, offsets) {
      if (!window.getSelection) {
        return;
      }

      var selection = window.getSelection();
      var length = node[getTextContentAccessor()].length;
      var start = Math.min(offsets.start, length);
      var end = typeof offsets.end === 'undefined' ?
        start : Math.min(offsets.end, length);

      // IE 11 uses modern selection, but doesn't support the extend method.
      // Flip backward selections, so we can set with a single range.
      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }

      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);

      if (startMarker && endMarker) {
        var range = document.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();

        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }

    var useIEOffsets = (
      ExecutionEnvironment.canUseDOM &&
      'selection' in document &&
      !('getSelection' in window)
    );

    var ReactDOMSelection = {
      /**
       * @param {DOMElement} node
       */
      getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

      /**
       * @param {DOMElement|DOMTextNode} node
       * @param {object} offsets
       */
      setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
    };

    module.exports = ReactDOMSelection;

    /***/
  }),
  /* 354 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getNodeForCharacterOffset
     */

    'use strict';

    /**
     * Given any node return the first leaf node without children.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {DOMElement|DOMTextNode}
     */
    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }
      return node;
    }

    /**
     * Get the next sibling within a container. This will walk up the
     * DOM if a node's siblings have been exhausted.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {?DOMElement|DOMTextNode}
     */
    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }
        node = node.parentNode;
      }
    }

    /**
     * Get object describing the nodes which contain characters at offset.
     *
     * @param {DOMElement|DOMTextNode} root
     * @param {number} offset
     * @return {?object}
     */
    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      var nodeStart = 0;
      var nodeEnd = 0;

      while (node) {
        if (node.nodeType === 3) {
          nodeEnd = nodeStart + node.textContent.length;

          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node,
              offset: offset - nodeStart
            };
          }

          nodeStart = nodeEnd;
        }

        node = getLeafNode(getSiblingNode(node));
      }
    }

    module.exports = getNodeForCharacterOffset;

    /***/
  }),
  /* 355 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getActiveElement
     * @typechecks
     */

    /**
     * Same as document.activeElement but wraps in a try-catch block. In IE it is
     * not safe to call document.activeElement if there is nothing focused.
     *
     * The activeElement will be null only if the document body is not yet defined.
     */
    function getActiveElement() /*?DOMElement*/ {
      try {
        return document.activeElement || document.body;
      } catch (e) {
        return document.body;
      }
    }

    module.exports = getActiveElement;

    /***/
  }),
  /* 356 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactPutListenerQueue
     */

    'use strict';

    var PooledClass = __webpack_require__(230);
    var ReactBrowserEventEmitter = __webpack_require__(289);

    var assign = __webpack_require__(234);

    function ReactPutListenerQueue() {
      this.listenersToPut = [];
    }

    assign(ReactPutListenerQueue.prototype, {
      enqueuePutListener: function(rootNodeID, propKey, propValue) {
        this.listenersToPut.push({
          rootNodeID: rootNodeID,
          propKey: propKey,
          propValue: propValue
        });
      },

      putListeners: function() {
        for (var i = 0; i < this.listenersToPut.length; i++) {
          var listenerToPut = this.listenersToPut[i];
          ReactBrowserEventEmitter.putListener(
            listenerToPut.rootNodeID,
            listenerToPut.propKey,
            listenerToPut.propValue
          );
        }
      },

      reset: function() {
        this.listenersToPut.length = 0;
      },

      destructor: function() {
        this.reset();
      }
    });

    PooledClass.addPoolingTo(ReactPutListenerQueue);

    module.exports = ReactPutListenerQueue;

    /***/
  }),
  /* 357 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SelectEventPlugin
     */

    'use strict';

    var EventConstants = __webpack_require__(226);
    var EventPropagators = __webpack_require__(314);
    var ReactInputSelection = __webpack_require__(352);
    var SyntheticEvent = __webpack_require__(318);

    var getActiveElement = __webpack_require__(355);
    var isTextInputElement = __webpack_require__(322);
    var keyOf = __webpack_require__(260);
    var shallowEqual = __webpack_require__(358);

    var topLevelTypes = EventConstants.topLevelTypes;

    var eventTypes = {
      select: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onSelect: null }),
          captured: keyOf({ onSelectCapture: null })
        },
        dependencies: [
          topLevelTypes.topBlur,
          topLevelTypes.topContextMenu,
          topLevelTypes.topFocus,
          topLevelTypes.topKeyDown,
          topLevelTypes.topMouseDown,
          topLevelTypes.topMouseUp,
          topLevelTypes.topSelectionChange
        ]
      }
    };

    var activeElement = null;
    var activeElementID = null;
    var lastSelection = null;
    var mouseDown = false;

    /**
     * Get an object which is a unique representation of the current selection.
     *
     * The return value will not be consistent across nodes or browsers, but
     * two identical selections on the same node will return identical objects.
     *
     * @param {DOMElement} node
     * @param {object}
     */
    function getSelection(node) {
      if ('selectionStart' in node &&
        ReactInputSelection.hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else if (window.getSelection) {
        var selection = window.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      } else if (document.selection) {
        var range = document.selection.createRange();
        return {
          parentElement: range.parentElement(),
          text: range.text,
          top: range.boundingTop,
          left: range.boundingLeft
        };
      }
    }

    /**
     * Poll selection to see whether it's changed.
     *
     * @param {object} nativeEvent
     * @return {?SyntheticEvent}
     */
    function constructSelectEvent(nativeEvent) {
      // Ensure we have the right element, and that the user is not dragging a
      // selection (this matches native `select` event behavior). In HTML5, select
      // fires only on input and textarea thus if there's no focused element we
      // won't dispatch.
      if (mouseDown ||
        activeElement == null ||
        activeElement !== getActiveElement()) {
        return null;
      }

      // Only fire when selection has actually changed.
      var currentSelection = getSelection(activeElement);
      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;

        var syntheticEvent = SyntheticEvent.getPooled(
          eventTypes.select,
          activeElementID,
          nativeEvent
        );

        syntheticEvent.type = 'select';
        syntheticEvent.target = activeElement;

        EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

        return syntheticEvent;
      }
    }

    /**
     * This plugin creates an `onSelect` event that normalizes select events
     * across form elements.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - contentEditable
     *
     * This differs from native browser implementations in the following ways:
     * - Fires on contentEditable fields as well as inputs.
     * - Fires for collapsed selection.
     * - Fires after user input.
     */
    var SelectEventPlugin = {

      eventTypes: eventTypes,

      /**
       * @param {string} topLevelType Record from `EventConstants`.
       * @param {DOMEventTarget} topLevelTarget The listening component root node.
       * @param {string} topLevelTargetID ID of `topLevelTarget`.
       * @param {object} nativeEvent Native browser event.
       * @return {*} An accumulation of synthetic events.
       * @see {EventPluginHub.extractEvents}
       */
      extractEvents: function(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent) {

        switch (topLevelType) {
          // Track the input node that has focus.
          case topLevelTypes.topFocus:
            if (isTextInputElement(topLevelTarget) ||
              topLevelTarget.contentEditable === 'true') {
              activeElement = topLevelTarget;
              activeElementID = topLevelTargetID;
              lastSelection = null;
            }
            break;
          case topLevelTypes.topBlur:
            activeElement = null;
            activeElementID = null;
            lastSelection = null;
            break;

            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
          case topLevelTypes.topMouseDown:
            mouseDown = true;
            break;
          case topLevelTypes.topContextMenu:
          case topLevelTypes.topMouseUp:
            mouseDown = false;
            return constructSelectEvent(nativeEvent);

            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't).
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
          case topLevelTypes.topSelectionChange:
          case topLevelTypes.topKeyDown:
          case topLevelTypes.topKeyUp:
            return constructSelectEvent(nativeEvent);
        }
      }
    };

    module.exports = SelectEventPlugin;

    /***/
  }),
  /* 358 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule shallowEqual
     */

    'use strict';

    /**
     * Performs equality by iterating through keys on an object and returning
     * false when any key has values which are not strictly equal between
     * objA and objB. Returns true when the values of all keys are strictly equal.
     *
     * @return {boolean}
     */
    function shallowEqual(objA, objB) {
      if (objA === objB) {
        return true;
      }
      var key;
      // Test for A's keys different from B.
      for (key in objA) {
        if (objA.hasOwnProperty(key) &&
          (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
          return false;
        }
      }
      // Test for B's keys missing from A.
      for (key in objB) {
        if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
          return false;
        }
      }
      return true;
    }

    module.exports = shallowEqual;

    /***/
  }),
  /* 359 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ServerReactRootIndex
     * @typechecks
     */

    'use strict';

    /**
     * Size of the reactRoot ID space. We generate random numbers for React root
     * IDs and if there's a collision the events and DOM update system will
     * get confused. In the future we need a way to generate GUIDs but for
     * now this will work on a smaller scale.
     */
    var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

    var ServerReactRootIndex = {
      createReactRootIndex: function() {
        return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
      }
    };

    module.exports = ServerReactRootIndex;

    /***/
  }),
  /* 360 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SimpleEventPlugin
     */

    'use strict';

    var EventConstants = __webpack_require__(226);
    var EventPluginUtils = __webpack_require__(225);
    var EventPropagators = __webpack_require__(314);
    var SyntheticClipboardEvent = __webpack_require__(361);
    var SyntheticEvent = __webpack_require__(318);
    var SyntheticFocusEvent = __webpack_require__(362);
    var SyntheticKeyboardEvent = __webpack_require__(363);
    var SyntheticMouseEvent = __webpack_require__(326);
    var SyntheticDragEvent = __webpack_require__(366);
    var SyntheticTouchEvent = __webpack_require__(367);
    var SyntheticUIEvent = __webpack_require__(327);
    var SyntheticWheelEvent = __webpack_require__(368);

    var getEventCharCode = __webpack_require__(364);

    var invariant = __webpack_require__(228);
    var keyOf = __webpack_require__(260);
    var warning = __webpack_require__(236);

    var topLevelTypes = EventConstants.topLevelTypes;

    var eventTypes = {
      blur: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onBlur: true }),
          captured: keyOf({ onBlurCapture: true })
        }
      },
      click: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onClick: true }),
          captured: keyOf({ onClickCapture: true })
        }
      },
      contextMenu: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onContextMenu: true }),
          captured: keyOf({ onContextMenuCapture: true })
        }
      },
      copy: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onCopy: true }),
          captured: keyOf({ onCopyCapture: true })
        }
      },
      cut: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onCut: true }),
          captured: keyOf({ onCutCapture: true })
        }
      },
      doubleClick: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onDoubleClick: true }),
          captured: keyOf({ onDoubleClickCapture: true })
        }
      },
      drag: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onDrag: true }),
          captured: keyOf({ onDragCapture: true })
        }
      },
      dragEnd: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onDragEnd: true }),
          captured: keyOf({ onDragEndCapture: true })
        }
      },
      dragEnter: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onDragEnter: true }),
          captured: keyOf({ onDragEnterCapture: true })
        }
      },
      dragExit: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onDragExit: true }),
          captured: keyOf({ onDragExitCapture: true })
        }
      },
      dragLeave: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onDragLeave: true }),
          captured: keyOf({ onDragLeaveCapture: true })
        }
      },
      dragOver: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onDragOver: true }),
          captured: keyOf({ onDragOverCapture: true })
        }
      },
      dragStart: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onDragStart: true }),
          captured: keyOf({ onDragStartCapture: true })
        }
      },
      drop: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onDrop: true }),
          captured: keyOf({ onDropCapture: true })
        }
      },
      focus: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onFocus: true }),
          captured: keyOf({ onFocusCapture: true })
        }
      },
      input: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onInput: true }),
          captured: keyOf({ onInputCapture: true })
        }
      },
      keyDown: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onKeyDown: true }),
          captured: keyOf({ onKeyDownCapture: true })
        }
      },
      keyPress: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onKeyPress: true }),
          captured: keyOf({ onKeyPressCapture: true })
        }
      },
      keyUp: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onKeyUp: true }),
          captured: keyOf({ onKeyUpCapture: true })
        }
      },
      load: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onLoad: true }),
          captured: keyOf({ onLoadCapture: true })
        }
      },
      error: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onError: true }),
          captured: keyOf({ onErrorCapture: true })
        }
      },
      // Note: We do not allow listening to mouseOver events. Instead, use the
      // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
      mouseDown: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onMouseDown: true }),
          captured: keyOf({ onMouseDownCapture: true })
        }
      },
      mouseMove: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onMouseMove: true }),
          captured: keyOf({ onMouseMoveCapture: true })
        }
      },
      mouseOut: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onMouseOut: true }),
          captured: keyOf({ onMouseOutCapture: true })
        }
      },
      mouseOver: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onMouseOver: true }),
          captured: keyOf({ onMouseOverCapture: true })
        }
      },
      mouseUp: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onMouseUp: true }),
          captured: keyOf({ onMouseUpCapture: true })
        }
      },
      paste: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onPaste: true }),
          captured: keyOf({ onPasteCapture: true })
        }
      },
      reset: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onReset: true }),
          captured: keyOf({ onResetCapture: true })
        }
      },
      scroll: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onScroll: true }),
          captured: keyOf({ onScrollCapture: true })
        }
      },
      submit: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onSubmit: true }),
          captured: keyOf({ onSubmitCapture: true })
        }
      },
      touchCancel: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onTouchCancel: true }),
          captured: keyOf({ onTouchCancelCapture: true })
        }
      },
      touchEnd: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onTouchEnd: true }),
          captured: keyOf({ onTouchEndCapture: true })
        }
      },
      touchMove: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onTouchMove: true }),
          captured: keyOf({ onTouchMoveCapture: true })
        }
      },
      touchStart: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onTouchStart: true }),
          captured: keyOf({ onTouchStartCapture: true })
        }
      },
      wheel: {
        phasedRegistrationNames: {
          bubbled: keyOf({ onWheel: true }),
          captured: keyOf({ onWheelCapture: true })
        }
      }
    };

    var topLevelEventsToDispatchConfig = {
      topBlur: eventTypes.blur,
      topClick: eventTypes.click,
      topContextMenu: eventTypes.contextMenu,
      topCopy: eventTypes.copy,
      topCut: eventTypes.cut,
      topDoubleClick: eventTypes.doubleClick,
      topDrag: eventTypes.drag,
      topDragEnd: eventTypes.dragEnd,
      topDragEnter: eventTypes.dragEnter,
      topDragExit: eventTypes.dragExit,
      topDragLeave: eventTypes.dragLeave,
      topDragOver: eventTypes.dragOver,
      topDragStart: eventTypes.dragStart,
      topDrop: eventTypes.drop,
      topError: eventTypes.error,
      topFocus: eventTypes.focus,
      topInput: eventTypes.input,
      topKeyDown: eventTypes.keyDown,
      topKeyPress: eventTypes.keyPress,
      topKeyUp: eventTypes.keyUp,
      topLoad: eventTypes.load,
      topMouseDown: eventTypes.mouseDown,
      topMouseMove: eventTypes.mouseMove,
      topMouseOut: eventTypes.mouseOut,
      topMouseOver: eventTypes.mouseOver,
      topMouseUp: eventTypes.mouseUp,
      topPaste: eventTypes.paste,
      topReset: eventTypes.reset,
      topScroll: eventTypes.scroll,
      topSubmit: eventTypes.submit,
      topTouchCancel: eventTypes.touchCancel,
      topTouchEnd: eventTypes.touchEnd,
      topTouchMove: eventTypes.touchMove,
      topTouchStart: eventTypes.touchStart,
      topWheel: eventTypes.wheel
    };

    for (var type in topLevelEventsToDispatchConfig) {
      topLevelEventsToDispatchConfig[type].dependencies = [type];
    }

    var SimpleEventPlugin = {

      eventTypes: eventTypes,

      /**
       * Same as the default implementation, except cancels the event when return
       * value is false. This behavior will be disabled in a future release.
       *
       * @param {object} Event to be dispatched.
       * @param {function} Application-level callback.
       * @param {string} domID DOM ID to pass to the callback.
       */
      executeDispatch: function(event, listener, domID) {
        var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

        (false ? warning(
          typeof returnValue !== 'boolean',
          'Returning `false` from an event handler is deprecated and will be ' +
          'ignored in a future release. Instead, manually call ' +
          'e.stopPropagation() or e.preventDefault(), as appropriate.'
        ) : null);

        if (returnValue === false) {
          event.stopPropagation();
          event.preventDefault();
        }
      },

      /**
       * @param {string} topLevelType Record from `EventConstants`.
       * @param {DOMEventTarget} topLevelTarget The listening component root node.
       * @param {string} topLevelTargetID ID of `topLevelTarget`.
       * @param {object} nativeEvent Native browser event.
       * @return {*} An accumulation of synthetic events.
       * @see {EventPluginHub.extractEvents}
       */
      extractEvents: function(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent) {
        var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
        if (!dispatchConfig) {
          return null;
        }
        var EventConstructor;
        switch (topLevelType) {
          case topLevelTypes.topInput:
          case topLevelTypes.topLoad:
          case topLevelTypes.topError:
          case topLevelTypes.topReset:
          case topLevelTypes.topSubmit:
            // HTML Events
            // @see http://www.w3.org/TR/html5/index.html#events-0
            EventConstructor = SyntheticEvent;
            break;
          case topLevelTypes.topKeyPress:
            // FireFox creates a keypress event for function keys too. This removes
            // the unwanted keypress events. Enter is however both printable and
            // non-printable. One would expect Tab to be as well (but it isn't).
            if (getEventCharCode(nativeEvent) === 0) {
              return null;
            }
            /* falls through */
            case topLevelTypes.topKeyDown:
            case topLevelTypes.topKeyUp:
              EventConstructor = SyntheticKeyboardEvent;
              break;
            case topLevelTypes.topBlur:
            case topLevelTypes.topFocus:
              EventConstructor = SyntheticFocusEvent;
              break;
            case topLevelTypes.topClick:
              // Firefox creates a click event on right mouse clicks. This removes the
              // unwanted click events.
              if (nativeEvent.button === 2) {
                return null;
              }
              /* falls through */
              case topLevelTypes.topContextMenu:
              case topLevelTypes.topDoubleClick:
              case topLevelTypes.topMouseDown:
              case topLevelTypes.topMouseMove:
              case topLevelTypes.topMouseOut:
              case topLevelTypes.topMouseOver:
              case topLevelTypes.topMouseUp:
                EventConstructor = SyntheticMouseEvent;
                break;
              case topLevelTypes.topDrag:
              case topLevelTypes.topDragEnd:
              case topLevelTypes.topDragEnter:
              case topLevelTypes.topDragExit:
              case topLevelTypes.topDragLeave:
              case topLevelTypes.topDragOver:
              case topLevelTypes.topDragStart:
              case topLevelTypes.topDrop:
                EventConstructor = SyntheticDragEvent;
                break;
              case topLevelTypes.topTouchCancel:
              case topLevelTypes.topTouchEnd:
              case topLevelTypes.topTouchMove:
              case topLevelTypes.topTouchStart:
                EventConstructor = SyntheticTouchEvent;
                break;
              case topLevelTypes.topScroll:
                EventConstructor = SyntheticUIEvent;
                break;
              case topLevelTypes.topWheel:
                EventConstructor = SyntheticWheelEvent;
                break;
              case topLevelTypes.topCopy:
              case topLevelTypes.topCut:
              case topLevelTypes.topPaste:
                EventConstructor = SyntheticClipboardEvent;
                break;
        }
        (false ? invariant(
          EventConstructor,
          'SimpleEventPlugin: Unhandled event type, `%s`.',
          topLevelType
        ) : invariant(EventConstructor));
        var event = EventConstructor.getPooled(
          dispatchConfig,
          topLevelTargetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }

    };

    module.exports = SimpleEventPlugin;

    /***/
  }),
  /* 361 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticClipboardEvent
     * @typechecks static-only
     */

    'use strict';

    var SyntheticEvent = __webpack_require__(318);

    /**
     * @interface Event
     * @see http://www.w3.org/TR/clipboard-apis/
     */
    var ClipboardEventInterface = {
      clipboardData: function(event) {
        return (
          'clipboardData' in event ?
          event.clipboardData :
          window.clipboardData
        );
      }
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
      SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
    }

    SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

    module.exports = SyntheticClipboardEvent;

    /***/
  }),
  /* 362 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticFocusEvent
     * @typechecks static-only
     */

    'use strict';

    var SyntheticUIEvent = __webpack_require__(327);

    /**
     * @interface FocusEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var FocusEventInterface = {
      relatedTarget: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
      SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
    }

    SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

    module.exports = SyntheticFocusEvent;

    /***/
  }),
  /* 363 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticKeyboardEvent
     * @typechecks static-only
     */

    'use strict';

    var SyntheticUIEvent = __webpack_require__(327);

    var getEventCharCode = __webpack_require__(364);
    var getEventKey = __webpack_require__(365);
    var getEventModifierState = __webpack_require__(328);

    /**
     * @interface KeyboardEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var KeyboardEventInterface = {
      key: getEventKey,
      location: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      repeat: null,
      locale: null,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function(event) {
        // `charCode` is the result of a KeyPress event and represents the value of
        // the actual printable character.

        // KeyPress is deprecated, but its replacement is not yet final and not
        // implemented in any major browser. Only KeyPress has charCode.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }
        return 0;
      },
      keyCode: function(event) {
        // `keyCode` is the result of a KeyDown/Up event and represents the value of
        // physical keyboard key.

        // The actual meaning of the value depends on the users' keyboard layout
        // which cannot be detected. Assuming that it is a US keyboard layout
        // provides a surprisingly accurate mapping for US and European users.
        // Due to this, it is left to the user to implement at this time.
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }
        return 0;
      },
      which: function(event) {
        // `which` is an alias for either `keyCode` or `charCode` depending on the
        // type of the event.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }
        return 0;
      }
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
      SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
    }

    SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

    module.exports = SyntheticKeyboardEvent;

    /***/
  }),
  /* 364 */
  /***/
  (function(module, exports) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getEventCharCode
     * @typechecks static-only
     */

    'use strict';

    /**
     * `charCode` represents the actual "character code" and is safe to use with
     * `String.fromCharCode`. As such, only keys that correspond to printable
     * characters produce a valid `charCode`, the only exception to this is Enter.
     * The Tab-key is considered non-printable and does not have a `charCode`,
     * presumably because it does not produce a tab-character in browsers.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {string} Normalized `charCode` property.
     */
    function getEventCharCode(nativeEvent) {
      var charCode;
      var keyCode = nativeEvent.keyCode;

      if ('charCode' in nativeEvent) {
        charCode = nativeEvent.charCode;

        // FF does not set `charCode` for the Enter-key, check against `keyCode`.
        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
      }

      // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
      // Must not discard the (non-)printable Enter-key.
      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }

      return 0;
    }

    module.exports = getEventCharCode;

    /***/
  }),
  /* 365 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule getEventKey
     * @typechecks static-only
     */

    'use strict';

    var getEventCharCode = __webpack_require__(364);

    /**
     * Normalization of deprecated HTML5 `key` values
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */
    var normalizeKey = {
      'Esc': 'Escape',
      'Spacebar': ' ',
      'Left': 'ArrowLeft',
      'Up': 'ArrowUp',
      'Right': 'ArrowRight',
      'Down': 'ArrowDown',
      'Del': 'Delete',
      'Win': 'OS',
      'Menu': 'ContextMenu',
      'Apps': 'ContextMenu',
      'Scroll': 'ScrollLock',
      'MozPrintableKey': 'Unidentified'
    };

    /**
     * Translation from legacy `keyCode` to HTML5 `key`
     * Only special keys supported, all others depend on keyboard layout or browser
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */
    var translateToKey = {
      8: 'Backspace',
      9: 'Tab',
      12: 'Clear',
      13: 'Enter',
      16: 'Shift',
      17: 'Control',
      18: 'Alt',
      19: 'Pause',
      20: 'CapsLock',
      27: 'Escape',
      32: ' ',
      33: 'PageUp',
      34: 'PageDown',
      35: 'End',
      36: 'Home',
      37: 'ArrowLeft',
      38: 'ArrowUp',
      39: 'ArrowRight',
      40: 'ArrowDown',
      45: 'Insert',
      46: 'Delete',
      112: 'F1',
      113: 'F2',
      114: 'F3',
      115: 'F4',
      116: 'F5',
      117: 'F6',
      118: 'F7',
      119: 'F8',
      120: 'F9',
      121: 'F10',
      122: 'F11',
      123: 'F12',
      144: 'NumLock',
      145: 'ScrollLock',
      224: 'Meta'
    };

    /**
     * @param {object} nativeEvent Native browser event.
     * @return {string} Normalized `key` property.
     */
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        // Normalize inconsistent values reported by browsers due to
        // implementations of a working draft specification.

        // FireFox implements `key` but returns `MozPrintableKey` for all
        // printable characters (normalized to `Unidentified`), ignore it.
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== 'Unidentified') {
          return key;
        }
      }

      // Browser does not implement `key`, polyfill as much of it as we can.
      if (nativeEvent.type === 'keypress') {
        var charCode = getEventCharCode(nativeEvent);

        // The enter-key is technically both printable and non-printable and can
        // thus be captured by `keypress`, no other non-printable key should.
        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
        // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
      }
      return '';
    }

    module.exports = getEventKey;

    /***/
  }),
  /* 366 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticDragEvent
     * @typechecks static-only
     */

    'use strict';

    var SyntheticMouseEvent = __webpack_require__(326);

    /**
     * @interface DragEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var DragEventInterface = {
      dataTransfer: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
      SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
    }

    SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

    module.exports = SyntheticDragEvent;

    /***/
  }),
  /* 367 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticTouchEvent
     * @typechecks static-only
     */

    'use strict';

    var SyntheticUIEvent = __webpack_require__(327);

    var getEventModifierState = __webpack_require__(328);

    /**
     * @interface TouchEvent
     * @see http://www.w3.org/TR/touch-events/
     */
    var TouchEventInterface = {
      touches: null,
      targetTouches: null,
      changedTouches: null,
      altKey: null,
      metaKey: null,
      ctrlKey: null,
      shiftKey: null,
      getModifierState: getEventModifierState
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticUIEvent}
     */
    function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
      SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
    }

    SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

    module.exports = SyntheticTouchEvent;

    /***/
  }),
  /* 368 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SyntheticWheelEvent
     * @typechecks static-only
     */

    'use strict';

    var SyntheticMouseEvent = __webpack_require__(326);

    /**
     * @interface WheelEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var WheelEventInterface = {
      deltaX: function(event) {
        return (
          'deltaX' in event ? event.deltaX :
          // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
          'wheelDeltaX' in event ? -event.wheelDeltaX : 0
        );
      },
      deltaY: function(event) {
        return (
          'deltaY' in event ? event.deltaY :
          // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
          'wheelDeltaY' in event ? -event.wheelDeltaY :
          // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
          'wheelDelta' in event ? -event.wheelDelta : 0
        );
      },
      deltaZ: null,

      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: null
    };

    /**
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {string} dispatchMarker Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @extends {SyntheticMouseEvent}
     */
    function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
      SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
    }

    SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

    module.exports = SyntheticWheelEvent;

    /***/
  }),
  /* 369 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule SVGDOMPropertyConfig
     */

    /*jslint bitwise: true*/

    'use strict';

    var DOMProperty = __webpack_require__(265);

    var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

    var SVGDOMPropertyConfig = {
      Properties: {
        clipPath: MUST_USE_ATTRIBUTE,
        cx: MUST_USE_ATTRIBUTE,
        cy: MUST_USE_ATTRIBUTE,
        d: MUST_USE_ATTRIBUTE,
        dx: MUST_USE_ATTRIBUTE,
        dy: MUST_USE_ATTRIBUTE,
        fill: MUST_USE_ATTRIBUTE,
        fillOpacity: MUST_USE_ATTRIBUTE,
        fontFamily: MUST_USE_ATTRIBUTE,
        fontSize: MUST_USE_ATTRIBUTE,
        fx: MUST_USE_ATTRIBUTE,
        fy: MUST_USE_ATTRIBUTE,
        gradientTransform: MUST_USE_ATTRIBUTE,
        gradientUnits: MUST_USE_ATTRIBUTE,
        markerEnd: MUST_USE_ATTRIBUTE,
        markerMid: MUST_USE_ATTRIBUTE,
        markerStart: MUST_USE_ATTRIBUTE,
        offset: MUST_USE_ATTRIBUTE,
        opacity: MUST_USE_ATTRIBUTE,
        patternContentUnits: MUST_USE_ATTRIBUTE,
        patternUnits: MUST_USE_ATTRIBUTE,
        points: MUST_USE_ATTRIBUTE,
        preserveAspectRatio: MUST_USE_ATTRIBUTE,
        r: MUST_USE_ATTRIBUTE,
        rx: MUST_USE_ATTRIBUTE,
        ry: MUST_USE_ATTRIBUTE,
        spreadMethod: MUST_USE_ATTRIBUTE,
        stopColor: MUST_USE_ATTRIBUTE,
        stopOpacity: MUST_USE_ATTRIBUTE,
        stroke: MUST_USE_ATTRIBUTE,
        strokeDasharray: MUST_USE_ATTRIBUTE,
        strokeLinecap: MUST_USE_ATTRIBUTE,
        strokeOpacity: MUST_USE_ATTRIBUTE,
        strokeWidth: MUST_USE_ATTRIBUTE,
        textAnchor: MUST_USE_ATTRIBUTE,
        transform: MUST_USE_ATTRIBUTE,
        version: MUST_USE_ATTRIBUTE,
        viewBox: MUST_USE_ATTRIBUTE,
        x1: MUST_USE_ATTRIBUTE,
        x2: MUST_USE_ATTRIBUTE,
        x: MUST_USE_ATTRIBUTE,
        y1: MUST_USE_ATTRIBUTE,
        y2: MUST_USE_ATTRIBUTE,
        y: MUST_USE_ATTRIBUTE
      },
      DOMAttributeNames: {
        clipPath: 'clip-path',
        fillOpacity: 'fill-opacity',
        fontFamily: 'font-family',
        fontSize: 'font-size',
        gradientTransform: 'gradientTransform',
        gradientUnits: 'gradientUnits',
        markerEnd: 'marker-end',
        markerMid: 'marker-mid',
        markerStart: 'marker-start',
        patternContentUnits: 'patternContentUnits',
        patternUnits: 'patternUnits',
        preserveAspectRatio: 'preserveAspectRatio',
        spreadMethod: 'spreadMethod',
        stopColor: 'stop-color',
        stopOpacity: 'stop-opacity',
        strokeDasharray: 'stroke-dasharray',
        strokeLinecap: 'stroke-linecap',
        strokeOpacity: 'stroke-opacity',
        strokeWidth: 'stroke-width',
        textAnchor: 'text-anchor',
        viewBox: 'viewBox'
      }
    };

    module.exports = SVGDOMPropertyConfig;

    /***/
  }),
  /* 370 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule createFullPageComponent
     * @typechecks
     */

    'use strict';

    // Defeat circular references by requiring this directly.
    var ReactClass = __webpack_require__(258);
    var ReactElement = __webpack_require__(232);

    var invariant = __webpack_require__(228);

    /**
     * Create a component that will throw an exception when unmounted.
     *
     * Components like <html> <head> and <body> can't be removed or added
     * easily in a cross-browser way, however it's valuable to be able to
     * take advantage of React's reconciliation for styling and <title>
     * management. So we just document it and throw in dangerous cases.
     *
     * @param {string} tag The tag to wrap
     * @return {function} convenience constructor of new component
     */
    function createFullPageComponent(tag) {
      var elementFactory = ReactElement.createFactory(tag);

      var FullPageComponent = ReactClass.createClass({
        tagName: tag.toUpperCase(),
        displayName: 'ReactFullPageComponent' + tag,

        componentWillUnmount: function() {
          (false ? invariant(
            false,
            '%s tried to unmount. Because of cross-browser quirks it is ' +
            'impossible to unmount some top-level components (eg <html>, <head>, ' +
            'and <body>) reliably and efficiently. To fix this, have a single ' +
            'top-level component that never unmounts render these elements.',
            this.constructor.displayName
          ) : invariant(false));
        },

        render: function() {
          return elementFactory(this.props);
        }
      });

      return FullPageComponent;
    }

    module.exports = createFullPageComponent;

    /***/
  }),
  /* 371 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @typechecks static-only
     * @providesModule ReactServerRendering
     */
    'use strict';

    var ReactElement = __webpack_require__(232);
    var ReactInstanceHandles = __webpack_require__(240);
    var ReactMarkupChecksum = __webpack_require__(298);
    var ReactServerRenderingTransaction =
      __webpack_require__(372);

    var emptyObject = __webpack_require__(235);
    var instantiateReactComponent = __webpack_require__(304);
    var invariant = __webpack_require__(228);

    /**
     * @param {ReactElement} element
     * @return {string} the HTML markup
     */
    function renderToString(element) {
      (false ? invariant(
        ReactElement.isValidElement(element),
        'renderToString(): You must pass a valid ReactElement.'
      ) : invariant(ReactElement.isValidElement(element)));

      var transaction;
      try {
        var id = ReactInstanceHandles.createReactRootID();
        transaction = ReactServerRenderingTransaction.getPooled(false);

        return transaction.perform(function() {
          var componentInstance = instantiateReactComponent(element, null);
          var markup =
            componentInstance.mountComponent(id, transaction, emptyObject);
          return ReactMarkupChecksum.addChecksumToMarkup(markup);
        }, null);
      } finally {
        ReactServerRenderingTransaction.release(transaction);
      }
    }

    /**
     * @param {ReactElement} element
     * @return {string} the HTML markup, without the extra React ID and checksum
     * (for generating static pages)
     */
    function renderToStaticMarkup(element) {
      (false ? invariant(
        ReactElement.isValidElement(element),
        'renderToStaticMarkup(): You must pass a valid ReactElement.'
      ) : invariant(ReactElement.isValidElement(element)));

      var transaction;
      try {
        var id = ReactInstanceHandles.createReactRootID();
        transaction = ReactServerRenderingTransaction.getPooled(true);

        return transaction.perform(function() {
          var componentInstance = instantiateReactComponent(element, null);
          return componentInstance.mountComponent(id, transaction, emptyObject);
        }, null);
      } finally {
        ReactServerRenderingTransaction.release(transaction);
      }
    }

    module.exports = {
      renderToString: renderToString,
      renderToStaticMarkup: renderToStaticMarkup
    };

    /***/
  }),
  /* 372 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ReactServerRenderingTransaction
     * @typechecks
     */

    'use strict';

    var PooledClass = __webpack_require__(230);
    var CallbackQueue = __webpack_require__(248);
    var ReactPutListenerQueue = __webpack_require__(356);
    var Transaction = __webpack_require__(257);

    var assign = __webpack_require__(234);
    var emptyFunction = __webpack_require__(237);

    /**
     * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
     * during the performing of the transaction.
     */
    var ON_DOM_READY_QUEUEING = {
      /**
       * Initializes the internal `onDOMReady` queue.
       */
      initialize: function() {
        this.reactMountReady.reset();
      },

      close: emptyFunction
    };

    var PUT_LISTENER_QUEUEING = {
      initialize: function() {
        this.putListenerQueue.reset();
      },

      close: emptyFunction
    };

    /**
     * Executed within the scope of the `Transaction` instance. Consider these as
     * being member methods, but with an implied ordering while being isolated from
     * each other.
     */
    var TRANSACTION_WRAPPERS = [
      PUT_LISTENER_QUEUEING,
      ON_DOM_READY_QUEUEING
    ];

    /**
     * @class ReactServerRenderingTransaction
     * @param {boolean} renderToStaticMarkup
     */
    function ReactServerRenderingTransaction(renderToStaticMarkup) {
      this.reinitializeTransaction();
      this.renderToStaticMarkup = renderToStaticMarkup;
      this.reactMountReady = CallbackQueue.getPooled(null);
      this.putListenerQueue = ReactPutListenerQueue.getPooled();
    }

    var Mixin = {
      /**
       * @see Transaction
       * @abstract
       * @final
       * @return {array} Empty list of operation wrap proceedures.
       */
      getTransactionWrappers: function() {
        return TRANSACTION_WRAPPERS;
      },

      /**
       * @return {object} The queue to collect `onDOMReady` callbacks with.
       */
      getReactMountReady: function() {
        return this.reactMountReady;
      },

      getPutListenerQueue: function() {
        return this.putListenerQueue;
      },

      /**
       * `PooledClass` looks for this, and will invoke this before allowing this
       * instance to be resused.
       */
      destructor: function() {
        CallbackQueue.release(this.reactMountReady);
        this.reactMountReady = null;

        ReactPutListenerQueue.release(this.putListenerQueue);
        this.putListenerQueue = null;
      }
    };

    assign(
      ReactServerRenderingTransaction.prototype,
      Transaction.Mixin,
      Mixin
    );

    PooledClass.addPoolingTo(ReactServerRenderingTransaction);

    module.exports = ReactServerRenderingTransaction;

    /***/
  }),
  /* 373 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule onlyChild
     */
    'use strict';

    var ReactElement = __webpack_require__(232);

    var invariant = __webpack_require__(228);

    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection. The current implementation of this
     * function assumes that a single child gets passed without a wrapper, but the
     * purpose of this helper function is to abstract away the particular structure
     * of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactComponent} The first and only `ReactComponent` contained in the
     * structure.
     */
    function onlyChild(children) {
      (false ? invariant(
        ReactElement.isValidElement(children),
        'onlyChild must be passed a children with exactly one child.'
      ) : invariant(ReactElement.isValidElement(children)));
      return children;
    }

    module.exports = onlyChild;

    /***/
  }),
  /* 374 */
  ,
  /* 375 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _createStore = __webpack_require__(376);

    var _createStore2 = _interopRequireDefault(_createStore);

    var _utilsCombineReducers = __webpack_require__(378);

    var _utilsCombineReducers2 = _interopRequireDefault(_utilsCombineReducers);

    var _utilsBindActionCreators = __webpack_require__(381);

    var _utilsBindActionCreators2 = _interopRequireDefault(_utilsBindActionCreators);

    var _utilsApplyMiddleware = __webpack_require__(382);

    var _utilsApplyMiddleware2 = _interopRequireDefault(_utilsApplyMiddleware);

    var _utilsCompose = __webpack_require__(383);

    var _utilsCompose2 = _interopRequireDefault(_utilsCompose);

    exports.createStore = _createStore2['default'];
    exports.combineReducers = _utilsCombineReducers2['default'];
    exports.bindActionCreators = _utilsBindActionCreators2['default'];
    exports.applyMiddleware = _utilsApplyMiddleware2['default'];
    exports.compose = _utilsCompose2['default'];

    /***/
  }),
  /* 376 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = createStore;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _utilsIsPlainObject = __webpack_require__(377);

    var _utilsIsPlainObject2 = _interopRequireDefault(_utilsIsPlainObject);

    /**
     * These are private action types reserved by Redux.
     * For any unknown actions, you must return the current state.
     * If the current state is undefined, you must return the initial state.
     * Do not reference these action types directly in your code.
     */
    var ActionTypes = {
      INIT: '@@redux/INIT'
    };

    exports.ActionTypes = ActionTypes;
    /**
     * Creates a Redux store that holds the state tree.
     * The only way to change the data in the store is to call `dispatch()` on it.
     *
     * There should only be a single store in your app. To specify how different
     * parts of the state tree respond to actions, you may combine several reducers
     * into a single reducer function by using `combineReducers`.
     *
     * @param {Function} reducer A function that returns the next state tree, given
     * the current state tree and the action to handle.
     *
     * @param {any} [initialState] The initial state. You may optionally specify it
     * to hydrate the state from the server in universal apps, or to restore a
     * previously serialized user session.
     * If you use `combineReducers` to produce the root reducer function, this must be
     * an object with the same shape as `combineReducers` keys.
     *
     * @returns {Store} A Redux store that lets you read the state, dispatch actions
     * and subscribe to changes.
     */

    function createStore(reducer, initialState) {
      if (typeof reducer !== 'function') {
        throw new Error('Expected the reducer to be a function.');
      }

      var currentReducer = reducer;
      var currentState = initialState;
      var listeners = [];
      var isDispatching = false;

      /**
       * Reads the state tree managed by the store.
       *
       * @returns {any} The current state tree of your application.
       */
      function getState() {
        return currentState;
      }

      /**
       * Adds a change listener. It will be called any time an action is dispatched,
       * and some part of the state tree may potentially have changed. You may then
       * call `getState()` to read the current state tree inside the callback.
       *
       * @param {Function} listener A callback to be invoked on every dispatch.
       * @returns {Function} A function to remove this change listener.
       */
      function subscribe(listener) {
        listeners.push(listener);

        return function unsubscribe() {
          var index = listeners.indexOf(listener);
          listeners.splice(index, 1);
        };
      }

      /**
       * Dispatches an action. It is the only way to trigger a state change.
       *
       * The `reducer` function, used to create the store, will be called with the
       * current state tree and the given `action`. Its return value will
       * be considered the **next** state of the tree, and the change listeners
       * will be notified.
       *
       * The base implementation only supports plain object actions. If you want to
       * dispatch a Promise, an Observable, a thunk, or something else, you need to
       * wrap your store creating function into the corresponding middleware. For
       * example, see the documentation for the `redux-thunk` package. Even the
       * middleware will eventually dispatch plain object actions using this method.
       *
       * @param {Object} action A plain object representing “what changed”. It is
       * a good idea to keep actions serializable so you can record and replay user
       * sessions, or use the time travelling `redux-devtools`.
       *
       * @returns {Object} For convenience, the same action object you dispatched.
       *
       * Note that, if you use a custom middleware, it may wrap `dispatch()` to
       * return something else (for example, a Promise you can await).
       */
      function dispatch(action) {
        if (!_utilsIsPlainObject2['default'](action)) {
          throw new Error('Actions must be plain objects. Use custom middleware for async actions.');
        }

        if (isDispatching) {
          throw new Error('Reducers may not dispatch actions.');
        }

        try {
          isDispatching = true;
          currentState = currentReducer(currentState, action);
        } finally {
          isDispatching = false;
        }

        listeners.slice().forEach(function(listener) {
          return listener();
        });
        return action;
      }

      /**
       * Returns the reducer currently used by the store to calculate the state.
       *
       * It is likely that you will only need this function if you implement a hot
       * reloading mechanism for Redux.
       *
       * @returns {Function} The reducer used by the current store.
       */
      function getReducer() {
        return currentReducer;
      }

      /**
       * Replaces the reducer currently used by the store to calculate the state.
       *
       * You might need this if your app implements code splitting and you want to
       * load some of the reducers dynamically. You might also need this if you
       * implement a hot reloading mechanism for Redux.
       *
       * @param {Function} nextReducer The reducer for the store to use instead.
       * @returns {void}
       */
      function replaceReducer(nextReducer) {
        currentReducer = nextReducer;
        dispatch({ type: ActionTypes.INIT });
      }

      // When a store is created, an "INIT" action is dispatched so that every
      // reducer returns their initial state. This effectively populates
      // the initial state tree.
      dispatch({ type: ActionTypes.INIT });

      return {
        dispatch: dispatch,
        subscribe: subscribe,
        getState: getState,
        getReducer: getReducer,
        replaceReducer: replaceReducer
      };
    }

    /***/
  }),
  /* 377 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = isPlainObject;
    var fnToString = function fnToString(fn) {
      return Function.prototype.toString.call(fn);
    };

    /**
     * @param {any} obj The object to inspect.
     * @returns {boolean} True if the argument appears to be a plain object.
     */

    function isPlainObject(obj) {
      if (!obj || typeof obj !== 'object') {
        return false;
      }

      var proto = typeof obj.constructor === 'function' ? Object.getPrototypeOf(obj) : Object.prototype;

      if (proto === null) {
        return true;
      }

      var constructor = proto.constructor;

      return typeof constructor === 'function' && constructor instanceof constructor && fnToString(constructor) === fnToString(Object);
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 378 */
  /***/
  (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */
    (function(process) {
      'use strict';

      exports.__esModule = true;
      exports['default'] = combineReducers;

      function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

      var _createStore = __webpack_require__(376);

      var _utilsIsPlainObject = __webpack_require__(377);

      var _utilsIsPlainObject2 = _interopRequireDefault(_utilsIsPlainObject);

      var _utilsMapValues = __webpack_require__(379);

      var _utilsMapValues2 = _interopRequireDefault(_utilsMapValues);

      var _utilsPick = __webpack_require__(380);

      var _utilsPick2 = _interopRequireDefault(_utilsPick);

      function getErrorMessage(key, action) {
        var actionType = action && action.type;
        var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

        return 'Reducer "' + key + '" returned undefined handling ' + actionName + '. ' + 'To ignore an action, you must explicitly return the previous state.';
      }

      function verifyStateShape(initialState, currentState) {
        var reducerKeys = Object.keys(currentState);

        if (reducerKeys.length === 0) {
          console.error('Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.');
          return;
        }

        if (!_utilsIsPlainObject2['default'](initialState)) {
          console.error('initialState has unexpected type of "' + ({}).toString.call(initialState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected initialState to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"'));
          return;
        }

        var unexpectedKeys = Object.keys(initialState).filter(function(key) {
          return reducerKeys.indexOf(key) < 0;
        });

        if (unexpectedKeys.length > 0) {
          console.error('Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" in initialState will be ignored. ') + ('Expected to find one of the known reducer keys instead: "' + reducerKeys.join('", "') + '"'));
        }
      }

      /**
       * Turns an object whose values are different reducer functions, into a single
       * reducer function. It will call every child reducer, and gather their results
       * into a single state object, whose keys correspond to the keys of the passed
       * reducer functions.
       *
       * @param {Object} reducers An object whose values correspond to different
       * reducer functions that need to be combined into one. One handy way to obtain
       * it is to use ES6 `import * as reducers` syntax. The reducers may never return
       * undefined for any action. Instead, they should return their initial state
       * if the state passed to them was undefined, and the current state for any
       * unrecognized action.
       *
       * @returns {Function} A reducer function that invokes every reducer inside the
       * passed object, and builds a state object with the same shape.
       */

      function combineReducers(reducers) {
        var finalReducers = _utilsPick2['default'](reducers, function(val) {
          return typeof val === 'function';
        });

        Object.keys(finalReducers).forEach(function(key) {
          var reducer = finalReducers[key];
          if (typeof reducer(undefined, { type: _createStore.ActionTypes.INIT }) === 'undefined') {
            throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
          }

          var type = Math.random().toString(36).substring(7).split('').join('.');
          if (typeof reducer(undefined, { type: type }) === 'undefined') {
            throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
          }
        });

        var defaultState = _utilsMapValues2['default'](finalReducers, function() {
          return undefined;
        });
        var stateShapeVerified;

        return function combination(state, action) {
          if (state === undefined) state = defaultState;

          var finalState = _utilsMapValues2['default'](finalReducers, function(reducer, key) {
            var newState = reducer(state[key], action);
            if (typeof newState === 'undefined') {
              throw new Error(getErrorMessage(key, action));
            }
            return newState;
          });

          if (
            // Node-like CommonJS environments (Browserify, Webpack)
            typeof process !== 'undefined' && "object" !== 'undefined' && ("production") !== 'production' ||
            // React Native
            typeof __DEV__ !== 'undefined' && __DEV__ //eslint-disable-line no-undef
          ) {
            if (!stateShapeVerified) {
              verifyStateShape(state, finalState);
              stateShapeVerified = true;
            }
          }

          return finalState;
        };
      }

      module.exports = exports['default'];
      /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(194)))

    /***/
  }),
  /* 379 */
  /***/
  (function(module, exports) {

    /**
     * Applies a function to every key-value pair inside an object.
     *
     * @param {Object} obj The source object.
     * @param {Function} fn The mapper function taht receives the value and the key.
     * @returns {Object} A new object that contains the mapped values for the keys.
     */
    "use strict";

    exports.__esModule = true;
    exports["default"] = mapValues;

    function mapValues(obj, fn) {
      return Object.keys(obj).reduce(function(result, key) {
        result[key] = fn(obj[key], key);
        return result;
      }, {});
    }

    module.exports = exports["default"];

    /***/
  }),
  /* 380 */
  /***/
  (function(module, exports) {

    /**
     * Picks key-value pairs from an object where values satisfy a predicate.
     *
     * @param {Object} obj The object to pick from.
     * @param {Function} fn The predicate the values must satisfy to be copied.
     * @returns {Object} The object with the values that satisfied the predicate.
     */
    "use strict";

    exports.__esModule = true;
    exports["default"] = pick;

    function pick(obj, fn) {
      return Object.keys(obj).reduce(function(result, key) {
        if (fn(obj[key])) {
          result[key] = obj[key];
        }
        return result;
      }, {});
    }

    module.exports = exports["default"];

    /***/
  }),
  /* 381 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = bindActionCreators;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _utilsMapValues = __webpack_require__(379);

    var _utilsMapValues2 = _interopRequireDefault(_utilsMapValues);

    function bindActionCreator(actionCreator, dispatch) {
      return function() {
        return dispatch(actionCreator.apply(undefined, arguments));
      };
    }

    /**
     * Turns an object whose values are action creators, into an object with the
     * same keys, but with every function wrapped into a `dispatch` call so they
     * may be invoked directly. This is just a convenience method, as you can call
     * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
     *
     * For convenience, you can also pass a single function as the first argument,
     * and get a function in return.
     *
     * @param {Function|Object} actionCreators An object whose values are action
     * creator functions. One handy way to obtain it is to use ES6 `import * as`
     * syntax. You may also pass a single function.
     *
     * @param {Function} dispatch The `dispatch` function available on your Redux
     * store.
     *
     * @returns {Function|Object} The object mimicking the original object, but with
     * every action creator wrapped into the `dispatch` call. If you passed a
     * function as `actionCreators`, the return value will also be a single
     * function.
     */

    function bindActionCreators(actionCreators, dispatch) {
      if (typeof actionCreators === 'function') {
        return bindActionCreator(actionCreators, dispatch);
      }

      if (typeof actionCreators !== 'object' || actionCreators == null) {
        throw new Error('bindActionCreators expected an object or a function, instead received ' + typeof actionCreators + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
      }

      return _utilsMapValues2['default'](actionCreators, function(actionCreator) {
        return bindActionCreator(actionCreator, dispatch);
      });
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 382 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    exports['default'] = applyMiddleware;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _compose = __webpack_require__(383);

    var _compose2 = _interopRequireDefault(_compose);

    /**
     * Creates a store enhancer that applies middleware to the dispatch method
     * of the Redux store. This is handy for a variety of tasks, such as expressing
     * asynchronous actions in a concise manner, or logging every action payload.
     *
     * See `redux-thunk` package as an example of the Redux middleware.
     *
     * Because middleware is potentially asynchronous, this should be the first
     * store enhancer in the composition chain.
     *
     * Note that each middleware will be given the `dispatch` and `getState` functions
     * as named arguments.
     *
     * @param {...Function} middlewares The middleware chain to be applied.
     * @returns {Function} A store enhancer applying the middleware.
     */

    function applyMiddleware() {
      for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
        middlewares[_key] = arguments[_key];
      }

      return function(next) {
        return function(reducer, initialState) {
          var store = next(reducer, initialState);
          var _dispatch = store.dispatch;
          var chain = [];

          var middlewareAPI = {
            getState: store.getState,
            dispatch: function dispatch(action) {
              return _dispatch(action);
            }
          };
          chain = middlewares.map(function(middleware) {
            return middleware(middlewareAPI);
          });
          _dispatch = _compose2['default'].apply(undefined, chain.concat([store.dispatch]));

          return _extends({}, store, {
            dispatch: _dispatch
          });
        };
      };
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 383 */
  /***/
  (function(module, exports) {

    /**
     * Composes functions from left to right.
     *
     * @param {...Function} funcs - The functions to compose. Each is expected to
     * accept a function as an argument and to return a function.
     * @returns {Function} A function obtained by composing functions from left to
     * right.
     */
    "use strict";

    exports.__esModule = true;
    exports["default"] = compose;

    function compose() {
      for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }

      return funcs.reduceRight(function(composed, f) {
        return f(composed);
      });
    }

    module.exports = exports["default"];

    /***/
  }),
  /* 384 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _componentsCreateAll = __webpack_require__(385);

    var _componentsCreateAll2 = _interopRequireDefault(_componentsCreateAll);

    var _createAll = _componentsCreateAll2['default'](_react2['default']);

    var Provider = _createAll.Provider;
    var connect = _createAll.connect;
    exports.Provider = Provider;
    exports.connect = connect;

    /***/
  }),
  /* 385 */
  [649, 386, 388],
  /* 386 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    exports['default'] = createProvider;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _utilsCreateStoreShape = __webpack_require__(387);

    var _utilsCreateStoreShape2 = _interopRequireDefault(_utilsCreateStoreShape);

    function isUsingOwnerContext(React) {
      var version = React.version;

      if (typeof version !== 'string') {
        return true;
      }

      var sections = version.split('.');
      var major = parseInt(sections[0], 10);
      var minor = parseInt(sections[1], 10);

      return major === 0 && minor === 13;
    }

    function createProvider(React) {
      var Component = React.Component;
      var PropTypes = React.PropTypes;
      var Children = React.Children;

      var storeShape = _utilsCreateStoreShape2['default'](PropTypes);
      var requireFunctionChild = isUsingOwnerContext(React);

      var didWarn = false;

      function warnAboutFunction() {
        if (didWarn || requireFunctionChild) {
          return;
        }

        didWarn = true;
        console.error( // eslint-disable-line no-console
          'With React 0.14 and later versions, you no longer need to ' + 'wrap <Provider> child into a function.');
      }

      function warnAboutElement() {
        if (didWarn || !requireFunctionChild) {
          return;
        }

        didWarn = true;
        console.error( // eslint-disable-line no-console
          'With React 0.13, you need to ' + 'wrap <Provider> child into a function. ' + 'This restriction will be removed with React 0.14.');
      }

      return (function(_Component) {
        _inherits(Provider, _Component);

        Provider.prototype.getChildContext = function getChildContext() {
          return { store: this.state.store };
        };

        _createClass(Provider, null, [{
          key: 'childContextTypes',
          value: {
            store: storeShape.isRequired
          },
          enumerable: true
        }, {
          key: 'propTypes',
          value: {
            store: storeShape.isRequired,
            children: (requireFunctionChild ? PropTypes.func : PropTypes.element).isRequired
          },
          enumerable: true
        }]);

        function Provider(props, context) {
          _classCallCheck(this, Provider);

          _Component.call(this, props, context);
          this.state = { store: props.store };
        }

        Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          var store = this.state.store;
          var nextStore = nextProps.store;

          if (store !== nextStore) {
            var nextReducer = nextStore.getReducer();
            store.replaceReducer(nextReducer);
          }
        };

        Provider.prototype.render = function render() {
          var children = this.props.children;

          if (typeof children === 'function') {
            warnAboutFunction();
            children = children();
          } else {
            warnAboutElement();
          }

          return Children.only(children);
        };

        return Provider;
      })(Component);
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 387 */
  /***/
  (function(module, exports) {

    "use strict";

    exports.__esModule = true;
    exports["default"] = createStoreShape;

    function createStoreShape(PropTypes) {
      return PropTypes.shape({
        subscribe: PropTypes.func.isRequired,
        dispatch: PropTypes.func.isRequired,
        getState: PropTypes.func.isRequired
      });
    }

    module.exports = exports["default"];

    /***/
  }),
  /* 388 */
  [650, 387, 389, 390, 391],
  /* 389 */
  /***/
  (function(module, exports) {

    "use strict";

    exports.__esModule = true;
    exports["default"] = shallowEqual;

    function shallowEqual(objA, objB) {
      if (objA === objB) {
        return true;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);

      if (keysA.length !== keysB.length) {
        return false;
      }

      // Test for A's keys different from B.
      var hasOwn = Object.prototype.hasOwnProperty;
      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
          return false;
        }
      }

      return true;
    }

    module.exports = exports["default"];

    /***/
  }),
  /* 390 */
  377,
  /* 391 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = wrapActionCreators;

    var _redux = __webpack_require__(375);

    function wrapActionCreators(actionCreators) {
      return function(dispatch) {
        return _redux.bindActionCreators(actionCreators, dispatch);
      };
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 392 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    'use strict';

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var invariant = function(condition, format, a, b, c, d, e, f) {
      if (false) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      }

      if (!condition) {
        var error;
        if (format === undefined) {
          error = new Error(
            'Minified exception occurred; use the non-minified dev environment ' +
            'for the full error message and additional helpful warnings.'
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() { return args[argIndex++]; })
          );
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    };

    module.exports = invariant;

    /***/
  }),
  /* 393 */
  ,
  /* 394 */
  ,
  /* 395 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = thunkMiddleware;

    function thunkMiddleware(_ref) {
      var dispatch = _ref.dispatch;
      var getState = _ref.getState;

      return function(next) {
        return function(action) {
          return typeof action === 'function' ? action(dispatch, getState) : next(action);
        };
      };
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 396 */
  /***/
  (function(module, exports) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    exports['default'] = promiseMiddleware;

    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
      }
      return target;
    }

    function promiseMiddleware() {
      return function(next) {
        return function(action) {
          var promise = action.promise;
          var type = action.type;

          var rest = _objectWithoutProperties(action, ['promise', 'type']);

          if (!promise) return next(action);

          var SUCCESS = type;
          var REQUEST = type + '_REQUEST';
          var FAILURE = type + '_FAILURE';
          next(_extends({}, rest, { type: REQUEST }));
          return promise.then(function(res) {
            next(_extends({}, rest, { res: res, type: SUCCESS }));

            return true;
          })['catch'](function(error) {
            next(_extends({}, rest, { error: error, type: FAILURE }));

            // Another benefit is being able to log all failures here
            console.log(error);
            return false;
          });
        };
      };
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 397 */
  ,
  /* 398 */
  ,
  /* 399 */
  ,
  /* 400 */
  ,
  /* 401 */
  ,
  /* 402 */
  ,
  /* 403 */
  ,
  /* 404 */
  ,
  /* 405 */
  ,
  /* 406 */
  ,
  /* 407 */
  ,
  /* 408 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var Enhancer = __webpack_require__(409);

    module.exports = function(ComposedComponent) {
      return Enhancer(ComposedComponent);
    };
    module.exports.Style = __webpack_require__(419);
    module.exports.PrintStyleSheet = __webpack_require__(421);
    module.exports.getState = __webpack_require__(412);
    module.exports.keyframes = __webpack_require__(422);
    module.exports.Config = __webpack_require__(417);

    /***/
  }),
  /* 409 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        desc = parent = getter = undefined;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var resolveStyles = __webpack_require__(410);
    var printStyles = __webpack_require__(418);

    var enhanceWithRadium = function enhanceWithRadium(ComposedComponent) {
      var RadiumEnhancer = (function(_ComposedComponent) {
        _inherits(RadiumEnhancer, _ComposedComponent);

        function RadiumEnhancer() {
          _classCallCheck(this, RadiumEnhancer);

          _get(Object.getPrototypeOf(RadiumEnhancer.prototype), 'constructor', this).apply(this, arguments);

          this.state = this.state || {};
          this.state._radiumStyleState = {};

          if (RadiumEnhancer.printStyleClass) {
            this.printStyleClass = RadiumEnhancer.printStyleClass;
          }
        }

        // Class inheritance uses Object.create and because of __proto__ issues
        // with IE <10 any static properties of the superclass aren't inherited and
        // so need to be manually populated
        // See http://babeljs.io/docs/advanced/caveats/#classes-10-and-below-
        // This also fixes React Hot Loader by exposing the original components top level
        // prototype methods on the Radium enhanced prototype as discussed in #219.

        _createClass(RadiumEnhancer, [{
          key: 'render',
          value: function render() {
            var renderedElement = _get(Object.getPrototypeOf(RadiumEnhancer.prototype), 'render', this).call(this);
            return resolveStyles(this, renderedElement);
          }
        }, {
          key: 'componentWillUnmount',
          value: function componentWillUnmount() {
            if (_get(Object.getPrototypeOf(RadiumEnhancer.prototype), 'componentWillUnmount', this)) {
              _get(Object.getPrototypeOf(RadiumEnhancer.prototype), 'componentWillUnmount', this).call(this);
            }

            if (this._radiumMouseUpListener) {
              this._radiumMouseUpListener.remove();
            }

            if (this._radiumMediaQueryListenersByQuery) {
              Object.keys(this._radiumMediaQueryListenersByQuery).forEach(function(query) {
                this._radiumMediaQueryListenersByQuery[query].remove();
              }, this);
            }
          }
        }]);

        return RadiumEnhancer;
      })(ComposedComponent);

      Object.getOwnPropertyNames(ComposedComponent.prototype).forEach(function(key) {
        if (!RadiumEnhancer.prototype.hasOwnProperty(key)) {
          var descriptor = Object.getOwnPropertyDescriptor(ComposedComponent.prototype, key);
          Object.defineProperty(RadiumEnhancer.prototype, key, descriptor);
        }
      });

      RadiumEnhancer.displayName = ComposedComponent.displayName || ComposedComponent.name || 'Component';

      RadiumEnhancer.printStyleClass = printStyles.addPrintStyles(RadiumEnhancer);

      return RadiumEnhancer;
    };

    module.exports = enhanceWithRadium;

    /***/
  }),
  /* 410 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var MouseUpListener = __webpack_require__(411);
    var getState = __webpack_require__(412);
    var getStateKey = __webpack_require__(413);
    var Prefixer = __webpack_require__(414);
    var Config = __webpack_require__(417);

    var ExecutionEnvironment = __webpack_require__(415);
    var React = __webpack_require__(223);

    // babel-eslint 3.1.7 fails here for some reason, error:
    //   0:0  error  Cannot call method 'isSequenceExpression' of undefined
    //
    // declare class RadiumComponent extends ReactComponent {
    //   _lastMouseDown: number,
    //   _radiumMediaQueryListenersByQuery: Object<string, {remove: () => void}>,
    //   _radiumMouseUpListener: {remove: () => void},
    // }

    var mediaQueryListByQueryString = {};

    var _isSpecialKey = function _isSpecialKey(key) {
      return key[0] === ':' || key[0] === '@';
    };

    var _getStyleState = function _getStyleState(component, key, value) {
      return getState(component.state, key, value);
    };

    var _setStyleState = function _setStyleState(component, key, newState) {
      var existing = component._lastRadiumState || component.state && component.state._radiumStyleState || {};

      var state = { _radiumStyleState: _extends({}, existing) };
      state._radiumStyleState[key] = _extends({}, state._radiumStyleState[key], newState);

      component._lastRadiumState = state._radiumStyleState;
      component.setState(state);
    };

    // Merge style objects. Special casing for props starting with ';'; the values
    // should be objects, and are merged with others of the same name (instead of
    // overwriting).
    var _mergeStyles = function _mergeStyles(styles) {
      var result = {};

      styles.forEach(function(style) {
        if (!style || typeof style !== 'object' || Array.isArray(style)) {
          return;
        }

        Object.keys(style).forEach(function(key) {
          if (_isSpecialKey(key) && result[key]) {
            result[key] = _mergeStyles([result[key], style[key]]);
          } else {
            result[key] = style[key];
          }
        });
      });

      return result;
    };

    var _mouseUp = function _mouseUp(component) {
      Object.keys(component.state._radiumStyleState).forEach(function(key) {
        if (_getStyleState(component, key, ':active')) {
          _setStyleState(component, key, { ':active': false });
        }
      });
    };

    var _onMediaQueryChange = function _onMediaQueryChange(component, query, mediaQueryList) {
      var state = {};
      state[query] = mediaQueryList.matches;
      _setStyleState(component, '_all', state);
    };

    var _resolveMediaQueryStyles = function _resolveMediaQueryStyles(component, style) {
      if (!Config.canMatchMedia()) {
        return style;
      }

      Object.keys(style).filter(function(name) {
        return name[0] === '@';
      }).map(function(query) {
        var mediaQueryStyles = style[query];
        query = query.replace('@media ', '');

        // Create a global MediaQueryList if one doesn't already exist
        var mql = mediaQueryListByQueryString[query];
        if (!mql) {
          mediaQueryListByQueryString[query] = mql = Config.matchMedia(query);
        }

        // Keep track of which keys already have listeners
        if (!component._radiumMediaQueryListenersByQuery) {
          component._radiumMediaQueryListenersByQuery = {};
        }

        if (!component._radiumMediaQueryListenersByQuery[query]) {
          var listener = _onMediaQueryChange.bind(null, component, query);
          mql.addListener(listener);
          component._radiumMediaQueryListenersByQuery[query] = {
            remove: function remove() {
              mql.removeListener(listener);
            }
          };
        }

        // Apply media query states
        if (mql.matches) {
          style = _mergeStyles([style, mediaQueryStyles]);
        }
      });

      return style;
    };

    // Wrapper around React.cloneElement. To avoid processing the same element
    // twice, whenever we clone an element add a special non-enumerable prop to
    // make sure we don't process this element again.
    var _cloneElement = function _cloneElement(renderedElement, newProps, newChildren) {
      // Only add flag if this is a normal DOM element
      if (typeof renderedElement.type === 'string') {
        newProps = _extends({}, newProps, { _radiumDidResolveStyles: true });
      }

      return React.cloneElement(renderedElement, newProps, newChildren);
    };

    //
    // The nucleus of Radium. resolveStyles is called on the rendered elements
    // before they are returned in render. It iterates over the elements and
    // children, rewriting props to add event handlers required to capture user
    // interactions (e.g. mouse over). It also replaces the style prop because it
    // adds in the various interaction styles (e.g. :hover).
    //
    var resolveStyles = function resolveStyles(component, // ReactComponent, flow+eslint complaining
      renderedElement, // ReactElement
      existingKeyMap) {
      // ReactElement
      existingKeyMap = existingKeyMap || {};

      if (!renderedElement ||
        // Bail if we've already processed this element. This ensures that only the
        // owner of an element processes that element, since the owner's render
        // function will be called first (which will always be the case, since you
        // can't know what else to render until you render the parent component).
        renderedElement.props && renderedElement.props._radiumDidResolveStyles) {
        return renderedElement;
      }

      // Recurse over children first in case we bail early. Note that children only
      // include those rendered in `this` component. Child nodes in other components
      // will not be here, so each component needs to use Radium.
      var oldChildren = renderedElement.props.children;
      var newChildren = oldChildren;
      if (oldChildren) {
        var childrenType = typeof oldChildren;
        if (childrenType === 'string' || childrenType === 'number') {
          // Don't do anything with a single primitive child
          newChildren = oldChildren;
        } else if (childrenType === 'function') {
          // Wrap the function, resolving styles on the result
          newChildren = function() {
            var result = oldChildren.apply(this, arguments);
            if (React.isValidElement(result)) {
              return resolveStyles(component, result, existingKeyMap);
            }
            return result;
          };
        } else if (React.Children.count(oldChildren) === 1 && oldChildren.type) {
          // If a React Element is an only child, don't wrap it in an array for
          // React.Children.map() for React.Children.only() compatibility.
          var onlyChild = React.Children.only(oldChildren);
          newChildren = resolveStyles(component, onlyChild, existingKeyMap);
        } else {
          newChildren = React.Children.map(oldChildren, function(child) {
            if (React.isValidElement(child)) {
              return resolveStyles(component, child, existingKeyMap);
            }

            return child;
          });
        }
      }

      var props = renderedElement.props;
      var newProps = {};

      // Recurse over props, just like children
      Object.keys(props).forEach(function(prop) {
        // We already recurse over children above
        if (prop === 'children') {
          return;
        }

        var propValue = props[prop];
        if (React.isValidElement(propValue)) {
          newProps[prop] = resolveStyles(component, propValue, existingKeyMap);
        }
      });

      var hasResolvedProps = Object.keys(newProps).length > 0;

      // Bail early if element is not a simple ReactDOMElement.
      if (!React.isValidElement(renderedElement) || typeof renderedElement.type !== 'string') {
        if (oldChildren === newChildren && !hasResolvedProps) {
          return renderedElement;
        }

        return _cloneElement(renderedElement, hasResolvedProps ? newProps : {}, newChildren);
      }

      var style = props.style;

      // Convenient syntax for multiple styles: `style={[style1, style2, etc]}`
      // Ignores non-objects, so you can do `this.state.isCool && styles.cool`.
      if (Array.isArray(style)) {
        style = _mergeStyles(style);
      }

      if (false) {
        // Warn if you use longhand and shorthand properties in the same style
        // object.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties

        var shorthandPropertyExpansions = {
          'background': ['backgroundAttachment', 'backgroundBlendMode', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPosition', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundRepeatX', 'backgroundRepeatY', 'backgroundSize'],
          'border': ['borderBottom', 'borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderColor', 'borderLeft', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRight', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderStyle', 'borderTop', 'borderTopColor', 'borderTopStyle', 'borderTopWidth', 'borderWidth'],
          'borderImage': ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
          'borderRadius': ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
          'font': ['fontFamily', 'fontKerning', 'fontSize', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantLigatures', 'fontWeight', 'lineHeight'],
          'listStyle': ['listStyleImage', 'listStylePosition', 'listStyleType'],
          'margin': ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
          'padding': ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
          'transition': ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction']
        };

        var checkProps = function checkProps(s) {
          if (typeof s !== 'object' || !s) {
            return;
          }

          var styleKeys = Object.keys(s);
          styleKeys.forEach(function(styleKey) {
            if (shorthandPropertyExpansions[styleKey] && shorthandPropertyExpansions[styleKey].some(function(sp) {
                return styleKeys.indexOf(sp) !== -1;
              })) {
              if (process.env.NODE_ENV !== 'production') {
                /* eslint-disable no-console */
                console.warn('Radium: property "' + styleKey + '" in style object', style, ': do not mix longhand and ' + 'shorthand properties in the same style object. Check the render ' + 'method of ' + component.constructor.displayName + '.', 'See https://github.com/FormidableLabs/radium/issues/95 for more ' + 'information.');
                /* eslint-enable no-console */
              }
            }
          });

          styleKeys.forEach(function(k) {
            return checkProps(s[k]);
          });
        };
        checkProps(style);
      }

      // Bail early if no interactive styles.
      if (!style || !Object.keys(style).some(_isSpecialKey)) {
        if (style) {
          // Still perform vendor prefixing, though.
          newProps.style = Prefixer.getPrefixedStyle(component, style);
          return _cloneElement(renderedElement, newProps, newChildren);
        } else if (newChildren || hasResolvedProps) {
          return _cloneElement(renderedElement, newProps, newChildren);
        }

        return renderedElement;
      }

      // We need a unique key to correlate state changes due to user interaction
      // with the rendered element, so we know to apply the proper interactive
      // styles.
      var originalKey = renderedElement.ref || renderedElement.key;
      var key = getStateKey(originalKey);

      if (existingKeyMap[key]) {
        throw new Error('Radium requires each element with interactive styles to have a unique ' + 'key, set using either the ref or key prop. ' + (originalKey ? 'Key "' + originalKey + '" is a duplicate.' : 'Multiple elements have no key specified.'));
      }

      existingKeyMap[key] = true;

      // Media queries can contain pseudo styles, like :hover
      style = _resolveMediaQueryStyles(component, style);

      var newStyle = {};
      Object.keys(style).forEach(function(styleKey) {
        if (!_isSpecialKey(styleKey)) {
          newStyle[styleKey] = style[styleKey];
        }
      });

      // Only add handlers if necessary
      if (style[':hover'] || style[':active']) {
        // Always call the existing handler if one is already defined.
        // This code, and the very similar ones below, could be abstracted a bit
        // more, but it hurts readability IMO.
        var existingOnMouseEnter = props.onMouseEnter;
        newProps.onMouseEnter = function(e) {
          existingOnMouseEnter && existingOnMouseEnter(e);
          _setStyleState(component, key, { ':hover': true });
        };

        var existingOnMouseLeave = props.onMouseLeave;
        newProps.onMouseLeave = function(e) {
          existingOnMouseLeave && existingOnMouseLeave(e);
          _setStyleState(component, key, { ':hover': false });
        };
      }

      if (style[':active']) {
        var existingOnMouseDown = props.onMouseDown;
        newProps.onMouseDown = function(e) {
          existingOnMouseDown && existingOnMouseDown(e);
          component._lastMouseDown = Date.now();
          _setStyleState(component, key, { ':active': true });
        };
      }

      if (style[':focus']) {
        var existingOnFocus = props.onFocus;
        newProps.onFocus = function(e) {
          existingOnFocus && existingOnFocus(e);
          _setStyleState(component, key, { ':focus': true });
        };

        var existingOnBlur = props.onBlur;
        newProps.onBlur = function(e) {
          existingOnBlur && existingOnBlur(e);
          _setStyleState(component, key, { ':focus': false });
        };
      }

      // Merge the styles in the order they were defined
      var interactionStyles = Object.keys(style).filter(function(name) {
        return name === ':active' && _getStyleState(component, key, ':active') || name === ':hover' && _getStyleState(component, key, ':hover') || name === ':focus' && _getStyleState(component, key, ':focus');
      }).map(function(name) {
        return style[name];
      });

      if (interactionStyles.length) {
        newStyle = _mergeStyles([newStyle].concat(interactionStyles));
      }

      if (style[':active'] && !component._radiumMouseUpListener && ExecutionEnvironment.canUseEventListeners) {
        component._radiumMouseUpListener = MouseUpListener.subscribe(_mouseUp.bind(null, component));
      }

      newProps.style = Prefixer.getPrefixedStyle(component, newStyle);

      return _cloneElement(renderedElement, newProps, newChildren);
    };

    // Exposing methods for tests is ugly, but the alternative, re-requiring the
    // module each time, is too slow
    resolveStyles.__clearStateForTests = function() {
      mediaQueryListByQueryString = {};
    };

    module.exports = resolveStyles;

    /***/
  }),
  /* 411 */
  /***/
  (function(module, exports) {

    'use strict';

    var _callbacks = [];
    var _mouseUpListenerIsActive = false;

    var _handleMouseUp = function _handleMouseUp(ev) {
      _callbacks.forEach(function(callback) {
        callback(ev);
      });
    };

    var subscribe = function subscribe(callback) {
      if (_callbacks.indexOf(callback) === -1) {
        _callbacks.push(callback);
      }

      if (!_mouseUpListenerIsActive) {
        window.addEventListener('mouseup', _handleMouseUp);
        _mouseUpListenerIsActive = true;
      }

      return {
        remove: function remove() {
          var index = _callbacks.indexOf(callback);
          _callbacks.splice(index, 1);

          if (_callbacks.length === 0 && _mouseUpListenerIsActive) {
            window.removeEventListener('mouseup', _handleMouseUp);
            _mouseUpListenerIsActive = false;
          }
        }
      };
    };

    module.exports = {
      subscribe: subscribe
    };

    /***/
  }),
  /* 412 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var getStateKey = __webpack_require__(413);

    var VALID_KEYS = [':active', ':focus', ':hover'];

    var getState = function getState(state, elementKey, value) {
      if (VALID_KEYS.indexOf(value) === -1) {
        throw new Error('Radium.getState invalid value param: `' + value + '`');
      }

      var key = getStateKey(elementKey);

      return !!(state && state._radiumStyleState && state._radiumStyleState[key] && state._radiumStyleState[key][value]);
    };

    module.exports = getState;

    /***/
  }),
  /* 413 */
  /***/
  (function(module, exports) {

    'use strict';

    var getStateKey = function getStateKey(elementKey) {
      return elementKey === null || elementKey === undefined ? 'main' : elementKey.toString();
    };

    module.exports = getStateKey;

    /***/
  }),
  /* 414 */
  /***/
  (function(module, exports, __webpack_require__) {

    /**
     * Based on https://github.com/jsstyles/css-vendor, but without having to
     * convert between different cases all the time.
     *
     * 
     */

    'use strict';

    var ExecutionEnvironment = __webpack_require__(415);
    var arrayFind = __webpack_require__(416);

    var VENDOR_PREFIX_REGEX = /-(moz|webkit|ms|o)-/;

    var vendorPrefixes = ['Webkit', 'ms', 'Moz', 'O'];

    var infoByCssPrefix = {
      '-moz-': {
        cssPrefix: '-moz-',
        jsPrefix: 'Moz',
        alternativeProperties: {
          // OLD - Firefox 19-
          alignItems: [{ css: '-moz-box-align', js: 'MozBoxAlign' }],
          flex: [{ css: '-moz-box-flex', js: 'MozBoxFlex' }],
          flexDirection: [{ css: '-moz-box-orient', js: 'MozBoxOrient' }],
          justifyContent: [{ css: '-moz-box-pack', js: 'MozBoxPack' }],
          order: [{ css: '-moz-box-ordinal-group', js: 'MozBoxOrdinalGroup' }]
        },
        alternativeValues: {
          // OLD - Firefox 19-
          alignItems: {
            'flex-start': ['start'],
            'flex-end': ['end']
          },
          display: {
            flex: ['-moz-box']
          },
          flexDirection: {
            column: ['vertical'],
            row: ['horizontal']
          },
          justifyContent: {
            'flex-start': ['start'],
            'flex-end': ['end'],
            'space-between': ['justify']
          }
        }
      },
      '-ms-': {
        cssPrefix: '-ms-',
        jsPrefix: 'ms',
        alternativeProperties: {
          // TWEENER - IE 10
          alignContent: [{ css: '-ms-flex-line-pack', js: 'msFlexLinePack' }],
          alignItems: [{ css: '-ms-flex-align', js: 'msFlexAlign' }],
          alignSelf: [{ css: '-ms-flex-align-item', js: 'msFlexAlignItem' }],
          justifyContent: [{ css: '-ms-flex-pack', js: 'msFlexPack' }],
          order: [{ css: '-ms-flex-order', js: 'msFlexOrder' }]
        },
        alternativeValues: {
          // TWEENER - IE 10
          alignContent: {
            'flex-start': ['start'],
            'flex-end': ['end'],
            'space-between': ['justify'],
            'space-around': ['distribute']
          },
          alignItems: {
            'flex-start': ['start'],
            'flex-end': ['end']
          },
          alignSelf: {
            'flex-start': ['start'],
            'flex-end': ['end']
          },
          display: {
            flex: ['-ms-flexbox'],
            'inline-flex': ['-ms-inline-flexbox']
          },
          justifyContent: {
            'flex-start': ['start'],
            'flex-end': ['end'],
            'space-between': ['justify'],
            'space-around': ['distribute']
          }
        }
      },
      '-o-': {
        cssPrefix: '-o-',
        jsPrefix: 'O'
      },
      '-webkit-': {
        cssPrefix: '-webkit-',
        jsPrefix: 'Webkit',
        alternativeProperties: {
          // OLD - iOS 6-, Safari 3.1-6
          alignItems: [{ css: '-webkit-box-align', js: 'WebkitBoxAlign' }],
          flex: [{ css: '-webkit-box-flex', js: 'MozBoxFlex' }],
          flexDirection: [{ css: '-webkit-box-orient', js: 'WebkitBoxOrient' }],
          justifyContent: [{ css: '-webkit-box-pack', js: 'WebkitBoxPack' }],
          order: [{ css: '-webkit-box-ordinal-group', js: 'WebkitBoxOrdinalGroup' }]
        },
        alternativeValues: {
          // OLD - iOS 6-, Safari 3.1-6
          alignItems: {
            'flex-start': ['start'],
            'flex-end': ['end']
          },
          display: {
            flex: ['-webkit-box']
          },
          flexDirection: {
            row: ['horizontal'],
            column: ['vertical']
          },
          justifyContent: {
            'flex-start': ['start'],
            'flex-end': ['end'],
            'space-between': ['justify']
          }
        }
      }
    };

    /**
     * CSS properties which accept numbers but are not in units of "px".
     * Copied from React core June 22, 2015.
     * https://github.com/facebook/react/blob/
     * ba81b60ad8e93b747be42a03b797065932c49c96/
     * src/renderers/dom/shared/CSSProperty.js
     */
    var isUnitlessNumber = {
      boxFlex: true,
      boxFlexGroup: true,
      columnCount: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,

      // SVG-related properties
      fillOpacity: true,
      strokeDashoffset: true,
      strokeOpacity: true,
      strokeWidth: true
    };

    var domStyle = {};
    var prefixedPropertyCache = {};
    var prefixedValueCache = {};
    var prefixInfo = {
      cssPrefix: '',
      jsPrefix: ''
    };

    if (ExecutionEnvironment.canUseDOM) {
      domStyle = document.createElement('p').style;

      // older Firefox versions may have no float property in style object
      // so we need to add it manually
      if (domStyle.float === undefined) {
        domStyle.float = '';
      }

      // Based on http://davidwalsh.name/vendor-prefix
      var prefixMatch;
      var windowStyles = window.getComputedStyle(document.documentElement, '');

      // Array.prototype.slice.call(windowStyles) fails with
      // "Uncaught TypeError: undefined is not a function"
      // in older versions Android (KitKat) web views
      for (var i = 0; i < windowStyles.length; i++) {
        prefixMatch = windowStyles[i].match(VENDOR_PREFIX_REGEX);

        if (prefixMatch) {
          break;
        }
      }

      var cssVendorPrefix = prefixMatch && prefixMatch[0];

      prefixInfo = cssVendorPrefix && infoByCssPrefix[cssVendorPrefix] ? infoByCssPrefix[cssVendorPrefix] : prefixInfo;
    }

    var _camelCaseRegex = /([a-z])?([A-Z])/g;
    var _camelCaseReplacer = function _camelCaseReplacer(match, p1, p2) {
      return p1 + '-' + p2.toLowerCase();
    };
    var _camelCaseToDashCase = function _camelCaseToDashCase(s) {
      return s.replace(_camelCaseRegex, _camelCaseReplacer);
    };

    var getPrefixedPropertyName = function getPrefixedPropertyName(property) {
      if (prefixedPropertyCache.hasOwnProperty(property)) {
        return prefixedPropertyCache[property];
      }

      var unprefixed = {
        css: _camelCaseToDashCase(property),
        js: property,
        isDefaultForServer: true
      };

      // Try the prefixed version first. Chrome in particular has the `filter` and
      // `webkitFilter` properties availalbe on the style object, but only the
      // prefixed version actually works.
      var possiblePropertyNames = [
        // Prefixed
        {
          css: prefixInfo.cssPrefix + _camelCaseToDashCase(property),
          js: prefixInfo.jsPrefix + property[0].toUpperCase() + property.slice(1)
        },
        unprefixed
      ];

      // Alternative property names
      if (prefixInfo.alternativeProperties && prefixInfo.alternativeProperties[property]) {
        possiblePropertyNames = possiblePropertyNames.concat(prefixInfo.alternativeProperties[property]);
      }

      var workingProperty = arrayFind(possiblePropertyNames, function(possiblePropertyName) {
        if (possiblePropertyName.js in domStyle) {
          return possiblePropertyName;
        }
      }) || false;

      return prefixedPropertyCache[property] = workingProperty;
    };

    // We are un-prefixing values before checking for isUnitlessNumber,
    // otherwise we are at risk of being in a situation where someone
    // explicitly passes something like `MozBoxFlex: 1` and that will
    // in turn get transformed into `MozBoxFlex: 1px`.
    var _getUnprefixedProperty = function _getUnprefixedProperty(property) {
      var noPrefixProperty = property;

      vendorPrefixes.some(function(prefix) {
        // Let's check if the property starts with a vendor prefix
        if (property.indexOf(prefix) === 0) {
          noPrefixProperty = noPrefixProperty.replace(prefix, '');

          // We have removed the vendor prefix, however the first
          // character is going to be uppercase hence won't match
          // any of the `isUnitlessNumber` keys as they all start
          // with lower case. Let's ensure that the first char is
          // lower case.
          noPrefixProperty = noPrefixProperty.charAt(0).toLowerCase() + noPrefixProperty.slice(1);

          return true;
        }
      });

      return noPrefixProperty;
    };

    // React is planning to deprecate adding px automatically
    // (https://github.com/facebook/react/issues/1873), and if they do, this
    // should change to a warning or be removed in favor of React's warning.
    // Same goes for below.
    var _addPixelSuffixToValueIfNeeded = function _addPixelSuffixToValueIfNeeded(originalProperty, value) {
      var unPrefixedProperty = _getUnprefixedProperty(originalProperty);

      if (value !== 0 && !isNaN(value) && !isUnitlessNumber[unPrefixedProperty]) {
        return value + 'px';
      }
      return value;
    };

    var _getPrefixedValue = function _getPrefixedValue(component, property, value, originalProperty) {
      if (!Array.isArray(value)) {
        // don't test numbers (pure or stringy), but do add 'px' prefix if needed
        if (!isNaN(value) && value !== null) {
          return _addPixelSuffixToValueIfNeeded(originalProperty, value);
        }

        if (typeof value !== 'string') {
          if (value !== null && value !== undefined) {
            value = value.toString();
          } else {
            return value;
          }
        }

        // don't test numbers with units (e.g. 10em)
        if (!isNaN(parseInt(value, 10))) {
          return value;
        }
      }

      var cacheKey = Array.isArray(value) ? value.join(' || ') : property + value;

      if (prefixedValueCache.hasOwnProperty(cacheKey)) {
        return prefixedValueCache[cacheKey];
      }

      var possibleValues;
      if (Array.isArray(value)) {
        // Add px for the same values React would, otherwise the testing below will
        // fail and it will try to fallback.
        possibleValues = value.map(function(v) {
          return _addPixelSuffixToValueIfNeeded(originalProperty, v);
        });

        // Add prefixed versions
        possibleValues = possibleValues.concat(value.filter(function(v) {
            return !isNaN(v);
          }) // Don't prefix numbers
          .map(function(v) {
            return prefixInfo.cssPrefix + v;
          }));
      } else {
        possibleValues = [
          // Unprefixed
          value,
          // Prefixed
          prefixInfo.cssPrefix + value
        ];
      }

      // Alternative values
      if (prefixInfo.alternativeValues && prefixInfo.alternativeValues[originalProperty] && prefixInfo.alternativeValues[originalProperty][value]) {
        possibleValues = possibleValues.concat(prefixInfo.alternativeValues[originalProperty][value]);
      }

      // Test possible value in order
      var workingValue = arrayFind(possibleValues, function(possibleValue) {
        domStyle[property] = '';
        domStyle[property] = possibleValue;

        // Note that we just make sure it is not an empty string. Browsers will
        // sometimes rewrite values, but still accept them. They will set the value
        // to an empty string if not supported.
        // E.g. for border, "solid 1px black" becomes "1px solid black"
        //      but "foobar" becomes "", since it is not supported.
        return !!domStyle[property];
      });

      if (workingValue) {
        prefixedValueCache[cacheKey] = workingValue;
      } else {
        // Unsupported, assume unprefixed works, but warn
        prefixedValueCache[cacheKey] = value;

        if (false) {
          /* eslint-disable no-console */
          if (console && console.warn) {
            var componentContext = component ? ' in component "' + component.constructor.displayName + '"' : '';

            console.warn('Unsupported CSS value "' + value + '" for property "' + property + '$"' + componentContext);
          }
          /* eslint-enable no-console */
        }
      }

      return prefixedValueCache[cacheKey];
    };

    // Returns a new style object with vendor prefixes added to property names
    // and values.
    var getPrefixedStyle = function getPrefixedStyle(component, // ReactComponent
      style) {
      var mode = arguments.length <= 2 || arguments[2] === undefined ? 'js' : arguments[2];

      if (!ExecutionEnvironment.canUseDOM) {
        return Object.keys(style).reduce(function(newStyle, key) {
          var value = style[key];
          var newKey = mode === 'css' ? _camelCaseToDashCase(key) : key;
          var newValue = Array.isArray(value) ? value[0] : value;
          newStyle[newKey] = newValue;
          return newStyle;
        }, {});
      }

      var prefixedStyle = {};
      Object.keys(style).forEach(function(property) {
        var value = style[property];

        var newProperty = getPrefixedPropertyName(property);
        if (newProperty === false) {
          // Ignore unsupported properties
          if (false) {
            /* eslint-disable no-console */
            if (console && console.warn) {
              var componentContext = component ? ' in component "' + component.constructor.displayName + '"' : '';

              console.warn('Unsupported CSS property "' + property + '$"' + componentContext);
            }
            /* eslint-enable no-console */
            return;
          }
        }

        var newValue = _getPrefixedValue(component, newProperty.js, value, property);

        prefixedStyle[newProperty[mode]] = newValue;
      });
      return prefixedStyle;
    };

    module.exports = {
      getPrefixedPropertyName: getPrefixedPropertyName,
      getPrefixedStyle: getPrefixedStyle,
      cssPrefix: prefixInfo.cssPrefix,
      jsPrefix: prefixInfo.jsPrefix
    };

    /***/
  }),
  /* 415 */
  /***/
  (function(module, exports, __webpack_require__) {

    var __WEBPACK_AMD_DEFINE_RESULT__;
    /*!
    	  Copyright (c) 2015 Jed Watson.
    	  Based on code that is Copyright 2013-2015, Facebook, Inc.
    	  All rights reserved.
    	*/
    /* global define */

    (function() {
      'use strict';

      var canUseDOM = !!(
        typeof window !== 'undefined' &&
        window.document &&
        window.document.createElement
      );

      var ExecutionEnvironment = {

        canUseDOM: canUseDOM,

        canUseWorkers: typeof Worker !== 'undefined',

        canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

        canUseViewport: canUseDOM && !!window.screen

      };

      if (true) {
        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
          return ExecutionEnvironment;
        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
      } else if (typeof module !== 'undefined' && module.exports) {
        module.exports = ExecutionEnvironment;
      } else {
        window.ExecutionEnvironment = ExecutionEnvironment;
      }

    }());

    /***/
  }),
  /* 416 */
  /***/
  (function(module, exports) {

    'use strict';

    function find(array, predicate, context) {
      if (typeof Array.prototype.find === 'function') {
        return array.find(predicate, context);
      }

      context = context || this;
      var length = array.length;
      var i;

      if (typeof predicate !== 'function') {
        throw new TypeError(predicate + ' is not a function');
      }

      for (i = 0; i < length; i++) {
        if (predicate.call(context, array[i], i, array)) {
          return array[i];
        }
      }
    }

    module.exports = find;

    /***/
  }),
  /* 417 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var ExecutionEnvironment = __webpack_require__(415);

    var _matchMediaFunction = ExecutionEnvironment.canUseDOM && window && window.matchMedia && function(mediaQueryString) {
      return window.matchMedia(mediaQueryString);
    };

    module.exports = {
      canMatchMedia: function canMatchMedia() {
        return typeof _matchMediaFunction === 'function';
      },

      matchMedia: function matchMedia(query) {
        return _matchMediaFunction(query);
      },

      setMatchMedia: function setMatchMedia(nextMatchMediaFunction) {
        _matchMediaFunction = nextMatchMediaFunction;
      }
    };

    /***/
  }),
  /* 418 */
  /***/
  (function(module, exports) {

    "use strict";

    var allPrintStyles = {};
    var listeners = [];

    var subscribe = function subscribe(listener) {
      if (listeners.indexOf(listener) === -1) {
        listeners.push(listener);
      }

      return {
        remove: function remove() {
          var listenerIndex = listeners.indexOf(listener);

          if (listenerIndex > -1) {
            listeners.splice(listenerIndex, 1);
          }
        }
      };
    };

    var _emitChange = function _emitChange() {
      listeners.forEach(function(listener) {
        return listener();
      });
    };

    var _appendImportantToEachValue = function _appendImportantToEachValue(styleObj) {
      var importantStyleObj = {};

      Object.keys(styleObj).forEach(function(key) {
        var value = styleObj[key];

        // This breaks unitless values but they'll be deprecated soon anyway
        // https://github.com/facebook/react/issues/1873
        value = value + " !important";
        importantStyleObj[key] = value;
      });

      return importantStyleObj;
    };

    var addPrintStyles = function addPrintStyles(Component) {
      if (!Component.printStyles) {
        return;
      }

      var printStyleClass = {};

      Object.keys(Component.printStyles).forEach(function(key) {
        var styles = Component.printStyles[key];
        var className = "Radium-" + Component.displayName + "-" + key;
        allPrintStyles["." + className] = _appendImportantToEachValue(styles);
        printStyleClass[key] = className;
      });

      // Allows for lazy loading of JS that then calls Radium to update the
      // print styles
      _emitChange();
      return printStyleClass;
    };

    var getPrintStyles = function getPrintStyles() {
      return allPrintStyles;
    };

    module.exports = {
      addPrintStyles: addPrintStyles,
      getPrintStyles: getPrintStyles,
      subscribe: subscribe
    };

    /***/
  }),
  /* 419 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var createMarkupForStyles = __webpack_require__(420);
    var Prefixer = __webpack_require__(414);

    var React = __webpack_require__(223);

    var buildCssString = function buildCssString(component, selector, rules) {
      if (!selector || !rules) {
        return;
      }

      var prefixedRules = Prefixer.getPrefixedStyle(component, rules, 'css');
      var serializedRules = createMarkupForStyles(prefixedRules);

      return selector + '{' + serializedRules + '}';
    };

    var Style = React.createClass({
      displayName: 'Style',

      propTypes: {
        rules: React.PropTypes.object,
        scopeSelector: React.PropTypes.string
      },

      getDefaultProps: function getDefaultProps() {
        return {
          scopeSelector: ''
        };
      },

      _buildStyles: function _buildStyles(styles) {
        var _this = this;

        return Object.keys(styles).reduce(function(accumulator, selector) {
          var rules = styles[selector];

          if (selector === 'mediaQueries') {
            accumulator += _this._buildMediaQueryString(rules);
          } else {
            var completeSelector = (_this.props.scopeSelector ? _this.props.scopeSelector + ' ' : '') + selector;
            accumulator += buildCssString(_this, completeSelector, rules);
          }

          return accumulator;
        }, '');
      },

      _buildMediaQueryString: function _buildMediaQueryString(mediaQueryObj) {
        var _this2 = this;

        var contextMediaQueries = this._getContextMediaQueries();
        var mediaQueryString = '';

        Object.keys(mediaQueryObj).forEach(function(query) {
          var completeQuery = contextMediaQueries[query] ? contextMediaQueries[query] : query;
          mediaQueryString += '@media ' + completeQuery + '{' + _this2._buildStyles(mediaQueryObj[query]) + '}';
        });

        return mediaQueryString;
      },

      _getContextMediaQueries: function _getContextMediaQueries() {
        var contextMediaQueries = {};
        if (this.context && this.context.mediaQueries) {
          Object.keys(this.context.mediaQueries).forEach((function(query) {
            contextMediaQueries[query] = this.context.mediaQueries[query].media;
          }).bind(this));
        }

        return contextMediaQueries;
      },

      render: function render() {
        if (!this.props.rules) {
          return null;
        }

        var styles = this._buildStyles(this.props.rules);

        return React.createElement('style', { dangerouslySetInnerHTML: { __html: styles } });
      }
    });

    module.exports = Style;

    /***/
  }),
  /* 420 */
  /***/
  (function(module, exports) {

    'use strict';

    var createMarkupForStyles = function createMarkupForStyles(style, spaces) {
      spaces = spaces || '';
      return Object.keys(style).map(function(property) {
        return spaces + property + ': ' + style[property] + ';';
      }).join('\n');
    };

    module.exports = createMarkupForStyles;

    /***/
  }),
  /* 421 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var React = __webpack_require__(223);

    var Style = __webpack_require__(419);
    var printStyles = __webpack_require__(418);

    var PrintStyle = React.createClass({
      displayName: 'PrintStyle',

      getInitialState: function getInitialState() {
        return this._getStylesState();
      },

      componentDidMount: function componentDidMount() {
        this.subscription = printStyles.subscribe(this._onChange);
      },

      componentWillUnmount: function componentWillUnmount() {
        this.subscription.remove();
      },

      _onChange: function _onChange() {
        this.setState(this._getStylesState());
      },

      _getStylesState: function _getStylesState() {
        return {
          styles: printStyles.getPrintStyles()
        };
      },

      render: function render() {
        return React.createElement(Style, {
          rules: {
            mediaQueries: {
              print: this.state.styles
            }
          }
        });
      }
    });

    module.exports = PrintStyle;

    /***/
  }),
  /* 422 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var createMarkupForStyles = __webpack_require__(420);
    var Prefixer = __webpack_require__(414);

    var ExecutionEnvironment = __webpack_require__(415);

    var isAnimationSupported = ExecutionEnvironment.canUseDOM && Prefixer.getPrefixedPropertyName('animation') !== false;

    var animationIndex = 1;
    var animationStyleSheet = null;
    var keyframesPrefixed = 'keyframes';

    if (isAnimationSupported) {
      animationStyleSheet = document.createElement('style');
      document.head.appendChild(animationStyleSheet);

      // Test if prefix needed for keyframes (copied from PrefixFree)
      animationStyleSheet.textContent = '@keyframes {}';
      if (!animationStyleSheet.sheet.cssRules.length) {
        keyframesPrefixed = Prefixer.cssPrefix + 'keyframes';
      }
    }

    // Simple animation helper that injects CSS into a style object containing the
    // keyframes, and returns a string with the generated animation name.
    var keyframes = function keyframes(keyframeRules, component) {
      var name = 'Animation' + animationIndex;
      animationIndex += 1;

      if (!isAnimationSupported) {
        return name;
      }

      var rule = '@' + keyframesPrefixed + ' ' + name + ' {\n' + Object.keys(keyframeRules).map(function(percentage) {
        var props = keyframeRules[percentage];
        var prefixedProps = Prefixer.getPrefixedStyle(component, props, 'css');
        var serializedProps = createMarkupForStyles(prefixedProps, '  ');
        return '  ' + percentage + ' {\n  ' + serializedProps + '\n  }';
      }).join('\n') + '\n}\n';

      // for flow
      /* istanbul ignore next */
      if (!animationStyleSheet) {
        throw new Error('keyframes not initialized properly');
      }

      animationStyleSheet.sheet.insertRule(rule, animationStyleSheet.sheet.cssRules.length);
      return name;
    };

    module.exports = keyframes;

    /***/
  }),
  /* 423 */
  /***/
  (function(module, exports) {

    // Returns a string describing the amount of time equivalent to the specified
    // amount of milliseconds. Examples: '7 seconds', '1 hour', '3 hours 9 minutes',
    // '40 days 10 hours'. The exact words returned depend on the current locale.
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports.describeTime = describeTime;
    exports.describeTimeSince = describeTimeSince;

    function describeTime(milliseconds) {
      var seconds = Math.floor(milliseconds / 1000);
      var minutes = Math.floor(seconds / 60) % 60;
      var hours = Math.floor(seconds / (60 * 60)) % 24;
      var days = Math.floor(seconds / (60 * 60 * 24));

      var label = '';

      if (days) {
        var singular = '1 day';
        var plural = days + ' days';
        label += days == 1 ? singular : plural;
      }
      if (hours) {
        var singular = '1 hour';
        var plural = hours + ' hours';
        label += ' ' + (hours == 1 ? singular : plural);
      }
      if (!days && minutes) {
        var singular = '1 minute';
        var plural = minutes + ' minutes';
        label += ' ' + (minutes == 1 ? singular : plural);
      }
      if (!label) {
        var singular = '1 second';
        var plural = seconds + ' seconds';
        label += ' ' + (seconds == 1 ? singular : plural);
      }

      return label.replace(/^\s+|\s+$/g, '');
    }

    // Returns a string describing the amount of time that has passed since the time
    // specified in the timestamp argument. Examples: '7 seconds ago', '1 hour ago',
    // '3 hours 27 minutes ago', '40 days 10 hours ago'. The exact words returned
    // depend on the current locale.

    function describeTimeSince(timestamp) {
      var elapsedTime = describeTime(Date.now() - timestamp);
      return elapsedTime + ' ago';
    }

    /***/
  }),
  /* 424 */
  ,
  /* 425 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _underscoreStringCapitalize = __webpack_require__(426);

    var _underscoreStringCapitalize2 = _interopRequireDefault(_underscoreStringCapitalize);

    var PageSelectButton = (function(_Component) {
      _inherits(PageSelectButton, _Component);

      _createClass(PageSelectButton, null, [{
        key: 'propTypes',
        value: {
          action: _react.PropTypes.func.isRequired,
          label: _react.PropTypes.string.isRequired,
          page: _react.PropTypes.string.isRequired,
          active: _react.PropTypes.bool.isRequired,
          disabled: _react.PropTypes.bool,
          width: _react.PropTypes.int
        },
        enumerable: true
      }]);

      function PageSelectButton(props) {
        _classCallCheck(this, _PageSelectButton);

        _get(Object.getPrototypeOf(_PageSelectButton.prototype), 'constructor', this).call(this, props);
        this.handleClick = this.handleClick.bind(this);
      }

      _createClass(PageSelectButton, [{
        key: 'handleClick',
        value: function handleClick() {
          if (!this.props.disabled) {
            this.props.action(this.props.page);
          }
        }
      }, {
        key: 'buttonStyle',
        value: function buttonStyle() {
          if (this.props.active) {
            return 'button_active';
          } else if (this.props.disabled) {
            return 'button_disabled';
          } else {
            return 'button';
          }
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', {
              className: 'page-button',
              style: [{ width: this.props.width + 'px' }, styles[this.buttonStyle()]],
              onClick: this.handleClick
            },
            this.props.label || (0, _underscoreStringCapitalize2['default'])(this.props.page)
          );
        }
      }]);

      var _PageSelectButton = PageSelectButton;
      PageSelectButton = (0, _radium2['default'])(PageSelectButton) || PageSelectButton;
      return PageSelectButton;
    })(_react.Component);

    exports['default'] = PageSelectButton;

    var styles = {
      button: {
        display: 'inline-block',
        textAlign: 'center',
        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #EDEDED 100%)',
        border: '1px solid #D2D2D2',
        borderRadius: 4,
        fontSize: 12,
        margin: '0 4px',
        padding: '4px 4px 5px',
        color: '#787878',
        verticalAlign: 'middle',
        ':hover': {
          backgroundImage: 'linear-gradient(-180deg, #F6F6F6 0%, #E6E6E6 100%)',
          border: '1px solid #D2D2D2',
          cursor: 'pointer'
        }
      },
      button_active: {
        display: 'inline-block',
        textAlign: 'center',
        backgroundImage: 'linear-gradient(-180deg, #BBBBBB 0%, #DFDFDF 77%)',
        boxShadow: 'inset 0px 1px 3px 0px rgba(0,0,0,0.50)',
        borderRadius: 4,
        fontSize: 12,
        margin: '0 4px',
        padding: '5px 5px 6px',
        color: '#606060',
        verticalAlign: 'middle',
        ':hover': {}
      },
      button_disabled: {
        display: 'inline-block',
        textAlign: 'center',
        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #EDEDED 100%)',
        border: '1px solid #D2D2D2',
        borderRadius: 4,
        fontSize: 12,
        margin: '0 4px',
        padding: '4px 4px 5px',
        color: '#AAAAAA',
        verticalAlign: 'middle',
        ':hover': {
          // backgroundImage: 'linear-gradient(-180deg, #F6F6F6 0%, #E6E6E6 100%)',
          // border: '1px solid #D2D2D2',
          // cursor: 'pointer'
        }
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 426 */
  /***/
  (function(module, exports, __webpack_require__) {

    var makeString = __webpack_require__(427);

    module.exports = function capitalize(str, lowercaseRest) {
      str = makeString(str);
      var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();

      return str.charAt(0).toUpperCase() + remainingChars;
    };

    /***/
  }),
  /* 427 */
  /***/
  (function(module, exports) {

    /**
     * Ensure some object is a coerced to a string
     **/
    module.exports = function makeString(object) {
      if (object == null) return '';
      return '' + object;
    };

    /***/
  }),
  /* 428 */
  ,
  /* 429 */
  /***/
  (function(module, exports, __webpack_require__) {

    /* MIT license */
    var convert = __webpack_require__(430),
      string = __webpack_require__(432);

    var Color = function(obj) {
      if (obj instanceof Color) return obj;
      if (!(this instanceof Color)) return new Color(obj);

      this.values = {
        rgb: [0, 0, 0],
        hsl: [0, 0, 0],
        hsv: [0, 0, 0],
        hwb: [0, 0, 0],
        cmyk: [0, 0, 0, 0],
        alpha: 1
      }

      // parse Color() argument
      if (typeof obj == "string") {
        var vals = string.getRgba(obj);
        if (vals) {
          this.setValues("rgb", vals);
        } else if (vals = string.getHsla(obj)) {
          this.setValues("hsl", vals);
        } else if (vals = string.getHwb(obj)) {
          this.setValues("hwb", vals);
        } else {
          throw new Error("Unable to parse color from string \"" + obj + "\"");
        }
      } else if (typeof obj == "object") {
        var vals = obj;
        if (vals["r"] !== undefined || vals["red"] !== undefined) {
          this.setValues("rgb", vals)
        } else if (vals["l"] !== undefined || vals["lightness"] !== undefined) {
          this.setValues("hsl", vals)
        } else if (vals["v"] !== undefined || vals["value"] !== undefined) {
          this.setValues("hsv", vals)
        } else if (vals["w"] !== undefined || vals["whiteness"] !== undefined) {
          this.setValues("hwb", vals)
        } else if (vals["c"] !== undefined || vals["cyan"] !== undefined) {
          this.setValues("cmyk", vals)
        } else {
          throw new Error("Unable to parse color from object " + JSON.stringify(obj));
        }
      }
    }

    Color.prototype = {
      rgb: function(vals) {
        return this.setSpace("rgb", arguments);
      },
      hsl: function(vals) {
        return this.setSpace("hsl", arguments);
      },
      hsv: function(vals) {
        return this.setSpace("hsv", arguments);
      },
      hwb: function(vals) {
        return this.setSpace("hwb", arguments);
      },
      cmyk: function(vals) {
        return this.setSpace("cmyk", arguments);
      },

      rgbArray: function() {
        return this.values.rgb;
      },
      hslArray: function() {
        return this.values.hsl;
      },
      hsvArray: function() {
        return this.values.hsv;
      },
      hwbArray: function() {
        if (this.values.alpha !== 1) {
          return this.values.hwb.concat([this.values.alpha])
        }
        return this.values.hwb;
      },
      cmykArray: function() {
        return this.values.cmyk;
      },
      rgbaArray: function() {
        var rgb = this.values.rgb;
        return rgb.concat([this.values.alpha]);
      },
      hslaArray: function() {
        var hsl = this.values.hsl;
        return hsl.concat([this.values.alpha]);
      },
      alpha: function(val) {
        if (val === undefined) {
          return this.values.alpha;
        }
        this.setValues("alpha", val);
        return this;
      },

      red: function(val) {
        return this.setChannel("rgb", 0, val);
      },
      green: function(val) {
        return this.setChannel("rgb", 1, val);
      },
      blue: function(val) {
        return this.setChannel("rgb", 2, val);
      },
      hue: function(val) {
        return this.setChannel("hsl", 0, val);
      },
      saturation: function(val) {
        return this.setChannel("hsl", 1, val);
      },
      lightness: function(val) {
        return this.setChannel("hsl", 2, val);
      },
      saturationv: function(val) {
        return this.setChannel("hsv", 1, val);
      },
      whiteness: function(val) {
        return this.setChannel("hwb", 1, val);
      },
      blackness: function(val) {
        return this.setChannel("hwb", 2, val);
      },
      value: function(val) {
        return this.setChannel("hsv", 2, val);
      },
      cyan: function(val) {
        return this.setChannel("cmyk", 0, val);
      },
      magenta: function(val) {
        return this.setChannel("cmyk", 1, val);
      },
      yellow: function(val) {
        return this.setChannel("cmyk", 2, val);
      },
      black: function(val) {
        return this.setChannel("cmyk", 3, val);
      },

      hexString: function() {
        return string.hexString(this.values.rgb);
      },
      rgbString: function() {
        return string.rgbString(this.values.rgb, this.values.alpha);
      },
      rgbaString: function() {
        return string.rgbaString(this.values.rgb, this.values.alpha);
      },
      percentString: function() {
        return string.percentString(this.values.rgb, this.values.alpha);
      },
      hslString: function() {
        return string.hslString(this.values.hsl, this.values.alpha);
      },
      hslaString: function() {
        return string.hslaString(this.values.hsl, this.values.alpha);
      },
      hwbString: function() {
        return string.hwbString(this.values.hwb, this.values.alpha);
      },
      keyword: function() {
        return string.keyword(this.values.rgb, this.values.alpha);
      },

      rgbNumber: function() {
        return (this.values.rgb[0] << 16) | (this.values.rgb[1] << 8) | this.values.rgb[2];
      },

      luminosity: function() {
        // http://www.w3.org/TR/WCAG20/#relativeluminancedef
        var rgb = this.values.rgb;
        var lum = [];
        for (var i = 0; i < rgb.length; i++) {
          var chan = rgb[i] / 255;
          lum[i] = (chan <= 0.03928) ? chan / 12.92 :
            Math.pow(((chan + 0.055) / 1.055), 2.4)
        }
        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
      },

      contrast: function(color2) {
        // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
        var lum1 = this.luminosity();
        var lum2 = color2.luminosity();
        if (lum1 > lum2) {
          return (lum1 + 0.05) / (lum2 + 0.05)
        };
        return (lum2 + 0.05) / (lum1 + 0.05);
      },

      level: function(color2) {
        var contrastRatio = this.contrast(color2);
        return (contrastRatio >= 7.1) ?
          'AAA' :
          (contrastRatio >= 4.5) ?
          'AA' :
          '';
      },

      dark: function() {
        // YIQ equation from http://24ways.org/2010/calculating-color-contrast
        var rgb = this.values.rgb,
          yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
        return yiq < 128;
      },

      light: function() {
        return !this.dark();
      },

      negate: function() {
        var rgb = []
        for (var i = 0; i < 3; i++) {
          rgb[i] = 255 - this.values.rgb[i];
        }
        this.setValues("rgb", rgb);
        return this;
      },

      lighten: function(ratio) {
        this.values.hsl[2] += this.values.hsl[2] * ratio;
        this.setValues("hsl", this.values.hsl);
        return this;
      },

      darken: function(ratio) {
        this.values.hsl[2] -= this.values.hsl[2] * ratio;
        this.setValues("hsl", this.values.hsl);
        return this;
      },

      saturate: function(ratio) {
        this.values.hsl[1] += this.values.hsl[1] * ratio;
        this.setValues("hsl", this.values.hsl);
        return this;
      },

      desaturate: function(ratio) {
        this.values.hsl[1] -= this.values.hsl[1] * ratio;
        this.setValues("hsl", this.values.hsl);
        return this;
      },

      whiten: function(ratio) {
        this.values.hwb[1] += this.values.hwb[1] * ratio;
        this.setValues("hwb", this.values.hwb);
        return this;
      },

      blacken: function(ratio) {
        this.values.hwb[2] += this.values.hwb[2] * ratio;
        this.setValues("hwb", this.values.hwb);
        return this;
      },

      greyscale: function() {
        var rgb = this.values.rgb;
        // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        this.setValues("rgb", [val, val, val]);
        return this;
      },

      clearer: function(ratio) {
        this.setValues("alpha", this.values.alpha - (this.values.alpha * ratio));
        return this;
      },

      opaquer: function(ratio) {
        this.setValues("alpha", this.values.alpha + (this.values.alpha * ratio));
        return this;
      },

      rotate: function(degrees) {
        var hue = this.values.hsl[0];
        hue = (hue + degrees) % 360;
        hue = hue < 0 ? 360 + hue : hue;
        this.values.hsl[0] = hue;
        this.setValues("hsl", this.values.hsl);
        return this;
      },

      /**
       * Ported from sass implementation in C
       * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
       */
      mix: function(mixinColor, weight) {
        var color1 = this;
        var color2 = mixinColor;
        var p = weight !== undefined ? weight : 0.5;

        var w = 2 * p - 1;
        var a = color1.alpha() - color2.alpha();

        var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
        var w2 = 1 - w1;

        return this
          .rgb(
            w1 * color1.red() + w2 * color2.red(),
            w1 * color1.green() + w2 * color2.green(),
            w1 * color1.blue() + w2 * color2.blue()
          )
          .alpha(color1.alpha() * p + color2.alpha() * (1 - p));
      },

      toJSON: function() {
        return this.rgb();
      },

      clone: function() {
        return new Color(this.rgb());
      }
    }

    Color.prototype.getValues = function(space) {
      var vals = {};
      for (var i = 0; i < space.length; i++) {
        vals[space.charAt(i)] = this.values[space][i];
      }
      if (this.values.alpha != 1) {
        vals["a"] = this.values.alpha;
      }
      // {r: 255, g: 255, b: 255, a: 0.4}
      return vals;
    }

    Color.prototype.setValues = function(space, vals) {
      var spaces = {
        "rgb": ["red", "green", "blue"],
        "hsl": ["hue", "saturation", "lightness"],
        "hsv": ["hue", "saturation", "value"],
        "hwb": ["hue", "whiteness", "blackness"],
        "cmyk": ["cyan", "magenta", "yellow", "black"]
      };

      var maxes = {
        "rgb": [255, 255, 255],
        "hsl": [360, 100, 100],
        "hsv": [360, 100, 100],
        "hwb": [360, 100, 100],
        "cmyk": [100, 100, 100, 100]
      };

      var alpha = 1;
      if (space == "alpha") {
        alpha = vals;
      } else if (vals.length) {
        // [10, 10, 10]
        this.values[space] = vals.slice(0, space.length);
        alpha = vals[space.length];
      } else if (vals[space.charAt(0)] !== undefined) {
        // {r: 10, g: 10, b: 10}
        for (var i = 0; i < space.length; i++) {
          this.values[space][i] = vals[space.charAt(i)];
        }
        alpha = vals.a;
      } else if (vals[spaces[space][0]] !== undefined) {
        // {red: 10, green: 10, blue: 10}
        var chans = spaces[space];
        for (var i = 0; i < space.length; i++) {
          this.values[space][i] = vals[chans[i]];
        }
        alpha = vals.alpha;
      }
      this.values.alpha = Math.max(0, Math.min(1, (alpha !== undefined ? alpha : this.values.alpha)));
      if (space == "alpha") {
        return;
      }

      // cap values of the space prior converting all values
      for (var i = 0; i < space.length; i++) {
        var capped = Math.max(0, Math.min(maxes[space][i], this.values[space][i]));
        this.values[space][i] = Math.round(capped);
      }

      // convert to all the other color spaces
      for (var sname in spaces) {
        if (sname != space) {
          this.values[sname] = convert[space][sname](this.values[space])
        }

        // cap values
        for (var i = 0; i < sname.length; i++) {
          var capped = Math.max(0, Math.min(maxes[sname][i], this.values[sname][i]));
          this.values[sname][i] = Math.round(capped);
        }
      }
      return true;
    }

    Color.prototype.setSpace = function(space, args) {
      var vals = args[0];
      if (vals === undefined) {
        // color.rgb()
        return this.getValues(space);
      }
      // color.rgb(10, 10, 10)
      if (typeof vals == "number") {
        vals = Array.prototype.slice.call(args);
      }
      this.setValues(space, vals);
      return this;
    }

    Color.prototype.setChannel = function(space, index, val) {
      if (val === undefined) {
        // color.red()
        return this.values[space][index];
      }
      // color.red(100)
      this.values[space][index] = val;
      this.setValues(space, this.values[space]);
      return this;
    }

    module.exports = Color;

    /***/
  }),
  /* 430 */
  /***/
  (function(module, exports, __webpack_require__) {

    var conversions = __webpack_require__(431);

    var convert = function() {
      return new Converter();
    }

    for (var func in conversions) {
      // export Raw versions
      convert[func + "Raw"] = (function(func) {
        // accept array or plain args
        return function(arg) {
          if (typeof arg == "number")
            arg = Array.prototype.slice.call(arguments);
          return conversions[func](arg);
        }
      })(func);

      var pair = /(\w+)2(\w+)/.exec(func),
        from = pair[1],
        to = pair[2];

      // export rgb2hsl and ["rgb"]["hsl"]
      convert[from] = convert[from] || {};

      convert[from][to] = convert[func] = (function(func) {
        return function(arg) {
          if (typeof arg == "number")
            arg = Array.prototype.slice.call(arguments);

          var val = conversions[func](arg);
          if (typeof val == "string" || val === undefined)
            return val; // keyword

          for (var i = 0; i < val.length; i++)
            val[i] = Math.round(val[i]);
          return val;
        }
      })(func);
    }

    /* Converter does lazy conversion and caching */
    var Converter = function() {
      this.convs = {};
    };

    /* Either get the values for a space or
      set the values for a space, depending on args */
    Converter.prototype.routeSpace = function(space, args) {
      var values = args[0];
      if (values === undefined) {
        // color.rgb()
        return this.getValues(space);
      }
      // color.rgb(10, 10, 10)
      if (typeof values == "number") {
        values = Array.prototype.slice.call(args);
      }

      return this.setValues(space, values);
    };

    /* Set the values for a space, invalidating cache */
    Converter.prototype.setValues = function(space, values) {
      this.space = space;
      this.convs = {};
      this.convs[space] = values;
      return this;
    };

    /* Get the values for a space. If there's already
      a conversion for the space, fetch it, otherwise
      compute it */
    Converter.prototype.getValues = function(space) {
      var vals = this.convs[space];
      if (!vals) {
        var fspace = this.space,
          from = this.convs[fspace];
        vals = convert[fspace][space](from);

        this.convs[space] = vals;
      }
      return vals;
    };

    ["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
      Converter.prototype[space] = function(vals) {
        return this.routeSpace(space, arguments);
      }
    });

    module.exports = convert;

    /***/
  }),
  /* 431 */
  /***/
  (function(module, exports) {

    /* MIT license */

    module.exports = {
      rgb2hsl: rgb2hsl,
      rgb2hsv: rgb2hsv,
      rgb2hwb: rgb2hwb,
      rgb2cmyk: rgb2cmyk,
      rgb2keyword: rgb2keyword,
      rgb2xyz: rgb2xyz,
      rgb2lab: rgb2lab,
      rgb2lch: rgb2lch,

      hsl2rgb: hsl2rgb,
      hsl2hsv: hsl2hsv,
      hsl2hwb: hsl2hwb,
      hsl2cmyk: hsl2cmyk,
      hsl2keyword: hsl2keyword,

      hsv2rgb: hsv2rgb,
      hsv2hsl: hsv2hsl,
      hsv2hwb: hsv2hwb,
      hsv2cmyk: hsv2cmyk,
      hsv2keyword: hsv2keyword,

      hwb2rgb: hwb2rgb,
      hwb2hsl: hwb2hsl,
      hwb2hsv: hwb2hsv,
      hwb2cmyk: hwb2cmyk,
      hwb2keyword: hwb2keyword,

      cmyk2rgb: cmyk2rgb,
      cmyk2hsl: cmyk2hsl,
      cmyk2hsv: cmyk2hsv,
      cmyk2hwb: cmyk2hwb,
      cmyk2keyword: cmyk2keyword,

      keyword2rgb: keyword2rgb,
      keyword2hsl: keyword2hsl,
      keyword2hsv: keyword2hsv,
      keyword2hwb: keyword2hwb,
      keyword2cmyk: keyword2cmyk,
      keyword2lab: keyword2lab,
      keyword2xyz: keyword2xyz,

      xyz2rgb: xyz2rgb,
      xyz2lab: xyz2lab,
      xyz2lch: xyz2lch,

      lab2xyz: lab2xyz,
      lab2rgb: lab2rgb,
      lab2lch: lab2lch,

      lch2lab: lch2lab,
      lch2xyz: lch2xyz,
      lch2rgb: lch2rgb
    }

    function rgb2hsl(rgb) {
      var r = rgb[0] / 255,
        g = rgb[1] / 255,
        b = rgb[2] / 255,
        min = Math.min(r, g, b),
        max = Math.max(r, g, b),
        delta = max - min,
        h, s, l;

      if (max == min)
        h = 0;
      else if (r == max)
        h = (g - b) / delta;
      else if (g == max)
        h = 2 + (b - r) / delta;
      else if (b == max)
        h = 4 + (r - g) / delta;

      h = Math.min(h * 60, 360);

      if (h < 0)
        h += 360;

      l = (min + max) / 2;

      if (max == min)
        s = 0;
      else if (l <= 0.5)
        s = delta / (max + min);
      else
        s = delta / (2 - max - min);

      return [h, s * 100, l * 100];
    }

    function rgb2hsv(rgb) {
      var r = rgb[0],
        g = rgb[1],
        b = rgb[2],
        min = Math.min(r, g, b),
        max = Math.max(r, g, b),
        delta = max - min,
        h, s, v;

      if (max == 0)
        s = 0;
      else
        s = (delta / max * 1000) / 10;

      if (max == min)
        h = 0;
      else if (r == max)
        h = (g - b) / delta;
      else if (g == max)
        h = 2 + (b - r) / delta;
      else if (b == max)
        h = 4 + (r - g) / delta;

      h = Math.min(h * 60, 360);

      if (h < 0)
        h += 360;

      v = ((max / 255) * 1000) / 10;

      return [h, s, v];
    }

    function rgb2hwb(rgb) {
      var r = rgb[0],
        g = rgb[1],
        b = rgb[2],
        h = rgb2hsl(rgb)[0],
        w = 1 / 255 * Math.min(r, Math.min(g, b)),
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

      return [h, w * 100, b * 100];
    }

    function rgb2cmyk(rgb) {
      var r = rgb[0] / 255,
        g = rgb[1] / 255,
        b = rgb[2] / 255,
        c, m, y, k;

      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    }

    function rgb2keyword(rgb) {
      return reverseKeywords[JSON.stringify(rgb)];
    }

    function rgb2xyz(rgb) {
      var r = rgb[0] / 255,
        g = rgb[1] / 255,
        b = rgb[2] / 255;

      // assume sRGB
      r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
      g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
      b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

      var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
      var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
      var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

      return [x * 100, y * 100, z * 100];
    }

    function rgb2lab(rgb) {
      var xyz = rgb2xyz(rgb),
        x = xyz[0],
        y = xyz[1],
        z = xyz[2],
        l, a, b;

      x /= 95.047;
      y /= 100;
      z /= 108.883;

      x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

      l = (116 * y) - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);

      return [l, a, b];
    }

    function rgb2lch(args) {
      return lab2lch(rgb2lab(args));
    }

    function hsl2rgb(hsl) {
      var h = hsl[0] / 360,
        s = hsl[1] / 100,
        l = hsl[2] / 100,
        t1, t2, t3, rgb, val;

      if (s == 0) {
        val = l * 255;
        return [val, val, val];
      }

      if (l < 0.5)
        t2 = l * (1 + s);
      else
        t2 = l + s - l * s;
      t1 = 2 * l - t2;

      rgb = [0, 0, 0];
      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        t3 < 0 && t3++;
        t3 > 1 && t3--;

        if (6 * t3 < 1)
          val = t1 + (t2 - t1) * 6 * t3;
        else if (2 * t3 < 1)
          val = t2;
        else if (3 * t3 < 2)
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        else
          val = t1;

        rgb[i] = val * 255;
      }

      return rgb;
    }

    function hsl2hsv(hsl) {
      var h = hsl[0],
        s = hsl[1] / 100,
        l = hsl[2] / 100,
        sv, v;

      if (l === 0) {
        // no need to do calc on black
        // also avoids divide by 0 error
        return [0, 0, 0];
      }

      l *= 2;
      s *= (l <= 1) ? l : 2 - l;
      v = (l + s) / 2;
      sv = (2 * s) / (l + s);
      return [h, sv * 100, v * 100];
    }

    function hsl2hwb(args) {
      return rgb2hwb(hsl2rgb(args));
    }

    function hsl2cmyk(args) {
      return rgb2cmyk(hsl2rgb(args));
    }

    function hsl2keyword(args) {
      return rgb2keyword(hsl2rgb(args));
    }

    function hsv2rgb(hsv) {
      var h = hsv[0] / 60,
        s = hsv[1] / 100,
        v = hsv[2] / 100,
        hi = Math.floor(h) % 6;

      var f = h - Math.floor(h),
        p = 255 * v * (1 - s),
        q = 255 * v * (1 - (s * f)),
        t = 255 * v * (1 - (s * (1 - f))),
        v = 255 * v;

      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    }

    function hsv2hsl(hsv) {
      var h = hsv[0],
        s = hsv[1] / 100,
        v = hsv[2] / 100,
        sl, l;

      l = (2 - s) * v;
      sl = s * v;
      sl /= (l <= 1) ? l : 2 - l;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    }

    function hsv2hwb(args) {
      return rgb2hwb(hsv2rgb(args))
    }

    function hsv2cmyk(args) {
      return rgb2cmyk(hsv2rgb(args));
    }

    function hsv2keyword(args) {
      return rgb2keyword(hsv2rgb(args));
    }

    // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
    function hwb2rgb(hwb) {
      var h = hwb[0] / 360,
        wh = hwb[1] / 100,
        bl = hwb[2] / 100,
        ratio = wh + bl,
        i, v, f, n;

      // wh + bl cant be > 1
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }

      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;
      if ((i & 0x01) != 0) {
        f = 1 - f;
      }
      n = wh + f * (v - wh); // linear interpolation

      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }

      return [r * 255, g * 255, b * 255];
    }

    function hwb2hsl(args) {
      return rgb2hsl(hwb2rgb(args));
    }

    function hwb2hsv(args) {
      return rgb2hsv(hwb2rgb(args));
    }

    function hwb2cmyk(args) {
      return rgb2cmyk(hwb2rgb(args));
    }

    function hwb2keyword(args) {
      return rgb2keyword(hwb2rgb(args));
    }

    function cmyk2rgb(cmyk) {
      var c = cmyk[0] / 100,
        m = cmyk[1] / 100,
        y = cmyk[2] / 100,
        k = cmyk[3] / 100,
        r, g, b;

      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    }

    function cmyk2hsl(args) {
      return rgb2hsl(cmyk2rgb(args));
    }

    function cmyk2hsv(args) {
      return rgb2hsv(cmyk2rgb(args));
    }

    function cmyk2hwb(args) {
      return rgb2hwb(cmyk2rgb(args));
    }

    function cmyk2keyword(args) {
      return rgb2keyword(cmyk2rgb(args));
    }

    function xyz2rgb(xyz) {
      var x = xyz[0] / 100,
        y = xyz[1] / 100,
        z = xyz[2] / 100,
        r, g, b;

      r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
      g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
      b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

      // assume sRGB
      r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055) :
        r = (r * 12.92);

      g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055) :
        g = (g * 12.92);

      b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055) :
        b = (b * 12.92);

      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);

      return [r * 255, g * 255, b * 255];
    }

    function xyz2lab(xyz) {
      var x = xyz[0],
        y = xyz[1],
        z = xyz[2],
        l, a, b;

      x /= 95.047;
      y /= 100;
      z /= 108.883;

      x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

      l = (116 * y) - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);

      return [l, a, b];
    }

    function xyz2lch(args) {
      return lab2lch(xyz2lab(args));
    }

    function lab2xyz(lab) {
      var l = lab[0],
        a = lab[1],
        b = lab[2],
        x, y, z, y2;

      if (l <= 8) {
        y = (l * 100) / 903.3;
        y2 = (7.787 * (y / 100)) + (16 / 116);
      } else {
        y = 100 * Math.pow((l + 16) / 116, 3);
        y2 = Math.pow(y / 100, 1 / 3);
      }

      x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);

      z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);

      return [x, y, z];
    }

    function lab2lch(lab) {
      var l = lab[0],
        a = lab[1],
        b = lab[2],
        hr, h, c;

      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    }

    function lab2rgb(args) {
      return xyz2rgb(lab2xyz(args));
    }

    function lch2lab(lch) {
      var l = lch[0],
        c = lch[1],
        h = lch[2],
        a, b, hr;

      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    }

    function lch2xyz(args) {
      return lab2xyz(lch2lab(args));
    }

    function lch2rgb(args) {
      return lab2rgb(lch2lab(args));
    }

    function keyword2rgb(keyword) {
      return cssKeywords[keyword];
    }

    function keyword2hsl(args) {
      return rgb2hsl(keyword2rgb(args));
    }

    function keyword2hsv(args) {
      return rgb2hsv(keyword2rgb(args));
    }

    function keyword2hwb(args) {
      return rgb2hwb(keyword2rgb(args));
    }

    function keyword2cmyk(args) {
      return rgb2cmyk(keyword2rgb(args));
    }

    function keyword2lab(args) {
      return rgb2lab(keyword2rgb(args));
    }

    function keyword2xyz(args) {
      return rgb2xyz(keyword2rgb(args));
    }

    var cssKeywords = {
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 134, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 250, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      grey: [128, 128, 128],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 221],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      rebeccapurple: [102, 51, 153],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [112, 128, 144],
      slategrey: [112, 128, 144],
      snow: [255, 250, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 50]
    };

    var reverseKeywords = {};
    for (var key in cssKeywords) {
      reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
    }

    /***/
  }),
  /* 432 */
  /***/
  (function(module, exports, __webpack_require__) {

    /* MIT license */
    var colorNames = __webpack_require__(433);

    module.exports = {
      getRgba: getRgba,
      getHsla: getHsla,
      getRgb: getRgb,
      getHsl: getHsl,
      getHwb: getHwb,
      getAlpha: getAlpha,

      hexString: hexString,
      rgbString: rgbString,
      rgbaString: rgbaString,
      percentString: percentString,
      percentaString: percentaString,
      hslString: hslString,
      hslaString: hslaString,
      hwbString: hwbString,
      keyword: keyword
    }

    function getRgba(string) {
      if (!string) {
        return;
      }
      var abbr = /^#([a-fA-F0-9]{3})$/,
        hex = /^#([a-fA-F0-9]{6})$/,
        rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
        per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
        keyword = /(\D+)/;

      var rgb = [0, 0, 0],
        a = 1,
        match = string.match(abbr);
      if (match) {
        match = match[1];
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match[i] + match[i], 16);
        }
      } else if (match = string.match(hex)) {
        match = match[1];
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
        }
      } else if (match = string.match(rgba)) {
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match[i + 1]);
        }
        a = parseFloat(match[4]);
      } else if (match = string.match(per)) {
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
        }
        a = parseFloat(match[4]);
      } else if (match = string.match(keyword)) {
        if (match[1] == "transparent") {
          return [0, 0, 0, 0];
        }
        rgb = colorNames[match[1]];
        if (!rgb) {
          return;
        }
      }

      for (var i = 0; i < rgb.length; i++) {
        rgb[i] = scale(rgb[i], 0, 255);
      }
      if (!a && a != 0) {
        a = 1;
      } else {
        a = scale(a, 0, 1);
      }
      rgb[3] = a;
      return rgb;
    }

    function getHsla(string) {
      if (!string) {
        return;
      }
      var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
      var match = string.match(hsl);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360),
          s = scale(parseFloat(match[2]), 0, 100),
          l = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, s, l, a];
      }
    }

    function getHwb(string) {
      if (!string) {
        return;
      }
      var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
      var match = string.match(hwb);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360),
          w = scale(parseFloat(match[2]), 0, 100),
          b = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, w, b, a];
      }
    }

    function getRgb(string) {
      var rgba = getRgba(string);
      return rgba && rgba.slice(0, 3);
    }

    function getHsl(string) {
      var hsla = getHsla(string);
      return hsla && hsla.slice(0, 3);
    }

    function getAlpha(string) {
      var vals = getRgba(string);
      if (vals) {
        return vals[3];
      } else if (vals = getHsla(string)) {
        return vals[3];
      } else if (vals = getHwb(string)) {
        return vals[3];
      }
    }

    // generators
    function hexString(rgb) {
      return "#" + hexDouble(rgb[0]) + hexDouble(rgb[1]) +
        hexDouble(rgb[2]);
    }

    function rgbString(rgba, alpha) {
      if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
        return rgbaString(rgba, alpha);
      }
      return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
    }

    function rgbaString(rgba, alpha) {
      if (alpha === undefined) {
        alpha = (rgba[3] !== undefined ? rgba[3] : 1);
      }
      return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] +
        ", " + alpha + ")";
    }

    function percentString(rgba, alpha) {
      if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
        return percentaString(rgba, alpha);
      }
      var r = Math.round(rgba[0] / 255 * 100),
        g = Math.round(rgba[1] / 255 * 100),
        b = Math.round(rgba[2] / 255 * 100);

      return "rgb(" + r + "%, " + g + "%, " + b + "%)";
    }

    function percentaString(rgba, alpha) {
      var r = Math.round(rgba[0] / 255 * 100),
        g = Math.round(rgba[1] / 255 * 100),
        b = Math.round(rgba[2] / 255 * 100);
      return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
    }

    function hslString(hsla, alpha) {
      if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
        return hslaString(hsla, alpha);
      }
      return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
    }

    function hslaString(hsla, alpha) {
      if (alpha === undefined) {
        alpha = (hsla[3] !== undefined ? hsla[3] : 1);
      }
      return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " +
        alpha + ")";
    }

    // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
    // (hwb have alpha optional & 1 is default value)
    function hwbString(hwb, alpha) {
      if (alpha === undefined) {
        alpha = (hwb[3] !== undefined ? hwb[3] : 1);
      }
      return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%" +
        (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
    }

    function keyword(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    }

    // helpers
    function scale(num, min, max) {
      return Math.min(Math.max(min, num), max);
    }

    function hexDouble(num) {
      var str = num.toString(16).toUpperCase();
      return (str.length < 2) ? "0" + str : str;
    }

    //create a list of reverse color names
    var reverseNames = {};
    for (var name in colorNames) {
      reverseNames[colorNames[name]] = name;
    }

    /***/
  }),
  /* 433 */
  /***/
  (function(module, exports) {

    'use strict'

    module.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };

    /***/
  }),
  /* 434 */
  ,
  /* 435 */
  ,
  /* 436 */
  ,
  /* 437 */
  ,
  /* 438 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _servicesWatchDog = __webpack_require__(216);

    var _servicesWatchDog2 = _interopRequireDefault(_servicesWatchDog);

    // Get background page so we can tell watchdog to schedule after job updates
    var BG = chrome.extension.getBackgroundPage();
    // Schedule check in case restart cause background to not run correctly
    if (!BG.watchdog) {
      BG.watchdog = new _servicesWatchDog2['default']();
    }
    BG.watchdog.scheduleCheck();

    // Hydrate last email from local storage
    var tab = localStorage.getItem('tab_preference') === 'Browser' ? 'browser-tab' : 'server-tab';
    var page = 'capture';

    var updates = JSON.parse(localStorage.getItem('updates'));
    if (updates && updates.length >= 1) {
      tab = 'browser-tab';
      page = 'updates';
    }

    if (localStorage.getItem('display_upgraded') === 'true') {
      page = 'upgraded';
    }

    window.__data__ = {
      visualApp: {
        hydrated: true, // Tells reducer function to merge with initialState
        tab: tab,
        page: page,
        settings: {
          sound_enabled: localStorage.getItem('sound_enabled'),
          sound_clip: localStorage.getItem('sound_clip'),
          desktop_notifications: localStorage.getItem('desktop_notifications'),
          tab_preference: localStorage.getItem('tab_preference'),
          default_compare_preference: localStorage.getItem('default_compare_preference')
        },
        currentCapture: {
          email: localStorage.getItem('last_email'),
          error: localStorage.getItem('last_error'),
          checkInterval: tab === 'server-tab' ? '0' : '1',
          checkIntervalType: tab === 'server-tab' ? 'Day' : 'Min'
        },
        survey_data: {
          completed: localStorage.getItem('s_completed') === 'true'
        },
        pm_user: localStorage.getItem('pm_user') === 'true'
      }
    };

    var App = __webpack_require__(439);
    _react2['default'].render(_react2['default'].createElement(App, null), document.querySelector('#root'));

    /***/
  }),
  /* 439 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    __webpack_require__(3);

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _VisualApp = __webpack_require__(440);

    var _VisualApp2 = _interopRequireDefault(_VisualApp);

    var _redux = __webpack_require__(375);

    var _reduxDevtools = __webpack_require__(478);

    var _reduxDevtoolsLibReact = __webpack_require__(481);

    var _reactRedux = __webpack_require__(384);

    var _reducers = __webpack_require__(622);

    var reducers = _interopRequireWildcard(_reducers);

    var _reduxThunk = __webpack_require__(395);

    var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

    var _middlewarePromiseMiddleware = __webpack_require__(396);

    var _middlewarePromiseMiddleware2 = _interopRequireDefault(_middlewarePromiseMiddleware);

    var reducer = (0, _redux.combineReducers)(reducers);
    var finalCreateStore = undefined;

    if (false) {
      finalCreateStore = (0, _redux.compose)((0, _reduxDevtools.devTools)(), (0, _reduxDevtools.persistState)(window.location.href.match(/[?&]debug_session=([^&]+)\b/)), window.devToolsExtension ? window.devToolsExtension() : function(f) {
        return f;
      }, _redux.createStore);
    } else {
      finalCreateStore = _redux.createStore;
    }

    var store = (0, _redux.applyMiddleware)(_reduxThunk2['default'], _middlewarePromiseMiddleware2['default'])(finalCreateStore)(reducer, window.__data__);

    window.state = null;

    var App = (function(_Component) {
      _inherits(App, _Component);

      function App() {
        _classCallCheck(this, App);

        _get(Object.getPrototypeOf(App.prototype), 'constructor', this).apply(this, arguments);
      }

      _createClass(App, [{
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div',
            null,
            _react2['default'].createElement(
              _reactRedux.Provider, { store: store },
              function() {
                return _react2['default'].createElement(_VisualApp2['default'], null);
              }
            )
          );
        }
      }]);

      return App;
    })(_react.Component);

    exports['default'] = App;
    module.exports = exports['default'];
    /*
     (() => {
       if (__DEVELOPMENT__) {
         return (
           <DebugPanel top right bottom>
             <DevTools store={store}
                       monitor={LogMonitor} />
           </DebugPanel>
         );
       }
     })()
    */

    /***/
  }),
  /* 440 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _redux = __webpack_require__(375);

    var _reactRedux = __webpack_require__(384);

    var _componentsHeader = __webpack_require__(441);

    var _componentsHeader2 = _interopRequireDefault(_componentsHeader);

    var _componentsTabs = __webpack_require__(442);

    var _componentsTabs2 = _interopRequireDefault(_componentsTabs);

    var _componentsCaptureView = __webpack_require__(447);

    var _componentsCaptureView2 = _interopRequireDefault(_componentsCaptureView);

    var _componentsCaptureForm = __webpack_require__(449);

    var _componentsCaptureForm2 = _interopRequireDefault(_componentsCaptureForm);

    var _componentsMainSection = __webpack_require__(457);

    var _componentsMainSection2 = _interopRequireDefault(_componentsMainSection);

    var _componentsFooter = __webpack_require__(474);

    var _componentsFooter2 = _interopRequireDefault(_componentsFooter);

    var _actionsVisualActions = __webpack_require__(475);

    var VisualActions = _interopRequireWildcard(_actionsVisualActions);

    var VisualApp = (function(_Component) {
      _inherits(VisualApp, _Component);

      function VisualApp() {
        _classCallCheck(this, _VisualApp);

        _get(Object.getPrototypeOf(_VisualApp.prototype), 'constructor', this).apply(this, arguments);
      }

      _createClass(VisualApp, [{
        key: 'render',
        value: function render() {
          var _props = this.props;
          var visualApp = _props.visualApp;
          var dispatch = _props.dispatch;

          var actions = (0, _redux.bindActionCreators)(VisualActions, dispatch);
          return _react2['default'].createElement(
            'div',
            null,
            _react2['default'].createElement(_componentsHeader2['default'], {
              jobAction: actions.viewJobs,
              monitorAction: actions.viewCapture,
              viewOptionsAction: actions.viewOptions,
              jobsActive: visualApp.page === 'jobs' || visualApp.page === 'updates',
              jobCount: visualApp.browserJobs.length,
              tab: visualApp.tab,
              page: visualApp.page
            }),
            _react2['default'].createElement(_componentsTabs2['default'], {
              active: visualApp.tab,
              tabs: ['server-tab', 'browser-tab'],
              selectTabAction: actions.selectTab
            }),
            _react2['default'].createElement(_componentsMainSection2['default'], {
              actions: actions,
              tab: visualApp.tab,
              page: visualApp.page,
              jobs: visualApp.browserJobs,
              updates: visualApp.browserUpdates,
              settings: visualApp.settings,
              currentCapture: visualApp.currentCapture,
              survey_data: visualApp.survey_data,
              pm_user: visualApp.pm_user
            }),
            _react2['default'].createElement(_componentsFooter2['default'], {
              jobAction: actions.viewJobs,
              muteAction: actions.mute,
              unmuteAction: actions.unmute,
              tab: visualApp.tab,
              page: visualApp.page,
              settings: visualApp.settings
            })
          );
        }
      }], [{
        key: 'propTypes',
        value: {
          visualApp: _react2['default'].PropTypes.array.isRequired,
          dispatch: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      var _VisualApp = VisualApp;
      VisualApp = (0, _reactRedux.connect)(function(state) {
        return {
          visualApp: state.visualApp
        };
      })(VisualApp) || VisualApp;
      return VisualApp;
    })(_react.Component);

    exports['default'] = VisualApp;
    module.exports = exports['default'];

    /***/
  }),
  /* 441 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _color = __webpack_require__(429);

    var _color2 = _interopRequireDefault(_color);

    var Header = (function(_Component) {
      _inherits(Header, _Component);

      _createClass(Header, null, [{
        key: 'propTypes',
        value: {
          jobAction: _react.PropTypes.func.isRequired,
          monitorAction: _react.PropTypes.func.isRequired,
          jobsActive: _react.PropTypes.bool.isRequired,
          jobCount: _react.PropTypes.number.isRequired,
          tab: _react2['default'].PropTypes.oneOf(['browser-tab', 'server-tab']).isRequired,
          page: _react2['default'].PropTypes.oneOf(['capture', 'jobs', 'updates', 'settings']).isRequired
        },
        enumerable: true
      }]);

      function Header(props) {
        _classCallCheck(this, _Header);

        _get(Object.getPrototypeOf(_Header.prototype), 'constructor', this).call(this, props);
        this.dashboard_url = 'https://visualping.io/jobs/';
        this.handleJobsClick = this.handleJobsClick.bind(this);
        this.handleMonitorClick = this.handleMonitorClick.bind(this);
        this.handleOptionsClick = this.handleOptionsClick.bind(this);
      }

      _createClass(Header, [{
        key: 'handleJobsClick',
        value: function handleJobsClick(e) {
          e.preventDefault();
          this.props.jobAction();
        }
      }, {
        key: 'handleMonitorClick',
        value: function handleMonitorClick(e) {
          e.preventDefault();
          this.props.monitorAction();
        }
      }, {
        key: 'handleOptionsClick',
        value: function handleOptionsClick(e) {
          e.preventDefault();
          this.props.viewOptionsAction();
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'header', { className: 'header', style: styles.header },
            _react2['default'].createElement('img', { src: 'img/visual-logo.png', style: styles.logo })
          );
        }

        // renderBeta() {
        //   if ( this.props.tab == 'browser-tab' ) {
        //     return (
        //       <span style={styles.beta}>Free Beta</span>
        //     );
        //   }
        // }

      }, {
        key: 'renderJobsButton',
        value: function renderJobsButton() {
          if (this.props.page == 'capture') {
            if (this.props.tab == 'server-tab') {
              return _react2['default'].createElement(
                'div', { style: styles.wrapper },
                _react2['default'].createElement(
                  'span', { style: styles.help_text },
                  'Manage server jobs'
                ),
                _react2['default'].createElement(
                  'a', {
                    href: this.dashboard_url,
                    target: '_blank',
                    style: [styles.button, styles.green_button]
                  },
                  'Dashboard'
                )
              );
            } else if (this.props.tab == 'browser-tab') {
              return _react2['default'].createElement(
                'div', { style: styles.wrapper },
                _react2['default'].createElement(
                  'span', { style: styles.help_text },
                  'Manage browser jobs'
                ),
                _react2['default'].createElement(
                  'a', {
                    className: 'jobs-button',
                    style: [styles.button],
                    onClick: this.handleJobsClick
                  },
                  'Jobs'
                )
              );
            }
          } else {
            return _react2['default'].createElement(
              'a', { className: 'jobs-button', style: styles.monitor, onClick: this.handleMonitorClick },
              'Monitor'
            );
          }
        }
      }, {
        key: 'renderOptionsButton',
        value: function renderOptionsButton() {
          var optionsEnabled = this.props.page === 'settings';
          var optionsClass = optionsEnabled ? 'options_active' : 'options_disabled';
          return _react2['default'].createElement('a', {
            className: 'options_button',
            style: [styles.options_button, styles[optionsClass]],
            onClick: this.handleOptionsClick
          });
        }
      }]);

      var _Header = Header;
      Header = (0, _radium2['default'])(Header) || Header;
      return Header;
    })(_react.Component);

    exports['default'] = Header;

    var styles = {
      header: {
        height: 40,
        textAlign: 'center',
        position: 'relative'
      },
      logo: {
        // display: 'block',
        // textAlign: 'left',
        margin: '0 24px 0',
        height: 22,
        paddingTop: 10
      },
      jobs: {
        float: 'right',
        padding: '4px 10px 5px',
        color: '#FFFFFF',
        backgroundColor: '#46A9E2',
        borderRadius: 4,
        margin: 11,
        ':hover': {
          backgroundColor: (0, _color2['default'])('#46A9E2').darken(0.2).hexString(),
          cursor: 'pointer'
        }
      },
      monitor: {
        float: 'right',
        padding: '4px 10px 5px',
        color: '#FFFFFF',
        backgroundColor: '#56D2AA',
        borderRadius: 4,
        marginTop: 8,
        marginRight: 10,
        ':hover': {
          cursor: 'pointer',
          backgroundColor: (0, _color2['default'])('#56D2AA').darken(0.2).hexString()
        }
      },
      grey_button: {
        backgroundColor: '#9B9B9B',
        ':hover': {
          backgroundColor: (0, _color2['default'])('#9B9B9B').darken(0.2).hexString()
        }
      },
      jobsDepressed: {
        backgroundColor: (0, _color2['default'])('#46A9E2').darken(0.2).hexString(),
        backgroundImage: 'linear-gradient(-180deg, #3A89B6 0%, #46A9E2 77%)',
        boxShadow: 'inset 0px 1px 3px 0px rgba(0,0,0,0.50)'
      },
      beta: {
        fontSize: 10,
        color: '#9B9B9B',
        display: 'block',
        position: 'absolute',
        top: 12,
        left: 210
      },

      wrapper: {
        marginTop: 4,
        marginRight: 10,
        paddingLeft: 10,
        width: 192 - 10,
        textAlign: 'right',
        float: 'right',
        display: 'inline-block'
      },
      help_text: {
        color: '#9B9B9B',
        fontSize: 9,
        maxWidth: 60,
        padding: '0 6px',
        display: 'inline-block',
        marginTop: 5,
        textAlign: 'right'
      },
      button: {
        color: 'white',
        borderRadius: 4,
        fontSize: 12,
        backgroundColor: '#46A9E2',
        padding: '4px 16px 5px',
        top: -5,
        position: 'relative',
        textDecoration: 'none',
        ':hover': {
          cursor: 'pointer'
        }
      },
      green_button: {
        backgroundColor: (0, _color2['default'])('#56D2AA').darken(0.2).hexString(),
        fontSize: 11
      },
      options_button: {
        display: 'block',
        width: 19,
        height: 18,
        backgroundImage: 'url("img/options-button.png")',
        backgroundRepeat: 'no-repeat',
        position: 'absolute',
        top: '12px',
        right: '12px',
        cursor: 'pointer'
      },
      options_active: {
        backgroundPositionX: '-19px'
      },
      options_disabled: {}

    };
    module.exports = exports['default'];
    /* this.renderJobsButton() */
    /* this.renderOptionsButton() */

    /***/
  }),
  /* 442 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _componentsTab = __webpack_require__(443);

    var _componentsTab2 = _interopRequireDefault(_componentsTab);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var Tabs = (function(_Component) {
      _inherits(Tabs, _Component);

      _createClass(Tabs, null, [{
        key: 'propTypes',
        value: {
          active: _react2['default'].PropTypes.oneOf(['browser-tab', 'server-tab']).isRequired,
          tabs: _react2['default'].PropTypes.array.isRequired,
          selectTabAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function Tabs(props) {
        _classCallCheck(this, _Tabs);

        _get(Object.getPrototypeOf(_Tabs.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this._handleClick = this._handleClick.bind(this);
        this.tooltips = {
          'server-tab': 'Monitoring by our remote servers.\nAlerts sent by email',
          'browser-tab': 'Monitoring and alerts by your browser.\nWorks only when Chrome is open'
        };
      }

      _createClass(Tabs, [{
        key: '_handleClick',
        value: function _handleClick(event) {
          var value = event.currentTarget.className;
          this.setState({ active: value });
          this.props.selectTabAction(value);
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { className: 'tabs', style: styles.tabs },
            this.state.tabs.map(function(tab, i) {
              return _react2['default'].createElement(
                'div', { 'class': 'tab', className: tab, onClick: this._handleClick, style: styles[this.state.active == tab] },
                _react2['default'].createElement(_componentsTab2['default'], { className: tab, active: this.state.active == tab, tooltip: this.tooltips[tab] })
              );
            }, this)
          );
        }
      }]);

      var _Tabs = Tabs;
      Tabs = (0, _radium2['default'])(Tabs) || Tabs;
      return Tabs;
    })(_react.Component);

    exports['default'] = Tabs;

    var styles = {
      tabs: {
        height: 38
      },
      'true': {
        position: 'relative',
        zIndex: 2
      },
      'false': {
        position: 'relative',
        zIndex: 1
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 443 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _reactTooltip = __webpack_require__(444);

    var _reactTooltip2 = _interopRequireDefault(_reactTooltip);

    var Tab = (function(_Component) {
      _inherits(Tab, _Component);

      _createClass(Tab, null, [{
        key: 'propTypes',
        value: {
          active: _react2['default'].PropTypes.bool,
          className: _react2['default'].PropTypes.oneOf(['browser-tab', 'server-tab']).isRequired
        },
        enumerable: true
      }]);

      function Tab(props) {
        _classCallCheck(this, _Tab);

        _get(Object.getPrototypeOf(_Tab.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this._sourceUrl = this._sourceUrl.bind(this);
        this.state.source = this._sourceUrl(this.props.active);
      }

      _createClass(Tab, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          this.setState({ source: this._sourceUrl(nextProps.active) });
        }
      }, {
        key: '_sourceUrl',
        value: function _sourceUrl(active) {
          var path;
          if (active == true) {
            path = 'img/' + this.props.className + '-active.svg';
          } else {
            path = 'img/' + this.props.className + '.svg';
          }
          return path;
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { style: [styles.tab, styles[this.props.className]] },
            _react2['default'].createElement('img', {
              src: this.state.source,
              className: this.props.className
            }),
            _react2['default'].createElement(
              'span', {
                className: 'help',
                style: styles.help,
                'data-tip': this.props.tooltip,
                'data-effect': 'solid',
                'data-place': 'left',
                'data-position': '{\'top\': -10, \'right\': 0}'
              },
              '?'
            ),
            _react2['default'].createElement(_reactTooltip2['default'], null)
          );
        }
      }]);

      var _Tab = Tab;
      Tab = (0, _radium2['default'])(Tab) || Tab;
      return Tab;
    })(_react.Component);

    exports['default'] = Tab;

    var styles = {
      tab: {
        display: 'block',
        position: 'relative',
        float: 'left',
        ':hover': { cursor: 'pointer' }
      },
      'browser-tab': {
        marginLeft: -17
      },
      help: {
        display: 'block',
        position: 'absolute',
        color: '#C4DCEA',
        height: '12px',
        width: '12px',
        verticalAlign: 'middle',
        textAlign: 'center',
        borderRadius: '6px',
        border: '1px solid #C4DCEA',
        right: 14,
        fontSize: 10,
        top: 6
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 444 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _classnames = __webpack_require__(445);

    var _classnames2 = _interopRequireDefault(_classnames);

    var _style = __webpack_require__(446);

    var _style2 = _interopRequireDefault(_style);

    var ReactTooltip = (function(_Component) {
      _inherits(ReactTooltip, _Component);

      ReactTooltip.prototype._bind = function _bind() {
        var _this = this;

        for (var _len = arguments.length, handlers = Array(_len), _key = 0; _key < _len; _key++) {
          handlers[_key] = arguments[_key];
        }

        handlers.forEach(function(handler) {
          return _this[handler] = _this[handler].bind(_this);
        });
      };

      ReactTooltip.hide = function hide() {
        window.dispatchEvent(new window.Event('__react_tooltip_hide_event'));
      };

      ReactTooltip.rebuild = function rebuild() {
        window.dispatchEvent(new window.Event('__react_tooltip_rebuild_event'));
      };

      _createClass(ReactTooltip, null, [{
        key: 'displayName',
        value: 'ReactTooltip',
        enumerable: true
      }, {
        key: 'eventHideMark',
        value: 'hide' + Date.now(),
        enumerable: true
      }, {
        key: 'eventRebuildMark',
        value: 'rebuild' + Date.now(),
        enumerable: true
      }]);

      function ReactTooltip(props) {
        _classCallCheck(this, ReactTooltip);

        _Component.call(this, props);
        this._bind('showTooltip', 'updateTooltip', 'hideTooltip');
        this.mount = true;
        this.state = {
          show: false,
          multilineCount: 0,
          placeholder: '',
          x: 'NONE',
          y: 'NONE',
          place: '',
          type: '',
          effect: '',
          multiline: false,
          position: {}
        };
      }

      ReactTooltip.prototype.componentDidMount = function componentDidMount() {
        this.bindListener();
        /* Add window event listener for hide and rebuild */
        window.addEventListener('__react_tooltip_hide_event', this.globalHide.bind(this), false);
        window.addEventListener('__react_tooltip_rebuild_event', this.globalRebuild.bind(this), false);
      };

      /** Method for window.addEventListener
       *
       **/

      ReactTooltip.prototype.globalHide = function globalHide() {
        if (this.mount) {
          this.hideTooltip();
        }
      };

      ReactTooltip.prototype.globalRebuild = function globalRebuild() {
        if (this.mount) {
          this.unbindListener();
          this.bindListener();
        }
      };

      ReactTooltip.prototype.componentWillUnmount = function componentWillUnmount() {
        this.unbindListener();
        this.mount = false;
        var tag = document.querySelector('style[id="react-tooltip"]');
        document.getElementsByTagName('head')[0].removeChild(tag);
        window.removeEventListener('__react_tooltip_hide_event', this.globalHide);
        window.removeEventListener('__react_tooltip_rebuild_event', this.globalRebuild);
      };

      ReactTooltip.prototype.componentWillUpdate = function componentWillUpdate() {
        this.unbindListener();
      };

      ReactTooltip.prototype.componentDidUpdate = function componentDidUpdate() {
        this._updatePosition();
        this.bindListener();
      };

      ReactTooltip.prototype.bindListener = function bindListener() {
        var targetArray = document.querySelectorAll('[data-tip]');
        for (var i = 0; i < targetArray.length; i++) {
          targetArray[i].addEventListener('mouseenter', this.showTooltip, false);
          targetArray[i].addEventListener('mousemove', this.updateTooltip, false);
          targetArray[i].addEventListener('mouseleave', this.hideTooltip, false);
        }
      };

      ReactTooltip.prototype.unbindListener = function unbindListener() {
        var targetArray = document.querySelectorAll('[data-tip]');
        for (var i = 0; i < targetArray.length; i++) {
          targetArray[i].removeEventListener('mouseenter', this.showTooltip);
          targetArray[i].removeEventListener('mousemove', this.updateTooltip);
          targetArray[i].removeEventListener('mouseleave', this.hideTooltip);
        }
      };

      ReactTooltip.prototype._updatePosition = function _updatePosition() {
        var node = _react.findDOMNode(this);

        var tipWidth = node.clientWidth;
        var tipHeight = node.clientHeight;
        var offset = { x: 0, y: 0 };
        var effect = this.state.effect;

        if (effect === 'float') {
          if (this.state.place === 'top') {
            offset.x = -(tipWidth / 2);
            offset.y = -50;
          } else if (this.state.place === 'bottom') {
            offset.x = -(tipWidth / 2);
            offset.y = 30;
          } else if (this.state.place === 'left') {
            offset.x = -(tipWidth + 15);
            offset.y = -(tipHeight / 2);
          } else if (this.state.place === 'right') {
            offset.x = 10;
            offset.y = -(tipHeight / 2);
          }
        }
        var xPosition = 0;
        var yPosition = 0;
        var position = this.state.position;

        if (Object.prototype.toString.apply(position) === '[object String]') {
          position = JSON.parse(position.toString().replace(/\'/g, '\"'));
        }
        for (var key in position) {
          if (key === 'top') {
            yPosition -= parseInt(position[key], 10);
          } else if (key === 'bottom') {
            yPosition += parseInt(position[key], 10);
          } else if (key === 'left') {
            xPosition -= parseInt(position[key], 10);
          } else if (key === 'right') {
            xPosition += parseInt(position[key], 10);
          }
        }

        node.style.left = this.state.x + offset.x + xPosition + 'px';
        node.style.top = this.state.y + offset.y + yPosition + 'px';
      };

      ReactTooltip.prototype.showTooltip = function showTooltip(e) {
        var originTooltip = e.target.getAttribute('data-tip');
        var regexp = /<br\s*\W*>|\W+/;
        var multiline = e.target.getAttribute('data-multiline') ? e.target.getAttribute('data-multiline') : this.props.multiline ? this.props.multiline : false;
        var tooltipText = undefined;
        var multilineCount = 0;
        if (!multiline || multiline === 'false' || !regexp.test(originTooltip)) {
          tooltipText = originTooltip;
        } else {
          tooltipText = originTooltip.split(regexp).map(function(d, i) {
            multilineCount += 1;
            return _react2['default'].createElement(
              'span', { key: i, className: 'multi-line' },
              d
            );
          });
        }
        this.setState({
          placeholder: tooltipText,
          multilineCount: multilineCount,
          place: e.target.getAttribute('data-place') ? e.target.getAttribute('data-place') : this.props.place ? this.props.place : 'top',
          type: e.target.getAttribute('data-type') ? e.target.getAttribute('data-type') : this.props.type ? this.props.type : 'dark',
          effect: e.target.getAttribute('data-effect') ? e.target.getAttribute('data-effect') : this.props.effect ? this.props.effect : 'float',
          position: e.target.getAttribute('data-position') ? e.target.getAttribute('data-position') : this.props.position ? this.props.position : {},
          multiline: multiline
        });
        this.updateTooltip(e);
      };

      ReactTooltip.prototype.updateTooltip = function updateTooltip(e) {
        if (this.trim(this.state.placeholder).length > 0) {
          var _state = this.state;
          var multilineCount = _state.multilineCount;
          var place = _state.place;

          if (this.state.effect === 'float') {
            var offsetY = !multilineCount ? e.clientY : place !== 'top' ? e.clientY : e.clientY - multilineCount * 14.5;
            this.setState({
              show: true,
              x: e.clientX,
              y: offsetY
            });
          } else if (this.state.effect === 'solid') {
            var boundingClientRect = e.target.getBoundingClientRect();
            var targetTop = boundingClientRect.top;
            var targetLeft = boundingClientRect.left;
            var node = _react2['default'].findDOMNode(this);
            var tipWidth = node.clientWidth;
            var tipHeight = node.clientHeight;
            var targetWidth = e.target.clientWidth;
            var targetHeight = e.target.clientHeight;
            var x = undefined;
            var y = undefined;
            if (place === 'top') {
              x = targetLeft - tipWidth / 2 + targetWidth / 2;
              y = targetTop - tipHeight - 8;
            } else if (place === 'bottom') {
              x = targetLeft - tipWidth / 2 + targetWidth / 2;
              y = targetTop + targetHeight + 8;
            } else if (place === 'left') {
              x = targetLeft - tipWidth - 6;
              y = targetTop + targetHeight / 2 - tipHeight / 2;
            } else if (place === 'right') {
              x = targetLeft + targetWidth + 6;
              y = targetTop + targetHeight / 2 - tipHeight / 2;
            }
            this.setState({
              show: true,
              x: this.state.x === 'NONE' ? x : this.state.x,
              y: this.state.y === 'NONE' ? y : this.state.y
            });
          }
        }
      };

      ReactTooltip.prototype.hideTooltip = function hideTooltip() {
        this.setState({
          show: false,
          x: 'NONE',
          y: 'NONE'
        });
      };

      ReactTooltip.prototype.render = function render() {
        var tooltipClass = _classnames2['default']('__react_component_tooltip', { 'show': this.state.show }, { 'place-top': this.state.place === 'top' }, { 'place-bottom': this.state.place === 'bottom' }, { 'place-left': this.state.place === 'left' }, { 'place-right': this.state.place === 'right' }, { 'type-dark': this.state.type === 'dark' }, { 'type-success': this.state.type === 'success' }, { 'type-warning': this.state.type === 'warning' }, { 'type-error': this.state.type === 'error' }, { 'type-info': this.state.type === 'info' }, { 'type-light': this.state.type === 'light' });

        if (!document.getElementsByTagName('head')[0].querySelector('style[id="react-tooltip"]')) {
          var tag = document.createElement('style');
          tag.id = 'react-tooltip';
          tag.innerHTML = _style2['default'];
          document.getElementsByTagName('head')[0].appendChild(tag);
        }

        return _react2['default'].createElement(
          'span', { className: tooltipClass, 'data-id': 'tooltip' },
          this.state.placeholder
        );
      };

      ReactTooltip.prototype.trim = function trim(string) {
        if (Object.prototype.toString.call(string) !== '[object String]') {
          return string;
        }
        var newString = string.split('');
        var firstCount = 0;
        var lastCount = 0;
        for (var i = 0; i < string.length; i++) {
          if (string[i] !== ' ') {
            break;
          }
          firstCount++;
        }
        for (var i = string.length - 1; i >= 0; i--) {
          if (string[i] !== ' ') {
            break;
          }
          lastCount++;
        }
        newString.splice(0, firstCount);
        newString.splice(-lastCount, lastCount);
        return newString.join('');
      };

      return ReactTooltip;
    })(_react.Component);

    exports['default'] = ReactTooltip;

    ReactTooltip.propTypes = {
      place: _react.PropTypes.string,
      type: _react.PropTypes.string,
      effect: _react.PropTypes.string,
      position: _react.PropTypes.object,
      multiline: _react.PropTypes.bool
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 445 */
  /***/
  (function(module, exports, __webpack_require__) {

    var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
    /*!
    	  Copyright (c) 2015 Jed Watson.
    	  Licensed under the MIT License (MIT), see
    	  http://jedwatson.github.io/classnames
    	*/

    function classNames() {
      var classes = '';
      var arg;

      for (var i = 0; i < arguments.length; i++) {
        arg = arguments[i];
        if (!arg) {
          continue;
        }

        if ('string' === typeof arg || 'number' === typeof arg) {
          classes += ' ' + arg;
        } else if (Object.prototype.toString.call(arg) === '[object Array]') {
          classes += ' ' + classNames.apply(null, arg);
        } else if ('object' === typeof arg) {
          for (var key in arg) {
            if (!arg.hasOwnProperty(key) || !arg[key]) {
              continue;
            }
            classes += ' ' + key;
          }
        }
      }
      return classes.substr(1);
    }

    // safely export classNames for node / browserify
    if (typeof module !== 'undefined' && module.exports) {
      module.exports = classNames;
    }

    // safely export classNames for RequireJS
    if (true) {
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
        return classNames;
      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }

    /***/
  }),
  /* 446 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = '.__react_component_tooltip{border-radius:3px;display:inline-block;font-size:13px;left:-999em;opacity:0;padding:8px 21px;position:fixed;pointer-events:none;transition:opacity 0.3s ease-out,margin-top 0.3s ease-out,margin-left 0.3s ease-out;top:-999em;visibility:hidden;z-index:999}.__react_component_tooltip:after{content:"";width:0;height:0;position:absolute}.__react_component_tooltip.show{opacity:0.9;margin-top:0px;margin-left:0px;visibility:visible}.__react_component_tooltip.type-dark{color:#fff;background-color:#222}.__react_component_tooltip.type-dark.place-top:after{border-top:8px solid #222}.__react_component_tooltip.type-dark.place-bottom:after{border-bottom:8px solid #222}.__react_component_tooltip.type-dark.place-left:after{border-left:6px solid #222}.__react_component_tooltip.type-dark.place-right:after{border-right:6px solid #222}.__react_component_tooltip.type-success{color:#fff;background-color:#8DC572}.__react_component_tooltip.type-success.place-top:after{border-top:8px solid #8DC572}.__react_component_tooltip.type-success.place-bottom:after{border-bottom:8px solid #8DC572}.__react_component_tooltip.type-success.place-left:after{border-left:6px solid #8DC572}.__react_component_tooltip.type-success.place-right:after{border-right:6px solid #8DC572}.__react_component_tooltip.type-warning{color:#fff;background-color:#F0AD4E}.__react_component_tooltip.type-warning.place-top:after{border-top:8px solid #F0AD4E}.__react_component_tooltip.type-warning.place-bottom:after{border-bottom:8px solid #F0AD4E}.__react_component_tooltip.type-warning.place-left:after{border-left:6px solid #F0AD4E}.__react_component_tooltip.type-warning.place-right:after{border-right:6px solid #F0AD4E}.__react_component_tooltip.type-error{color:#fff;background-color:#BE6464}.__react_component_tooltip.type-error.place-top:after{border-top:8px solid #BE6464}.__react_component_tooltip.type-error.place-bottom:after{border-bottom:8px solid #BE6464}.__react_component_tooltip.type-error.place-left:after{border-left:6px solid #BE6464}.__react_component_tooltip.type-error.place-right:after{border-right:6px solid #BE6464}.__react_component_tooltip.type-info{color:#fff;background-color:#337AB7}.__react_component_tooltip.type-info.place-top:after{border-top:8px solid #337AB7}.__react_component_tooltip.type-info.place-bottom:after{border-bottom:8px solid #337AB7}.__react_component_tooltip.type-info.place-left:after{border-left:6px solid #337AB7}.__react_component_tooltip.type-info.place-right:after{border-right:6px solid #337AB7}.__react_component_tooltip.type-light{color:#222;background-color:#fff}.__react_component_tooltip.type-light.place-top:after{border-top:8px solid #fff}.__react_component_tooltip.type-light.place-bottom:after{border-bottom:8px solid #fff}.__react_component_tooltip.type-light.place-left:after{border-left:6px solid #fff}.__react_component_tooltip.type-light.place-right:after{border-right:6px solid #fff}.__react_component_tooltip.place-top{margin-top:-10px}.__react_component_tooltip.place-top:after{border-left:10px solid transparent;border-right:10px solid transparent;bottom:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-bottom{margin-top:10px}.__react_component_tooltip.place-bottom:after{border-left:10px solid transparent;border-right:10px solid transparent;top:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-left{margin-left:-10px}.__react_component_tooltip.place-left:after{border-top:6px solid transparent;border-bottom:6px solid transparent;right:-6px;top:50%;margin-top:-5px}.__react_component_tooltip.place-right{margin-left:10px}.__react_component_tooltip.place-right:after{border-top:6px solid transparent;border-bottom:6px solid transparent;left:-6px;top:50%;margin-top:-5px}.__react_component_tooltip .multi-line{display:block;padding:2px 0px;text-align:center}';
    module.exports = exports['default'];

    /***/
  }),
  /* 447 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    // Libraries

    var _jquery = __webpack_require__(203);

    var _jquery2 = _interopRequireDefault(_jquery);

    var _assetsJsJqueryImgareaselect = __webpack_require__(448);

    var _assetsJsJqueryImgareaselect2 = _interopRequireDefault(_assetsJsJqueryImgareaselect);

    // Extracted from original Visual Ping extension.
    // Depends on jquery and jquery.imageareaselect

    var CaptureView = (function(_Component) {
      _inherits(CaptureView, _Component);

      _createClass(CaptureView, null, [{
        key: 'propTypes',
        value: {
          actions: _react.PropTypes.object.isRequired,
          selection: _react2['default'].PropTypes.bool
        },
        enumerable: true
      }]);

      function CaptureView(props, context) {
        _classCallCheck(this, _CaptureView);

        _get(Object.getPrototypeOf(_CaptureView.prototype), 'constructor', this).call(this, props, context);
        this.state = this.props;
        this.hideSelectArea = this.hideSelectArea.bind(this);
      }

      _createClass(CaptureView, [{
        key: 'hideSelectArea',
        value: function hideSelectArea(e) {
          this.setState({ selection: true });
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            this.renderSelectArea(),
            _react2['default'].createElement(
              'div', { className: 'screen' },
              _react2['default'].createElement('img', { id: 'target', src: 'img/loading.gif' })
            )
          );
        }
      }, {
        key: 'renderSelectArea',
        value: function renderSelectArea() {
          if (!this.state.selection) {
            return _react2['default'].createElement(
              'p', { className: 'select_area', style: styles.select_area, onMouseOver: this.hideSelectArea },
              'Select area of interest',
              _react2['default'].createElement('br', null),
              _react2['default'].createElement(
                'small', { style: styles.select_area_small },
                '(Whole page selected by default)',
                _react2['default'].createElement('br', null),
                'or use Pick Element button below'
              )
            );
          }
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          if (!this.state.selectionStarted) {
            this.setState({ selection: nextProps.selection });
          }
        }
      }, {
        key: 'componentWillUpdate',
        value: function componentWillUpdate() {
          return false;
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          // https://github.com/odyniec/imgareaselect/issues/14
          (0, _jquery2['default'])(".imgareaselect-selection").parent().remove();
          (0, _jquery2['default'])(".imgareaselect-outer").remove();
        }
      }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
          var _this = this;

          // To make sure we can uniquely identify each screenshot tab, add an id as a
          // query param to the url that displays the screenshot.
          var self = this;
          var id = 100;
          var options = { 'quality': 100, 'format': 'png' };
          var url = undefined;
          var w = undefined;

          chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
            // console.log(request.scroll);
            scroll_position = request.scroll;
          });

          var crop = {};
          var scroll_position = null;

          var actionToDispatch = function actionToDispatch(img, crop) {
            _this.props.actions.initiateCroppedPreview(img, crop);
            _this.props.actions.setCurrentCrop(crop);
            _this.props.actions.setCurrentSelector(crop);
          };

          chrome.windows.getCurrent(function(current_window) {
            chrome.tabs.getSelected(null, function(tab) {
              w = current_window;
              var scrollTop = 0;
              var document_width = w.width;
              var document_height = w.height;
              var orig_width = w.width;
              var orig_height = w.height;

              var target_width = 392; // To fit preview nicely in pop-up
              var target_height = orig_height * target_width / orig_width;
              (0, _jquery2['default'])('.screen img').css({
                'width': target_width + 'px',
                'heigth': target_height + 'px',
                'marginLeft': '0'
              });

              chrome.tabs.executeScript(tab.id, {
                code: 'var response = {scrollTop: document.body.scrollTop, width: document.body.offsetWidth, height: document.body.offsetHeight}; response;'
              }, function(response) {
                if (response[0]) {
                  scrollTop = response[0].scrollTop;
                  document_width = response[0].width;
                  document_height = response[0].height;
                }

                chrome.tabs.getSelected(null, function(tab) {
                  url = tab.url;
                });

                crop = {
                  selection: false, // Whole page unless selection is made
                  document_width: document_width,
                  document_height: document_height,
                  scroll_top: scrollTop,
                  orig_width: w.width,
                  orig_height: w.height,
                  width: w.width, // Default
                  height: w.height, // Default
                  x: 0, // Default
                  y: 0 // Default
                };

                // Dispatch screenshot action
                // Timeout just to allow pop up to load before freezing on Retina screens
                setTimeout((function() {
                  self.props.actions.takeScreenshot(function(img) {
                    actionToDispatch(img, crop); // Set defualt crop on global job
                  });
                }).bind(self), 200);
              });

              var selection = (0, _jquery2['default'])('.screen').imgAreaSelect({
                handles: true,
                /*maxWidth: Math.round(1185 / (w.width / 400)),*/
                onSelectStart: function onSelectStart() {
                  self.setState({ selectionStarted: true, selection: true });
                },
                onSelectEnd: function onSelectEnd(imgProp, selection) {
                  var img = imgProp.children[0].src;
                  self.setState({ selectionStarted: false });

                  if (!(selection.width == 0) || !(selection.height === 0)) {
                    crop.selection = true;
                    crop.scroll_top = scrollTop;
                    crop.x = Math.round(selection.x1 * (orig_width / target_width));
                    crop.y = Math.round(selection.y1 * (orig_height / target_height));
                    crop.width = Math.round(selection.width * (orig_width / target_width));
                    crop.height = Math.round(selection.height * (orig_height / target_height));
                  } else {
                    // Set default if clicked out
                    crop.x = 0;
                    crop.y = 0;
                    crop.width = orig_width;
                    crop.height = orig_height;
                  }

                  // Redux HERE
                  // Dispatch action to store crop object
                  actionToDispatch(img, crop);
                }
              });
            });
          });
        }
      }]);

      var _CaptureView = CaptureView;
      CaptureView = (0, _radium2['default'])(CaptureView) || CaptureView;
      return CaptureView;
    })(_react.Component);

    exports['default'] = CaptureView;

    var styles = {
      wrapper: {
        marginTop: '16px',
        position: 'relative'
      },
      select_area: {
        position: 'absolute',
        display: 'block',
        zIndex: 2,
        width: '160px',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%,-50%)',
        backgroundColor: 'rgba(255,255,255,0.85)',
        // border: '1px solid #9B9B9B',
        borderRadius: '4px',
        padding: '6px',
        margin: 0,
        fontSize: 14,
        textAlign: 'center',
        color: '#666666',
        // color: '#9B9B9B'
        userSelect: 'none'
      },
      select_area_small: {
        fontSize: 9
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 448 */
  /***/
  (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */
    (function(jQuery) {
      /*
       * imgAreaSelect jQuery plugin
       * version 0.9.10
       *
       * Copyright (c) 2008-2013 Michal Wojciechowski (odyniec.net)
       *
       * Dual licensed under the MIT (MIT-LICENSE.txt)
       * and GPL (GPL-LICENSE.txt) licenses.
       *
       * http://odyniec.net/projects/imgareaselect/
       *
       */

      'use strict';

      (function($) {

        /*
         * Math functions will be used extensively, so it's convenient to make a few
         * shortcuts
         */
        var abs = Math.abs,
          max = Math.max,
          min = Math.min,
          round = Math.round;

        /**
         * Create a new HTML div element
         *
         * @return A jQuery object representing the new element
         */
        function div() {
          return $('<div/>');
        }

        /**
         * imgAreaSelect initialization
         *
         * @param img
         *            A HTML image element to attach the plugin to
         * @param options
         *            An options object
         */
        $.imgAreaSelect = function(img, options) {
          var
            /* jQuery object representing the image */
            $img = $(img),

            /* Has the image finished loading? */
            imgLoaded,

            /* Plugin elements */

            /* Container box */
            $box = div(),

            /* Selection area */
            $area = div(),

            /* Border (four divs) */
            $border = div().add(div()).add(div()).add(div()),

            /* Outer area (four divs) */
            $outer = div().add(div()).add(div()).add(div()),

            /* Handles (empty by default, initialized in setOptions()) */
            $handles = $([]),

            /*
             * Additional element to work around a cursor problem in Opera
             * (explained later)
             */
            $areaOpera,

            /* Image position (relative to viewport) */
            left,
            top,

            /* Image offset (as returned by .offset()) */
            imgOfs = { left: 0, top: 0 },

            /* Image dimensions (as returned by .width() and .height()) */
            imgWidth,
            imgHeight,

            /*
             * jQuery object representing the parent element that the plugin
             * elements are appended to
             */
            $parent,

            /* Parent element offset (as returned by .offset()) */
            parOfs = { left: 0, top: 0 },

            /* Base z-index for plugin elements */
            zIndex = 0,

            /* Plugin elements position */
            position = 'absolute',

            /* X/Y coordinates of the starting point for move/resize operations */
            startX,
            startY,

            /* Horizontal and vertical scaling factors */
            scaleX,
            scaleY,

            /* Current resize mode ("nw", "se", etc.) */
            resize,

            /* Selection area constraints */
            minWidth,
            minHeight,
            maxWidth,
            maxHeight,

            /* Aspect ratio to maintain (floating point number) */
            aspectRatio,

            /* Are the plugin elements currently displayed? */
            shown,

            /* Current selection (relative to parent element) */
            x1,
            y1,
            x2,
            y2,

            /* Current selection (relative to scaled image) */
            selection = { x1: 0, y1: 0, x2: 0, y2: 0, width: 0, height: 0 },

            /* Document element */
            docElem = document.documentElement,

            /* User agent */
            ua = navigator.userAgent,

            /* Various helper variables used throughout the code */
            $p,
            d,
            i,
            o,
            w,
            h,
            adjusted;

          /*
           * Translate selection coordinates (relative to scaled image) to viewport
           * coordinates (relative to parent element)
           */

          /**
           * Translate selection X to viewport X
           *
           * @param x
           *            Selection X
           * @return Viewport X
           */
          function viewX(x) {
            return x + imgOfs.left - parOfs.left;
          }

          /**
           * Translate selection Y to viewport Y
           *
           * @param y
           *            Selection Y
           * @return Viewport Y
           */
          function viewY(y) {
            return y + imgOfs.top - parOfs.top;
          }

          /*
           * Translate viewport coordinates to selection coordinates
           */

          /**
           * Translate viewport X to selection X
           *
           * @param x
           *            Viewport X
           * @return Selection X
           */
          function selX(x) {
            return x - imgOfs.left + parOfs.left;
          }

          /**
           * Translate viewport Y to selection Y
           *
           * @param y
           *            Viewport Y
           * @return Selection Y
           */
          function selY(y) {
            return y - imgOfs.top + parOfs.top;
          }

          /*
           * Translate event coordinates (relative to document) to viewport
           * coordinates
           */

          /**
           * Get event X and translate it to viewport X
           *
           * @param event
           *            The event object
           * @return Viewport X
           */
          function evX(event) {
            return event.pageX - parOfs.left;
          }

          /**
           * Get event Y and translate it to viewport Y
           *
           * @param event
           *            The event object
           * @return Viewport Y
           */
          function evY(event) {
            return event.pageY - parOfs.top;
          }

          /**
           * Get the current selection
           *
           * @param noScale
           *            If set to <code>true</code>, scaling is not applied to the
           *            returned selection
           * @return Selection object
           */
          function getSelection(noScale) {
            var sx = noScale || scaleX,
              sy = noScale || scaleY;

            return {
              x1: round(selection.x1 * sx),
              y1: round(selection.y1 * sy),
              x2: round(selection.x2 * sx),
              y2: round(selection.y2 * sy),
              width: round(selection.x2 * sx) - round(selection.x1 * sx),
              height: round(selection.y2 * sy) - round(selection.y1 * sy)
            };
          }

          /**
           * Set the current selection
           *
           * @param x1
           *            X coordinate of the upper left corner of the selection area
           * @param y1
           *            Y coordinate of the upper left corner of the selection area
           * @param x2
           *            X coordinate of the lower right corner of the selection area
           * @param y2
           *            Y coordinate of the lower right corner of the selection area
           * @param noScale
           *            If set to <code>true</code>, scaling is not applied to the
           *            new selection
           */
          function setSelection(x1, y1, x2, y2, noScale) {
            var sx = noScale || scaleX,
              sy = noScale || scaleY;

            selection = {
              x1: round(x1 / sx || 0),
              y1: round(y1 / sy || 0),
              x2: round(x2 / sx || 0),
              y2: round(y2 / sy || 0)
            };

            selection.width = selection.x2 - selection.x1;
            selection.height = selection.y2 - selection.y1;
          }

          /**
           * Recalculate image and parent offsets
           */
          function adjust() {
            /*
             * Do not adjust if image has not yet loaded or if width is not a
             * positive number. The latter might happen when imgAreaSelect is put
             * on a parent element which is then hidden.
             */
            if (!imgLoaded || !$img.width()) return;

            /*
             * Get image offset. The .offset() method returns float values, so they
             * need to be rounded.
             */
            imgOfs = { left: round($img.offset().left), top: round($img.offset().top) };

            /* Get image dimensions */
            imgWidth = $img.innerWidth();
            imgHeight = $img.innerHeight();

            imgOfs.top += $img.outerHeight() - imgHeight >> 1;
            imgOfs.left += $img.outerWidth() - imgWidth >> 1;

            /* Set minimum and maximum selection area dimensions */
            minWidth = round(options.minWidth / scaleX) || 0;
            minHeight = round(options.minHeight / scaleY) || 0;
            maxWidth = round(min(options.maxWidth / scaleX || 1 << 24, imgWidth));
            maxHeight = round(min(options.maxHeight / scaleY || 1 << 24, imgHeight));

            /*
             * Workaround for jQuery 1.3.2 incorrect offset calculation, originally
             * observed in Safari 3. Firefox 2 is also affected.
             */
            if ($().jquery == '1.3.2' && position == 'fixed' && !docElem['getBoundingClientRect']) {
              imgOfs.top += max(document.body.scrollTop, docElem.scrollTop);
              imgOfs.left += max(document.body.scrollLeft, docElem.scrollLeft);
            }

            /* Determine parent element offset */
            parOfs = /absolute|relative/.test($parent.css('position')) ? {
              left: round($parent.offset().left) - $parent.scrollLeft(),
              top: round($parent.offset().top) - $parent.scrollTop()
            } : position == 'fixed' ? { left: $(document).scrollLeft(), top: $(document).scrollTop() } : { left: 0, top: 0 };

            left = viewX(0);
            top = viewY(0);

            /*
             * Check if selection area is within image boundaries, adjust if
             * necessary
             */
            if (selection.x2 > imgWidth || selection.y2 > imgHeight) doResize();
          }

          /**
           * Update plugin elements
           *
           * @param resetKeyPress
           *            If set to <code>false</code>, this instance's keypress
           *            event handler is not activated
           */
          function update(resetKeyPress) {
            /* If plugin elements are hidden, do nothing */
            if (!shown) return;

            /*
             * Set the position and size of the container box and the selection area
             * inside it
             */
            $box.css({ left: viewX(selection.x1), top: viewY(selection.y1) }).add($area).width(w = selection.width).height(h = selection.height);

            /*
             * Reset the position of selection area, borders, and handles (IE6/IE7
             * position them incorrectly if we don't do this)
             */
            $area.add($border).add($handles).css({ left: 0, top: 0 });

            /* Set border dimensions */
            $border.width(max(w - $border.outerWidth() + $border.innerWidth(), 0)).height(max(h - $border.outerHeight() + $border.innerHeight(), 0));

            /* Arrange the outer area elements */
            $($outer[0]).css({
              left: left,
              top: top,
              width: selection.x1,
              height: imgHeight
            });
            $($outer[1]).css({
              left: left + selection.x1,
              top: top,
              width: w,
              height: selection.y1
            });
            $($outer[2]).css({
              left: left + selection.x2,
              top: top,
              width: imgWidth - selection.x2,
              height: imgHeight
            });
            $($outer[3]).css({
              left: left + selection.x1,
              top: top + selection.y2,
              width: w,
              height: imgHeight - selection.y2
            });

            w -= $handles.outerWidth();
            h -= $handles.outerHeight();

            /* Arrange handles */
            switch ($handles.length) {
              case 8:
                $($handles[4]).css({ left: w >> 1 });
                $($handles[5]).css({ left: w, top: h >> 1 });
                $($handles[6]).css({ left: w >> 1, top: h });
                $($handles[7]).css({ top: h >> 1 });
              case 4:
                $handles.slice(1, 3).css({ left: w });
                $handles.slice(2, 4).css({ top: h });
            }

            if (resetKeyPress !== false) {
              /*
               * Need to reset the document keypress event handler -- unbind the
               * current handler
               */
              if ($.imgAreaSelect.onKeyPress != docKeyPress) $(document).unbind($.imgAreaSelect.keyPress, $.imgAreaSelect.onKeyPress);

              if (options.keys)
                /*
                 * Set the document keypress event handler to this instance's
                 * docKeyPress() function
                 */
                $(document)[$.imgAreaSelect.keyPress]($.imgAreaSelect.onKeyPress = docKeyPress);
            }

            /*
             * Internet Explorer displays 1px-wide dashed borders incorrectly by
             * filling the spaces between dashes with white. Toggling the margin
             * property between 0 and "auto" fixes this in IE6 and IE7 (IE8 is still
             * broken). This workaround is not perfect, as it requires setTimeout()
             * and thus causes the border to flicker a bit, but I haven't found a
             * better solution.
             *
             * Note: This only happens with CSS borders, set with the borderWidth,
             * borderOpacity, borderColor1, and borderColor2 options (which are now
             * deprecated). Borders created with GIF background images are fine.
             */
            if (msie && $border.outerWidth() - $border.innerWidth() == 2) {
              $border.css('margin', 0);
              setTimeout(function() {
                $border.css('margin', 'auto');
              }, 0);
            }
          }

          /**
           * Do the complete update sequence: recalculate offsets, update the
           * elements, and set the correct values of x1, y1, x2, and y2.
           *
           * @param resetKeyPress
           *            If set to <code>false</code>, this instance's keypress
           *            event handler is not activated
           */
          function doUpdate(resetKeyPress) {
            adjust();
            update(resetKeyPress);
            x1 = viewX(selection.x1);
            y1 = viewY(selection.y1);
            x2 = viewX(selection.x2);
            y2 = viewY(selection.y2);
          }

          /**
           * Hide or fade out an element (or multiple elements)
           *
           * @param $elem
           *            A jQuery object containing the element(s) to hide/fade out
           * @param fn
           *            Callback function to be called when fadeOut() completes
           */
          function hide($elem, fn) {
            options.fadeSpeed ? $elem.fadeOut(options.fadeSpeed, fn) : $elem.hide();
          }

          /**
           * Selection area mousemove event handler
           *
           * @param event
           *            The event object
           */
          function areaMouseMove(event) {
            var x = selX(evX(event)) - selection.x1,
              y = selY(evY(event)) - selection.y1;

            if (!adjusted) {
              adjust();
              adjusted = true;

              $box.one('mouseout', function() {
                adjusted = false;
              });
            }

            /* Clear the resize mode */
            resize = '';

            if (options.resizable) {
              /*
               * Check if the mouse pointer is over the resize margin area and set
               * the resize mode accordingly
               */
              if (y <= options.resizeMargin) resize = 'n';
              else if (y >= selection.height - options.resizeMargin) resize = 's';
              if (x <= options.resizeMargin) resize += 'w';
              else if (x >= selection.width - options.resizeMargin) resize += 'e';
            }

            $box.css('cursor', resize ? resize + '-resize' : options.movable ? 'move' : '');
            if ($areaOpera) $areaOpera.toggle();
          }

          /**
           * Document mouseup event handler
           *
           * @param event
           *            The event object
           */
          function docMouseUp(event) {
            /* Set back the default cursor */
            $('body').css('cursor', '');
            /*
             * If autoHide is enabled, or if the selection has zero width/height,
             * hide the selection and the outer area
             */
            if (options.autoHide || selection.width * selection.height == 0) hide($box.add($outer), function() {
              $(this).hide();
            });

            $(document).unbind('mousemove', selectingMouseMove);
            $box.mousemove(areaMouseMove);

            options.onSelectEnd(img, getSelection());
          }

          /**
           * Selection area mousedown event handler
           *
           * @param event
           *            The event object
           * @return false
           */
          function areaMouseDown(event) {
            if (event.which != 1) return false;

            adjust();

            if (resize) {
              /* Resize mode is in effect */
              $('body').css('cursor', resize + '-resize');

              x1 = viewX(selection[/w/.test(resize) ? 'x2' : 'x1']);
              y1 = viewY(selection[/n/.test(resize) ? 'y2' : 'y1']);

              $(document).mousemove(selectingMouseMove).one('mouseup', docMouseUp);
              $box.unbind('mousemove', areaMouseMove);
            } else if (options.movable) {
              startX = left + selection.x1 - evX(event);
              startY = top + selection.y1 - evY(event);

              $box.unbind('mousemove', areaMouseMove);

              $(document).mousemove(movingMouseMove).one('mouseup', function() {
                options.onSelectEnd(img, getSelection());

                $(document).unbind('mousemove', movingMouseMove);
                $box.mousemove(areaMouseMove);
              });
            } else $img.mousedown(event);

            return false;
          }

          /**
           * Adjust the x2/y2 coordinates to maintain aspect ratio (if defined)
           *
           * @param xFirst
           *            If set to <code>true</code>, calculate x2 first. Otherwise,
           *            calculate y2 first.
           */
          function fixAspectRatio(xFirst) {
            if (aspectRatio)
              if (xFirst) {
                x2 = max(left, min(left + imgWidth, x1 + abs(y2 - y1) * aspectRatio * (x2 > x1 || -1)));
                y2 = round(max(top, min(top + imgHeight, y1 + abs(x2 - x1) / aspectRatio * (y2 > y1 || -1))));
                x2 = round(x2);
              } else {
                y2 = max(top, min(top + imgHeight, y1 + abs(x2 - x1) / aspectRatio * (y2 > y1 || -1)));
                x2 = round(max(left, min(left + imgWidth, x1 + abs(y2 - y1) * aspectRatio * (x2 > x1 || -1))));
                y2 = round(y2);
              }
          }

          /**
           * Resize the selection area respecting the minimum/maximum dimensions and
           * aspect ratio
           */
          function doResize() {
            /*
             * Make sure the top left corner of the selection area stays within
             * image boundaries (it might not if the image source was dynamically
             * changed).
             */
            x1 = min(x1, left + imgWidth);
            y1 = min(y1, top + imgHeight);

            if (abs(x2 - x1) < minWidth) {
              /* Selection width is smaller than minWidth */
              x2 = x1 - minWidth * (x2 < x1 || -1);

              if (x2 < left) x1 = left + minWidth;
              else if (x2 > left + imgWidth) x1 = left + imgWidth - minWidth;
            }

            if (abs(y2 - y1) < minHeight) {
              /* Selection height is smaller than minHeight */
              y2 = y1 - minHeight * (y2 < y1 || -1);

              if (y2 < top) y1 = top + minHeight;
              else if (y2 > top + imgHeight) y1 = top + imgHeight - minHeight;
            }

            x2 = max(left, min(x2, left + imgWidth));
            y2 = max(top, min(y2, top + imgHeight));

            fixAspectRatio(abs(x2 - x1) < abs(y2 - y1) * aspectRatio);

            if (abs(x2 - x1) > maxWidth) {
              /* Selection width is greater than maxWidth */
              x2 = x1 - maxWidth * (x2 < x1 || -1);
              fixAspectRatio();
            }

            if (abs(y2 - y1) > maxHeight) {
              /* Selection height is greater than maxHeight */
              y2 = y1 - maxHeight * (y2 < y1 || -1);
              fixAspectRatio(true);
            }

            selection = {
              x1: selX(min(x1, x2)),
              x2: selX(max(x1, x2)),
              y1: selY(min(y1, y2)),
              y2: selY(max(y1, y2)),
              width: abs(x2 - x1),
              height: abs(y2 - y1)
            };

            update();

            options.onSelectChange(img, getSelection());
          }

          /**
           * Mousemove event handler triggered when the user is selecting an area
           *
           * @param event
           *            The event object
           * @return false
           */
          function selectingMouseMove(event) {
            x2 = /w|e|^$/.test(resize) || aspectRatio ? evX(event) : viewX(selection.x2);
            y2 = /n|s|^$/.test(resize) || aspectRatio ? evY(event) : viewY(selection.y2);

            doResize();

            return false;
          }

          /**
           * Move the selection area
           *
           * @param newX1
           *            New viewport X1
           * @param newY1
           *            New viewport Y1
           */
          function doMove(newX1, newY1) {
            x2 = (x1 = newX1) + selection.width;
            y2 = (y1 = newY1) + selection.height;

            $.extend(selection, {
              x1: selX(x1),
              y1: selY(y1),
              x2: selX(x2),
              y2: selY(y2)
            });

            update();

            options.onSelectChange(img, getSelection());
          }

          /**
           * Mousemove event handler triggered when the selection area is being moved
           *
           * @param event
           *            The event object
           * @return false
           */
          function movingMouseMove(event) {
            x1 = max(left, min(startX + evX(event), left + imgWidth - selection.width));
            y1 = max(top, min(startY + evY(event), top + imgHeight - selection.height));

            doMove(x1, y1);

            event.preventDefault();
            return false;
          }

          /**
           * Start selection
           */
          function startSelection() {
            $(document).unbind('mousemove', startSelection);
            adjust();

            x2 = x1;
            y2 = y1;
            doResize();

            resize = '';

            if (!$outer.is(':visible'))
              /* Show the plugin elements */
              $box.add($outer).hide().fadeIn(options.fadeSpeed || 0);

            shown = true;

            $(document).unbind('mouseup', cancelSelection).mousemove(selectingMouseMove).one('mouseup', docMouseUp);
            $box.unbind('mousemove', areaMouseMove);

            options.onSelectStart(img, getSelection());
          }

          /**
           * Cancel selection
           */
          function cancelSelection() {
            $(document).unbind('mousemove', startSelection).unbind('mouseup', cancelSelection);
            hide($box.add($outer));

            setSelection(selX(x1), selY(y1), selX(x1), selY(y1));

            /* If this is an API call, callback functions should not be triggered */
            if (!(this instanceof $.imgAreaSelect)) {
              options.onSelectChange(img, getSelection());
              options.onSelectEnd(img, getSelection());
            }
          }

          /**
           * Image mousedown event handler
           *
           * @param event
           *            The event object
           * @return false
           */
          function imgMouseDown(event) {
            /* Ignore the event if animation is in progress */
            if (event.which != 1 || $outer.is(':animated')) return false;

            adjust();
            startX = x1 = evX(event);
            startY = y1 = evY(event);

            /* Selection will start when the mouse is moved */
            $(document).mousemove(startSelection).mouseup(cancelSelection);

            return false;
          }

          /**
           * Window resize event handler
           */
          function windowResize() {
            doUpdate(false);
          }

          /**
           * Image load event handler. This is the final part of the initialization
           * process.
           */
          function imgLoad() {
            imgLoaded = true;

            /* Set options */
            setOptions(options = $.extend({
              classPrefix: 'imgareaselect',
              movable: true,
              parent: 'body',
              resizable: true,
              resizeMargin: 10,
              onInit: function onInit() {},
              onSelectStart: function onSelectStart() {},
              onSelectChange: function onSelectChange() {},
              onSelectEnd: function onSelectEnd() {}
            }, options));

            $box.add($outer).css({ visibility: '' });

            if (options.show) {
              shown = true;
              adjust();
              update();
              $box.add($outer).hide().fadeIn(options.fadeSpeed || 0);
            }

            /*
             * Call the onInit callback. The setTimeout() call is used to ensure
             * that the plugin has been fully initialized and the object instance is
             * available (so that it can be obtained in the callback).
             */
            setTimeout(function() {
              options.onInit(img, getSelection());
            }, 0);
          }

          /**
           * Document keypress event handler
           *
           * @param event
           *            The event object
           * @return false
           */
          var docKeyPress = function docKeyPress(event) {
            var k = options.keys,
              d,
              t,
              key = event.keyCode;

            d = !isNaN(k.alt) && (event.altKey || event.originalEvent.altKey) ? k.alt : !isNaN(k.ctrl) && event.ctrlKey ? k.ctrl : !isNaN(k.shift) && event.shiftKey ? k.shift : !isNaN(k.arrows) ? k.arrows : 10;

            if (k.arrows == 'resize' || k.shift == 'resize' && event.shiftKey || k.ctrl == 'resize' && event.ctrlKey || k.alt == 'resize' && (event.altKey || event.originalEvent.altKey)) {
              /* Resize selection */

              switch (key) {
                case 37:
                  /* Left */
                  d = -d;
                case 39:
                  /* Right */
                  t = max(x1, x2);
                  x1 = min(x1, x2);
                  x2 = max(t + d, x1);
                  fixAspectRatio();
                  break;
                case 38:
                  /* Up */
                  d = -d;
                case 40:
                  /* Down */
                  t = max(y1, y2);
                  y1 = min(y1, y2);
                  y2 = max(t + d, y1);
                  fixAspectRatio(true);
                  break;
                default:
                  return;
              }

              doResize();
            } else {
              /* Move selection */

              x1 = min(x1, x2);
              y1 = min(y1, y2);

              switch (key) {
                case 37:
                  /* Left */
                  doMove(max(x1 - d, left), y1);
                  break;
                case 38:
                  /* Up */
                  doMove(x1, max(y1 - d, top));
                  break;
                case 39:
                  /* Right */
                  doMove(x1 + min(d, imgWidth - selX(x2)), y1);
                  break;
                case 40:
                  /* Down */
                  doMove(x1, y1 + min(d, imgHeight - selY(y2)));
                  break;
                default:
                  return;
              }
            }

            return false;
          };

          /**
           * Apply style options to plugin element (or multiple elements)
           *
           * @param $elem
           *            A jQuery object representing the element(s) to style
           * @param props
           *            An object that maps option names to corresponding CSS
           *            properties
           */
          function styleOptions($elem, props) {
            for (var option in props)
              if (options[option] !== undefined) $elem.css(props[option], options[option]);
          }

          /**
           * Set plugin options
           *
           * @param newOptions
           *            The new options object
           */
          function setOptions(newOptions) {
            if (newOptions.parent)($parent = $(newOptions.parent)).append($box.add($outer));

            /* Merge the new options with the existing ones */
            $.extend(options, newOptions);

            adjust();

            if (newOptions.handles != null) {
              /* Recreate selection area handles */
              $handles.remove();
              $handles = $([]);

              i = newOptions.handles ? newOptions.handles == 'corners' ? 4 : 8 : 0;

              while (i--) $handles = $handles.add(div());

              /* Add a class to handles and set the CSS properties */
              $handles.addClass(options.classPrefix + '-handle').css({
                position: 'absolute',
                /*
                 * The font-size property needs to be set to zero, otherwise
                 * Internet Explorer makes the handles too large
                 */
                fontSize: 0,
                zIndex: zIndex + 1 || 1
              });

              /*
               * If handle width/height has not been set with CSS rules, set the
               * default 5px
               */
              if (!parseInt($handles.css('width')) >= 0) $handles.width(5).height(5);

              /*
               * If the borderWidth option is in use, add a solid border to
               * handles
               */
              if (o = options.borderWidth) $handles.css({ borderWidth: o, borderStyle: 'solid' });

              /* Apply other style options */
              styleOptions($handles, {
                borderColor1: 'border-color',
                borderColor2: 'background-color',
                borderOpacity: 'opacity'
              });
            }

            /* Calculate scale factors */
            scaleX = options.imageWidth / imgWidth || 1;
            scaleY = options.imageHeight / imgHeight || 1;

            /* Set selection */
            if (newOptions.x1 != null) {
              setSelection(newOptions.x1, newOptions.y1, newOptions.x2, newOptions.y2);
              newOptions.show = !newOptions.hide;
            }

            if (newOptions.keys)
              /* Enable keyboard support */
              options.keys = $.extend({ shift: 1, ctrl: 'resize' }, newOptions.keys);

            /* Add classes to plugin elements */
            $outer.addClass(options.classPrefix + '-outer');
            $area.addClass(options.classPrefix + '-selection');
            for (i = 0; i++ < 4;) $($border[i - 1]).addClass(options.classPrefix + '-border' + i);

            /* Apply style options */
            styleOptions($area, {
              selectionColor: 'background-color',
              selectionOpacity: 'opacity'
            });
            styleOptions($border, {
              borderOpacity: 'opacity',
              borderWidth: 'border-width'
            });
            styleOptions($outer, {
              outerColor: 'background-color',
              outerOpacity: 'opacity'
            });
            if (o = options.borderColor1) $($border[0]).css({ borderStyle: 'solid', borderColor: o });
            if (o = options.borderColor2) $($border[1]).css({ borderStyle: 'dashed', borderColor: o });

            /* Append all the selection area elements to the container box */
            $box.append($area.add($border).add($areaOpera)).append($handles);

            if (msie) {
              if (o = ($outer.css('filter') || '').match(/opacity=(\d+)/)) $outer.css('opacity', o[1] / 100);
              if (o = ($border.css('filter') || '').match(/opacity=(\d+)/)) $border.css('opacity', o[1] / 100);
            }

            if (newOptions.hide) hide($box.add($outer));
            else if (newOptions.show && imgLoaded) {
              shown = true;
              $box.add($outer).fadeIn(options.fadeSpeed || 0);
              doUpdate();
            }

            /* Calculate the aspect ratio factor */
            aspectRatio = (d = (options.aspectRatio || '').split(/:/))[0] / d[1];

            $img.add($outer).unbind('mousedown', imgMouseDown);

            if (options.disable || options.enable === false) {
              /* Disable the plugin */
              $box.unbind('mousemove', areaMouseMove).unbind('mousedown', areaMouseDown);
              $(window).unbind('resize', windowResize);
            } else {
              if (options.enable || options.disable === false) {
                /* Enable the plugin */
                if (options.resizable || options.movable) $box.mousemove(areaMouseMove).mousedown(areaMouseDown);

                $(window).resize(windowResize);
              }

              if (!options.persistent) $img.add($outer).mousedown(imgMouseDown);
            }

            options.enable = options.disable = undefined;
          }

          /**
           * Remove plugin completely
           */
          this.remove = function() {
            /*
             * Call setOptions with { disable: true } to unbind the event handlers
             */
            setOptions({ disable: true });
            $box.add($outer).remove();
          };

          /*
           * Public API
           */

          /**
           * Get current options
           *
           * @return An object containing the set of options currently in use
           */
          this.getOptions = function() {
            return options;
          };

          /**
           * Set plugin options
           *
           * @param newOptions
           *            The new options object
           */
          this.setOptions = setOptions;

          /**
           * Get the current selection
           *
           * @param noScale
           *            If set to <code>true</code>, scaling is not applied to the
           *            returned selection
           * @return Selection object
           */
          this.getSelection = getSelection;

          /**
           * Set the current selection
           *
           * @param x1
           *            X coordinate of the upper left corner of the selection area
           * @param y1
           *            Y coordinate of the upper left corner of the selection area
           * @param x2
           *            X coordinate of the lower right corner of the selection area
           * @param y2
           *            Y coordinate of the lower right corner of the selection area
           * @param noScale
           *            If set to <code>true</code>, scaling is not applied to the
           *            new selection
           */
          this.setSelection = setSelection;

          /**
           * Cancel selection
           */
          this.cancelSelection = cancelSelection;

          /**
           * Update plugin elements
           *
           * @param resetKeyPress
           *            If set to <code>false</code>, this instance's keypress
           *            event handler is not activated
           */
          this.update = doUpdate;

          /* Do the dreaded browser detection */
          var msie = (/msie ([\w.]+)/i.exec(ua) || [])[1],
            opera = /opera/i.test(ua),
            safari = /webkit/i.test(ua) && !/chrome/i.test(ua);

          /*
           * Traverse the image's parent elements (up to <body>) and find the
           * highest z-index
           */
          $p = $img;

          while ($p.length) {
            zIndex = max(zIndex, !isNaN($p.css('z-index')) ? $p.css('z-index') : zIndex);
            /* Also check if any of the ancestor elements has fixed position */
            if ($p.css('position') == 'fixed') position = 'fixed';

            $p = $p.parent(':not(body)');
          }

          /*
           * If z-index is given as an option, it overrides the one found by the
           * above loop
           */
          zIndex = options.zIndex || zIndex;

          if (msie) $img.attr('unselectable', 'on');

          /*
           * In MSIE and WebKit, we need to use the keydown event instead of keypress
           */
          $.imgAreaSelect.keyPress = msie || safari ? 'keydown' : 'keypress';

          /*
           * There is a bug affecting the CSS cursor property in Opera (observed in
           * versions up to 10.00) that prevents the cursor from being updated unless
           * the mouse leaves and enters the element again. To trigger the mouseover
           * event, we're adding an additional div to $box and we're going to toggle
           * it when mouse moves inside the selection area.
           */
          if (opera) $areaOpera = div().css({
            width: '100%',
            height: '100%',
            position: 'absolute',
            zIndex: zIndex + 2 || 2
          });

          /*
           * We initially set visibility to "hidden" as a workaround for a weird
           * behaviour observed in Google Chrome 1.0.154.53 (on Windows XP). Normally
           * we would just set display to "none", but, for some reason, if we do so
           * then Chrome refuses to later display the element with .show() or
           * .fadeIn().
           */
          $box.add($outer).css({
            visibility: 'hidden',
            position: position,
            overflow: 'hidden',
            zIndex: zIndex || '0'
          });
          $box.css({ zIndex: zIndex + 2 || 2 });
          $area.add($border).css({ position: 'absolute', fontSize: 0 });

          /*
           * If the image has been fully loaded, or if it is not really an image (eg.
           * a div), call imgLoad() immediately; otherwise, bind it to be called once
           * on image load event.
           */
          img.complete || img.readyState == 'complete' || !$img.is('img') ? imgLoad() : $img.one('load', imgLoad);

          /*
           * MSIE 9.0 doesn't always fire the image load event -- resetting the src
           * attribute seems to trigger it. The check is for version 7 and above to
           * accommodate for MSIE 9 running in compatibility mode.
           */
          if (!imgLoaded && msie && msie >= 7) img.src = img.src;
        };

        /**
         * Invoke imgAreaSelect on a jQuery object containing the image(s)
         *
         * @param options
         *            Options object
         * @return The jQuery object or a reference to imgAreaSelect instance (if the
         *         <code>instance</code> option was specified)
         */
        $.fn.imgAreaSelect = function(options) {
          options = options || {};

          this.each(function() {
            /* Is there already an imgAreaSelect instance bound to this element? */
            if ($(this).data('imgAreaSelect')) {
              /* Yes there is -- is it supposed to be removed? */
              if (options.remove) {
                /* Remove the plugin */
                $(this).data('imgAreaSelect').remove();
                $(this).removeData('imgAreaSelect');
              } else
                /* Reset options */
                $(this).data('imgAreaSelect').setOptions(options);
            } else if (!options.remove) {
              /* No exising instance -- create a new one */

              /*
               * If neither the "enable" nor the "disable" option is present, add
               * "enable" as the default
               */
              if (options.enable === undefined && options.disable === undefined) options.enable = true;

              $(this).data('imgAreaSelect', new $.imgAreaSelect(this, options));
            }
          });

          if (options.instance)
            /*
             * Return the imgAreaSelect instance bound to the first element in the
             * set
             */
            return $(this).data('imgAreaSelect');

          return this;
        };
      })(jQuery);
      /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(203)))

    /***/
  }),
  /* 449 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    // Components

    var _componentsInputsCheckIntervalInput = __webpack_require__(450);

    var _componentsInputsCheckIntervalInput2 = _interopRequireDefault(_componentsInputsCheckIntervalInput);

    var _componentsInputsTriggerSelectInput = __webpack_require__(452);

    var _componentsInputsTriggerSelectInput2 = _interopRequireDefault(_componentsInputsTriggerSelectInput);

    var _componentsInputsSendNotificationInput = __webpack_require__(453);

    var _componentsInputsSendNotificationInput2 = _interopRequireDefault(_componentsInputsSendNotificationInput);

    var _componentsInputsAccountLogin = __webpack_require__(454);

    var _componentsInputsAccountLogin2 = _interopRequireDefault(_componentsInputsAccountLogin);

    var _componentsInputsStartMonitoringButton = __webpack_require__(455);

    var _componentsInputsStartMonitoringButton2 = _interopRequireDefault(_componentsInputsStartMonitoringButton);

    var _componentsButtonsPickerButton = __webpack_require__(456);

    var _componentsButtonsPickerButton2 = _interopRequireDefault(_componentsButtonsPickerButton);

    var CaptureForm = (function(_Component) {
      _inherits(CaptureForm, _Component);

      _createClass(CaptureForm, null, [{
        key: 'propTypes',
        value: {
          actions: _react.PropTypes.object.isRequired,
          currentCapture: _react2['default'].PropTypes.object.isRequired,
          tab: _react2['default'].PropTypes.oneOf(['browser-tab', 'server-tab']).isRequired
        },
        enumerable: true
      }]);

      function CaptureForm(props, context) {
        _classCallCheck(this, _CaptureForm);

        _get(Object.getPrototypeOf(_CaptureForm.prototype), 'constructor', this).call(this, props, context);
      }

      _createClass(CaptureForm, [{
        key: 'render',
        value: function render() {
          if (this.props.tab === 'server-tab') {
            return this.renderServerCapture();
          } else {
            return this.renderBrowserCapture();
          }
        }
      }, {
        key: 'renderServerCapture',
        value: function renderServerCapture() {
          return _react2['default'].createElement(
            'form', { style: styles.form },
            _react2['default'].createElement(
              'div', { className: 'row', style: styles.row },
              _react2['default'].createElement(_componentsInputsCheckIntervalInput2['default'], {
                checkInterval: this.props.currentCapture.checkInterval,
                checkIntervalType: this.props.currentCapture.checkIntervalType,
                updateAction: this.props.actions.setCurrentCaptureInfo,
                tab: this.props.tab
              }),
              _react2['default'].createElement(_componentsInputsTriggerSelectInput2['default'], {
                trigger: this.props.currentCapture.trigger,
                updateAction: this.props.actions.setCurrentCaptureInfo
              }),
              _react2['default'].createElement('div', { style: { clear: 'both' } })
            ),
            _react2['default'].createElement(
              'div', { className: 'row', style: styles.row },
              _react2['default'].createElement(_componentsInputsSendNotificationInput2['default'], {
                emailAddress: this.props.currentCapture.email,
                updateAction: this.props.actions.setCurrentCaptureInfo
              }),
              _react2['default'].createElement('div', { style: { clear: 'both' } })
            ),
            _react2['default'].createElement(
              'div', { className: 'row', style: styles.last_row },
              _react2['default'].createElement(_componentsInputsStartMonitoringButton2['default'], { action: this.props.actions.saveJob, data: this.props.currentCapture })
            )
          );
        }
      }, {
        key: 'renderBrowserCapture',
        value: function renderBrowserCapture() {
          return _react2['default'].createElement(
            'form', { style: styles.form },
            _react2['default'].createElement(
              'div', { className: 'row', style: styles.last_row },
              _react2['default'].createElement(
                'div', { className: 'column', style: styles.column },
                _react2['default'].createElement(_componentsInputsCheckIntervalInput2['default'], {
                  checkInterval: this.props.currentCapture.checkInterval,
                  checkIntervalType: this.props.currentCapture.checkIntervalType,
                  updateAction: this.props.actions.setCurrentCaptureInfo,
                  tab: this.props.tab
                })
              ),
              _react2['default'].createElement(
                'div', { className: 'column', style: [styles.column, { marginTop: '15px', paddingLeft: '8px', boxSizing: 'border-box' }] },
                _react2['default'].createElement(_componentsButtonsPickerButton2['default'], { action: this.props.actions.initializePicker })
              ),
              _react2['default'].createElement('div', { style: { clear: 'both' } })
            ),
            _react2['default'].createElement(
              'div', { className: 'row', style: styles.last_row },
              _react2['default'].createElement(_componentsInputsStartMonitoringButton2['default'], { action: this.props.actions.saveJob, data: this.props.currentCapture })
            )
          );
        }
      }]);

      var _CaptureForm = CaptureForm;
      CaptureForm = (0, _radium2['default'])(CaptureForm) || CaptureForm;
      return CaptureForm;
    })(_react.Component);

    exports['default'] = CaptureForm;

    var styles = {
      form: {
        width: 392,
        margin: '8px auto'
      },
      row: {},
      last_row: {
        marginBottom: 16
      },
      column: {
        width: '50%',
        float: 'left'
      }
    };
    module.exports = exports['default'];
    /* <AccountLogin loggedIn={false} /> */
    /* <TriggerSelectInput trigger={this.props.currentCapture.trigger}
	                                                          updateAction={this.props.actions.setCurrentCaptureInfo}/>
	                                                          */

    /***/
  }),
  /* 450 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _DropSelect = __webpack_require__(451);

    var _DropSelect2 = _interopRequireDefault(_DropSelect);

    var _constantsAppConstants = __webpack_require__(208);

    var AppConstants = _interopRequireWildcard(_constantsAppConstants);

    var CheckIntervalInput = (function(_Component) {
      _inherits(CheckIntervalInput, _Component);

      _createClass(CheckIntervalInput, null, [{
        key: 'propTypes',
        value: {
          checkInterval: _react2['default'].PropTypes.string.isRequired,
          checkIntervalType: _react2['default'].PropTypes.string.isRequired,
          dropOpen: _react2['default'].PropTypes.bool,
          updateAction: _react2['default'].PropTypes.func.isRequired,
          tab: _react2['default'].PropTypes.oneOf(['browser-tab', 'server-tab']).isRequired
        },
        enumerable: true
      }]);

      function CheckIntervalInput(props) {
        _classCallCheck(this, _CheckIntervalInput);

        _get(Object.getPrototypeOf(_CheckIntervalInput.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.handleChange = this.handleChange.bind(this);
        this.handleIntervalClick = this.handleIntervalClick.bind(this);
      }

      _createClass(CheckIntervalInput, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          this.setState({ checkInterval: nextProps.checkInterval });
        }
      }, {
        key: 'handleChange',
        value: function handleChange(e) {
          var value = e.target.value;
          this.setState({ checkInterval: value });
          this.props.updateAction({ checkInterval: value });
        }
      }, {
        key: 'handleIntervalClick',
        value: function handleIntervalClick() {
          _react2['default'].findDOMNode(this.refs.numberInput).select();
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'label', { 'for': 'check_interval', style: styles.label },
              'SET CHECK INTERVAL'
            ),
            _react2['default'].createElement(
              'div', { className: 'input_wrapper', style: styles.input_wrapper },
              _react2['default'].createElement('img', { src: 'img/clock.png', style: styles.clock }),
              _react2['default'].createElement(
                'span', { className: 'adjective', style: styles.adjective },
                'Every'
              ),
              _react2['default'].createElement(
                'div', { className: 'inputs', style: styles.inputs },
                this.renderIntervalNumberField(),
                this.renderIntervalTypeField()
              )
            )
          );
        }
      }, {
        key: 'renderIntervalNumberField',
        value: function renderIntervalNumberField() {
          if (this.props.tab == 'browser-tab') {
            return _react2['default'].createElement('input', {
              type: 'text',
              name: 'check_interval',
              value: this.state.checkInterval,
              ref: 'numberInput',
              onChange: this.handleChange,
              onClick: this.handleIntervalClick,
              maxLength: '3',
              tabindex: '-1',
              style: styles.input
            });
          }
        }
      }, {
        key: 'renderIntervalTypeField',
        value: function renderIntervalTypeField() {
          var intervalType = this.props.checkIntervalType;
          var options = [];
          if (this.props.tab == 'server-tab') {
            options = AppConstants.SERVER_INTERVAL_OPTIONS;
          } else if (this.props.tab == 'browser-tab') {
            options = AppConstants.BROWSER_INTERVAL_OPTIONS;
          }

          return _react2['default'].createElement(_DropSelect2['default'], {
            dropOptions: options,
            dropValue: intervalType,
            updateKey: 'checkIntervalType',
            updateAction: this.props.updateAction
          });
        }
      }]);

      var _CheckIntervalInput = CheckIntervalInput;
      CheckIntervalInput = (0, _radium2['default'])(CheckIntervalInput) || CheckIntervalInput;
      return CheckIntervalInput;
    })(_react.Component);

    exports['default'] = CheckIntervalInput;

    var styles = {

      wrapper: {
        marginTop: 8,
        width: 192,
        float: 'left',
        marginRight: 8
      },
      label: {
        color: '#716969',
        display: 'block',
        marginBottom: 4
      },
      input_wrapper: {
        border: '2px solid #ECEAEA',
        borderRadius: 2,
        height: 24,
        padding: 8
      },
      clock: {
        paddingTop: 4
      },
      adjective: {
        display: 'inline-block',
        position: 'relative',
        top: -4,
        marginLeft: 9,
        fontSize: 10,
        color: '#9B9B9B'
      },
      inputs: {
        display: 'inline-block',
        position: 'relative',
        background: '#FDEDAD',
        borderRadius: 4,
        padding: '4px 6px 7px',
        height: 14,
        marginLeft: 9,
        top: -3
      },
      input: {
        marginRight: 9,
        width: 24,
        background: 'transparent',
        border: 'none',
        color: '#A38C6E',
        fontSize: 12,
        fontWeight: 500,
        textAlign: 'right',
        ':focus': {
          outline: 'none'
        }

      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 451 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _color = __webpack_require__(429);

    var _color2 = _interopRequireDefault(_color);

    var DropSelect = (function(_Component) {
      _inherits(DropSelect, _Component);

      _createClass(DropSelect, null, [{
        key: 'propTypes',
        value: {
          dropValue: _react2['default'].PropTypes.string.isRequired,
          dropOptions: _react2['default'].PropTypes.array.isRequired,
          dropOpen: _react2['default'].PropTypes.bool,
          updateKey: _react2['default'].PropTypes.string.isRequired,
          updateAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function DropSelect(props) {
        _classCallCheck(this, _DropSelect);

        _get(Object.getPrototypeOf(_DropSelect.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.state.dropOpen = false;
        this.handleDropClick = this.handleDropClick.bind(this);
        this.handleOptionClick = this.handleOptionClick.bind(this);
        this.hideDrop = this.hideDrop.bind(this);
      }

      _createClass(DropSelect, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          this.setState({ dropValue: nextProps.dropValue });
        }
      }, {
        key: 'handleDropClick',
        value: function handleDropClick(event) {
          this.setState({ dropOpen: !this.state.dropOpen });
        }
      }, {
        key: 'handleOptionClick',
        value: function handleOptionClick(event) {
          var value = event.currentTarget.getAttribute('value');
          this.setState({
            dropValue: value,
            dropOpen: false
          });

          var update = {};
          update[this.props.updateKey] = value;
          this.props.updateAction(update);
        }
      }, {
        key: 'hideDrop',
        value: function hideDrop(e) {
          if (!_react2['default'].findDOMNode(this).contains(e.relatedTarget)) {
            this.setState({ dropOpen: false });
          }
        }
      }, {
        key: 'dropCaratSrc',
        value: function dropCaratSrc() {
          return this.state.dropOpen ? 'img/carat-up.png' : 'img/carat-down.png';
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', {
              className: 'drop-select',
              style: [styles.dropSelect, this.state.dropOpen ? styles.dropOpen : null],
              onMouseLeave: this.hideDrop,
              onClick: this.handleDropClick
            },
            _react2['default'].createElement(
              'div',
              null,
              _react2['default'].createElement(
                'span', { className: 'drop-placeholder', style: styles.dropPlaceholder },
                this.state.dropValue,
                _react2['default'].createElement('img', { src: this.dropCaratSrc(), style: styles.dropCarat })
              )
            ),
            this.renderDropSelection()
          );
        }
      }, {
        key: 'renderDropSelection',
        value: function renderDropSelection() {
          if (this.state.dropOpen === true) {
            return _react2['default'].createElement(
              'ul', { className: 'drop-options', style: styles.dropOptions },
              this.props.dropOptions.map(function(option, i) {
                return _react2['default'].createElement(
                  'li', {
                    key: i,
                    style: styles.dropOption,
                    onClick: this.handleOptionClick,
                    value: option
                  },
                  option
                );
              }, this)
            );
          }
        }
      }]);

      var _DropSelect = DropSelect;
      DropSelect = (0, _radium2['default'])(DropSelect) || DropSelect;
      return DropSelect;
    })(_react.Component);

    exports['default'] = DropSelect;

    var styles = {
      inputs: {
        display: 'inline-block',
        position: 'relative',
        background: '#FDEDAD',
        borderRadius: 4,
        padding: '4px 6px 7px',
        height: 14,
        marginLeft: 9,
        top: -3
      },
      dropSelect: {
        color: '#A38C6E',
        display: 'inline-block',
        cursor: 'pointer',
        paddingBottom: '8px'
      },
      dropOpen: {
        // borderLeft: '1px solid #A38C6E',
        // borderRight: '1px solid #A38C6E',
        // borderTop: '1px solid #A38C6E'
      },
      dropPlaceholder: {},
      dropCarat: {
        marginLeft: 8,
        width: 10
      },
      dropOptions: {
        // display: 'none',
        // borderLeft: '1px solid #A38C6E',
        // borderRight: '1px solid #A38C6E',
        // borderBottom: '1px solid #A38C6E',
        boxShadow: '0 2px 4px 0 rgba(0,0,0,0.2)',
        position: 'absolute',
        right: 0,
        listStyle: 'none',
        margin: '4px 0 0',
        paddingLeft: 0,
        background: '#FDEDAD',
        zIndex: 10
      },
      dropOption: {
        padding: 6,
        color: '#A38C6E',
        ':hover': {
          cursor: 'pointer',
          backgroundColor: (0, _color2['default'])('#FDEDAD').lighten(0.1).hexString()
        }
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 452 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _DropSelect = __webpack_require__(451);

    var _DropSelect2 = _interopRequireDefault(_DropSelect);

    var OPTIONS = ['Tiny Change', 'Medium Change', 'Major Change'];

    var TriggerSelectInput = (function(_Component) {
      _inherits(TriggerSelectInput, _Component);

      _createClass(TriggerSelectInput, null, [{
        key: 'propTypes',
        value: {
          trigger: _react2['default'].PropTypes.number.isRequired,
          updateAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function TriggerSelectInput(props) {
        _classCallCheck(this, _TriggerSelectInput);

        _get(Object.getPrototypeOf(_TriggerSelectInput.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
      }

      _createClass(TriggerSelectInput, [{
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'label', { 'for': 'trigger_interval', style: styles.label },
              'CHOOSE TRIGGER'
            ),
            _react2['default'].createElement(
              'div', { className: 'input_wrapper', style: styles.input_wrapper },
              _react2['default'].createElement('img', { src: 'img/bolt.png', style: styles.clock }),
              _react2['default'].createElement(
                'span', { className: 'adjective', style: styles.adjective },
                'On'
              ),
              _react2['default'].createElement(
                'div', { className: 'inputs', style: styles.inputs },
                _react2['default'].createElement(_DropSelect2['default'], {
                  dropOptions: OPTIONS,
                  dropValue: this.props.trigger,
                  updateAction: this.props.updateAction,
                  updateKey: 'trigger'
                })
              )
            )
          );
        }
      }]);

      var _TriggerSelectInput = TriggerSelectInput;
      TriggerSelectInput = (0, _radium2['default'])(TriggerSelectInput) || TriggerSelectInput;
      return TriggerSelectInput;
    })(_react.Component);

    exports['default'] = TriggerSelectInput;

    var styles = {
      wrapper: {
        marginTop: 8,
        width: 192,
        float: 'left'
      },
      label: {
        color: '#716969',
        display: 'block',
        marginBottom: 4
      },
      input_wrapper: {
        border: '2px solid #ECEAEA',
        borderRadius: 2,
        height: 24,
        padding: 8
      },
      clock: {
        paddingTop: 4
      },
      adjective: {
        display: 'inline-block',
        position: 'relative',
        top: -5,
        marginLeft: 9,
        fontSize: 10,
        color: '#9B9B9B'
      },
      inputs: {
        display: 'inline-block',
        position: 'relative',
        background: '#FDEDAD',
        borderRadius: 4,
        padding: '4px 6px 7px',
        height: 14,
        marginLeft: 9,
        top: -5
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 453 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var SendNotificationInput = (function(_Component) {
      _inherits(SendNotificationInput, _Component);

      _createClass(SendNotificationInput, null, [{
        key: 'propTypes',
        value: {
          emailAddress: _react2['default'].PropTypes.string.isRequired,
          updateAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function SendNotificationInput(props) {
        _classCallCheck(this, _SendNotificationInput);

        _get(Object.getPrototypeOf(_SendNotificationInput.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.handleChange = this.handleChange.bind(this);
      }

      _createClass(SendNotificationInput, [{
        key: 'handleChange',
        value: function handleChange(e) {
          var _this = this;

          var value = e.target.value;
          this.setState({ emailAddress: value });
          setTimeout(function() {
            return _this.props.updateAction({ email: value });
          }, 100);
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'label', { 'for': 'trigger_interval', style: styles.label },
              'SEND NOTIFICATION TO'
            ),
            _react2['default'].createElement(
              'div', { className: 'input_wrapper', style: styles.input_wrapper },
              _react2['default'].createElement('input', {
                type: 'text',
                placeholder: 'your@email.com',
                onChange: this.handleChange,
                value: this.state.emailAddress,
                tabindex: '1',
                style: styles.email_input
              })
            )
          );
        }
      }]);

      var _SendNotificationInput = SendNotificationInput;
      SendNotificationInput = (0, _radium2['default'])(SendNotificationInput) || SendNotificationInput;
      return SendNotificationInput;
    })(_react.Component);

    exports['default'] = SendNotificationInput;

    var styles = {
      wrapper: {
        marginTop: 8,
        width: 192 * 2 + 6,
        float: 'left'
      },
      label: {
        color: '#716969',
        display: 'block',
        marginBottom: 4
      },
      input_wrapper: {
        border: '2px solid #ECEAEA',
        borderRadius: 2,
        height: 24,
        padding: 8
      },
      email_input: {
        border: 'none',
        color: '#9B9B9B',
        fontSize: 12,
        lineHeight: '23px',
        width: '100%',
        top: 4,
        ':focus': {
          outline: 'none'
        }

      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 454 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _color = __webpack_require__(429);

    var _color2 = _interopRequireDefault(_color);

    var AccountLogin = (function(_Component) {
      _inherits(AccountLogin, _Component);

      _createClass(AccountLogin, null, [{
        key: 'propTypes',
        value: {
          loggedIn: _react2['default'].PropTypes.bool.isRequired
        },
        enumerable: true
      }]);

      function AccountLogin(props) {
        _classCallCheck(this, _AccountLogin);

        _get(Object.getPrototypeOf(_AccountLogin.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.dashboard_url = 'https://visualping.io/jobs/';
      }

      _createClass(AccountLogin, [{
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'a', { href: 'http://visualping.io', target: '_blank', style: styles.help_link },
              'About VisualPing'
            )
          );

          // return (
          //   <div style={styles.wrapper}>
          //     <span style={styles.help_text}>Click here to learn more about PageMonitor acquisition by Visualping</span>
          //   </div>
          // )

          // return (
          //   <div style={styles.wrapper}>
          //     <span style={styles.help_text}>Manage server jobs</span>
          //     <a href={this.dashboard_url} target="_blank"
          //        style={[styles.button, styles.green_button]}>Dashboard</a>
          //   </div>
          // )

          // Display later when log in check ready
          // return (
          //   <div style={styles.wrapper}>
          //     <span style={styles.help_text}>Already have an account?</span>
          //     <a style={styles.button}>Log in</a>
          //   </div>
          // )
        }
      }]);

      var _AccountLogin = AccountLogin;
      AccountLogin = (0, _radium2['default'])(AccountLogin) || AccountLogin;
      return AccountLogin;
    })(_react.Component);

    exports['default'] = AccountLogin;

    var styles = {
      wrapper: {
        marginTop: 40,
        paddingLeft: 10,
        width: 192 - 10,
        textAlign: 'right',
        float: 'left'
      },
      help_text: {
        color: '#9B9B9B',
        fontSize: 9,
        // maxWidth: 60,
        padding: '0 6px',
        display: 'inline-block',
        marginTop: 5,
        textAlign: 'left'
      },
      help_link: {
        display: 'block',
        width: '100%',
        verticalAlign: 'middle',
        paddingTop: '4px',
        paddingBottom: '16px',
        fontSize: 10,
        color: '#9B9B9B',
        textAlign: 'center'
      }

      // button: {
      //   color: 'white',
      //   borderRadius: 4,
      //   fontSize: 12,
      //   backgroundColor: '#46A9E2',
      //   padding: '4px 16px 5px',
      //   top: -5,
      //   position: 'relative',
      //   textDecoration: 'none',
      //   ':hover': {
      //     cursor: 'pointer'
      //   }
      // },
      // green_button: {
      //   backgroundColor: Color('#56D2AA').darken(0.2).hexString(),
      //   fontSize: 11
      //
      // }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 455 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _color = __webpack_require__(429);

    var _color2 = _interopRequireDefault(_color);

    var StartMonitoringButton = (function(_Component) {
      _inherits(StartMonitoringButton, _Component);

      _createClass(StartMonitoringButton, null, [{
        key: 'propTypes',
        value: {
          action: _react2['default'].PropTypes.func.isRequired,
          data: _react2['default'].PropTypes.object.isRequired
        },
        enumerable: true
      }]);

      function StartMonitoringButton(props) {
        _classCallCheck(this, _StartMonitoringButton);

        _get(Object.getPrototypeOf(_StartMonitoringButton.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.handleSave = this.handleSave.bind(this);
      }

      _createClass(StartMonitoringButton, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          if (nextProps.data.error !== '') {
            this.setState({ is_saving: false });
          }
        }
      }, {
        key: 'handleSave',
        value: function handleSave() {
          if (this.state.is_saving !== true) {
            this.setState({ is_saving: true });
            this.props.action(this.props.data);
          }
        }
      }, {
        key: 'render',
        value: function render() {
          var isSaving = this.state.is_saving === true;
          if (isSaving) {
            return _react2['default'].createElement(
              'div', { style: styles.is_saving },
              _react2['default'].createElement('img', { src: 'img/heartbeat.gif' })
            );
          }
          return _react2['default'].createElement(
            'a', { style: styles.button, onClick: this.handleSave },
            'Start Monitoring'
          );
        }
      }]);

      var _StartMonitoringButton = StartMonitoringButton;
      StartMonitoringButton = (0, _radium2['default'])(StartMonitoringButton) || StartMonitoringButton;
      return StartMonitoringButton;
    })(_react.Component);

    exports['default'] = StartMonitoringButton;

    var styles = {
      button: {
        textAlign: 'center',
        background: '#56D2AA',
        display: 'block',
        color: '#FFFFFF',
        fontSize: 14,
        borderRadius: 4,
        padding: '8px 16px 11px',
        marginTop: 14,
        boxShadow: '0 2px 1px 0 #328A6D',
        textShadow: '#328A6D 0px -1px 1px',
        ':hover': {
          cursor: 'pointer',
          background: (0, _color2['default'])('#56D2AA').darken(0.2).hexString()
        }
      },
      is_saving: {
        padding: '8px 16px 11px',
        marginTop: 14,
        textAlign: 'center'
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 456 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _color = __webpack_require__(429);

    var _color2 = _interopRequireDefault(_color);

    var PickerButton = (function(_Component) {
      _inherits(PickerButton, _Component);

      _createClass(PickerButton, null, [{
        key: 'propTypes',
        value: {
          action: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function PickerButton(props) {
        _classCallCheck(this, _PickerButton);

        _get(Object.getPrototypeOf(_PickerButton.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.handleClick = this.handleClick.bind(this);
      }

      _createClass(PickerButton, [{
        key: 'handleClick',
        value: function handleClick() {
          this.props.action();
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'a', { style: styles.button, onClick: this.handleClick },
            'Pick Element'
          );
        }
      }]);

      var _PickerButton = PickerButton;
      PickerButton = (0, _radium2['default'])(PickerButton) || PickerButton;
      return PickerButton;
    })(_react.Component);

    exports['default'] = PickerButton;

    var styles = {
      button: {
        display: 'block',
        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #EDEDED 100%)',
        border: '1px solid #D2D2D2',
        color: '#787878',
        // background: '#56D2AA',
        // color: '#FFFFFF',
        // boxShadow: '0 2px 1px 0 #328A6D',
        // textShadow: '#328A6D 0px -1px 1px',

        textAlign: 'center',
        fontSize: 14,
        borderRadius: 4,
        padding: '12px 16px 13px',
        marginTop: 11,
        ':hover': {
          cursor: 'pointer',
          // background: Color('#56D2AA').darken(0.2).hexString(),
          backgroundImage: 'linear-gradient(-180deg, #F6F6F6 0%, #E6E6E6 100%)',
          border: '1px solid #D2D2D2'
        }
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 457 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _color = __webpack_require__(429);

    var _color2 = _interopRequireDefault(_color);

    var _componentsCaptureView = __webpack_require__(447);

    var _componentsCaptureView2 = _interopRequireDefault(_componentsCaptureView);

    var _componentsCaptureForm = __webpack_require__(449);

    var _componentsCaptureForm2 = _interopRequireDefault(_componentsCaptureForm);

    var _componentsJobsView = __webpack_require__(458);

    var _componentsJobsView2 = _interopRequireDefault(_componentsJobsView);

    var _componentsJobsUpdatesMenu = __webpack_require__(466);

    var _componentsJobsUpdatesMenu2 = _interopRequireDefault(_componentsJobsUpdatesMenu);

    var _componentsUpdatesView = __webpack_require__(467);

    var _componentsUpdatesView2 = _interopRequireDefault(_componentsUpdatesView);

    var _componentsSettings = __webpack_require__(469);

    var _componentsSettings2 = _interopRequireDefault(_componentsSettings);

    var _componentsSurvey = __webpack_require__(471);

    var _componentsSurvey2 = _interopRequireDefault(_componentsSurvey);

    var _componentsUpgraded = __webpack_require__(472);

    var _componentsUpgraded2 = _interopRequireDefault(_componentsUpgraded);

    var _componentsAlert = __webpack_require__(473);

    var _componentsAlert2 = _interopRequireDefault(_componentsAlert);

    var MainSection = (function(_Component) {
      _inherits(MainSection, _Component);

      _createClass(MainSection, null, [{
        key: 'propTypes',
        value: {
          jobs: _react2['default'].PropTypes.array.isRequired,
          updates: _react2['default'].PropTypes.array.isRequired,
          actions: _react2['default'].PropTypes.object.isRequired,
          page: _react2['default'].PropTypes.oneOf(['capture', 'jobs', 'updates', 'settings']).isRequired,
          tab: _react2['default'].PropTypes.oneOf(['browser-tab', 'server-tab']).isRequired,
          currentCapture: _react2['default'].PropTypes.object.isRequired,
          settings: _react2['default'].PropTypes.func.isRequired,
          survey_data: _react2['default'].PropTypes.object.isRequired,
          pm_user: _react2['default'].PropTypes.bool
        },
        enumerable: true
      }]);

      function MainSection(props, context) {
        _classCallCheck(this, _MainSection);

        _get(Object.getPrototypeOf(_MainSection.prototype), 'constructor', this).call(this, props, context);
        this.state = this.props;
        this.dashboard_url = 'https://visualping.io/jobs/';
        this.handleManageJobs = this.handleManageJobs.bind(this);
      }

      _createClass(MainSection, [{
        key: 'render',
        value: function render() {
          switch (this.props.page) {
            case 'capture':
              if (this.props.currentCapture.captureDidSave === true) {
                return this.renderCaptureDidSaveView();
              } else {
                return this.renderCaptureView();
              }
              break;
            case 'jobs':
              return this.renderJobsView();
            case 'updates':
              return this.renderUpdatesView();
            case 'settings':
              return this.renderSettingsView();
            case 'survey':
              return this.renderSurveyView();
            case 'upgraded':
              return this.renderUpgradedView();
            default:
              return this.renderCaptureView();
          }
        }
      }, {
        key: 'renderCaptureView',
        value: function renderCaptureView() {
          var _this = this;

          return _react2['default'].createElement(
            'section', { className: 'main main-capture' },
            (function() {
              if (_this.props.tab === 'browser-tab') {
                return _react2['default'].createElement(_componentsJobsUpdatesMenu2['default'], {
                  activePage: _this.props.page,
                  actions: _this.props.actions
                });
              }
            })(),
            _react2['default'].createElement(_componentsAlert2['default'], { message: this.props.currentCapture.error, clear_action: this.props.actions.clearLastError }),
            _react2['default'].createElement(_componentsCaptureView2['default'], {
              selection: this.props.currentCapture.selection,
              actions: this.props.actions
            }),
            _react2['default'].createElement(_componentsCaptureForm2['default'], {
              actions: this.props.actions,
              tab: this.props.tab,
              currentCapture: this.props.currentCapture
            })
          );
        }
      }, {
        key: 'renderCaptureDidSaveView',
        value: function renderCaptureDidSaveView() {
          if (this.props.tab === 'server-tab') {
            return _react2['default'].createElement(
              'section', { className: 'main main-capture-did-save' },
              _react2['default'].createElement(
                'div', { style: styles.did_save_wrapper },
                _react2['default'].createElement(
                  'p', { style: [styles.p, styles.top_offset_server] },
                  'You will be alerted when something changes'
                ),
                _react2['default'].createElement('img', { style: styles.envelope, src: 'img/envelope@2x.png', width: '32' }),
                _react2['default'].createElement(
                  'p', { style: styles.p },
                  'First timers will be sent an email for confirmation and registration'
                ),
                _react2['default'].createElement('img', { style: styles.free_tag, src: 'img/free-tag@2x.png', width: '42' }),
                _react2['default'].createElement(
                  'p', { style: [styles.p, styles.info_line] },
                  'Check up to 2 pages per day for free',
                  _react2['default'].createElement('br', null),
                  'See ',
                  _react2['default'].createElement(
                    'a', { href: 'http://visualping.io/pricing', target: '_blank', style: styles.a },
                    'pricing'
                  ),
                  ' for more'
                ),
                _react2['default'].createElement(
                  'p', { style: styles.p },
                  _react2['default'].createElement(
                    'a', {
                      href: this.dashboard_url,
                      target: '_blank',
                      style: [styles.button, styles.green_button]
                    },
                    'Dashboard'
                  )
                )
              )
            );
          } else if (this.props.tab === 'browser-tab') {
            return _react2['default'].createElement(
              'section', { className: 'main main-capture-did-save' },
              _react2['default'].createElement(_componentsJobsUpdatesMenu2['default'], {
                activePage: this.props.page,
                actions: this.props.actions
              }),
              _react2['default'].createElement(
                'div', { style: styles.did_save_wrapper },
                _react2['default'].createElement(
                  'p', { style: [styles.p, styles.top_offset_browser] },
                  'You will be alerted when something changes'
                ),
                _react2['default'].createElement('img', { style: styles.caution, src: 'img/caution@2x.png', width: '44' }),
                _react2['default'].createElement(
                  'p', { style: styles.p },
                  'Jobs stop when Chrome or PC',
                  _react2['default'].createElement('br', null),
                  'is shut down'
                ),
                _react2['default'].createElement('img', { style: styles.cloud, src: 'img/cloud@2x.png', width: '39' }),
                _react2['default'].createElement(
                  'p', { style: styles.p },
                  'Use server to check anytime',
                  _react2['default'].createElement('br', null),
                  'and get email alerts'
                )
              )
            );
          }
        }
      }, {
        key: 'handleManageJobs',
        value: function handleManageJobs() {
          this.props.actions.viewJobs('jobs');
        }
      }, {
        key: 'renderJobsView',
        value: function renderJobsView() {
          return _react2['default'].createElement(
            'section', { className: 'main main-jobs' },
            _react2['default'].createElement(_componentsJobsUpdatesMenu2['default'], {
              activePage: this.props.page,
              actions: this.props.actions
            }),
            _react2['default'].createElement(_componentsJobsView2['default'], { tab: this.props.tab, actions: this.props.actions, jobs: this.props.jobs })
          );
        }
      }, {
        key: 'renderUpdatesView',
        value: function renderUpdatesView() {
          return _react2['default'].createElement(
            'section', { className: 'main main-updates' },
            _react2['default'].createElement(_componentsJobsUpdatesMenu2['default'], {
              activePage: this.props.page,
              actions: this.props.actions
            }),
            _react2['default'].createElement(_componentsUpdatesView2['default'], { tab: this.props.tab, actions: this.props.actions, updates: this.props.updates })
          );
        }
      }, {
        key: 'renderSettingsView',
        value: function renderSettingsView() {
          return _react2['default'].createElement(
            'section', { className: 'main main-options' },
            _react2['default'].createElement(_componentsJobsUpdatesMenu2['default'], {
              activePage: this.props.page,
              actions: this.props.actions
            }),
            _react2['default'].createElement(_componentsSettings2['default'], {
              settings: this.props.settings,
              updateAction: this.props.actions.updateSettings,
              scheduleCheckAction: this.props.actions.scheduleCheck
            })
          );
        }
      }, {
        key: 'renderSurveyView',
        value: function renderSurveyView() {
          return _react2['default'].createElement(
            'section', { className: 'main main-survey' },
            _react2['default'].createElement(_componentsSurvey2['default'], {
              page: this.props.survey_data.page,
              answerSatisfiedAction: this.props.actions.surveyAnswerSatisfied,
              answerFeedbackAction: this.props.actions.surveyAnswerFeedback,
              answerSurveyAction: this.props.actions.surveyAnswerSurvey
            })
          );
        }
      }, {
        key: 'renderUpgradedView',
        value: function renderUpgradedView() {
          return _react2['default'].createElement(
            'section', { className: 'main main-upgraded' },
            _react2['default'].createElement(_componentsUpgraded2['default'], {
              pm_user: this.props.pm_user,
              continueAction: this.props.actions.upgradeMessageViewed
            })
          );
        }
      }]);

      var _MainSection = MainSection;
      MainSection = (0, _radium2['default'])(MainSection) || MainSection;
      return MainSection;
    })(_react.Component);

    exports['default'] = MainSection;

    var styles = {
      did_save_wrapper: {
        minHeight: '400px',
        textAlign: 'center',
        fontSize: 14,
        width: '80%',
        margin: '0 auto',
        color: '#9B9B9B'
      },
      top_offset_server: {
        paddingTop: '64px'
      },
      top_offset_browser: {
        paddingTop: '40px'
      },
      p: {
        width: '80%',
        margin: '0 auto',
        paddingTop: '16px'
      },
      info_line: {
        marginBottom: 16
      },
      a: {
        color: '#9B9B9B',
        outline: 'none'
      },
      caution: {
        marginTop: '32px'
      },
      cloud: {
        marginTop: '32px'
      },
      envelope: {
        marginTop: '32px'
      },
      free_tag: {
        marginTop: '32px'
      },
      button: {
        color: 'white',
        borderRadius: 4,
        fontSize: 12,
        backgroundColor: '#46A9E2',
        padding: '4px 16px 5px',
        top: -5,
        position: 'relative',
        textDecoration: 'none',
        ':hover': {
          cursor: 'pointer'
        }
      },
      green_button: {
        backgroundColor: (0, _color2['default'])('#56D2AA').darken(0.2).hexString(),
        fontSize: 11
      }
    };
    module.exports = exports['default'];
    /*
    <p style={styles.p}>
    <a className='jobs-button'
       style={[styles.button]}
       onClick={this.handleManageJobs}>Jobs</a>
    </p>
    */

    /***/
  }),
  /* 458 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _componentsJobItem = __webpack_require__(459);

    var _componentsJobItem2 = _interopRequireDefault(_componentsJobItem);

    var JobsView = (function(_Component) {
      _inherits(JobsView, _Component);

      _createClass(JobsView, null, [{
        key: 'propTypes',
        value: {
          jobs: _react.PropTypes.array.isRequired,
          actions: _react.PropTypes.object.isRequired,
          tab: _react2['default'].PropTypes.oneOf(['browser-tab', 'server-tab']).isRequired
        },
        enumerable: true
      }]);

      function JobsView(props) {
        _classCallCheck(this, _JobsView);

        _get(Object.getPrototypeOf(_JobsView.prototype), 'constructor', this).call(this, props);
        this.state = _extends({}, this.props);
        this.state.activeJobs = this.activeJobs(this.props.jobs) || [];
        this.state.inactiveJobs = this.inactiveJobs(this.props.jobs) || [];
        this.handleCheckAllNow = this.handleCheckAllNow.bind(this);
      }

      _createClass(JobsView, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          if (this.props.tab == 'browser-tab') {
            this.props.actions.loadJobs();
          }
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          if (nextProps.tab == 'browser-tab' && this.props.tab !== 'browser-tab') {
            this.props.actions.loadJobs();
          }
          this.state.activeJobs = this.activeJobs(nextProps.jobs) || [];
          this.state.inactiveJobs = this.inactiveJobs(nextProps.jobs) || [];
        }
      }, {
        key: 'handleCheckAllNow',
        value: function handleCheckAllNow(e) {
          var _this = this;

          e.preventDefault();
          this.props.actions.checkAllNow();
          this.setState({ check_all_started: true });
          setTimeout(function() {
            _this.setState({ check_all_started: false });
          }, 6000);
        }
      }, {
        key: 'activeJobs',
        value: function activeJobs(jobs) {
          var filteredJobs = [];
          jobs.map(function(job, i) {
            if (job.active) {
              filteredJobs.push(job);
            }
          });
          return filteredJobs;
        }
      }, {
        key: 'inactiveJobs',
        value: function inactiveJobs(jobs) {
          var filteredJobs = [];
          jobs.map(function(job, i) {
            if (!job.active) {
              filteredJobs.push(job);
            }
          });
          return filteredJobs;
        }
      }, {
        key: 'render',
        value: function render() {
          if (this.props.tab == 'browser-tab') {
            return _react2['default'].createElement(
              'div', { style: styles.browser_jobs },
              this.renderNoJobs(),
              this.renderActions(),
              this.renderActiveJobs(),
              this.renderInactiveJobs()
            );
          } else if (this.props.tab == 'server-tab') {
            return _react2['default'].createElement(
              'div',
              null,
              this.renderJobsNotSupported()
            );
          }
        }
      }, {
        key: 'renderActiveJobs',
        value: function renderActiveJobs() {
          var _this2 = this;

          if (this.state.activeJobs.length === 0) {
            return;
          };
          return _react2['default'].createElement(
            'div',
            null,
            _react2['default'].createElement(
              'p', { style: styles.jobHeading },
              'Active Jobs'
            ),
            this.state.activeJobs.map(function(job, i) {
              return _react2['default'].createElement(_componentsJobItem2['default'], { key: job.job_id, job: job, actions: _this2.props.actions });
            }, this)
          );
        }
      }, {
        key: 'renderInactiveJobs',
        value: function renderInactiveJobs() {
          var _this3 = this;

          if (this.state.inactiveJobs.length === 0) {
            return;
          };
          return _react2['default'].createElement(
            'div',
            null,
            _react2['default'].createElement(
              'p', { style: styles.jobHeading },
              'Inactive Jobs'
            ),
            this.state.inactiveJobs.map(function(job, i) {
              return _react2['default'].createElement(_componentsJobItem2['default'], { key: job.job_id, job: job, actions: _this3.props.actions });
            }, this)
          );
        }
      }, {
        key: 'renderJobsNotSupported',
        value: function renderJobsNotSupported() {
          return _react2['default'].createElement(
            'div', { style: styles.not_supported },
            _react2['default'].createElement(
              'p', { style: styles.jobHeading },
              'Display of your cloud jobs coming soon.'
            )
          );
        }
      }, {
        key: 'renderNoJobs',
        value: function renderNoJobs() {
          if (this.props.jobs.length == 0) {
            return _react2['default'].createElement(
              'div', { style: styles.not_supported },
              _react2['default'].createElement(
                'p', { style: styles.jobHeading },
                'No jobs'
              )
            );
          }
        }
      }, {
        key: 'renderActions',
        value: function renderActions() {
          if (!(this.props.jobs.length >= 1)) {
            return false;
          }
          if (this.state.check_all_started === true) {
            return _react2['default'].createElement(
              'div', { clasName: 'actions', style: styles.actions },
              _react2['default'].createElement('img', { src: 'img/heartbeat.gif' })
            );
          }
          return _react2['default'].createElement(
            'div', { clasName: 'actions', style: styles.actions },
            _react2['default'].createElement(
              'a', { href: '#', style: styles.button, onClick: this.handleCheckAllNow },
              'Check all now'
            )
          );
        }
      }]);

      var _JobsView = JobsView;
      JobsView = (0, _radium2['default'])(JobsView) || JobsView;
      return JobsView;
    })(_react.Component);

    exports['default'] = JobsView;

    var styles = {
      browser_jobs: {
        minHeight: '400px'
      },
      jobHeading: {
        textAlign: 'center',
        fontSize: 12,
        color: '#9B9B9B'
      },
      not_supported: {
        paddingTop: '180px',
        minHeight: '250px',
        verticalAlign: 'middle'
      },
      actions: {
        padding: '16px',
        textAlign: 'center',
        borderBottom: '1px solid #D2D2D2'
      },
      button: {
        display: 'inline',
        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #EDEDED 100%)',
        border: '1px solid #D2D2D2',
        borderRadius: 4,
        fontSize: 12,
        margin: '0 4px',
        padding: '4px 32px 5px',
        color: '#787878',
        verticalAlign: 'middle',
        textDecoration: 'none',
        outline: 'none',
        ':hover': {
          backgroundImage: 'linear-gradient(-180deg, #F6F6F6 0%, #E6E6E6 100%)',
          border: '1px solid #D2D2D2',
          cursor: 'pointer'
        }
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 459 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _buttonsDisableButton = __webpack_require__(460);

    var _buttonsDisableButton2 = _interopRequireDefault(_buttonsDisableButton);

    var _buttonsTrashButton = __webpack_require__(461);

    var _buttonsTrashButton2 = _interopRequireDefault(_buttonsTrashButton);

    var _jobJobIntervalInput = __webpack_require__(462);

    var _jobJobIntervalInput2 = _interopRequireDefault(_jobJobIntervalInput);

    var _jobJobTriggerInput = __webpack_require__(463);

    var _jobJobTriggerInput2 = _interopRequireDefault(_jobJobTriggerInput);

    var _jobJobTitle = __webpack_require__(464);

    var _jobJobTitle2 = _interopRequireDefault(_jobJobTitle);

    var _formattersTimeFormatter = __webpack_require__(423);

    var JobsItem = (function(_Component) {
      _inherits(JobsItem, _Component);

      function JobsItem() {
        _classCallCheck(this, _JobsItem);

        _get(Object.getPrototypeOf(_JobsItem.prototype), 'constructor', this).apply(this, arguments);
      }

      _createClass(JobsItem, [{
        key: 'getFavicon',

        // Returns a chrome://favicon/... URL that points to the Chrome-cached favicon
        // of the given URL.
        value: function getFavicon() {
          var url = this.props.job.url;
          return 'chrome://favicon/' + url;
        }

        // <div className='screen-preview' style={[styles.screenPreview, {backgroundImage: `url(${this.props.job.currentScreenshot})`}]}>
        // </div>
      }, {
        key: 'render',
        value: function render() {
          var job = this.props.job;
          return _react2['default'].createElement(
            'div', { className: 'job', style: styles.job },
            _react2['default'].createElement('div', { className: 'screen-preview', style: [styles.favicon, { backgroundImage: 'url(' + this.getFavicon() + ')' }] }),
            _react2['default'].createElement(
              'div', { className: 'job-details', style: styles.jobDetails },
              _react2['default'].createElement(_jobJobTitle2['default'], { job: this.props.job, updateAction: this.props.actions.updateVisualJob }),
              _react2['default'].createElement(
                'div', { className: 'job-last-check', style: styles.jobLastCheck },
                'Last check: ',
                (0, _formattersTimeFormatter.describeTimeSince)(job.last_check)
              )
            ),
            _react2['default'].createElement(
              'div', { className: 'job-edit', style: styles.jobEdit },
              _react2['default'].createElement(_jobJobIntervalInput2['default'], {
                job_id: job.job_id,
                checkInterval: job.checkInterval || '1',
                checkIntervalType: job.checkIntervalType || 'Min',
                updateKey: 'checkInterval',
                updateAction: this.props.actions.updateVisualJob
              }),
              _react2['default'].createElement(
                'div', { className: 'job-actions', style: styles.jobActions },
                _react2['default'].createElement(_buttonsDisableButton2['default'], {
                  job_id: job.job_id,
                  enabled: job.active,
                  updateAction: this.props.actions.updateVisualJob
                }),
                _react2['default'].createElement(_buttonsTrashButton2['default'], {
                  job_id: job.job_id,
                  deleteAction: this.props.actions.deleteJob
                })
              )
            ),
            _react2['default'].createElement('div', { style: { clear: 'both' } })
          );
        }
      }], [{
        key: 'propTypes',
        value: {
          job: _react.PropTypes.object.isRequired,
          actions: _react.PropTypes.object.isRequired
        },
        enumerable: true
      }]);

      var _JobsItem = JobsItem;
      JobsItem = (0, _radium2['default'])(JobsItem) || JobsItem;
      return JobsItem;
    })(_react.Component);

    exports['default'] = JobsItem;

    var styles = {
      job: {
        clear: 'both',
        height: 80,
        overflow: 'visible',
        background: '#FAFAFA',
        boxShadow: '0 2px 4px 0 rgba(0,0,0,0.2)',
        marginBottom: 6
      },
      screenPreview: {
        float: 'left',
        width: 86,
        height: 110,
        backgroundRepeat: 'no-repeat',
        backgroundSize: 'cover',
        backgroundPosition: 'center center'
      },
      favicon: {
        float: 'left',
        width: 32,
        height: 32,
        backgroundRepeat: 'no-repeat',
        backgroundSize: '16px 16px',
        backgroundPosition: 'center center',
        marginRight: 2,
        clear: 'both'
      },
      jobDetails: {
        paddingLeft: 8,
        width: 226,
        float: 'left'
      },
      jobEdit: {
        paddingLeft: 8,
        float: 'left'
      },
      jobLastCheck: {
        marginTop: 6,
        color: '#9B9FA3',
        fontSize: 10
      },
      jobActions: {
        // marginTop: 6
      }
    };
    module.exports = exports['default'];
    /* <JobTriggerInput job_id={job.job_id}
                   trigger={job.trigger}
                   updateKey='trigger'
                   updateAction={this.props.actions.updateVisualJob}/>
                   */

    /***/
  }),
  /* 460 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var DisableButton = (function(_Component) {
      _inherits(DisableButton, _Component);

      _createClass(DisableButton, null, [{
        key: 'propTypes',
        value: {
          job_id: _react2['default'].PropTypes.number.isRequired,
          enabled: _react.PropTypes.bool.isRequired,
          updateAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function DisableButton(props) {
        _classCallCheck(this, _DisableButton);

        _get(Object.getPrototypeOf(_DisableButton.prototype), 'constructor', this).call(this, props);
        this.handleClick = this.handleClick.bind(this);
      }

      _createClass(DisableButton, [{
        key: 'buttonText',
        value: function buttonText() {
          return this.props.enabled ? 'Disable' : 'Enable';
        }
      }, {
        key: 'handleClick',
        value: function handleClick() {
          var update = { active: !this.props.enabled };
          this.props.updateAction(this.props.job_id, update);
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { className: 'toggle-enabled', style: styles.button, onClick: this.handleClick },
            this.buttonText()
          );
        }
      }]);

      var _DisableButton = DisableButton;
      DisableButton = (0, _radium2['default'])(DisableButton) || DisableButton;
      return DisableButton;
    })(_react.Component);

    exports['default'] = DisableButton;

    var styles = {
      button: {
        display: 'inline-block',
        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #EDEDED 100%)',
        border: '1px solid #D2D2D2',
        borderRadius: 4,
        fontSize: 12,
        padding: '4px 32px 5px',
        color: '#787878',
        lineHeight: '15px',
        verticalAlign: 'top',
        ':hover': {
          backgroundImage: 'linear-gradient(-180deg, #F6F6F6 0%, #E6E6E6 100%)',
          border: '1px solid #D2D2D2',
          cursor: 'pointer'
        }
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 461 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var TrashButton = (function(_Component) {
      _inherits(TrashButton, _Component);

      _createClass(TrashButton, null, [{
        key: 'propTypes',
        value: {
          job_id: _react2['default'].PropTypes.number.isRequired,
          deleteAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function TrashButton(props) {
        _classCallCheck(this, _TrashButton);

        _get(Object.getPrototypeOf(_TrashButton.prototype), 'constructor', this).call(this, props);
        this.handleClick = this.handleClick.bind(this);
      }

      _createClass(TrashButton, [{
        key: 'handleClick',
        value: function handleClick() {
          this.props.deleteAction(this.props.job_id);
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { className: 'delete-job', style: styles.button, onClick: this.handleClick },
            _react2['default'].createElement('img', { src: 'img/trash-icon-gray.png', style: styles.img })
          );
        }
      }]);

      var _TrashButton = TrashButton;
      TrashButton = (0, _radium2['default'])(TrashButton) || TrashButton;
      return TrashButton;
    })(_react.Component);

    exports['default'] = TrashButton;

    var styles = {
      button: {
        height: 24,
        display: 'inline-block',
        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #EDEDED 100%)',
        border: '1px solid #D2D2D2',
        borderRadius: 4,
        padding: '0 8px',
        fontSize: 12,
        lineHeight: '15px',
        marginLeft: 4,
        verticalAlign: 'top',
        ':hover': {
          backgroundImage: 'linear-gradient(-180deg, #F6F6F6 0%, #E6E6E6 100%)',
          border: '1px solid #D2D2D2',
          cursor: 'pointer'
        }
      },
      img: {
        display: 'inline',
        marginTop: 2
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 462 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _color = __webpack_require__(429);

    var _color2 = _interopRequireDefault(_color);

    var _inputsDropSelect = __webpack_require__(451);

    var _inputsDropSelect2 = _interopRequireDefault(_inputsDropSelect);

    var OPTIONS = ['Sec', 'Min', 'Hrs', 'Days'];

    var JobIntervalInput = (function(_Component) {
      _inherits(JobIntervalInput, _Component);

      _createClass(JobIntervalInput, null, [{
        key: 'propTypes',
        value: {
          job_id: _react2['default'].PropTypes.number.isRequired,
          checkInterval: _react2['default'].PropTypes.number.isRequired,
          checkIntervalType: _react2['default'].PropTypes.oneOf(OPTIONS).isRequired,
          dropOpen: _react2['default'].PropTypes.bool,
          updateAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function JobIntervalInput(props) {
        _classCallCheck(this, _JobIntervalInput);

        _get(Object.getPrototypeOf(_JobIntervalInput.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.options = OPTIONS;
        this.handleChange = this.handleChange.bind(this);
        this.handleDropUpdate = this.handleDropUpdate.bind(this);
        this.handleIntervalClick = this.handleIntervalClick.bind(this);
      }

      _createClass(JobIntervalInput, [{
        key: 'handleChange',
        value: function handleChange(e) {
          var newState = { checkInterval: e.target.value };
          this.setState(newState);
          this.props.updateAction(this.props.job_id, newState);
        }

        // Handle dropdown composition
      }, {
        key: 'handleDropUpdate',
        value: function handleDropUpdate(newState) {
          this.props.updateAction(this.props.job_id, newState);
        }
      }, {
        key: 'handleIntervalClick',
        value: function handleIntervalClick() {
          _react2['default'].findDOMNode(this.refs.numberInput).select();
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { className: 'input_wrapper', style: styles.input_wrapper },
            _react2['default'].createElement('img', { src: 'img/clock.png', style: styles.clock }),
            _react2['default'].createElement(
              'span', { className: 'adjective', style: styles.adjective },
              'Every'
            ),
            _react2['default'].createElement(
              'div', { className: 'inputs', style: styles.inputs },
              _react2['default'].createElement('input', {
                type: 'text',
                name: 'check_interval',
                value: this.state.checkInterval,
                onChange: this.handleChange,
                onClick: this.handleIntervalClick,
                ref: 'numberInput',
                maxLength: '3',
                tabindex: '-1',
                style: styles.input
              }),
              _react2['default'].createElement(_inputsDropSelect2['default'], {
                objectID: this.state.job_id,
                dropOptions: OPTIONS,
                dropValue: this.props.checkIntervalType,
                updateKey: 'checkIntervalType',
                updateAction: this.handleDropUpdate
              })
            )
          );
        }
      }]);

      var _JobIntervalInput = JobIntervalInput;
      JobIntervalInput = (0, _radium2['default'])(JobIntervalInput) || JobIntervalInput;
      return JobIntervalInput;
    })(_react.Component);

    exports['default'] = JobIntervalInput;

    var styles = {
      input_wrapper: {
        // border: '2px solid #ECEAEA',
        // borderRadius: 2,
        height: 24,
        padding: '8px 0px'
      },
      clock: {
        paddingTop: 4
      },
      adjective: {
        display: 'inline-block',
        position: 'relative',
        top: -4,
        marginLeft: 9,
        fontSize: 10,
        color: '#9B9B9B'
      },
      inputs: {
        display: 'inline-block',
        position: 'relative',
        background: '#FDEDAD',
        borderRadius: 4,
        padding: '4px 6px 7px',
        height: 14,
        marginLeft: 9,
        top: -3
      },
      input: {
        marginRight: 9,
        width: 24,
        background: 'transparent',
        border: 'none',
        color: '#A38C6E',
        fontSize: 12,
        fontWeight: 500,
        textAlign: 'right',
        ':focus': {
          outline: 'none'
        }

      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 463 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _inputsDropSelect = __webpack_require__(451);

    var _inputsDropSelect2 = _interopRequireDefault(_inputsDropSelect);

    var OPTIONS = ['Tiny Change', 'Medium Change', 'Major Change'];

    var JobTriggerInput = (function(_Component) {
      _inherits(JobTriggerInput, _Component);

      _createClass(JobTriggerInput, null, [{
        key: 'propTypes',
        value: {
          job_id: _react2['default'].PropTypes.number.isRequired,
          trigger: _react2['default'].PropTypes.number.isRequired,
          updateAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function JobTriggerInput(props) {
        _classCallCheck(this, _JobTriggerInput);

        _get(Object.getPrototypeOf(_JobTriggerInput.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.handleDropUpdate = this.handleDropUpdate.bind(this);
      }

      // Handle dropdown composition

      _createClass(JobTriggerInput, [{
        key: 'handleDropUpdate',
        value: function handleDropUpdate(newState) {
          this.props.updateAction(this.props.job_id, newState);
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(
            'div', { className: 'input_wrapper', style: styles.input_wrapper },
            _react2['default'].createElement('img', { src: 'img/bolt.png', style: styles.clock }),
            _react2['default'].createElement(
              'span', { className: 'adjective', style: styles.adjective },
              'On'
            ),
            _react2['default'].createElement(
              'div', { className: 'inputs', style: styles.inputs },
              _react2['default'].createElement(_inputsDropSelect2['default'], {
                dropOptions: OPTIONS,
                dropValue: this.props.trigger,
                updateKey: 'trigger',
                updateAction: this.handleDropUpdate
              })
            )
          );
        }
      }]);

      var _JobTriggerInput = JobTriggerInput;
      JobTriggerInput = (0, _radium2['default'])(JobTriggerInput) || JobTriggerInput;
      return JobTriggerInput;
    })(_react.Component);

    exports['default'] = JobTriggerInput;

    var styles = {
      input_wrapper: {
        // border: '2px solid #ECEAEA',
        // borderRadius: 2,
        height: 24,
        padding: 8
      },
      clock: {
        paddingTop: 4
      },
      adjective: {
        display: 'inline-block',
        position: 'relative',
        top: -5,
        marginLeft: 9,
        fontSize: 10,
        color: '#9B9B9B'
      },
      inputs: {
        display: 'inline-block',
        position: 'relative',
        background: '#FDEDAD',
        borderRadius: 4,
        padding: '4px 6px 7px',
        height: 14,
        marginLeft: 9,
        top: -5
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 464 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _underscoreStringTruncate = __webpack_require__(465);

    var _underscoreStringTruncate2 = _interopRequireDefault(_underscoreStringTruncate);

    var JobTitle = (function(_Component) {
      _inherits(JobTitle, _Component);

      _createClass(JobTitle, null, [{
        key: 'propTypes',
        value: {
          job: _react2['default'].PropTypes.object.isRequired,
          updateAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function JobTitle(props) {
        _classCallCheck(this, _JobTitle);

        _get(Object.getPrototypeOf(_JobTitle.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.handleChange = this.handleChange.bind(this);
        this.handleEdit = this.handleEdit.bind(this);
        this.handleSave = this.handleSave.bind(this);
      }

      _createClass(JobTitle, [{
        key: 'handleChange',
        value: function handleChange(e) {
          var value = e.target.value;
          this.setState({ job: { name: value } });
        }
      }, {
        key: 'handleEdit',
        value: function handleEdit(e) {
          this.setState({ editing: true });
        }
      }, {
        key: 'handleSave',
        value: function handleSave() {
          var value = this.state.job.name;
          this.setState({ editing: false });
          this.props.updateAction(this.props.job.job_id, { name: value });
        }
      }, {
        key: 'render',
        value: function render() {
          var job = this.props.job;
          if (this.state.editing) {
            return this.renderEditInput();
          }
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'a', { href: job.url, key: job.job_id, target: '_blank', className: 'job-name', style: styles.jobName },
              (0, _underscoreStringTruncate2['default'])(job.name, 27)
            ),
            _react2['default'].createElement('img', {
              key: 'pencil',
              src: 'img/pencil@2x.png',
              width: '13',
              style: styles.pencil,
              onClick: this.handleEdit
            })
          );
        }
      }, {
        key: 'renderEditInput',
        value: function renderEditInput() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement('input', {
              key: this.props.job.job_id,
              type: 'text',
              onChange: this.handleChange,
              value: this.state.job.name,
              tabindex: '1',
              style: styles.input
            }),
            _react2['default'].createElement(
              'div', { style: styles.ok_button, onClick: this.handleSave },
              'OK'
            )
          );
        }
      }]);

      var _JobTitle = JobTitle;
      JobTitle = (0, _radium2['default'])(JobTitle) || JobTitle;
      return JobTitle;
    })(_react.Component);

    exports['default'] = JobTitle;

    var styles = {
      wrapper: {
        display: 'block',
        marginTop: 8
      },
      jobName: {
        color: '#686868',
        fontSize: 12
      },
      pencil: {
        marginLeft: '6px',
        verticalAlign: 'text-bottom',
        ':hover': {
          cursor: 'pointer'
        }
      },
      input: {
        border: 'none',
        color: '#9B9B9B',
        fontSize: 12,
        lineHeight: '23px',
        width: '80%',
        top: 4,
        ':focus': {
          outline: 'none'
        }
      },
      ok_button: {
        display: 'inline-block',
        backgroundColor: '#FAFAFA',
        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #EDEDED 100%)',
        border: '1px solid #D2D2D2',
        borderRadius: 4,
        color: '#666666',
        borderRadius: 4,
        fontSize: 12,
        padding: '3px 6px 4px',
        marginLeft: '4px',
        position: 'relative',
        textDecoration: 'none',
        ':hover': {
          backgroundImage: 'linear-gradient(-180deg, #F6F6F6 0%, #E6E6E6 100%)',
          border: '1px solid #D2D2D2',
          cursor: 'pointer'
        }
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 465 */
  /***/
  (function(module, exports, __webpack_require__) {

    var makeString = __webpack_require__(427);

    module.exports = function truncate(str, length, truncateStr) {
      str = makeString(str);
      truncateStr = truncateStr || '...';
      length = ~~length;
      return str.length > length ? str.slice(0, length) + truncateStr : str;
    };

    /***/
  }),
  /* 466 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _buttonsPageSelectButton = __webpack_require__(425);

    var _buttonsPageSelectButton2 = _interopRequireDefault(_buttonsPageSelectButton);

    var JobsUpdatesMenu = (function(_Component) {
      _inherits(JobsUpdatesMenu, _Component);

      function JobsUpdatesMenu() {
        _classCallCheck(this, _JobsUpdatesMenu);

        _get(Object.getPrototypeOf(_JobsUpdatesMenu.prototype), 'constructor', this).apply(this, arguments);
      }

      _createClass(JobsUpdatesMenu, [{
        key: 'render',
        value: function render() {
          var job = this.props.job;
          return _react2['default'].createElement(
            'div', { className: 'sub_menu', style: styles.sub_menu },
            _react2['default'].createElement(_buttonsPageSelectButton2['default'], {
              active: this.props.activePage == 'updates',
              width: 100,
              action: this.props.actions.viewUpdates,
              page: 'updates'
            }),
            _react2['default'].createElement(_buttonsPageSelectButton2['default'], {
              active: this.props.activePage == 'jobs',
              width: 100,
              action: this.props.actions.viewJobs,
              page: 'jobs'
            }),
            _react2['default'].createElement(_buttonsPageSelectButton2['default'], {
              active: this.props.activePage == 'settings',
              width: 100,
              action: this.props.actions.viewOptions,
              page: 'settings'
            })
          );
        }
      }], [{
        key: 'propTypes',
        value: {
          activePage: _react2['default'].PropTypes.string.isRequired,
          actions: _react2['default'].PropTypes.object.isRequired
        },
        enumerable: true
      }]);

      var _JobsUpdatesMenu = JobsUpdatesMenu;
      JobsUpdatesMenu = (0, _radium2['default'])(JobsUpdatesMenu) || JobsUpdatesMenu;
      return JobsUpdatesMenu;
    })(_react.Component);

    exports['default'] = JobsUpdatesMenu;

    var styles = {
      sub_menu: {
        height: 46,
        // lineHeight: '36px',
        boxSizing: 'border-box',
        padding: '11px',
        width: '100%',
        backgroundColor: '#E1EFF8',
        textAlign: 'center'
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 467 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _UpdateItem = __webpack_require__(468);

    var _UpdateItem2 = _interopRequireDefault(_UpdateItem);

    var UpdatesView = (function(_Component) {
      _inherits(UpdatesView, _Component);

      _createClass(UpdatesView, null, [{
        key: 'propTypes',
        value: {
          updates: _react2['default'].PropTypes.array.isRequired,
          actions: _react2['default'].PropTypes.object.isRequired,
          tab: _react2['default'].PropTypes.oneOf(['browser-tab', 'server-tab']).isRequired
        },
        enumerable: true
      }]);

      function UpdatesView(props) {
        _classCallCheck(this, _UpdatesView);

        _get(Object.getPrototypeOf(_UpdatesView.prototype), 'constructor', this).call(this, props);
        this.state = _extends({}, this.props);
        this.handleViewAllUpdates = this.handleViewAllUpdates.bind(this);
      }

      _createClass(UpdatesView, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          if (this.props.tab === 'browser-tab') {
            this.props.actions.loadUpdates();
          }
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          if (nextProps.tab === 'browser-tab' && this.props.tab !== 'browser-tab') {
            this.props.actions.loadUpdates();
          }
        }
      }, {
        key: 'handleViewAllUpdates',
        value: function handleViewAllUpdates(e) {
          var _this = this;

          e.preventDefault();
          this.props.actions.viewAllUpdates(this.props.updates);
          this.setState({ view_all_started: true });
          setTimeout(function() {
            _this.setState({ view_all_started: false });
          }, 4000);
        }
      }, {
        key: 'render',
        value: function render() {
          if (this.props.tab === 'browser-tab') {
            return _react2['default'].createElement(
              'div', { style: styles.browser_updates },
              this.renderNoUpdates(),
              this.renderBrowserUpdates()
            );
          } else if (this.props.tab === 'server-tab') {
            return _react2['default'].createElement(
              'div',
              null,
              ' ',
              this.renderUpdatesNotSupported(),
              ' '
            );
          }
        }
      }, {
        key: 'renderBrowserUpdates',
        value: function renderBrowserUpdates() {
          var _this2 = this;

          return _react2['default'].createElement(
            'div',
            null,
            this.renderActions(),
            this.props.updates.map(function(update, i) {
              return _react2['default'].createElement(_UpdateItem2['default'], { update: update, actions: _this2.props.actions });
            }, this)
          );
        }
      }, {
        key: 'renderActions',
        value: function renderActions() {
          if (!(this.props.updates.length >= 1)) {
            return false;
          }
          if (this.state.view_all_started === true) {
            return _react2['default'].createElement(
              'div', { clasName: 'actions', style: styles.actions },
              _react2['default'].createElement('img', { src: 'img/heartbeat.gif' })
            );
          }
          return _react2['default'].createElement(
            'div', { clasName: 'actions', style: styles.actions },
            _react2['default'].createElement(
              'a', { href: '#', style: styles.button, onClick: this.handleViewAllUpdates },
              'View all updates'
            )
          );
        }
      }, {
        key: 'renderUpdatesNotSupported',
        value: function renderUpdatesNotSupported() {
          return _react2['default'].createElement(
            'div', { style: styles.not_supported },
            _react2['default'].createElement(
              'p', { style: styles.jobHeading },
              'Display of your cloud updates coming soon.'
            )
          );
        }
      }, {
        key: 'renderNoUpdates',
        value: function renderNoUpdates() {
          if (this.props.updates.length === 0) {
            return _react2['default'].createElement(
              'div', { style: styles.not_supported },
              _react2['default'].createElement(
                'p', { style: styles.jobHeading },
                'No updates'
              )
            );
          }
        }
      }]);

      var _UpdatesView = UpdatesView;
      UpdatesView = (0, _radium2['default'])(UpdatesView) || UpdatesView;
      return UpdatesView;
    })(_react.Component);

    exports['default'] = UpdatesView;

    var styles = {
      browser_updates: {
        minHeight: '400px'
      },
      jobHeading: {
        textAlign: 'center',
        fontSize: 12,
        color: '#9B9B9B',
        lineHeight: '15px'
      },
      not_supported: {
        paddingTop: '180px',
        minHeight: '250px',
        verticalAlign: 'middle'
      },
      actions: {
        padding: '16px',
        textAlign: 'center',
        borderBottom: '1px solid #D2D2D2'
      },
      button: {
        display: 'inline',
        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #EDEDED 100%)',
        border: '1px solid #D2D2D2',
        borderRadius: 4,
        fontSize: 12,
        margin: '0 4px',
        padding: '4px 32px 5px',
        color: '#787878',
        verticalAlign: 'middle',
        textDecoration: 'none',
        outline: 'none',
        ':hover': {
          backgroundImage: 'linear-gradient(-180deg, #F6F6F6 0%, #E6E6E6 100%)',
          border: '1px solid #D2D2D2',
          cursor: 'pointer'
        }

      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 468 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _formattersTimeFormatter = __webpack_require__(423);

    var _jsBase64 = __webpack_require__(204);

    var _underscoreStringTruncate = __webpack_require__(465);

    var _underscoreStringTruncate2 = _interopRequireDefault(_underscoreStringTruncate);

    var _servicesUpdateService = __webpack_require__(197);

    var _servicesUpdateService2 = _interopRequireDefault(_servicesUpdateService);

    var UpdateItem = (function(_Component) {
      _inherits(UpdateItem, _Component);

      _createClass(UpdateItem, null, [{
        key: 'propTypes',
        value: {
          update: _react2['default'].PropTypes.object.isRequired,
          actions: _react2['default'].PropTypes.object.isRequired
        },
        enumerable: true
      }]);

      function UpdateItem(props) {
        _classCallCheck(this, _UpdateItem);

        _get(Object.getPrototypeOf(_UpdateItem.prototype), 'constructor', this).call(this, props);
        this.state = _extends({}, this.props);
        this.handleViewSite = this.handleViewSite.bind(this);
        this.handleViewChange = this.handleViewChange.bind(this);
        this.handleDismiss = this.handleDismiss.bind(this);
      }

      // View site and Mark update as read

      _createClass(UpdateItem, [{
        key: 'handleViewSite',
        value: function handleViewSite(e) {
          e.preventDefault();
          this.props.actions.viewUpdateUrlAndMarkRead(this.props.update);
        }

        // Capture and Mark update as read
      }, {
        key: 'handleViewChange',
        value: function handleViewChange(e) {
          e.preventDefault();
          this.props.actions.openUpdateAndMarkRead(this.props.update);
        }
      }, {
        key: 'handleDismiss',
        value: function handleDismiss(e) {
          e.preventDefault();
          this.props.actions.markUpdateAsRead(this.props.update);
        }

        // Returns a chrome://favicon/... URL that points to the Chrome-cached favicon
        // of the given URL.
      }, {
        key: 'getFavicon',
        value: function getFavicon() {
          var url = this.props.update.url;
          return 'chrome://favicon/' + url;
        }
      }, {
        key: 'render',
        value: function render() {
          var timeSince = (0, _formattersTimeFormatter.describeTimeSince)(this.props.update.created_at);
          // <div className='screen-preview' style={[styles.screenPreview, {backgroundImage: `url(${this.props.update.lastScreenshot})`}]} />
          // <img src='img/screen-diff-overlay.png' className='arrow' style={styles.arrow} />
          // <div className='screen-preview' style={[styles.screenPreview, {backgroundImage: `url(${this.props.update.currentScreenshot})`}]} />
          return _react2['default'].createElement(
            'div', { className: 'update', style: styles.update },
            _react2['default'].createElement(
              'div', { style: styles.updateMain },
              _react2['default'].createElement('div', { className: 'screen-preview', key: 'screen-preview', style: [styles.favicon, { backgroundImage: 'url(' + this.getFavicon() + ')' }] }),
              _react2['default'].createElement(
                'div', { className: 'update-details', key: 'update-details', style: styles.updateDetails },
                _react2['default'].createElement(
                  'div', { className: 'update-name', style: styles.updateName },
                  (0, _underscoreStringTruncate2['default'])(this.props.update.name, 30)
                ),
                _react2['default'].createElement(
                  'div', { className: 'update-last-check', style: styles.updateLastCheck },
                  'Last check: ',
                  timeSince
                )
              )
            ),
            _react2['default'].createElement(
              'div', { className: 'update-actions', key: 'update-actions', style: styles.updateActions },
              _react2['default'].createElement(
                'span', { style: styles.view_hint },
                'View:'
              ),
              _react2['default'].createElement(
                'a', {
                  className: 'update-view-site',
                  key: 'update-view-site',
                  onClick: this.handleViewSite,
                  style: styles.button
                },
                'Site'
              ),
              _react2['default'].createElement(
                'a', {
                  className: 'update-view-change',
                  key: 'update-view-change',
                  onClick: this.handleViewChange,
                  style: styles.button
                },
                'Change'
              ),
              _react2['default'].createElement(
                'div', {
                  className: 'update-dismiss',
                  key: 'update-dismiss',
                  onClick: this.handleDismiss,
                  style: styles.dismiss_button
                },
                _react2['default'].createElement('img', { src: 'img/close-button.png', width: '10', style: styles.dismiss_button_img })
              )
            ),
            _react2['default'].createElement('div', { style: { clear: 'both' } })
          );
        }
      }]);

      var _UpdateItem = UpdateItem;
      UpdateItem = (0, _radium2['default'])(UpdateItem) || UpdateItem;
      return UpdateItem;
    })(_react.Component);

    exports['default'] = UpdateItem;

    var styles = {
      update: {
        position: 'relative',
        display: 'block',
        boxShadow: '0 2px 4px 0 rgba(0,0,0,0.2)',
        paddingBottom: 6,
        marginBottom: 6
      },
      screenPreview: {
        float: 'left',
        width: 48,
        height: 48,
        backgroundRepeat: 'no-repeat',
        backgroundSize: 'cover',
        backgroundPosition: 'center center',
        marginRight: 2
      },
      favicon: {
        float: 'left',
        width: 16,
        height: 16,
        backgroundRepeat: 'no-repeat',
        backgroundSize: '16px 16px',
        backgroundPosition: 'center center',
        marginTop: 7,
        marginLeft: 0,
        marginRight: 7,
        clear: 'both'
      },
      arrow: {
        position: 'absolute',
        top: 20,
        left: 56
      },
      updateMain: {
        paddingLeft: 16,
        width: 160,
        outline: 'none',
        textDecoration: 'none',
        float: 'left'
      },
      updateDetails: {},
      updateName: {
        marginTop: 8,
        color: '#686868',
        fontSize: 12
      },
      updateLastCheck: {
        marginTop: 6,
        color: '#9B9FA3',
        fontSize: 10
      },
      updateActions: {
        float: 'left',
        width: 240,
        textAlign: 'right',
        marginTop: '6px',
        padding: '6px 8px'
      },
      button: {
        display: 'inline-block',
        width: '50px',
        textAlign: 'center',
        backgroundColor: '#FAFAFA',
        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #EDEDED 100%)',
        border: '1px solid #D2D2D2',
        color: '#666666',
        // border: '1px solid #999999',
        borderRadius: 4,
        fontSize: 12,
        padding: '4px 6px 5px',
        marginRight: '4px',
        position: 'relative',
        textDecoration: 'none',
        ':hover': {
          backgroundImage: 'linear-gradient(-180deg, #F6F6F6 0%, #E6E6E6 100%)',
          cursor: 'pointer'
        }
      },
      view_hint: {
        color: '#686868',
        padding: '6px'
      },
      dismiss_button: {
        display: 'inline-block',
        // position: 'absolute',
        // top: '4px',
        // right: '4px',
        marginLeft: '12px',
        marginTop: '-4px',
        // marginRight: '-10px',
        borderRadius: '11px',
        height: '22px',
        width: '22px',
        backgroundColor: '#EEEEEE',
        boxShadow: '0px 1px 1px 0px rgba(195,195,195,0.50), inset 0px 1px 1px 0px rgba(255,255,255,0.50)',
        textAlign: 'center',
        verticalAlign: 'middle',
        color: '#999999',
        ':hover': {
          backgroundImage: 'linear-gradient(-180deg, #F6F6F6 0%, #E6E6E6 100%)',
          cursor: 'pointer'
        }
      },
      dismiss_button_img: {
        textAlign: 'center',
        verticalAlign: '-4px'
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 469 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _constantsAppConstants = __webpack_require__(208);

    var AppConstants = _interopRequireWildcard(_constantsAppConstants);

    var _inputsDropSelect = __webpack_require__(451);

    var _inputsDropSelect2 = _interopRequireDefault(_inputsDropSelect);

    var _servicesImportExportService = __webpack_require__(470);

    var _servicesImportExportService2 = _interopRequireDefault(_servicesImportExportService);

    var importExportService = new _servicesImportExportService2['default']();

    var Settings = (function(_Component) {
      _inherits(Settings, _Component);

      _createClass(Settings, null, [{
        key: 'propTypes',
        value: {
          settings: _react2['default'].PropTypes.object.isRequired,
          updateAction: _react2['default'].PropTypes.func.isRequired,
          scheduleCheckAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function Settings(props) {
        _classCallCheck(this, _Settings);

        _get(Object.getPrototypeOf(_Settings.prototype), 'constructor', this).call(this, props);
        // Should be passed as prop but is temporary
        this.state = this.props;
        this.pm_user = localStorage.getItem('pm_user') === 'true';

        this.handleExportClick = this.handleExportClick.bind(this);
        this.handleModalClose = this.handleModalClose.bind(this);
        this.handleImportClick = this.handleImportClick.bind(this);
        this.handleImportChange = this.handleImportChange.bind(this);
        this.handleImportAction = this.handleImportAction.bind(this);
      }

      _createClass(Settings, [{
        key: 'handleExportClick',
        value: function handleExportClick() {
          var _this = this;

          importExportService.exportPagesList(function(bookmark) {
            _this.setState({ export_bookmark: bookmark, export_modal: true });
          });
        }
      }, {
        key: 'handleImportClick',
        value: function handleImportClick() {
          this.setState({ import_modal: true });
        }
      }, {
        key: 'handleImportChange',
        value: function handleImportChange(e) {
          var value = e.target.value;
          this.setState({ import_bookmark: value });
        }
      }, {
        key: 'handleImportAction',
        value: function handleImportAction() {
          var bookmark = this.state.import_bookmark;
          var matchCount = importExportService.importPagesList(bookmark);
          var importMessage = matchCount + ' jobs imported successfully';
          this.setState({ import_message: importMessage });
          this.props.scheduleCheckAction(); // Get scheduler running with new jobs
          setTimeout(this.handleModalClose, 1500);
        }
      }, {
        key: 'handleModalClose',
        value: function handleModalClose() {
          this.setState({ export_modal: false, import_modal: false });
        }
      }, {
        key: 'render',
        value: function render() {
          // <li className='option' style={[styles.row, styles.option_row]}>
          //   <label>COMPARISON TYPE</label>
          //   <div style={styles.drop_select_box}>
          //     <DropSelect dropValue='Difference'/>
          //   </div>
          // </li>
          return _react2['default'].createElement(
            'ul', { className: 'options-list', style: styles.option_list },
            _react2['default'].createElement(
              'li', { className: 'option-header', style: [styles.row, styles.option_header] },
              'BROWSER CHECK SETTINGS'
            ),
            _react2['default'].createElement(
              'li', { className: 'option', style: [styles.row, styles.option_row] },
              _react2['default'].createElement(
                'label',
                null,
                'SOUNDS'
              ),
              _react2['default'].createElement(
                'div', { style: styles.drop_select_box },
                _react2['default'].createElement(_inputsDropSelect2['default'], {
                  dropOptions: AppConstants.SOUND_ENABLED_OPTIONS,
                  dropValue: this.props.settings.sound_enabled,
                  updateKey: 'sound_enabled',
                  updateAction: this.props.updateAction
                })
              )
            ),
            _react2['default'].createElement(
              'li', { className: 'option', style: [styles.row, styles.option_row] },
              _react2['default'].createElement(
                'label',
                null,
                'SOUND CLIP'
              ),
              _react2['default'].createElement(
                'div', { style: styles.drop_select_box },
                _react2['default'].createElement(_inputsDropSelect2['default'], {
                  dropOptions: AppConstants.SOUND_CLIP_OPTIONS,
                  dropValue: this.props.settings.sound_clip,
                  updateKey: 'sound_clip',
                  updateAction: this.props.updateAction
                })
              )
            ),
            _react2['default'].createElement(
              'li', { className: 'option', style: [styles.row, styles.option_row] },
              _react2['default'].createElement(
                'label',
                null,
                'DESKTOP NOTIFICATIONS'
              ),
              _react2['default'].createElement(
                'div', { style: styles.drop_select_box },
                _react2['default'].createElement(_inputsDropSelect2['default'], {
                  dropOptions: AppConstants.DESKTOP_NOTIFICATION_OPTIONS,
                  dropValue: this.props.settings.desktop_notifications,
                  updateKey: 'desktop_notifications',
                  updateAction: this.props.updateAction
                })
              )
            ),
            _react2['default'].createElement(
              'li', { className: 'option', style: [styles.row, styles.option_row] },
              _react2['default'].createElement(
                'label',
                null,
                'FIRST WINDOW'
              ),
              _react2['default'].createElement(
                'div', { style: styles.drop_select_box },
                _react2['default'].createElement(_inputsDropSelect2['default'], {
                  dropOptions: AppConstants.TAB_PREFERENCE_OPTIONS,
                  dropValue: this.props.settings.tab_preference,
                  updateKey: 'tab_preference',
                  updateAction: this.props.updateAction
                })
              )
            ),
            _react2['default'].createElement(
              'li', { className: 'option', style: [styles.row, styles.option_row] },
              _react2['default'].createElement(
                'label',
                null,
                'DEFAULT COMPARE'
              ),
              _react2['default'].createElement(
                'div', { style: styles.drop_select_box },
                _react2['default'].createElement(_inputsDropSelect2['default'], {
                  dropOptions: AppConstants.DEFAULT_COMPARE_OPTIONS,
                  dropValue: this.props.settings.default_compare_preference,
                  updateKey: 'default_compare_preference',
                  updateAction: this.props.updateAction
                })
              )
            ),
            _react2['default'].createElement(
              'li', { className: 'option', style: [styles.row, styles.option_row] },
              _react2['default'].createElement(
                'label',
                null,
                'JOBS'
              ),
              _react2['default'].createElement(
                'div', { style: styles.right_box },
                _react2['default'].createElement(
                  'a', {
                    href: '#',
                    key: 'import',
                    onClick: this.handleImportClick,
                    style: [styles.button, { marginRight: '8px' }]
                  },
                  'Import'
                ),
                _react2['default'].createElement(
                  'a', {
                    href: '#',
                    key: 'export',
                    onClick: this.handleExportClick,
                    style: [styles.button]
                  },
                  'Export'
                )
              )
            ),
            this.renderTutorialOption(),
            this.renderImportModal(),
            this.renderExportModal()
          );
        }
      }, {
        key: 'renderTutorialOption',
        value: function renderTutorialOption() {
          if (this.pm_user) {
            return _react2['default'].createElement(
              'li', { className: 'option', style: [styles.row, styles.option_row] },
              _react2['default'].createElement(
                'label',
                null,
                'TUTORIAL'
              ),
              _react2['default'].createElement(
                'div', { style: styles.right_box },
                _react2['default'].createElement(
                  'a', {
                    href: 'http://visualping.io/welcome-pagemonitor',
                    target: '_blank',
                    key: 'tutorial',
                    style: styles.button
                  },
                  'View'
                )
              )
            );
          }
        }
      }, {
        key: 'renderImportModal',
        value: function renderImportModal() {
          if (this.state.import_modal === true) {
            return _react2['default'].createElement(
              'div', { className: 'modal', style: styles.modal_bg },
              _react2['default'].createElement(
                'div', { className: 'modal-inner', style: styles.modal_inner },
                _react2['default'].createElement('a', {
                  className: 'close-button',
                  href: '#',
                  onClick: this.handleModalClose,
                  style: styles.close_button
                }),
                _react2['default'].createElement(
                  'h4', { style: styles.h4 },
                  'Paste the contents of your bookmarks.html here:'
                ),
                _react2['default'].createElement(
                  'p',
                  null,
                  this.state.import_message
                ),
                _react2['default'].createElement('textarea', { value: this.state.import_bookmark, onChange: this.handleImportChange, style: styles.text_box }),
                _react2['default'].createElement(
                  'div', { className: 'modal-actions', style: styles.modal_actions },
                  _react2['default'].createElement(
                    'a', {
                      href: '#',
                      key: 'import-cancel',
                      onClick: this.handleModalClose,
                      style: [styles.button, styles.cancel_button]
                    },
                    'Cancel'
                  ),
                  _react2['default'].createElement(
                    'a', {
                      href: '#',
                      key: 'import-action',
                      onClick: this.handleImportAction,
                      style: [styles.button]
                    },
                    'Import'
                  )
                )
              )
            );
          }
        }
      }, {
        key: 'renderExportModal',
        value: function renderExportModal() {
          if (this.state.export_modal === true) {
            return _react2['default'].createElement(
              'div', { className: 'modal', style: styles.modal_bg },
              _react2['default'].createElement(
                'div', { className: 'modal-inner', style: styles.modal_inner },
                _react2['default'].createElement('a', {
                  className: 'close-button',
                  href: '#',
                  onClick: this.handleModalClose,
                  style: styles.close_button
                }),
                _react2['default'].createElement(
                  'h4', { style: styles.h4 },
                  'Copy this text into a file and save it as bookmarks.html:'
                ),
                _react2['default'].createElement('textarea', { value: this.state.export_bookmark, style: styles.text_box })
              )
            );
          }
        }
      }]);

      var _Settings = Settings;
      Settings = (0, _radium2['default'])(Settings) || Settings;
      return Settings;
    })(_react.Component);

    exports['default'] = Settings;

    var styles = {
      option_list: {
        listStyleType: 'none',
        padding: 0
      },
      row: {
        color: '#716969',
        padding: '19px 25px'
      },
      option_header: {
        borderBottom: '1px solid #D4D4D4',
        textAlign: 'center'
      },
      option_row: {
        position: 'relative',
        borderBottom: '1px solid #D4D4D4',
        padding: '14px 25px'
      },
      drop_select_box: {
        display: 'inline-block',
        position: 'absolute',
        background: '#FDEDAD',
        width: 80,
        textAlign: 'right',
        borderRadius: 4,
        padding: '4px 6px 7px',
        height: 14,
        marginRight: 16,
        right: 0,
        // left: '50%',
        top: 9
      },
      right_box: {
        display: 'inline-block',
        position: 'absolute',
        height: 14,
        top: 9,
        marginLeft: 9,
        padding: '4px 0 7px 6px',
        // left: '50%'
        marginRight: 16,
        right: 0
      },
      button: {
        color: 'white',
        borderRadius: 4,
        fontSize: 12,
        backgroundColor: '#46A9E2',
        padding: '4px 16px 5px',
        position: 'relative',
        textDecoration: 'none',
        ':hover': {
          cursor: 'pointer'
        }
      },
      cancel_button: {
        backgroundColor: '#FAFAFA',
        color: '#666666',
        marginRight: '8px',
        border: '1px solid #999999'
      },
      modal_bg: {
        overflow: 'hidden',
        height: 'auto',
        width: 'auto',
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 999,
        background: 'rgba(50,50,50,0.8)',
        '-webkit-transform-style': 'preserve-3d',
        '-moz-transform-style': 'preserve-3d',
        'transform-style': 'preserve-3d'
      },
      modal_inner: {
        backgroundColor: '#FFFFFF',
        width: '80%',
        padding: '0 16px 16px',
        borderRadius: 8,
        // margin: 'auto',
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%,-50%)'
      },
      h4: { color: '#666666' },
      modal_actions: {
        padding: '8px 0',
        textAlign: 'right'
      },
      text_box: {
        width: '100%',
        height: '120px'

      },
      close_button: {
        display: 'block',
        float: 'right',
        width: 18,
        height: 18,
        marginTop: 16,
        marginLeft: 16,
        backgroundImage: 'url("img/close-button.png")',
        backgroundRepeat: 'no-repeat'
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 470 */
  /***/
  (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */
    (function($) {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });

      var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

      var _createClass = (function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
      })();

      function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

      function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

      function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

      var _servicesVisualJobService = __webpack_require__(198);

      var _servicesVisualJobService2 = _interopRequireDefault(_servicesVisualJobService);

      var _formattersPageMonitorToJob = __webpack_require__(220);

      var _formattersPageMonitorToJob2 = _interopRequireDefault(_formattersPageMonitorToJob);

      var _servicesPageCheck = __webpack_require__(206);

      var PageCheck = _interopRequireWildcard(_servicesPageCheck);

      var visualJobService = new _servicesVisualJobService2['default']();
      var pageMonitorToJob = new _formattersPageMonitorToJob2['default']();

      /*******************************************************************************
       *                              Import & Export                                 *
       *******************************************************************************/

      // Assembles a netscape bookmark file containing all the pages currently being
      // monitored. Proprietary settings are put into a comment after each <DT>
      // element. The comment starts with "PageMonitorAdvancedPageData=" and is
      // followed by a JSON-encoded string of the page's advanced settings. The final
      // string is passed to the supplied calback.

      var ImportExportService = (function() {
        function ImportExportService() {
          _classCallCheck(this, ImportExportService);
        }

        _createClass(ImportExportService, [{
          key: 'exportPagesList',
          value: function exportPagesList(callback) {
            if (!callback) return;

            visualJobService.getAllJobs(function(jobs) {
              var buffer = [];
              var add_date = Date.now();

              buffer.push('<!DOCTYPE NETSCAPE-Bookmark-file-1>\n\n<!-- This is an' + ' automatically generated file.\n     It will be read and' + ' overwritten.\n     DO NOT EDIT! -->\n<META HTTP-EQUIV=' + '"Content-Type" CONTENT="text/html; charset=UTF-8">\n<TITLE>' + 'Bookmarks</TITLE>\n<H1>Bookmarks</H1>\n<DL><p>\n');

              for (var i in jobs) {
                buffer.push('        <DT><A HREF="' + jobs[i].url + '" ADD_DATE="' + add_date + '">' + jobs[i].name + '</A>\n');

                var encoded_settings = JSON.stringify({
                  mode: jobs[i].mode,
                  regex: jobs[i].regex,
                  selector: jobs[i].selector,
                  check_interval: jobs[i].check_interval,
                  crc: jobs[i].crc_checksum,
                  last_check: jobs[i].last_check,
                  last_changed: jobs[i].last_changed,
                  crop_scroll_top: jobs[i].crop_scroll_top,
                  crop_orig_width: jobs[i].crop_orig_width,
                  crop_orig_height: jobs[i].crop_orig_height,
                  crop_width: jobs[i].crop_width,
                  crop_height: jobs[i].crop_height,
                  crop_x: jobs[i].crop_x,
                  crop_y: jobs[i].crop_y
                }).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                buffer.push('            <!--PageMonitorAdvancedPageData=' + encoded_settings + '-->\n');
              }

              buffer.push('</DL><p>');

              callback(buffer.join(''));
            });
          }
        }, {
          key: 'importPagesList',
          value: function importPagesList(bookmarks) {
            var page_regex = new RegExp('(<[aA][^<>]+>[^<>]+<\/[aA]>)(?:\\s*<!--' + 'PageMonitorAdvancedPageData=' + '(\{.*?\})-->)?', 'g');
            var match = undefined;
            var matchesCount = 0;

            while (match = page_regex.exec(bookmarks, page_regex.lastIndex)) {
              var link = $(match[1]);
              var url = link.attr('HREF') || '';
              var _name = link.text() || chrome.i18n.getMessage('untitled', url);

              var advanced = {};
              if (match[2]) {
                advanced = JSON.parse(match[2].replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>'));
              }

              if (url) {
                var job = pageMonitorToJob.convert(_extends({ url: url, name: _name }, advanced));
                visualJobService.insertJob(job);
                // Set the initial CRC for this job
                PageCheck.checkPageHTML(job.url, function() {}, function() {}, true);
                matchesCount++;
              }
            }

            return matchesCount;
          }
        }]);

        return ImportExportService;
      })();

      exports['default'] = ImportExportService;
      module.exports = exports['default'];
      /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(203)))

    /***/
  }),
  /* 471 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _color = __webpack_require__(429);

    var _color2 = _interopRequireDefault(_color);

    var Survey = (function(_Component) {
      _inherits(Survey, _Component);

      _createClass(Survey, null, [{
        key: 'propTypes',
        value: {
          page: _react2['default'].PropTypes.oneOf(['satisfied', 'will_give_feedback', 'will_fill_survey']),
          answerSatisfiedAction: _react2['default'].PropTypes.func.isRequired,
          answerFeedbackAction: _react2['default'].PropTypes.func.isRequired,
          answerSurveyAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function Survey(props) {
        _classCallCheck(this, _Survey);

        _get(Object.getPrototypeOf(_Survey.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.handleSatisfiedAction = this.handleSatisfiedAction.bind(this);
        this.handleFeedbackAction = this.handleFeedbackAction.bind(this);
        this.handleSurveyAction = this.handleSurveyAction.bind(this);
      }

      _createClass(Survey, [{
        key: 'handleSatisfiedAction',
        value: function handleSatisfiedAction(e) {
          e.preventDefault();
          var value = e.target.getAttribute('value') === 'true';
          this.props.answerSatisfiedAction(value);
        }
      }, {
        key: 'handleFeedbackAction',
        value: function handleFeedbackAction(e) {
          e.preventDefault();
          var value = e.target.getAttribute('value') === 'true';
          this.props.answerFeedbackAction(value);
        }
      }, {
        key: 'handleSurveyAction',
        value: function handleSurveyAction(e) {
          e.preventDefault();
          var value = e.target.getAttribute('value') === 'true';
          this.props.answerSurveyAction(value);
        }
      }, {
        key: 'render',
        value: function render() {
          switch (this.props.page) {
            case 'satisfied':
              return this.renderSatisfiedPage();
            case 'will_give_feedback':
              return this.renderFeedbackPage();
            case 'will_fill_survey':
              return this.renderSurveyPage();
            default:
              return this.renderSatisfiedPage();
          }
        }
      }, {
        key: 'renderSatisfiedPage',
        value: function renderSatisfiedPage() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'p', { style: styles.p },
              'You will be alerted when something changes'
            ),
            _react2['default'].createElement(
              'h1', { style: styles.h1 },
              'Do you like Visualping?'
            ),
            _react2['default'].createElement(
              'div', { className: 'actions', style: styles.actions },
              _react2['default'].createElement(
                'a', {
                  href: '#',
                  key: 'yes',
                  style: [styles.button, styles.green_button],
                  value: true,
                  onClick: this.handleSatisfiedAction
                },
                'YES'
              ),
              _react2['default'].createElement(
                'a', {
                  href: '#',
                  key: 'no',
                  style: [styles.button, styles.red_button],
                  value: false,
                  onClick: this.handleSatisfiedAction
                },
                'NO'
              )
            )
          );
        }
      }, {
        key: 'renderFeedbackPage',
        value: function renderFeedbackPage() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'h1', { style: styles.h1 },
              'Great!',
              _react2['default'].createElement('br', null),
              _react2['default'].createElement('br', null),
              'Have time for a quick rating',
              _react2['default'].createElement('br', null),
              'in our Chrome Store?'
            ),
            _react2['default'].createElement(
              'div', { className: 'actions', style: styles.actions },
              _react2['default'].createElement(
                'a', {
                  href: '#',
                  key: 'yes',
                  style: [styles.button, styles.green_button],
                  value: true,
                  onClick: this.handleFeedbackAction
                },
                'YES'
              )
            ),
            _react2['default'].createElement(
              'p', { style: styles.email_line },
              'Or email us at ',
              _react2['default'].createElement(
                'a', {
                  style: styles.email_line_link,
                  target: '_blank',
                  href: 'mailto:hello@visualping.io'
                },
                'hello@visualping.io'
              )
            )
          );
        }
      }, {
        key: 'renderSurveyPage',
        value: function renderSurveyPage() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'h1', { style: styles.h1 },
              'Sorry to hear this!',
              _react2['default'].createElement('br', null),
              _react2['default'].createElement('br', null),
              'Have time to let us know',
              _react2['default'].createElement('br', null),
              'how we can improve?'
            ),
            _react2['default'].createElement(
              'div', { className: 'actions', style: styles.actions },
              _react2['default'].createElement(
                'a', {
                  href: '#',
                  style: [styles.button, styles.green_button],
                  value: true,
                  onClick: this.handleSurveyAction
                },
                'YES'
              )
            ),
            _react2['default'].createElement(
              'p', { style: styles.email_line },
              'Or email us at ',
              _react2['default'].createElement(
                'a', {
                  style: styles.email_line_link,
                  target: '_blank',
                  href: 'mailto:hello@visualping.io'
                },
                'hello@visualping.io'
              )
            )
          );
        }
      }]);

      var _Survey = Survey;
      Survey = (0, _radium2['default'])(Survey) || Survey;
      return Survey;
    })(_react.Component);

    exports['default'] = Survey;

    var styles = {
      wrapper: {
        minHeight: 300,
        padding: '32px 8px',
        textAlign: 'center'
      },
      h1: {
        marginTop: 48,
        color: '#716969'
      },
      p: {
        color: '#9B9B9B',
        width: '80%',
        margin: '0 auto'
      },
      actions: {
        margin: 48
      },
      button: {
        margin: 16,
        color: 'white',
        borderRadius: 4,
        fontSize: 16,
        backgroundColor: '#46A9E2',
        padding: '8px 16px 9px',
        top: -5,
        position: 'relative',
        textDecoration: 'none',
        outline: 'none',
        ':hover': {
          cursor: 'pointer'
        }
      },
      green_button: {
        backgroundColor: '#23AF54',
        ':hover': {
          backgroundColor: (0, _color2['default'])('#23AF54').darken(0.2).hexString()
        }
      },
      red_button: {
        backgroundColor: '#F34242',
        ':hover': {
          backgroundColor: (0, _color2['default'])('#F34242').darken(0.2).hexString()
        }
      },
      email_line: {
        marginTop: 32,
        fontSize: 12,
        color: '#9B9B9B'
      },
      email_line_link: {
        color: '#9B9B9B',
        textDecoration: 'underline'
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 472 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var _color = __webpack_require__(429);

    var _color2 = _interopRequireDefault(_color);

    var Upgraded = (function(_Component) {
      _inherits(Upgraded, _Component);

      _createClass(Upgraded, null, [{
        key: 'propTypes',
        value: {
          pm_user: _react2['default'].PropTypes.bool.isRequired,
          continueAction: _react2['default'].PropTypes.func.isRequired
        },
        enumerable: true
      }]);

      function Upgraded(props) {
        _classCallCheck(this, _Upgraded);

        _get(Object.getPrototypeOf(_Upgraded.prototype), 'constructor', this).call(this, props);
        this.state = this.props;
        this.handleContinueAction = this.handleContinueAction.bind(this);
        // Not passed through props at this time
        this.previousVersion = localStorage.getItem('previous_version');
      }

      _createClass(Upgraded, [{
        key: 'handleContinueAction',
        value: function handleContinueAction(e) {
          e.preventDefault();
          this.props.continueAction();
        }
      }, {
        key: 'render',
        value: function render() {
          if (this.previousVersion == '4.1.3') {
            return this.renderPickerPreview_4_1_4();
          }

          if (this.props.pm_user) {
            return this.renderPageMonitor();
          } else {
            return this.renderVisualping();
          }
        }
      }, {
        key: 'renderPageMonitor',
        value: function renderPageMonitor() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'div', { style: styles.title },
              _react2['default'].createElement('img', { style: styles.pagemon_plugin, src: 'img/pagemonitor-chrome-plugin.png' }),
              _react2['default'].createElement(
                'h1', { style: styles.h1 },
                'Page Monitor is',
                _react2['default'].createElement('br', null),
                'now Visualping'
              )
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'Dear Page Monitor user,'
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'Page Monitor and Visualping have joined forces to develop a Chrome app that combines:'
            ),
            _react2['default'].createElement(
              'ul', { style: styles.ul },
              _react2['default'].createElement(
                'li',
                null,
                _react2['default'].createElement(
                  'strong',
                  null,
                  'Browser'
                ),
                ' monitoring of Page Monitor'
              ),
              _react2['default'].createElement(
                'li',
                null,
                _react2['default'].createElement(
                  'strong',
                  null,
                  'Server'
                ),
                ' monitoring, ',
                _react2['default'].createElement(
                  'strong',
                  null,
                  'email alerts'
                ),
                ' and UX of Visualping'
              )
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'This is an auto upgrade. Page Monitor app is available ',
              _react2['default'].createElement(
                'a', { href: 'https://chrome.google.com/webstore/detail/page-monitor/ogeebjpdeabhncjpfhgdibjajcajepgg', target: '_blank', style: styles.email_line_link },
                'here'
              ),
              '. Transfer jobs with the export/import function in Settings.'
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'Please write us ',
              _react2['default'].createElement(
                'a', { href: 'mailto:hello@visualping.io', target: '_blank', style: styles.email_line_link },
                'hello@visualping.io'
              ),
              ' if you have any questions.'
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'We hope you like the new app!'
            ),
            _react2['default'].createElement(
              'div', { className: 'actions', style: styles.actions },
              _react2['default'].createElement(
                'a', {
                  key: 'learn-more',
                  style: [styles.button, styles.green_button],
                  href: 'http://visualping.io/welcome-pagemonitor',
                  target: '_blank'
                },
                'Learn more'
              ),
              _react2['default'].createElement(
                'a', {
                  href: '#',
                  key: 'continue',
                  style: [styles.button],
                  onClick: this.handleContinueAction
                },
                'Continue'
              )
            )
          );
        }
      }, {
        key: 'renderVisualping',
        value: function renderVisualping() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'div', { style: styles.title },
              _react2['default'].createElement('img', { style: styles.caution, src: 'img/caution@2x.png', width: '44' }),
              _react2['default'].createElement(
                'h1', { style: styles.h1 },
                'Software',
                _react2['default'].createElement('br', null),
                'upgrade'
              )
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'Dear Visualping / Page Monitor user,'
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'This is a new version of Visualping that includes important upgrades to the Browser tab:'
            ),
            _react2['default'].createElement(
              'ul', { style: styles.ul },
              _react2['default'].createElement(
                'li',
                null,
                'Option to select a web-page element to be checked'
              ),
              _react2['default'].createElement(
                'li',
                null,
                'Text difference in addition to visual difference'
              ),
              _react2['default'].createElement(
                'li',
                null,
                'Settings and control panel with import/export function'
              ),
              _react2['default'].createElement(
                'li',
                null,
                'Removal of flashing (for those upgrading from v 4.1.0)'
              )
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'Do not hesitate to write at ',
              _react2['default'].createElement(
                'a', { href: 'mailto:hello@visualping.io', target: '_blank', style: styles.email_line_link },
                'hello@visualping.io'
              ),
              ' if you have any questions.'
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'We hope you like the new app!'
            ),
            _react2['default'].createElement(
              'div', { className: 'actions', style: styles.actions },
              _react2['default'].createElement(
                'a', {
                  href: '#',
                  key: 'continue',
                  style: [styles.button],
                  onClick: this.handleContinueAction
                },
                'OK'
              )
            )
          );
        }
      }, {
        key: 'renderPickerPreview_4_1_4',
        value: function renderPickerPreview_4_1_4() {
          return _react2['default'].createElement(
            'div', { style: styles.wrapper },
            _react2['default'].createElement(
              'div', { style: styles.title },
              _react2['default'].createElement(
                'h1', { style: styles.h1 },
                'New version uploaded'
              )
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'Fixes an incompatibility with Windows OS and the Pick Element feature in Browser mode.'
            ),
            _react2['default'].createElement(
              'p', { style: [styles.p, styles.title] },
              _react2['default'].createElement('img', { src: 'img/picker-preview-4.1.4.png' })
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'Do not hesitate to write at ',
              _react2['default'].createElement(
                'a', { href: 'mailto:hello@visualping.io', target: '_blank', style: styles.email_line_link },
                'hello@visualping.io'
              ),
              ' if you have any questions.'
            ),
            _react2['default'].createElement(
              'p', { style: styles.p },
              'We hope you like the new app!'
            ),
            _react2['default'].createElement(
              'div', { className: 'actions', style: styles.actions },
              _react2['default'].createElement(
                'a', {
                  href: '#',
                  key: 'continue',
                  style: [styles.button],
                  onClick: this.handleContinueAction
                },
                'OK'
              )
            )
          );
        }
      }]);

      var _Upgraded = Upgraded;
      Upgraded = (0, _radium2['default'])(Upgraded) || Upgraded;
      return Upgraded;
    })(_react.Component);

    exports['default'] = Upgraded;

    var styles = {
      wrapper: {
        minHeight: 300,
        padding: '16px 8px',
        textAlign: 'left'
      },
      title: {
        width: '80%',
        textAlign: 'center',
        margin: '16px auto 32px'
      },
      h1: {
        color: '#716969',
        display: 'inline-block',
        padding: 0,
        margin: 0,
        marginLeft: 8,
        verticalAlign: 'top',
        lineHeight: 1.4
      },
      pagemon_plugin: {
        display: 'inline-block'
      },
      caution: {
        display: 'inline-block',
        marginTop: '10px'
      },
      centered: {
        textAlign: 'center'
      },
      p: {
        color: '#9B9B9B',
        width: '80%',
        margin: '8px auto',
        lineHeight: 1.4
      },
      ul: {
        color: '#9B9B9B',
        width: '80%',
        paddingLeft: 64,
        margin: '16px auto'
      },
      email_line: {
        marginTop: 32,
        fontSize: 12,
        color: '#9B9B9B'
      },
      email_line_link: {
        color: '#9B9B9B',
        textDecoration: 'underline',
        outline: 'none'
      },
      actions: {
        textAlign: 'center',
        margin: '48px auto'
      },
      button: {
        margin: 16,
        width: '100px',
        display: 'inline-block',
        color: 'white',
        borderRadius: 4,
        fontSize: 16,
        backgroundColor: '#46A9E2',
        padding: '8px 16px 9px',
        top: -5,
        position: 'relative',
        textDecoration: 'none',
        outline: 'none',
        ':hover': {
          cursor: 'pointer',
          backgroundColor: (0, _color2['default'])('#46A9E2').darken(0.2).hexString()
        }
      },
      green_button: {
        backgroundColor: '#23AF54',
        ':hover': {
          backgroundColor: (0, _color2['default'])('#23AF54').darken(0.2).hexString()
        }
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 473 */
  /***/
  (function(module, exports, __webpack_require__) {

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var Alert = (function(_Component) {
      _inherits(Alert, _Component);

      _createClass(Alert, null, [{
        key: "propTypes",
        value: {
          message: _react2["default"].PropTypes.string,
          clear_action: _react2["default"].PropTypes.func
        },
        enumerable: true
      }]);

      function Alert(props) {
        _classCallCheck(this, Alert);

        _get(Object.getPrototypeOf(Alert.prototype), "constructor", this).call(this, props);
        this.state = this.props;
      }

      _createClass(Alert, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          var _this = this;

          setTimeout((function() {
            _this.props.clear_action();
          }).bind(this), 2000);
        }
      }, {
        key: "render",
        value: function render() {
          if (this.props.message && !(this.props.message === "")) {
            return _react2["default"].createElement(
              "div", { className: "alert", style: styles.alert },
              this.props.message
            );
          } else {
            return _react2["default"].createElement("div", null);
          }
        }
      }]);

      return Alert;
    })(_react.Component);

    exports["default"] = Alert;

    var styles = {
      alert: {
        color: 'white',
        width: '100%',
        height: 42,
        textAlign: 'center',
        lineHeight: '42px',
        backgroundColor: '#F34242',
        border: '1px solid #FF9A9A'
      }
    };
    module.exports = exports["default"];

    /***/
  }),
  /* 474 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
          property = _x2,
          receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) { return undefined; } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); }
      }
    };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _radium = __webpack_require__(408);

    var _radium2 = _interopRequireDefault(_radium);

    var Footer = (function(_Component) {
      _inherits(Footer, _Component);

      _createClass(Footer, null, [{
        key: 'propTypes',
        value: {
          jobAction: _react.PropTypes.func.isRequired,
          muteAction: _react.PropTypes.func.isRequired,
          unmuteAction: _react.PropTypes.func.isRequired,
          tab: _react2['default'].PropTypes.oneOf(['browser-tab', 'server-tab']).isRequired,
          page: _react2['default'].PropTypes.oneOf(['capture', 'jobs', 'updates', 'settings']).isRequired,
          settings: _react2['default'].PropTypes.object.isRequired
        },
        enumerable: true
      }]);

      function Footer(props) {
        _classCallCheck(this, _Footer);

        _get(Object.getPrototypeOf(_Footer.prototype), 'constructor', this).call(this, props);
        this.dashboard_url = 'https://visualping.io/jobs/';
        this.handleJobsClick = this.handleJobsClick.bind(this);
        this.handleSoundClick = this.handleSoundClick.bind(this);
      }

      _createClass(Footer, [{
        key: 'handleJobsClick',
        value: function handleJobsClick(e) {
          e.preventDefault();
          this.props.jobAction();
        }
      }, {
        key: 'handleSoundClick',
        value: function handleSoundClick(e) {
          e.preventDefault();

          if (this.soundEnabled()) {
            this.props.muteAction();
          } else {
            this.props.unmuteAction();
          }
        }
      }, {
        key: 'soundEnabled',
        value: function soundEnabled() {
          return this.props.settings.sound_enabled === 'Enabled';
        }
      }, {
        key: 'render',
        value: function render() {
          if (['capture', 'settings'].includes(this.props.page)) {
            return _react2['default'].createElement(
              'div', { className: 'row', style: styles.wrapper },
              this.renderPageMonitorLink(),
              this.renderAboutVisualpingLink()
            );
          }

          return false;
        }
      }, {
        key: 'renderSoundSetting',
        value: function renderSoundSetting() {
          var soundClass = this.soundEnabled() ? 'sound_active' : 'sound_disabled';
          return _react2['default'].createElement('a', { href: '', onClick: this.handleSoundClick, style: [styles.sound_button, styles[soundClass]] });
        }
      }, {
        key: 'renderPageMonitorLink',
        value: function renderPageMonitorLink() {
          var pmUser = ['true', true].includes(localStorage.getItem('pm_user'));
          if (pmUser) {
            return _react2['default'].createElement(
              'a', { href: 'http://visualping.io/welcome-pagemonitor', target: '_blank', style: styles.pagemonitor_link },
              'PageMonitor users'
            );
          }
        }
      }, {
        key: 'renderAboutVisualpingLink',
        value: function renderAboutVisualpingLink() {
          return _react2['default'].createElement(
            'a', { href: 'http://visualping.io', target: '_blank', style: styles.footer_link },
            'About VisualPing'
          );
        }
      }]);

      var _Footer = Footer;
      Footer = (0, _radium2['default'])(Footer) || Footer;
      return Footer;
    })(_react.Component);

    exports['default'] = Footer;

    var styles = {
      wrapper: {
        width: 392,
        margin: '8px auto 16px',
        position: 'relative',
        height: '1em'
      },
      footer_link: {
        display: 'block',
        width: '100%',
        verticalAlign: 'middle',
        paddingBottom: '16px',
        fontSize: 10,
        color: '#9B9B9B',
        textAlign: 'right',
        outline: 'none'
      },
      sound_button: {
        display: 'block',
        width: 18,
        height: 16,
        backgroundImage: 'url("img/sound-on-off.png")',
        backgroundRepeat: 'no-repeat',
        position: 'absolute',
        top: 0,
        right: 0
      },
      sound_active: {
        backgroundPositionX: '-18px'
      },
      sound_disabled: {},
      pagemonitor_link: {
        display: 'inline-block',
        position: 'absolute',
        top: 0,
        left: 0,
        fontSize: 10,
        color: '#9B9B9B',
        outline: 'none'
      }
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 475 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    exports.viewJobs = viewJobs;
    exports.viewUpdates = viewUpdates;
    exports.viewCapture = viewCapture;
    exports.viewOptions = viewOptions;
    exports.loadJobs = loadJobs;
    exports.loadBrowserJobs = loadBrowserJobs;
    exports.loadUpdates = loadUpdates;
    exports.loadBrowserUpdates = loadBrowserUpdates;
    exports.loadLatestCaptures = loadLatestCaptures;
    exports.loadCapturesForUpdate = loadCapturesForUpdate;
    exports.loadJobForUpdate = loadJobForUpdate;
    exports.viewUpdateUrlAndMarkRead = viewUpdateUrlAndMarkRead;
    exports.openUpdateAndMarkRead = openUpdateAndMarkRead;
    exports.markUpdateAsRead = markUpdateAsRead;
    exports.setCurrentSelector = setCurrentSelector;
    exports.initializePicker = initializePicker;
    exports.setCurrentCrop = setCurrentCrop;
    exports.initiateCroppedPreview = initiateCroppedPreview;
    exports.setCroppedPreview = setCroppedPreview;
    exports.setCurrentCaptureInfo = setCurrentCaptureInfo;
    exports.takeScreenshot = takeScreenshot;
    exports.saveJob = saveJob;
    exports.saveServerJob = saveServerJob;
    exports.saveVisualJob = saveVisualJob;
    exports.updateVisualJob = updateVisualJob;
    exports.updateJob = updateJob;
    exports.deleteJob = deleteJob;
    exports.selectTab = selectTab;
    exports.clearLastError = clearLastError;
    exports.updateSettings = updateSettings;
    exports.mute = mute;
    exports.unmute = unmute;
    exports.scheduleCheck = scheduleCheck;
    exports.viewAllUpdates = viewAllUpdates;
    exports.checkAllNow = checkAllNow;
    exports.surveyAnswerSatisfied = surveyAnswerSatisfied;
    exports.surveyAnswerFeedback = surveyAnswerFeedback;
    exports.surveyAnswerSurvey = surveyAnswerSurvey;
    exports.upgradeMessageViewed = upgradeMessageViewed;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    var _constantsActionTypes = __webpack_require__(476);

    var types = _interopRequireWildcard(_constantsActionTypes);

    var _jquery = __webpack_require__(203);

    var _jquery2 = _interopRequireDefault(_jquery);

    var _servicesVisualJobService = __webpack_require__(198);

    var _servicesVisualJobService2 = _interopRequireDefault(_servicesVisualJobService);

    var _servicesUpdateService = __webpack_require__(197);

    var _servicesUpdateService2 = _interopRequireDefault(_servicesUpdateService);

    var _servicesSelectorService = __webpack_require__(477);

    var _servicesSelectorService2 = _interopRequireDefault(_servicesSelectorService);

    var _servicesPickerService = __webpack_require__(205);

    var _servicesPickerService2 = _interopRequireDefault(_servicesPickerService);

    var _servicesPageCheck = __webpack_require__(206);

    var PageCheck = _interopRequireWildcard(_servicesPageCheck);

    var _servicesScreenshotService = __webpack_require__(202);

    var ScreenshotService = _interopRequireWildcard(_servicesScreenshotService);

    var _constantsAppConstants = __webpack_require__(208);

    var AppConstants = _interopRequireWildcard(_constantsAppConstants);

    var _servicesSurveyService = __webpack_require__(209);

    var SurveyService = _interopRequireWildcard(_servicesSurveyService);

    var _servicesAmplitudeService = __webpack_require__(214);

    var amplitudeService = _interopRequireWildcard(_servicesAmplitudeService);

    // Allow rest of file to execute before Amplitude
    setTimeout(function() {
      amplitudeService.setupAmplitude();
      amplitudeService.trackPageMonitorUser();
    }, 500);

    var visualJobService = new _servicesVisualJobService2['default']();
    var updateService = new _servicesUpdateService2['default']();

    // Get background page so we can tell watchdog to schedule after job updates
    var BG = chrome.extension.getBackgroundPage();

    function viewJobs() {
      return {
        type: types.VIEW_JOBS
      };
    }

    function viewUpdates() {
      return {
        type: types.VIEW_UPDATES
      };
    }

    function viewCapture() {
      return {
        type: types.VIEW_CAPTURE
      };
    }

    function viewOptions() {
      return {
        type: types.VIEW_OPTIONS
      };
    }

    function loadJobs() {
      return function(dispatch, getState) {
        dispatch(loadBrowserJobs(dispatch));
      };
    }

    function loadBrowserJobs(dispatch) {
      var promise = new Promise(function(resolve, reject) {
        visualJobService.getAllJobs(function(jobs) {
          if (jobs) {
            jobs.map(function(job) {
              dispatch(loadLatestCaptures(job.job_id));
            });
            resolve(jobs);
          } else {
            reject(Error("Job's could not be retrieved."));
          }
        });
      });

      return {
        type: types.LOAD_BROWSER_JOBS,
        promise: promise
      };
    }

    function loadUpdates() {
      return function(dispatch, getState) {
        dispatch(loadBrowserUpdates(dispatch));
      };
    }

    function loadBrowserUpdates(dispatch) {
      var promise = new Promise(function(resolve, reject) {
        var updates = updateService.getAllUpdates();
        updates.map(function(update) {
          dispatch(loadCapturesForUpdate(update));
          dispatch(loadJobForUpdate(update));
        });

        resolve(updates);
      });

      return {
        type: types.LOAD_BROWSER_UPDATES,
        promise: promise
      };
    }

    function loadLatestCaptures(jobID) {
      var promise = new Promise(function(resolve, reject) {
        visualJobService.loadLatestCapturesFor(jobID, function(captures) {
          if (captures) {
            resolve(captures);
          } else {
            reject(Error("Couldn't load captures"));
          }
        });
      });

      return {
        type: types.LOAD_LATEST_CAPTURES,
        promise: promise
      };
    }

    function loadCapturesForUpdate(update) {
      var promise = new Promise(function(resolve, reject) {
        visualJobService.loadLatestCapturesFor(update.job_id, function(captures) {
          if (captures) {
            resolve({ update: update, captures: captures });
          } else {
            reject(Error("Couldn't load captures for update"));
          }
        });
      });

      return {
        type: types.LOAD_CAPTURES_FOR_UPDATE,
        promise: promise
      };
    }

    function loadJobForUpdate(update) {
      var promise = new Promise(function(resolve, reject) {
        visualJobService.getJobByID(update.job_id, function(job) {
          if (job) {
            resolve(job);
          } else {
            reject(Error("Job could not be retrieved."));
          }
        });
      });

      return {
        type: types.LOAD_JOB_FOR_UPDATE,
        promise: promise
      };
    }

    function viewUpdateUrlAndMarkRead(update) {
      updateService.remove({ job_id: update.job_id });
      chrome.windows.create({ url: update.url, type: 'normal' });
      return {
        type: 'VIEW_UPDATE_URL_AND_MARK_READ'
      };
    }

    function openUpdateAndMarkRead(update) {
      SurveyService.countCheck();

      BG.openUpdateAndMarkRead(update);
      return {
        type: 'OPEN_AND_MARK_UPDATE_AS_READ'
      };
    }

    function markUpdateAsRead(update) {
      updateService.remove({ job_id: update.job_id });

      return {
        type: types.MARK_UPDATE_AS_READ,
        job_id: update.job_id
      };
    }

    // Asks the page for an element ID that contains the cropped region

    function setCurrentSelector(crop) {
      var promise = new Promise(function(resolve, reject) {
        chrome.tabs.getSelected(null, function(tab) {
          var selectorService = new _servicesSelectorService2['default'](tab.id);
          selectorService.getSelectorForCrop(crop, function(selector) {
            if (selector) {
              resolve(selector);
            } else {
              reject('Nothing Found');
            }
          });
        });
      });

      return {
        type: types.SET_CURRENT_SELECTOR,
        promise: promise
      };
    }

    function initializePicker() {
      return function(dispatch, getState) {
        chrome.tabs.getSelected(null, function(tab) {
          var data = {
            checkInterval: getState().visualApp.currentCapture.checkInterval,
            checkIntervalType: getState().visualApp.currentCapture.checkIntervalType
          };
          BG.pickerInit(tab.id, data);
          setTimeout(window.close, 250);
        });
      };
    }

    function setCurrentCrop(crop) {
      return {
        type: types.SET_CURRENT_CROP,
        crop: crop
      };
    }

    function initiateCroppedPreview(imgParam, cropParam) {
      return function(dispatch, getState) {
        var img = imgParam || getState().visualApp.currentCapture.img;
        var crop = cropParam || getState().visualApp.currentCapture.crop;
        // console.log('crop', crop);
        // console.log('img', img);
        dispatch(setCroppedPreview(img, crop));
      };
    }

    // Use canvas to render a cropped thumbnail of selected area.
    // Will be stored first capture upon save

    function setCroppedPreview(img, crop) {
      var _this = this;

      var promise = new Promise(function(resolve, reject) {

        // We'll just scale if retina instead of cropping to selection
        var params = {
          options: {
            rect: {
              x: 0, // crop.x,
              y: 0, // crop.y,
              width: crop.orig_width, // crop.width,
              height: crop.orig_height // crop.height
            }
          }
        };

        // Pixel density for crop should be same as pop-up
        var ratio = window.devicePixelRatio || 1;
        var canvas = ScreenshotService.crop(img, params, ratio);

        if (canvas) {
          var afterCanvasDidLoad = function afterCanvasDidLoad(canvas) {
            var data = canvas.toDataURL("image/png");
            // console.log('data for cropped preview', data);
            resolve({ url: data });
          };
          setTimeout(afterCanvasDidLoad.bind(_this, canvas), 1000);
        } else {
          reject(Error("Couldn't create cropped canvas"));
        }
      });

      return {
        type: types.SET_CROPPED_PREVIEW,
        promise: promise
      };
    }

    function setCurrentCaptureInfo(info) {
      return {
        type: types.SET_CURRENT_CAPTURE_INFO,
        info: info
      };
    }

    function takeScreenshot() {
      var callback = arguments.length <= 0 || arguments[0] === undefined ? function() {} : arguments[0];

      var promise = new Promise(function(resolve, reject) {
        ScreenshotService.takeScreenshotReal(function(img) {
          var id = Date.now();
          if (img) {
            setScreenshotUrl(img);
            resolve({ url: img });
            callback(img); // You can dispatch other actions from here
          } else {
            reject(Error('It broke'));
          }
        });
      });

      return {
        type: types.TAKE_SCREENSHOT,
        promise: promise
      };
    }

    function saveJob(job) {
      return function(dispatch, getState) {
        switch (getState().visualApp.tab) {
          case 'server-tab':
            dispatch(saveServerJob(job));
            break;
          case 'browser-tab':
            dispatch(saveVisualJob(job));
            break;
          default:
            Error("Could not find tab setting to route saving of job");
            break;
        }
      };
    }

    function validateEmail(email) {
      var re = /^([\w-]+(?:\.[\w-+]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
      return re.test(email);
    }

    function saveServerJob(job) {
      var promise = new Promise(function(resolve, reject) {
        chrome.tabs.getSelected(null, function(tab) {
          job.url = tab.url;

          // Email Validation
          if (!validateEmail(job.email)) {
            var errorMsg = 'Please enter a valid Email address.';
            // if ( /\+/.test(job.email) ) { errorMsg += ' (without +)'; }

            resolve({ success: false, error: errorMsg });
            return;
          }

          // Set last email so next time popup is populated. Pun intended.
          localStorage.setItem('last_email', job.email);

          var isPagemonitorUser = localStorage.getItem('pm_user') === 'true';

          // Determine supported cloud interval value
          var interval = 60;
          switch (job.checkIntervalType) {
            case 'Hour':
              interval = 60;
              break;
            case 'Day':
              interval = 1440;
              break;
            case 'Week':
              interval = 10080;
              break;
          }

          job.check_interval = interval;

          var trigger = 10;
          switch (job.trigger) {
            case 'Tiny Change':
              trigger = 1;
              break;
            case 'Medium Change':
              trigger = 10;
              break;
            case 'Major Change':
              trigger = 25;
              break;
            default:
              trigger = 10;
              break;
          }

          var crop = {};
          if (job.crop.selection !== true) {
            // Select whole page
            // Document Height has proved to be unreliable so we will set to NULL
            // so that the server can determine document height its self
            crop = null;

            // Server width is limited to 1185px
            // Select 1px less to support crop tool
            // let normalizedWidth = job.crop.document_width > 1184 ? 1184 : job.crop.document_width;
            //
            // crop.x = 0;
            // crop.y = 0;
            // crop.width = normalizedWidth;
            // crop.height = job.crop.document_height;
          } else {
            // Select area including scroll_top
            // Server width is limited to 1185px
            // Select 1px less to support crop tool
            var x = job.crop.x;
            var width = job.crop.width;
            if (job.crop.width + job.crop.x > 1184) {
              var overagePercent = 1184 / (job.crop.width + job.crop.x);
              x = Math.round(job.crop.x * overagePercent);
              width = Math.round(job.crop.width * overagePercent);
            }

            crop.x = x;
            crop.y = job.crop.scroll_top + job.crop.y;
            crop.width = width;
            crop.height = job.crop.height;
          }

          var request = {
            active: true,
            origin: 'chrome',
            email: job.email,
            url: job.url,
            interval: '' + interval,
            trigger: '' + trigger,
            crop: crop,
            pagemonitor_customer: isPagemonitorUser,
            renderer_primary: "PUPPETEER",
            wait_time: 2,
            xpath: null,
            xpath_coordinates: null,
            site_referrer: "direct",
            mode: "VISUAL",
            target_device: "1",
            description: ""
          };

          _jquery2['default'].ajax({
            url: ("https://api.visualping.io") + "/v2/jobs/",
            type: "POST",
            data: JSON.stringify(request),
            "headers": {
              "Content-Type": "application/json"
            },
            success: function success(data) {
              SurveyService.countJobCreated();
              var displaySurvey = SurveyService.shouldDisplaySurvey();
              if (displaySurvey) {
                SurveyService.countSurveyDisplay();
              }
              resolve(_extends({ success: true, display_survey: displaySurvey }, data));
              amplitudeService.trackEmail(job.email);
              amplitudeService.trackJobAdded(job, 'server');
            },
            error: function error(obj, errorMsg) {
              if (obj && obj.responseJSON && obj.responseJSON.message === "Cannot create job in current flow") {
                var result = confirm("Our Chrome extension doesn't support business accounts. Please retry using a personal account or click Ok to create your job from the Visualping dashboard. Apologies for the inconvenience.");
                if (result) {
                  window.open("https://visualping.io/login", '_blank');
                }
              } else {
                alert("Job creation failed");
              }
              // TODO: display an alert/error message such as "If e-mail address ${email} is attached to an
              //       existing business account, we recommend that you log in to https://visualping.io and retry
              //       creating your job from the dashboard."
              reject(Error(errorMsg));
            }
          });
        });
      });

      return {
        type: types.SERVER_JOB_SAVED,
        promise: promise
      };
    }

    function saveVisualJob(job) {
      // Save to DB
      // Note: See PickerService for alternate implementation
      var promise = new Promise(function(resolve, reject) {
        var _this2 = this;

        chrome.tabs.getSelected(null, function(tab) {
          if (tab) {
            job.id = Date.now();
            job.url = tab.url;
            job.name = tab.title;

            chrome.tabs.executeScript(tab.id, { code: 'document.documentElement.innerHTML;' }, function(response) {
              // Set HTML to be used in capture
              job.html = response[0];
            });

            // Handle full page check if no selection
            if (job.crop.selection !== true) {
              job.mode = 'text';
              job.selector = null;
            }

            visualJobService.jobIsUnique(job, function(response) {
              if (response.success === true) {
                visualJobService.insertJob(job);
                visualJobService.insertCapture(job);
                SurveyService.countJobCreated();
                // Schedule Check giving time to insert
                setTimeout((function() {
                  BG.watchdog.scheduleCheck();
                }).bind(_this2), 500);

                var _displaySurvey = SurveyService.shouldDisplaySurvey();
                if (_displaySurvey) {
                  SurveyService.countSurveyDisplay();
                }
                resolve(_extends({ success: true, display_survey: _displaySurvey }, job));

                // Set the initial CRC for this job
                PageCheck.checkPageHTML(job.url, function() {}, function() {}, true);

                amplitudeService.trackJobAdded(job, 'browser');
              } else {
                resolve(response);
              }
            });
          } else {
            reject(Error("Couldn't get selected tab"));
          }
        });
      });

      var displaySurvey = SurveyService.shouldDisplaySurvey();

      return {
        type: types.SAVE_JOB,
        promise: promise
      };
    }

    function updateVisualJob(jobID, updateState) {
      var _this3 = this;

      return function(dispatch, getState) {
        var jobs = getState().visualApp.browserJobs;
        var jobIndex = Array.findIndex(jobs, function(job) {
          return job.job_id === jobID;
        });

        var newState = _extends({}, jobs[jobIndex], updateState);
        // Update DB
        visualJobService.updateJob(newState);
        // Schedule Check giving time to insert
        setTimeout((function() {
          BG.watchdog.scheduleCheck();
        }).bind(_this3), 500);

        dispatch(updateJob(newState));
      };
    }

    function updateJob(job) {
      return {
        type: types.UPDATE_JOB,
        job: job
      };
    }

    function deleteJob(jobID) {
      var promise = new Promise(function(resolve, reject) {
        visualJobService.deleteJob(jobID, function(id) {
          if (id) {
            updateService.remove({ job_id: jobID });
            resolve(jobID);
          } else {
            reject(Error('Could not delete job \'' + jobID + '\''));
          }
        });
      });

      return {
        type: types.DELETE_JOB,
        promise: promise
      };
    }

    function selectTab(tabName) {
      return {
        type: types.SELECT_TAB,
        tab: tabName
      };
    }

    function clearLastError() {
      localStorage.setItem('last_error', '');

      return {
        type: types.CLEAR_LAST_ERROR
      };
    }

    function updateSettings(option) {
      var key = Object.keys(option)[0];
      localStorage.setItem(key, option[key]);

      if (key === 'sound_clip') {
        triggerSound();
      }

      return {
        type: types.UPDATE_SETTINGS,
        option: option
      };
    }

    function mute() {
      localStorage.setItem('sound_enabled', 'Disabled');

      return {
        type: types.MUTE
      };
    }

    function unmute() {
      localStorage.setItem('sound_enabled', 'Enabled');

      return {
        type: types.UNMUTE
      };
    }

    // Useful to schedule checks after import

    function scheduleCheck() {
      BG.watchdog.scheduleCheck();

      return {
        type: 'SCHEDULE_CHECK'
      };
    }

    function viewAllUpdates(updates) {
      BG.openAllUpdates(updates);
      return function(dispatch, getState) {
        updates.map(function(update, i) {
          dispatch(markUpdateAsRead(update)); // Marks read in both service and view
        });
      };
    }

    function checkAllNow() {
      BG.watchdog.checkAllNow();

      return {
        type: 'CHECK_ALL_NOW'
      };
    }

    function surveyAnswerSatisfied(value) {
      // Complete the survey if this is answered since there's no 'No' option
      // for the following questions
      SurveyService.surveyComplete();

      amplitudeService.trackSurveySatisfied(value);

      return {
        type: types.SURVEY_ANSWER_SATISFIED,
        value: value
      };
    }

    function surveyAnswerFeedback(value) {
      var id = chrome.runtime.id;
      var url = 'https://chrome.google.com/webstore/detail/visualping/' + id + '/reviews';
      chrome.windows.create({ url: url, type: 'normal', width: 1080, height: 700 });

      SurveyService.countWillGiveFeedback();

      amplitudeService.trackSurveyWillGiveFeedback(value);

      return {
        type: types.SURVEY_ANSWER_FEEDBACK,
        value: value
      };
    }

    function surveyAnswerSurvey(value) {
      var url = "https://docs.google.com/a/visualping.io/forms/d/12iYqC1eEvZYzrbWKcJptMjwSdK_obkEOwgyNo9sdPuo/viewform?c=0&w=1";
      chrome.windows.create({ url: url, type: 'normal', width: 750, height: 700 });

      SurveyService.countWillFillSurvey();

      amplitudeService.trackSurveyWillFillSurvey(value);

      return {
        type: types.SURVEY_ANSWER_SURVEY,
        value: value
      };
    }

    function upgradeMessageViewed() {
      localStorage.setItem('display_upgraded', false);
      // Just return view capture to reducer
      return {
        type: types.VIEW_CAPTURE
      };
    }

    function triggerSound() {
      var audioOption = localStorage.getItem('sound_clip');
      var audioSrc = AppConstants.SOUND_CLIP_OPTIONS_MAP.filter(function(option) {
        if (option.option === audioOption) {
          return true;
        }
      })[0].src;
      var audio = new Audio(audioSrc);
      audio.addEventListener('canplaythrough', function() {
        if (audio) {
          if (audio.loop) audio.loop = false;
          audio.play();
          audio = null;
        }
      });
    }

    function setScreenshotUrl(url, title) {
      document.getElementById('target').src = url;
      chrome.tabs.getSelected(function(tab) {
        // null defaults to current window
        var tabTitle = tab.title;
        (0, _jquery2['default'])('.title').text(tabTitle);
      });
    }

    /***/
  }),
  /* 476 */
  /***/
  (function(module, exports) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var VIEW_JOBS = 'VIEW_JOBS';
    exports.VIEW_JOBS = VIEW_JOBS;
    var VIEW_UPDATES = 'VIEW_UPDATES';
    exports.VIEW_UPDATES = VIEW_UPDATES;
    var VIEW_CAPTURE = 'VIEW_CAPTURE';
    exports.VIEW_CAPTURE = VIEW_CAPTURE;
    var VIEW_OPTIONS = 'VIEW_OPTIONS';
    exports.VIEW_OPTIONS = VIEW_OPTIONS;
    var LOAD_BROWSER_JOBS = 'LOAD_BROWSER_JOBS';
    exports.LOAD_BROWSER_JOBS = LOAD_BROWSER_JOBS;
    var LOAD_BROWSER_UPDATES = 'LOAD_BROWSER_UPDATES';
    exports.LOAD_BROWSER_UPDATES = LOAD_BROWSER_UPDATES;
    var LOAD_LATEST_CAPTURES = 'LOAD_LATEST_CAPTURES';
    exports.LOAD_LATEST_CAPTURES = LOAD_LATEST_CAPTURES;
    var LOAD_CAPTURES_FOR_UPDATE = 'LOAD_CAPTURES_FOR_UPDATE';
    exports.LOAD_CAPTURES_FOR_UPDATE = LOAD_CAPTURES_FOR_UPDATE;
    var LOAD_JOB_FOR_UPDATE = 'LOAD_JOB_FOR_UPDATE';
    exports.LOAD_JOB_FOR_UPDATE = LOAD_JOB_FOR_UPDATE;
    var MARK_UPDATE_AS_READ = 'MARK_UPDATE_AS_READ';
    exports.MARK_UPDATE_AS_READ = MARK_UPDATE_AS_READ;
    var TAKE_SCREENSHOT = 'TAKE_SCREENSHOT';
    exports.TAKE_SCREENSHOT = TAKE_SCREENSHOT;
    var SET_CURRENT_CROP = 'SET_CURRENT_CROP';
    exports.SET_CURRENT_CROP = SET_CURRENT_CROP;
    var SET_CURRENT_SELECTOR = 'SET_CURRENT_SELECTOR';
    exports.SET_CURRENT_SELECTOR = SET_CURRENT_SELECTOR;
    var SET_CROPPED_PREVIEW = 'SET_CROPPED_PREVIEW';
    exports.SET_CROPPED_PREVIEW = SET_CROPPED_PREVIEW;
    var SET_CURRENT_CAPTURE_INFO = 'SET_CURRENT_CAPTURE_INFO';
    exports.SET_CURRENT_CAPTURE_INFO = SET_CURRENT_CAPTURE_INFO;
    var SAVE_JOB = 'SAVE_JOB';
    exports.SAVE_JOB = SAVE_JOB;
    var SERVER_JOB_SAVED = 'SERVER_JOB_SAVED';
    exports.SERVER_JOB_SAVED = SERVER_JOB_SAVED;
    var UPDATE_JOB = 'UPDATE_JOB';
    exports.UPDATE_JOB = UPDATE_JOB;
    var DELETE_JOB = 'DELETE_JOB';
    exports.DELETE_JOB = DELETE_JOB;
    var SELECT_TAB = 'SELECT_TAB';
    exports.SELECT_TAB = SELECT_TAB;
    var CLEAR_LAST_ERROR = 'CLEAR_LAST_ERROR';
    exports.CLEAR_LAST_ERROR = CLEAR_LAST_ERROR;
    var UPDATE_SETTINGS = 'UPDATE_SETTINGS';
    exports.UPDATE_SETTINGS = UPDATE_SETTINGS;
    var MUTE = 'MUTE';
    exports.MUTE = MUTE;
    var UNMUTE = 'UNMUTE';
    exports.UNMUTE = UNMUTE;
    var SURVEY_ANSWER_SATISFIED = 'SURVEY_ANSWER_SATISFIED';
    exports.SURVEY_ANSWER_SATISFIED = SURVEY_ANSWER_SATISFIED;
    var SURVEY_ANSWER_FEEDBACK = 'SURVEY_ANSWER_FEEDBACK';
    exports.SURVEY_ANSWER_FEEDBACK = SURVEY_ANSWER_FEEDBACK;
    var SURVEY_ANSWER_SURVEY = 'SURVEY_ANSWER_SURVEY';
    exports.SURVEY_ANSWER_SURVEY = SURVEY_ANSWER_SURVEY;

    /***/
  }),
  /* 477 */
  /***/
  (function(module, exports) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var SelectorService = (function() {
      function SelectorService(tabID) {
        _classCallCheck(this, SelectorService);

        this.tabID = tabID;
      }

      _createClass(SelectorService, [{
        key: 'getSelectorForCrop',
        value: function getSelectorForCrop(crop, callback) {
          var self = this;
          chrome.tabs.executeScript(self.tabID, { file: 'js/jquery-original.js' }, function() {
            chrome.tabs.executeScript(self.tabID, { file: 'js/selector.js' }, function() {
              chrome.tabs.executeScript(self.tabID, { code: '$(initialize(' + JSON.stringify(crop) + '));' }, function(result) {
                if (result[0]) {
                  callback(result[0].selector);
                } else {
                  callback(null); // could be 'body' if sticking with selectors
                }
              });
            });
          });

          return null;
        }
      }]);

      return SelectorService;
    })();

    exports['default'] = SelectorService;
    module.exports = exports['default'];

    /***/
  }),
  /* 478 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

    var _devTools = __webpack_require__(479);

    exports.devTools = _interopRequire(_devTools);

    var _persistState = __webpack_require__(480);

    exports.persistState = _interopRequire(_persistState);

    /***/
  }),
  /* 479 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    exports['default'] = devTools;
    var ActionTypes = {
      PERFORM_ACTION: 'PERFORM_ACTION',
      RESET: 'RESET',
      ROLLBACK: 'ROLLBACK',
      COMMIT: 'COMMIT',
      SWEEP: 'SWEEP',
      TOGGLE_ACTION: 'TOGGLE_ACTION',
      JUMP_TO_STATE: 'JUMP_TO_STATE',
      SET_MONITOR_STATE: 'SET_MONITOR_STATE',
      RECOMPUTE_STATES: 'RECOMPUTE_STATES'
    };

    var INIT_ACTION = {
      type: '@@INIT'
    };

    function toggle(obj, key) {
      var clone = _extends({}, obj);
      if (clone[key]) {
        delete clone[key];
      } else {
        clone[key] = true;
      }
      return clone;
    }

    /**
     * Computes the next entry in the log by applying an action.
     */
    function computeNextEntry(reducer, action, state, error) {
      if (error) {
        return {
          state: state,
          error: 'Interrupted by an error up the chain'
        };
      }

      var nextState = state;
      var nextError = undefined;
      try {
        nextState = reducer(state, action);
      } catch (err) {
        nextError = err.toString();
        console.error(err.stack || err);
      }

      return {
        state: nextState,
        error: nextError
      };
    }

    /**
     * Runs the reducer on all actions to get a fresh computation log.
     * It's probably a good idea to do this only if the code has changed,
     * but until we have some tests we'll just do it every time an action fires.
     */
    function recomputeStates(reducer, committedState, stagedActions, skippedActions) {
      var computedStates = [];

      for (var i = 0; i < stagedActions.length; i++) {
        var action = stagedActions[i];

        var previousEntry = computedStates[i - 1];
        var previousState = previousEntry ? previousEntry.state : committedState;
        var previousError = previousEntry ? previousEntry.error : undefined;

        var shouldSkip = Boolean(skippedActions[i]);
        var entry = shouldSkip ? previousEntry : computeNextEntry(reducer, action, previousState, previousError);

        computedStates.push(entry);
      }

      return computedStates;
    }

    /**
     * Lifts the app state reducer into a DevTools state reducer.
     */
    function liftReducer(reducer, initialState) {
      var initialLiftedState = {
        committedState: initialState,
        stagedActions: [INIT_ACTION],
        skippedActions: {},
        currentStateIndex: 0,
        monitorState: {
          isVisible: true
        },
        timestamps: [Date.now()]
      };

      /**
       * Manages how the DevTools actions modify the DevTools state.
       */
      return function liftedReducer(liftedState, liftedAction) {
        if (liftedState === undefined) liftedState = initialLiftedState;
        var committedState = liftedState.committedState;
        var stagedActions = liftedState.stagedActions;
        var skippedActions = liftedState.skippedActions;
        var computedStates = liftedState.computedStates;
        var currentStateIndex = liftedState.currentStateIndex;
        var monitorState = liftedState.monitorState;
        var timestamps = liftedState.timestamps;

        switch (liftedAction.type) {
          case ActionTypes.RESET:
            committedState = initialState;
            stagedActions = [INIT_ACTION];
            skippedActions = {};
            currentStateIndex = 0;
            timestamps = [liftedAction.timestamp];
            break;
          case ActionTypes.COMMIT:
            committedState = computedStates[currentStateIndex].state;
            stagedActions = [INIT_ACTION];
            skippedActions = {};
            currentStateIndex = 0;
            timestamps = [liftedAction.timestamp];
            break;
          case ActionTypes.ROLLBACK:
            stagedActions = [INIT_ACTION];
            skippedActions = {};
            currentStateIndex = 0;
            timestamps = [liftedAction.timestamp];
            break;
          case ActionTypes.TOGGLE_ACTION:
            skippedActions = toggle(skippedActions, liftedAction.index);
            break;
          case ActionTypes.JUMP_TO_STATE:
            currentStateIndex = liftedAction.index;
            break;
          case ActionTypes.SWEEP:
            stagedActions = stagedActions.filter(function(_, i) {
              return !skippedActions[i];
            });
            timestamps = timestamps.filter(function(_, i) {
              return !skippedActions[i];
            });
            skippedActions = {};
            currentStateIndex = Math.min(currentStateIndex, stagedActions.length - 1);
            break;
          case ActionTypes.PERFORM_ACTION:
            if (currentStateIndex === stagedActions.length - 1) {
              currentStateIndex++;
            }
            stagedActions = [].concat(stagedActions, [liftedAction.action]);
            timestamps = [].concat(timestamps, [liftedAction.timestamp]);
            break;
          case ActionTypes.SET_MONITOR_STATE:
            monitorState = liftedAction.monitorState;
            break;
          case ActionTypes.RECOMPUTE_STATES:
            stagedActions = liftedAction.stagedActions;
            timestamps = liftedAction.timestamps;
            committedState = liftedAction.committedState;
            currentStateIndex = stagedActions.length - 1;
            skippedActions = {};
            break;
          default:
            break;
        }

        computedStates = recomputeStates(reducer, committedState, stagedActions, skippedActions);

        return {
          committedState: committedState,
          stagedActions: stagedActions,
          skippedActions: skippedActions,
          computedStates: computedStates,
          currentStateIndex: currentStateIndex,
          monitorState: monitorState,
          timestamps: timestamps
        };
      };
    }

    /**
     * Lifts an app action to a DevTools action.
     */
    function liftAction(action) {
      var liftedAction = {
        type: ActionTypes.PERFORM_ACTION,
        action: action,
        timestamp: Date.now()
      };
      return liftedAction;
    }

    /**
     * Unlifts the DevTools state to the app state.
     */
    function unliftState(liftedState) {
      var computedStates = liftedState.computedStates;
      var currentStateIndex = liftedState.currentStateIndex;
      var state = computedStates[currentStateIndex].state;

      return state;
    }

    /**
     * Unlifts the DevTools store to act like the app's store.
     */
    function unliftStore(liftedStore, reducer) {
      return _extends({}, liftedStore, {
        devToolsStore: liftedStore,
        dispatch: function dispatch(action) {
          liftedStore.dispatch(liftAction(action));
          return action;
        },
        getState: function getState() {
          return unliftState(liftedStore.getState());
        },
        getReducer: function getReducer() {
          return reducer;
        },
        replaceReducer: function replaceReducer(nextReducer) {
          liftedStore.replaceReducer(liftReducer(nextReducer));
        }
      });
    }

    /**
     * Action creators to change the DevTools state.
     */
    var ActionCreators = {
      reset: function reset() {
        return { type: ActionTypes.RESET, timestamp: Date.now() };
      },
      rollback: function rollback() {
        return { type: ActionTypes.ROLLBACK, timestamp: Date.now() };
      },
      commit: function commit() {
        return { type: ActionTypes.COMMIT, timestamp: Date.now() };
      },
      sweep: function sweep() {
        return { type: ActionTypes.SWEEP };
      },
      toggleAction: function toggleAction(index) {
        return { type: ActionTypes.TOGGLE_ACTION, index: index };
      },
      jumpToState: function jumpToState(index) {
        return { type: ActionTypes.JUMP_TO_STATE, index: index };
      },
      setMonitorState: function setMonitorState(monitorState) {
        return { type: ActionTypes.SET_MONITOR_STATE, monitorState: monitorState };
      },
      recomputeStates: function recomputeStates(committedState, stagedActions) {
        return {
          type: ActionTypes.RECOMPUTE_STATES,
          committedState: committedState,
          stagedActions: stagedActions
        };
      }
    };

    exports.ActionCreators = ActionCreators;
    /**
     * Redux DevTools middleware.
     */

    function devTools() {
      return function(next) {
        return function(reducer, initialState) {
          var liftedReducer = liftReducer(reducer, initialState);
          var liftedStore = next(liftedReducer);
          var store = unliftStore(liftedStore, reducer);
          return store;
        };
      };
    }

    /***/
  }),
  /* 480 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    exports['default'] = persistState;

    function persistState(sessionId) {
      if (!sessionId) {
        return function(next) {
          return function() {
            return next.apply(undefined, arguments);
          };
        };
      }

      return function(next) {
        return function(reducer, initialState) {
          var key = 'redux-dev-session-' + sessionId;

          var finalInitialState = undefined;
          try {
            finalInitialState = JSON.parse(localStorage.getItem(key)) || initialState;
            next(reducer, initialState);
          } catch (e) {
            console.warn('Could not read debug session from localStorage:', e);
            try {
              localStorage.removeItem(key);
            } finally {
              finalInitialState = undefined;
            }
          }

          var store = next(reducer, finalInitialState);

          return _extends({}, store, {
            dispatch: function dispatch(action) {
              store.dispatch(action);

              try {
                localStorage.setItem(key, JSON.stringify(store.getState()));
              } catch (e) {
                console.warn('Could not write debug session from localStorage:', e);
              }

              return action;
            }
          });
        };
      };
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 481 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _createDevTools = __webpack_require__(482);

    var _createDevTools2 = _interopRequireDefault(_createDevTools);

    var DevTools = _createDevTools2['default'](_react2['default']);
    exports.DevTools = DevTools;

    var _LogMonitor = __webpack_require__(490);

    exports.LogMonitor = _interopRequire(_LogMonitor);

    var _DebugPanel = __webpack_require__(621);

    exports.DebugPanel = _interopRequire(_DebugPanel);

    /***/
  }),
  /* 482 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    exports['default'] = createDevTools;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
      }
      return target;
    }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

    var _reactReduxLibComponentsCreateAll = __webpack_require__(483);

    var _reactReduxLibComponentsCreateAll2 = _interopRequireDefault(_reactReduxLibComponentsCreateAll);

    var _devTools = __webpack_require__(479);

    function createDevTools(React) {
      var PropTypes = React.PropTypes;
      var Component = React.Component;

      var _createAll = _reactReduxLibComponentsCreateAll2['default'](React);

      var Provider = _createAll.Provider;
      var connect = _createAll.connect;

      var DevTools = (function(_Component) {
        _inherits(DevTools, _Component);

        function DevTools() {
          _classCallCheck(this, _DevTools);

          _Component.apply(this, arguments);
        }

        DevTools.prototype.render = function render() {
          var Monitor = this.props.monitor;

          return React.createElement(Monitor, this.props);
        };

        var _DevTools = DevTools;
        DevTools = connect(function(state) {
          return state;
        }, _devTools.ActionCreators)(DevTools) || DevTools;
        return DevTools;
      })(Component);

      return (function(_Component2) {
        _inherits(DevToolsWrapper, _Component2);

        _createClass(DevToolsWrapper, null, [{
          key: 'propTypes',
          value: {
            monitor: PropTypes.func.isRequired,
            store: PropTypes.shape({
              devToolsStore: PropTypes.shape({
                dispatch: PropTypes.func.isRequired
              }).isRequired
            }).isRequired
          },
          enumerable: true
        }]);

        function DevToolsWrapper(props, context) {
          _classCallCheck(this, DevToolsWrapper);

          if (props.store && !props.store.devToolsStore) {
            console.error('Could not find the devTools store inside your store. ' + 'Have you applied devTools() higher-order store?');
          }
          _Component2.call(this, props, context);
          this.renderDevTools = this.renderDevTools.bind(this);
        }

        DevToolsWrapper.prototype.render = function render() {
          var devToolsStore = this.props.store.devToolsStore;

          return React.createElement(
            Provider, { store: devToolsStore },
            this.renderDevTools
          );
        };

        DevToolsWrapper.prototype.renderDevTools = function renderDevTools() {
          var _props = this.props;
          var store = _props.store;

          var rest = _objectWithoutProperties(_props, ['store']);

          return React.createElement(DevTools, rest);
        };

        return DevToolsWrapper;
      })(Component);
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 483 */
  [649, 484, 486],
  /* 484 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    exports['default'] = createProvider;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _utilsCreateStoreShape = __webpack_require__(485);

    var _utilsCreateStoreShape2 = _interopRequireDefault(_utilsCreateStoreShape);

    function createProvider(React) {
      var Component = React.Component;
      var PropTypes = React.PropTypes;

      var storeShape = _utilsCreateStoreShape2['default'](PropTypes);

      return (function(_Component) {
        _inherits(Provider, _Component);

        Provider.prototype.getChildContext = function getChildContext() {
          return { store: this.state.store };
        };

        _createClass(Provider, null, [{
          key: 'childContextTypes',
          value: {
            store: storeShape.isRequired
          },
          enumerable: true
        }, {
          key: 'propTypes',
          value: {
            children: PropTypes.func.isRequired
          },
          enumerable: true
        }]);

        function Provider(props, context) {
          _classCallCheck(this, Provider);

          _Component.call(this, props, context);
          this.state = { store: props.store };
        }

        Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          var store = this.state.store;
          var nextStore = nextProps.store;

          if (store !== nextStore) {
            var nextReducer = nextStore.getReducer();
            store.replaceReducer(nextReducer);
          }
        };

        Provider.prototype.render = function render() {
          var children = this.props.children;

          return children();
        };

        return Provider;
      })(Component);
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 485 */
  387,
  /* 486 */
  [650, 485, 487, 488, 489],
  /* 487 */
  389,
  /* 488 */
  377,
  /* 489 */
  391,
  /* 490 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _LogMonitorEntry = __webpack_require__(491);

    var _LogMonitorEntry2 = _interopRequireDefault(_LogMonitorEntry);

    var _LogMonitorButton = __webpack_require__(580);

    var _LogMonitorButton2 = _interopRequireDefault(_LogMonitorButton);

    var _themes = __webpack_require__(582);

    var themes = _interopRequireWildcard(_themes);

    var styles = {
      container: {
        fontFamily: 'monaco, Consolas, Lucida Console, monospace',
        position: 'relative',
        overflowY: 'hidden',
        width: '100%',
        height: '100%',
        minWidth: 300
      },
      buttonBar: {
        textAlign: 'center',
        borderBottomWidth: 1,
        borderBottomStyle: 'solid',
        borderColor: 'transparent',
        zIndex: 1,
        display: 'flex',
        flexDirection: 'row'
      },
      elements: {
        position: 'absolute',
        left: 0,
        right: 0,
        top: 38,
        bottom: 0,
        overflowX: 'hidden',
        overflowY: 'auto'
      }
    };

    var LogMonitor = (function() {
      function LogMonitor() {
        _classCallCheck(this, LogMonitor);

        if (typeof window !== 'undefined') {
          window.addEventListener('keydown', this.handleKeyPress.bind(this));
        }
      }

      LogMonitor.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var node = _react.findDOMNode(this.refs.elements);
        if (!node) {
          this.scrollDown = true;
        } else if (this.props.stagedActions.length < nextProps.stagedActions.length) {
          var scrollTop = node.scrollTop;
          var offsetHeight = node.offsetHeight;
          var scrollHeight = node.scrollHeight;

          this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 20;
        } else {
          this.scrollDown = false;
        }
      };

      LogMonitor.prototype.componentDidUpdate = function componentDidUpdate() {
        var node = _react.findDOMNode(this.refs.elements);
        if (!node) {
          return;
        }
        if (this.scrollDown) {
          var offsetHeight = node.offsetHeight;
          var scrollHeight = node.scrollHeight;

          node.scrollTop = scrollHeight - offsetHeight;
          this.scrollDown = false;
        }
      };

      LogMonitor.prototype.handleRollback = function handleRollback() {
        this.props.rollback();
      };

      LogMonitor.prototype.handleSweep = function handleSweep() {
        this.props.sweep();
      };

      LogMonitor.prototype.handleCommit = function handleCommit() {
        this.props.commit();
      };

      LogMonitor.prototype.handleToggleAction = function handleToggleAction(index) {
        this.props.toggleAction(index);
      };

      LogMonitor.prototype.handleReset = function handleReset() {
        this.props.reset();
      };

      LogMonitor.prototype.handleKeyPress = function handleKeyPress(event) {
        var monitorState = this.props.monitorState;

        if (event.ctrlKey && event.keyCode === 72) {
          // Ctrl+H
          event.preventDefault();
          this.props.setMonitorState(_extends({}, monitorState, {
            isVisible: !monitorState.isVisible
          }));
        }
      };

      LogMonitor.prototype.render = function render() {
        var elements = [];
        var _props = this.props;
        var monitorState = _props.monitorState;
        var skippedActions = _props.skippedActions;
        var stagedActions = _props.stagedActions;
        var computedStates = _props.computedStates;
        var select = _props.select;

        var theme = undefined;
        if (typeof this.props.theme === 'string') {
          if (typeof themes[this.props.theme] !== 'undefined') {
            theme = themes[this.props.theme];
          } else {
            console.warn('DevTools theme ' + this.props.theme + ' not found, defaulting to nicinabox');
            theme = themes.nicinabox;
          }
        } else {
          theme = this.props.theme;
        }
        if (!monitorState.isVisible) {
          return null;
        }

        for (var i = 0; i < stagedActions.length; i++) {
          var action = stagedActions[i];
          var _computedStates$i = computedStates[i];
          var state = _computedStates$i.state;
          var error = _computedStates$i.error;

          var previousState = undefined;
          if (i > 0) {
            previousState = computedStates[i - 1].state;
          }
          elements.push(_react2['default'].createElement(_LogMonitorEntry2['default'], {
            key: i,
            index: i,
            theme: theme,
            select: select,
            action: action,
            state: state,
            previousState: previousState,
            collapsed: skippedActions[i],
            error: error,
            onActionClick: this.handleToggleAction.bind(this)
          }));
        }

        return _react2['default'].createElement(
          'div', { style: _extends({}, styles.container, { backgroundColor: theme.base00 }) },
          _react2['default'].createElement(
            'div', { style: _extends({}, styles.buttonBar, { borderColor: theme.base02 }) },
            _react2['default'].createElement(
              _LogMonitorButton2['default'], { theme: theme, onClick: this.handleReset.bind(this) },
              'Reset'
            ),
            _react2['default'].createElement(
              _LogMonitorButton2['default'], { theme: theme, onClick: this.handleRollback.bind(this), enabled: computedStates.length },
              'Revert'
            ),
            _react2['default'].createElement(
              _LogMonitorButton2['default'], {
                theme: theme,
                onClick: this.handleSweep.bind(this),
                enabled: Object.keys(skippedActions).some(function(key) {
                  return skippedActions[key];
                })
              },
              'Sweep'
            ),
            _react2['default'].createElement(
              _LogMonitorButton2['default'], { theme: theme, onClick: this.handleCommit.bind(this), enabled: computedStates.length > 1 },
              'Commit'
            )
          ),
          _react2['default'].createElement(
            'div', { style: styles.elements, ref: 'elements' },
            elements
          )
        );
      };

      _createClass(LogMonitor, null, [{
        key: 'propTypes',
        value: {
          computedStates: _react.PropTypes.array.isRequired,
          currentStateIndex: _react.PropTypes.number.isRequired,
          monitorState: _react.PropTypes.object.isRequired,
          stagedActions: _react.PropTypes.array.isRequired,
          skippedActions: _react.PropTypes.object.isRequired,
          reset: _react.PropTypes.func.isRequired,
          commit: _react.PropTypes.func.isRequired,
          rollback: _react.PropTypes.func.isRequired,
          sweep: _react.PropTypes.func.isRequired,
          toggleAction: _react.PropTypes.func.isRequired,
          jumpToState: _react.PropTypes.func.isRequired,
          setMonitorState: _react.PropTypes.func.isRequired,
          select: _react.PropTypes.func.isRequired
        },
        enumerable: true
      }, {
        key: 'defaultProps',
        value: {
          select: function select(state) {
            return state;
          },
          monitorState: { isVisible: true },
          theme: 'nicinabox'
        },
        enumerable: true
      }]);

      return LogMonitor;
    })();

    exports['default'] = LogMonitor;
    module.exports = exports['default'];

    /***/
  }),
  /* 491 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _reactJsonTree = __webpack_require__(492);

    var _reactJsonTree2 = _interopRequireDefault(_reactJsonTree);

    var _LogMonitorEntryAction = __webpack_require__(579);

    var _LogMonitorEntryAction2 = _interopRequireDefault(_LogMonitorEntryAction);

    var styles = {
      entry: {
        display: 'block',
        WebkitUserSelect: 'none'
      },
      tree: {
        paddingLeft: 0
      }
    };

    var LogMonitorEntry = (function() {
      function LogMonitorEntry() {
        _classCallCheck(this, LogMonitorEntry);
      }

      LogMonitorEntry.prototype.printState = function printState(state, error) {
        var errorText = error;
        if (!errorText) {
          try {
            return _react2['default'].createElement(_reactJsonTree2['default'], {
              theme: this.props.theme,
              keyName: 'state',
              data: this.props.select(state),
              previousData: this.props.select(this.props.previousState),
              style: styles.tree
            });
          } catch (err) {
            errorText = 'Error selecting state.';
          }
        }
        return _react2['default'].createElement(
          'div', {
            style: {
              color: this.props.theme.base08,
              paddingTop: 20,
              paddingLeft: 30,
              paddingRight: 30,
              paddingBottom: 35
            }
          },
          errorText
        );
      };

      LogMonitorEntry.prototype.handleActionClick = function handleActionClick() {
        var _props = this.props;
        var index = _props.index;
        var onActionClick = _props.onActionClick;

        if (index > 0) {
          onActionClick(index);
        }
      };

      LogMonitorEntry.prototype.render = function render() {
        var _props2 = this.props;
        var index = _props2.index;
        var error = _props2.error;
        var action = _props2.action;
        var state = _props2.state;
        var collapsed = _props2.collapsed;

        var styleEntry = {
          opacity: collapsed ? 0.5 : 1,
          cursor: index > 0 ? 'pointer' : 'default'
        };
        return _react2['default'].createElement(
          'div', { style: { textDecoration: collapsed ? 'line-through' : 'none' } },
          _react2['default'].createElement(_LogMonitorEntryAction2['default'], {
            theme: this.props.theme,
            collapsed: collapsed,
            action: action,
            onClick: this.handleActionClick.bind(this),
            style: _extends({}, styles.entry, styleEntry)
          }),
          !collapsed && _react2['default'].createElement(
            'div',
            null,
            this.printState(state, error)
          )
        );
      };

      _createClass(LogMonitorEntry, null, [{
        key: 'propTypes',
        value: {
          index: _react.PropTypes.number.isRequired,
          state: _react.PropTypes.object.isRequired,
          action: _react.PropTypes.object.isRequired,
          select: _react.PropTypes.func.isRequired,
          error: _react.PropTypes.string,
          onActionClick: _react.PropTypes.func.isRequired,
          collapsed: _react.PropTypes.bool
        },
        enumerable: true
      }]);

      return LogMonitorEntry;
    })();

    exports['default'] = LogMonitorEntry;
    module.exports = exports['default'];

    /***/
  }),
  /* 492 */
  /***/
  (function(module, exports, __webpack_require__) {

    // ES6 + inline style port of JSONViewer https://bitbucket.org/davevedder/react-json-viewer/
    // all credits and original code to the author
    // Dave Vedder <veddermatic@gmail.com> http://www.eskimospy.com/
    // port by Daniele Zannotti http://www.github.com/dzannotti <dzannotti@me.com>

    'use strict';

    var _inherits = __webpack_require__(493)['default'];

    var _createClass = __webpack_require__(508)['default'];

    var _classCallCheck = __webpack_require__(511)['default'];

    var _extends = __webpack_require__(512)['default'];

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _grabNode = __webpack_require__(523);

    var _grabNode2 = _interopRequireDefault(_grabNode);

    var _themesSolarized = __webpack_require__(578);

    var _themesSolarized2 = _interopRequireDefault(_themesSolarized);

    var styles = {
      tree: {
        border: 0,
        padding: 0,
        marginTop: 8,
        marginBottom: 8,
        marginLeft: 2,
        marginRight: 0,
        fontSize: '0.90em',
        listStyle: 'none',
        MozUserSelect: 'none',
        WebkitUserSelect: 'none'
      }
    };

    var JSONTree = (function(_React$Component) {
      _inherits(JSONTree, _React$Component);

      _createClass(JSONTree, null, [{
        key: 'propTypes',
        value: {
          data: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.array, _react2['default'].PropTypes.object]).isRequired
        },
        enumerable: true
      }, {
        key: 'defaultProps',
        value: {
          theme: _themesSolarized2['default']
        },
        enumerable: true
      }]);

      function JSONTree(props) {
        _classCallCheck(this, JSONTree);

        _React$Component.call(this, props);
      }

      JSONTree.prototype.render = function render() {
        var keyName = this.props.keyName || 'root';
        var rootNode = _grabNode2['default'](keyName, this.props.data, this.props.previousData, this.props.theme, true);
        return _react2['default'].createElement(
          'ul', { style: _extends({}, styles.tree, this.props.style) },
          rootNode
        );
      };

      return JSONTree;
    })(_react2['default'].Component);

    exports['default'] = JSONTree;
    module.exports = exports['default'];

    /***/
  }),
  /* 493 */
  /***/
  (function(module, exports, __webpack_require__) {

    "use strict";

    var _Object$create = __webpack_require__(494)["default"];

    var _Object$setPrototypeOf = __webpack_require__(497)["default"];

    exports["default"] = function(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }

      subClass.prototype = _Object$create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };

    exports.__esModule = true;

    /***/
  }),
  /* 494 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = { "default": __webpack_require__(495), __esModule: true };

    /***/
  }),
  /* 495 */
  /***/
  (function(module, exports, __webpack_require__) {

    var $ = __webpack_require__(496);
    module.exports = function create(P, D) {
      return $.create(P, D);
    };

    /***/
  }),
  /* 496 */
  8,
  /* 497 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = { "default": __webpack_require__(498), __esModule: true };

    /***/
  }),
  /* 498 */
  /***/
  (function(module, exports, __webpack_require__) {

    __webpack_require__(499);
    module.exports = __webpack_require__(502).Object.setPrototypeOf;

    /***/
  }),
  /* 499 */
  [636, 500, 505],
  /* 500 */
  /***/
  (function(module, exports, __webpack_require__) {

    var global = __webpack_require__(501),
      core = __webpack_require__(502),
      ctx = __webpack_require__(503),
      PROTOTYPE = 'prototype';

    var $export = function(type, name, source) {
      var IS_FORCED = type & $export.F,
        IS_GLOBAL = type & $export.G,
        IS_STATIC = type & $export.S,
        IS_PROTO = type & $export.P,
        IS_BIND = type & $export.B,
        IS_WRAP = type & $export.W,
        exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
        target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
        key, own, out;
      if (IS_GLOBAL) source = name;
      for (key in source) {
        // contains in native
        own = !IS_FORCED && target && key in target;
        if (own && key in exports) continue;
        // export native or passed
        out = own ? target[key] : source[key];
        // prevent global pollution for namespaces
        exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
          // bind timers to global for call from export context
          :
          IS_BIND && own ? ctx(out, global)
          // wrap global constructors for prevent change them in library
          :
          IS_WRAP && target[key] == out ? (function(C) {
            var F = function(param) {
              return this instanceof C ? new C(param) : C(param);
            };
            F[PROTOTYPE] = C[PROTOTYPE];
            return F;
            // make static versions for prototype methods
          })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
        if (IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
      }
    };
    // type bitmap
    $export.F = 1; // forced
    $export.G = 2; // global
    $export.S = 4; // static
    $export.P = 8; // proto
    $export.B = 16; // bind
    $export.W = 32; // wrap
    module.exports = $export;

    /***/
  }),
  /* 501 */
  10,
  /* 502 */
  11,
  /* 503 */
  [626, 504],
  /* 504 */
  19,
  /* 505 */
  [637, 496, 506, 507, 503],
  /* 506 */
  22,
  /* 507 */
  [627, 506],
  /* 508 */
  /***/
  (function(module, exports, __webpack_require__) {

    "use strict";

    var _Object$defineProperty = __webpack_require__(509)["default"];

    exports["default"] = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;

          _Object$defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    })();

    exports.__esModule = true;

    /***/
  }),
  /* 509 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = { "default": __webpack_require__(510), __esModule: true };

    /***/
  }),
  /* 510 */
  /***/
  (function(module, exports, __webpack_require__) {

    var $ = __webpack_require__(496);
    module.exports = function defineProperty(it, key, desc) {
      return $.setDesc(it, key, desc);
    };

    /***/
  }),
  /* 511 */
  /***/
  (function(module, exports) {

    "use strict";

    exports["default"] = function(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    exports.__esModule = true;

    /***/
  }),
  /* 512 */
  /***/
  (function(module, exports, __webpack_require__) {

    "use strict";

    var _Object$assign = __webpack_require__(513)["default"];

    exports["default"] = _Object$assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    exports.__esModule = true;

    /***/
  }),
  /* 513 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = { "default": __webpack_require__(514), __esModule: true };

    /***/
  }),
  /* 514 */
  /***/
  (function(module, exports, __webpack_require__) {

    __webpack_require__(515);
    module.exports = __webpack_require__(502).Object.assign;

    /***/
  }),
  /* 515 */
  [634, 500, 516],
  /* 516 */
  [635, 496, 517, 519, 521],
  /* 517 */
  [628, 518],
  /* 518 */
  28,
  /* 519 */
  [630, 520],
  /* 520 */
  24,
  /* 521 */
  15,
  /* 522 */
  /***/
  (function(module, exports) {

    "use strict";

    exports["default"] = function(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    };

    exports.__esModule = true;

    /***/
  }),
  /* 523 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _objType = __webpack_require__(524);

    var _objType2 = _interopRequireDefault(_objType);

    var _JSONObjectNode = __webpack_require__(548);

    var _JSONObjectNode2 = _interopRequireDefault(_JSONObjectNode);

    var _JSONArrayNode = __webpack_require__(561);

    var _JSONArrayNode2 = _interopRequireDefault(_JSONArrayNode);

    var _JSONIterableNode = __webpack_require__(562);

    var _JSONIterableNode2 = _interopRequireDefault(_JSONIterableNode);

    var _JSONStringNode = __webpack_require__(572);

    var _JSONStringNode2 = _interopRequireDefault(_JSONStringNode);

    var _JSONNumberNode = __webpack_require__(574);

    var _JSONNumberNode2 = _interopRequireDefault(_JSONNumberNode);

    var _JSONBooleanNode = __webpack_require__(575);

    var _JSONBooleanNode2 = _interopRequireDefault(_JSONBooleanNode);

    var _JSONNullNode = __webpack_require__(576);

    var _JSONNullNode2 = _interopRequireDefault(_JSONNullNode);

    var _JSONDateNode = __webpack_require__(577);

    var _JSONDateNode2 = _interopRequireDefault(_JSONDateNode);

    exports['default'] = function(key, value, prevValue, theme) {
      var initialExpanded = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];

      var nodeType = _objType2['default'](value);
      if (nodeType === 'Object') {
        return _react2['default'].createElement(_JSONObjectNode2['default'], { data: value, previousData: prevValue, theme: theme, initialExpanded: initialExpanded, keyName: key, key: key });
      } else if (nodeType === 'Array') {
        return _react2['default'].createElement(_JSONArrayNode2['default'], { data: value, previousData: prevValue, theme: theme, initialExpanded: initialExpanded, keyName: key, key: key });
      } else if (nodeType === 'Iterable') {
        return _react2['default'].createElement(_JSONIterableNode2['default'], { data: value, previousData: prevValue, theme: theme, initialExpanded: initialExpanded, keyName: key, key: key });
      } else if (nodeType === 'String') {
        return _react2['default'].createElement(_JSONStringNode2['default'], { keyName: key, previousValue: prevValue, theme: theme, value: value, key: key });
      } else if (nodeType === 'Number') {
        return _react2['default'].createElement(_JSONNumberNode2['default'], { keyName: key, previousValue: prevValue, theme: theme, value: value, key: key });
      } else if (nodeType === 'Boolean') {
        return _react2['default'].createElement(_JSONBooleanNode2['default'], { keyName: key, previousValue: prevValue, theme: theme, value: value, key: key });
      } else if (nodeType === 'Date') {
        return _react2['default'].createElement(_JSONDateNode2['default'], { keyName: key, previousValue: prevValue, theme: theme, value: value, key: key });
      } else if (nodeType === 'Null') {
        return _react2['default'].createElement(_JSONNullNode2['default'], { keyName: key, previousValue: prevValue, theme: theme, value: value, key: key });
      }
      return false;
    };

    module.exports = exports['default'];

    /***/
  }),
  /* 524 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _Symbol$iterator = __webpack_require__(525)['default'];

    exports.__esModule = true;

    exports['default'] = function(obj) {
      if (obj !== null && typeof obj === 'object' && !Array.isArray(obj) && typeof obj[_Symbol$iterator] === 'function') {
        return 'Iterable';
      }
      return Object.prototype.toString.call(obj).slice(8, -1);
    };

    module.exports = exports['default'];

    /***/
  }),
  /* 525 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = { "default": __webpack_require__(526), __esModule: true };

    /***/
  }),
  /* 526 */
  /***/
  (function(module, exports, __webpack_require__) {

    __webpack_require__(527);
    __webpack_require__(543);
    module.exports = __webpack_require__(540)('iterator');

    /***/
  }),
  /* 527 */
  [643, 528, 530],
  /* 528 */
  [644, 529, 518],
  /* 529 */
  31,
  /* 530 */
  [645, 531, 500, 532, 533, 536, 537, 538, 539, 496, 540],
  /* 531 */
  /***/
  (function(module, exports) {

    module.exports = true;

    /***/
  }),
  /* 532 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(533);

    /***/
  }),
  /* 533 */
  [624, 496, 534, 535],
  /* 534 */
  13,
  /* 535 */
  [625, 521],
  /* 536 */
  23,
  /* 537 */
  106,
  /* 538 */
  [646, 496, 534, 539, 533, 540],
  /* 539 */
  [633, 496, 536, 540],
  /* 540 */
  [631, 541, 542, 501],
  /* 541 */
  [632, 501],
  /* 542 */
  17,
  /* 543 */
  /***/
  (function(module, exports, __webpack_require__) {

    __webpack_require__(544);
    var Iterators = __webpack_require__(537);
    Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;

    /***/
  }),
  /* 544 */
  [648, 545, 546, 537, 547, 530],
  /* 545 */
  /***/
  (function(module, exports) {

    module.exports = function() { /* empty */ };

    /***/
  }),
  /* 546 */
  125,
  /* 547 */
  [629, 519, 518],
  /* 548 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _inherits = __webpack_require__(493)['default'];

    var _classCallCheck = __webpack_require__(511)['default'];

    var _extends = __webpack_require__(512)['default'];

    var _Object$keys = __webpack_require__(549)['default'];

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _reactMixin = __webpack_require__(553);

    var _reactMixin2 = _interopRequireDefault(_reactMixin);

    var _mixins = __webpack_require__(556);

    var _JSONArrow = __webpack_require__(560);

    var _JSONArrow2 = _interopRequireDefault(_JSONArrow);

    var _grabNode = __webpack_require__(523);

    var _grabNode2 = _interopRequireDefault(_grabNode);

    var styles = {
      base: {
        position: 'relative',
        paddingTop: 3,
        paddingBottom: 3,
        marginLeft: 14
      },
      label: {
        margin: 0,
        padding: 0,
        display: 'inline-block'
      },
      span: {
        cursor: 'default'
      },
      spanType: {
        marginLeft: 5,
        marginRight: 5
      }
    };

    var JSONObjectNode = (function(_React$Component) {
      _inherits(JSONObjectNode, _React$Component);

      function JSONObjectNode(props) {
        _classCallCheck(this, _JSONObjectNode);

        _React$Component.call(this, props);
        this.defaultProps = {
          data: [],
          initialExpanded: false
        };
        this.itemString = false;
        this.needsChildNodes = true;
        this.renderedChildren = [];
        this.state = {
          expanded: this.props.initialExpanded,
          createdChildNodes: false
        };
      }

      // Returns the child nodes for each element in the object. If we have
      // generated them previously, we return from cache, otherwise we create
      // them.

      JSONObjectNode.prototype.getChildNodes = function getChildNodes() {
        if (this.state.expanded && this.needsChildNodes) {
          var obj = this.props.data;
          var childNodes = [];
          for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
              var prevData = undefined;
              if (typeof this.props.previousData !== 'undefined' && this.props.previousData !== null) {
                prevData = this.props.previousData[k];
              }
              var node = _grabNode2['default'](k, obj[k], prevData, this.props.theme);
              if (node !== false) {
                childNodes.push(node);
              }
            }
          }
          this.needsChildNodes = false;
          this.renderedChildren = childNodes;
        }
        return this.renderedChildren;
      };

      // Returns the "n Items" string for this node, generating and
      // caching it if it hasn't been created yet.

      JSONObjectNode.prototype.getItemString = function getItemString() {
        if (!this.itemString) {
          var len = _Object$keys(this.props.data).length;
          this.itemString = len + ' key' + (len !== 1 ? 's' : '');
        }
        return this.itemString;
      };

      JSONObjectNode.prototype.render = function render() {
        var childListStyle = {
          padding: 0,
          margin: 0,
          listStyle: 'none',
          display: this.state.expanded ? 'block' : 'none'
        };
        var containerStyle = undefined;
        var spanStyle = _extends({}, styles.span, {
          color: this.props.theme.base0B
        });
        containerStyle = _extends({}, styles.base);
        if (this.state.expanded) {
          spanStyle = _extends({}, spanStyle, {
            color: this.props.theme.base03
          });
        }
        return _react2['default'].createElement(
          'li', { style: containerStyle },
          _react2['default'].createElement(_JSONArrow2['default'], { theme: this.props.theme, open: this.state.expanded, onClick: this.handleClick.bind(this) }),
          _react2['default'].createElement(
            'label', {
              style: _extends({}, styles.label, {
                color: this.props.theme.base0D
              }),
              onClick: this.handleClick.bind(this)
            },
            this.props.keyName,
            ':'
          ),
          _react2['default'].createElement(
            'span', { style: spanStyle, onClick: this.handleClick.bind(this) },
            _react2['default'].createElement(
              'span', { style: styles.spanType },
              '{}'
            ),
            this.getItemString()
          ),
          _react2['default'].createElement(
            'ul', { style: childListStyle },
            this.getChildNodes()
          )
        );
      };

      var _JSONObjectNode = JSONObjectNode;
      JSONObjectNode = _reactMixin2['default'].decorate(_mixins.ExpandedStateHandlerMixin)(JSONObjectNode) || JSONObjectNode;
      return JSONObjectNode;
    })(_react2['default'].Component);

    exports['default'] = JSONObjectNode;
    module.exports = exports['default'];

    // cache store for the number of items string we display

    // flag to see if we still need to render our child nodes

    // cache store for our child nodes

    /***/
  }),
  /* 549 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = { "default": __webpack_require__(550), __esModule: true };

    /***/
  }),
  /* 550 */
  /***/
  (function(module, exports, __webpack_require__) {

    __webpack_require__(551);
    module.exports = __webpack_require__(502).Object.keys;

    /***/
  }),
  /* 551 */
  [640, 517, 552],
  /* 552 */
  [639, 500, 502, 521],
  /* 553 */
  /***/
  (function(module, exports, __webpack_require__) {

    var mixin = __webpack_require__(554);
    var assign = __webpack_require__(555);

    var mixinProto = mixin({
      // lifecycle stuff is as you'd expect
      componentDidMount: mixin.MANY,
      componentWillMount: mixin.MANY,
      componentWillReceiveProps: mixin.MANY,
      shouldComponentUpdate: mixin.ONCE,
      componentWillUpdate: mixin.MANY,
      componentDidUpdate: mixin.MANY,
      componentWillUnmount: mixin.MANY,
      getChildContext: mixin.MANY_MERGED
    });

    function setDefaultProps(reactMixin) {
      var getDefaultProps = reactMixin.getDefaultProps;

      if (getDefaultProps) {
        reactMixin.defaultProps = getDefaultProps();

        delete reactMixin.getDefaultProps;
      }
    }

    function setInitialState(reactMixin) {
      var getInitialState = reactMixin.getInitialState;
      var componentWillMount = reactMixin.componentWillMount;

      function applyInitialState(instance) {
        var state = instance.state || {};
        assign(state, getInitialState.call(instance));
        instance.state = state;
      }

      if (getInitialState) {
        if (!componentWillMount) {
          reactMixin.componentWillMount = function() {
            applyInitialState(this);
          };
        } else {
          reactMixin.componentWillMount = function() {
            applyInitialState(this);
            componentWillMount.call(this);
          };
        }

        delete reactMixin.getInitialState;
      }
    }

    function mixinClass(reactClass, reactMixin) {
      setDefaultProps(reactMixin);
      setInitialState(reactMixin);

      var prototypeMethods = {};
      var staticProps = {};

      Object.keys(reactMixin).forEach(function(key) {
        if (key === 'mixins') {
          return; // Handled below to ensure proper order regardless of property iteration order
        }
        if (key === 'statics') {
          return; // gets special handling
        } else if (typeof reactMixin[key] === 'function') {
          prototypeMethods[key] = reactMixin[key];
        } else {
          staticProps[key] = reactMixin[key];
        }
      });

      mixinProto(reactClass.prototype, prototypeMethods);

      var mergePropTypes = function(left, right, key) {
        if (!left) return right;
        if (!right) return left;

        var result = {};
        Object.keys(left).forEach(function(leftKey) {
          if (!right[leftKey]) {
            result[leftKey] = left[leftKey];
          }
        });

        Object.keys(right).forEach(function(rightKey) {
          if (left[rightKey]) {
            result[rightKey] = function checkBothContextTypes() {
              return right[rightKey].apply(this, arguments) && left[rightKey].apply(this, arguments);
            };
          } else {
            result[rightKey] = right[rightKey];
          }
        });

        return result;
      };

      mixin({
        childContextTypes: mergePropTypes,
        contextTypes: mergePropTypes,
        propTypes: mixin.MANY_MERGED_LOOSE,
        defaultProps: mixin.MANY_MERGED_LOOSE
      })(reactClass, staticProps);

      // statics is a special case because it merges directly onto the class
      if (reactMixin.statics) {
        Object.getOwnPropertyNames(reactMixin.statics).forEach(function(key) {
          var left = reactClass[key];
          var right = reactMixin.statics[key];

          if (left !== undefined && right !== undefined) {
            throw new TypeError('Cannot mixin statics because statics.' + key + ' and Component.' + key + ' are defined.');
          }

          reactClass[key] = left !== undefined ? left : right;
        });
      }

      // If more mixins are defined, they need to run. This emulate's react's behavior.
      // See behavior in code at:
      // https://github.com/facebook/react/blob/41aa3496aa632634f650edbe10d617799922d265/src/isomorphic/classic/class/ReactClass.js#L468
      // Note the .reverse(). In React, a fresh constructor is created, then all mixins are mixed in recursively,
      // then the actual spec is mixed in last.
      //
      // With ES6 classes, the properties are already there, so smart-mixin mixes functions (a, b) -> b()a(), which is
      // the opposite of how React does it. If we reverse this array, we basically do the whole logic in reverse,
      // which makes the result the same. See the test for more.
      // See also:
      // https://github.com/facebook/react/blob/41aa3496aa632634f650edbe10d617799922d265/src/isomorphic/classic/class/ReactClass.js#L853
      if (reactMixin.mixins) {
        reactMixin.mixins.reverse().forEach(mixinClass.bind(null, reactClass));
      }

      return reactClass;
    }

    module.exports = (function() {
      var reactMixin = mixinProto;

      reactMixin.onClass = function(reactClass, mixin) {
        return mixinClass(reactClass, mixin);
      };

      reactMixin.decorate = function(mixin) {
        return function(reactClass) {
          return reactMixin.onClass(reactClass, mixin);
        };
      };

      return reactMixin;
    })();

    /***/
  }),
  /* 554 */
  /***/
  (function(module, exports) {

    var objToStr = function(x) { return Object.prototype.toString.call(x); };

    var thrower = function(error) {
      throw error;
    };

    var mixins = module.exports = function makeMixinFunction(rules, _opts) {
      var opts = _opts || {};
      if (!opts.unknownFunction) {
        opts.unknownFunction = mixins.ONCE;
      }

      if (!opts.nonFunctionProperty) {
        opts.nonFunctionProperty = function(left, right, key) {
          if (left !== undefined && right !== undefined) {
            var getTypeName = function(obj) {
              if (obj && obj.constructor && obj.constructor.name) {
                return obj.constructor.name;
              } else {
                return objToStr(obj).slice(8, -1);
              }
            };
            throw new TypeError('Cannot mixin key ' + key + ' because it is provided by multiple sources, ' +
              'and the types are ' + getTypeName(left) + ' and ' + getTypeName(right));
          }
          return left === undefined ? right : left;
        };
      }

      function setNonEnumerable(target, key, value) {
        if (key in target) {
          target[key] = value;
        } else {
          Object.defineProperty(target, key, {
            value: value,
            writable: true,
            configurable: true
          });
        }
      }

      return function applyMixin(source, mixin) {
        Object.keys(mixin).forEach(function(key) {
          var left = source[key],
            right = mixin[key],
            rule = rules[key];

          // this is just a weird case where the key was defined, but there's no value
          // behave like the key wasn't defined
          if (left === undefined && right === undefined) return;

          var wrapIfFunction = function(thing) {
            return typeof thing !== "function" ? thing :
              function() {
                return thing.call(this, arguments);
              };
          };

          // do we have a rule for this key?
          if (rule) {
            // may throw here
            var fn = rule(left, right, key);
            setNonEnumerable(source, key, wrapIfFunction(fn));
            return;
          }

          var leftIsFn = typeof left === "function";
          var rightIsFn = typeof right === "function";

          // check to see if they're some combination of functions or undefined
          // we already know there's no rule, so use the unknown function behavior
          if (leftIsFn && right === undefined ||
            rightIsFn && left === undefined ||
            leftIsFn && rightIsFn) {
            // may throw, the default is ONCE so if both are functions
            // the default is to throw
            setNonEnumerable(source, key, wrapIfFunction(opts.unknownFunction(left, right, key)));
            return;
          }

          // we have no rule for them, one may be a function but one or both aren't
          // our default is MANY_MERGED_LOOSE which will merge objects, concat arrays
          // and throw if there's a type mismatch or both are primitives (how do you merge 3, and "foo"?)
          source[key] = opts.nonFunctionProperty(left, right, key);
        });
      };
    };

    mixins._mergeObjects = function(obj1, obj2) {
      var assertObject = function(obj, obj2) {
        var type = objToStr(obj);
        if (type !== '[object Object]') {
          var displayType = obj.constructor ? obj.constructor.name : 'Unknown';
          var displayType2 = obj2.constructor ? obj2.constructor.name : 'Unknown';
          thrower('cannot merge returned value of type ' + displayType + ' with an ' + displayType2);
        }
      };

      if (Array.isArray(obj1) && Array.isArray(obj2)) {
        return obj1.concat(obj2);
      }

      assertObject(obj1, obj2);
      assertObject(obj2, obj1);

      var result = {};
      Object.keys(obj1).forEach(function(k) {
        if (Object.prototype.hasOwnProperty.call(obj2, k)) {
          thrower('cannot merge returns because both have the ' + JSON.stringify(k) + ' key');
        }
        result[k] = obj1[k];
      });

      Object.keys(obj2).forEach(function(k) {
        // we can skip the conflict check because all conflicts would already be found
        result[k] = obj2[k];
      });
      return result;

    }

    // define our built-in mixin types
    mixins.ONCE = function(left, right, key) {
      if (left && right) {
        throw new TypeError('Cannot mixin ' + key + ' because it has a unique constraint.');
      }

      var fn = left || right;

      return function(args) {
        return fn.apply(this, args);
      };
    };

    mixins.MANY = function(left, right, key) {
      return function(args) {
        if (right) right.apply(this, args);
        return left ? left.apply(this, args) : undefined;
      };
    };

    mixins.MANY_MERGED_LOOSE = function(left, right, key) {
      if (left && right) {
        return mixins._mergeObjects(left, right);
      }

      return left || right;
    }

    mixins.MANY_MERGED = function(left, right, key) {
      return function(args) {
        var res1 = right && right.apply(this, args);
        var res2 = left && left.apply(this, args);
        if (res1 && res2) {
          return mixins._mergeObjects(res1, res2)
        }
        return res2 || res1;
      };
    };

    mixins.REDUCE_LEFT = function(_left, _right, key) {
      var left = _left || function(x) { return x };
      var right = _right || function(x) { return x };
      return function(args) {
        return right.call(this, left.apply(this, args));
      };
    };

    mixins.REDUCE_RIGHT = function(_left, _right, key) {
      var left = _left || function(x) { return x };
      var right = _right || function(x) { return x };
      return function(args) {
        return left.call(this, right.apply(this, args));
      };
    };

    /***/
  }),
  /* 555 */
  /***/
  (function(module, exports) {

    'use strict';

    function ToObject(val) {
      if (val == null) {
        throw new TypeError('Object.assign cannot be called with null or undefined');
      }

      return Object(val);
    }

    module.exports = Object.assign || function(target, source) {
      var from;
      var keys;
      var to = ToObject(target);

      for (var s = 1; s < arguments.length; s++) {
        from = arguments[s];
        keys = Object.keys(Object(from));

        for (var i = 0; i < keys.length; i++) {
          to[keys[i]] = from[keys[i]];
        }
      }

      return to;
    };

    /***/
  }),
  /* 556 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _interopRequire = __webpack_require__(557)['default'];

    exports.__esModule = true;

    var _squashClickEvent = __webpack_require__(558);

    exports.SquashClickEventMixin = _interopRequire(_squashClickEvent);

    var _expandedStateHandler = __webpack_require__(559);

    exports.ExpandedStateHandlerMixin = _interopRequire(_expandedStateHandler);

    /***/
  }),
  /* 557 */
  /***/
  (function(module, exports) {

    "use strict";

    exports["default"] = function(obj) {
      return obj && obj.__esModule ? obj["default"] : obj;
    };

    exports.__esModule = true;

    /***/
  }),
  /* 558 */
  /***/
  (function(module, exports) {

    "use strict";

    exports.__esModule = true;
    exports["default"] = {
      handleClick: function handleClick(e) {
        e.stopPropagation();
      }
    };
    module.exports = exports["default"];

    /***/
  }),
  /* 559 */
  /***/
  (function(module, exports) {

    "use strict";

    exports.__esModule = true;
    exports["default"] = {
      handleClick: function handleClick(e) {
        e.stopPropagation();
        this.setState({
          expanded: !this.state.expanded
        });
      },

      componentWillReceiveProps: function componentWillReceiveProps() {
        // resets our caches and flags we need to build child nodes again
        this.renderedChildren = [];
        this.itemString = false;
        this.needsChildNodes = true;
      }
    };
    module.exports = exports["default"];

    /***/
  }),
  /* 560 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _inherits = __webpack_require__(493)['default'];

    var _classCallCheck = __webpack_require__(511)['default'];

    var _extends = __webpack_require__(512)['default'];

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var styles = {
      base: {
        display: 'inline-block',
        marginLeft: 0,
        marginTop: 8,
        marginRight: 5,
        'float': 'left',
        transition: '150ms',
        WebkitTransition: '150ms',
        MozTransition: '150ms',
        borderLeft: '5px solid transparent',
        borderRight: '5px solid transparent',
        borderTopWidth: 5,
        borderTopStyle: 'solid',
        WebkitTransform: 'rotateZ(-90deg)',
        MozTransform: 'rotateZ(-90deg)',
        transform: 'rotateZ(-90deg)'
      },
      open: {
        WebkitTransform: 'rotateZ(0deg)',
        MozTransform: 'rotateZ(0deg)',
        transform: 'rotateZ(0deg)'
      }
    };

    var JSONArrow = (function(_React$Component) {
      _inherits(JSONArrow, _React$Component);

      function JSONArrow() {
        _classCallCheck(this, JSONArrow);

        _React$Component.apply(this, arguments);
      }

      JSONArrow.prototype.render = function render() {
        var style = _extends({}, styles.base, {
          borderTopColor: this.props.theme.base0D
        });
        if (this.props.open) {
          style = _extends({}, style, styles.open);
        }
        return _react2['default'].createElement('div', { style: style, onClick: this.props.onClick });
      };

      return JSONArrow;
    })(_react2['default'].Component);

    exports['default'] = JSONArrow;
    module.exports = exports['default'];

    /***/
  }),
  /* 561 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _inherits = __webpack_require__(493)['default'];

    var _classCallCheck = __webpack_require__(511)['default'];

    var _extends = __webpack_require__(512)['default'];

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _reactMixin = __webpack_require__(553);

    var _reactMixin2 = _interopRequireDefault(_reactMixin);

    var _mixins = __webpack_require__(556);

    var _JSONArrow = __webpack_require__(560);

    var _JSONArrow2 = _interopRequireDefault(_JSONArrow);

    var _grabNode = __webpack_require__(523);

    var _grabNode2 = _interopRequireDefault(_grabNode);

    var styles = {
      base: {
        position: 'relative',
        paddingTop: 3,
        paddingBottom: 3,
        paddingRight: 0,
        marginLeft: 14
      },
      label: {
        margin: 0,
        padding: 0,
        display: 'inline-block'
      },
      span: {
        cursor: 'default'
      },
      spanType: {
        marginLeft: 5,
        marginRight: 5
      }
    };

    var JSONArrayNode = (function(_React$Component) {
      _inherits(JSONArrayNode, _React$Component);

      function JSONArrayNode(props) {
        _classCallCheck(this, _JSONArrayNode);

        _React$Component.call(this, props);
        this.defaultProps = {
          data: [],
          initialExpanded: false
        };
        this.needsChildNodes = true;
        this.renderedChildren = [];
        this.itemString = false;
        this.state = {
          expanded: this.props.initialExpanded,
          createdChildNodes: false
        };
      }

      // Returns the child nodes for each element in the array. If we have
      // generated them previously, we return from cache, otherwise we create
      // them.

      JSONArrayNode.prototype.getChildNodes = function getChildNodes() {
        var _this = this;

        if (this.state.expanded && this.needsChildNodes) {
          (function() {
            var childNodes = [];
            _this.props.data.forEach(function(element, idx) {
              var prevData = undefined;
              if (typeof _this.props.previousData !== 'undefined' && _this.props.previousData !== null) {
                prevData = _this.props.previousData[idx];
              }
              var node = _grabNode2['default'](idx, element, prevData, _this.props.theme);
              if (node !== false) {
                childNodes.push(node);
              }
            });
            _this.needsChildNodes = false;
            _this.renderedChildren = childNodes;
          })();
        }
        return this.renderedChildren;
      };

      // Returns the "n Items" string for this node, generating and
      // caching it if it hasn't been created yet.

      JSONArrayNode.prototype.getItemString = function getItemString() {
        if (!this.itemString) {
          this.itemString = this.props.data.length + ' item' + (this.props.data.length !== 1 ? 's' : '');
        }
        return this.itemString;
      };

      JSONArrayNode.prototype.render = function render() {
        var childNodes = this.getChildNodes();
        var childListStyle = {
          padding: 0,
          margin: 0,
          listStyle: 'none',
          display: this.state.expanded ? 'block' : 'none'
        };
        var containerStyle = undefined;
        var spanStyle = _extends({}, styles.span, {
          color: this.props.theme.base0E
        });
        containerStyle = _extends({}, styles.base);
        if (this.state.expanded) {
          spanStyle = _extends({}, spanStyle, {
            color: this.props.theme.base03
          });
        }
        return _react2['default'].createElement(
          'li', { style: containerStyle },
          _react2['default'].createElement(_JSONArrow2['default'], { theme: this.props.theme, open: this.state.expanded, onClick: this.handleClick.bind(this) }),
          _react2['default'].createElement(
            'label', {
              style: _extends({}, styles.label, {
                color: this.props.theme.base0D
              }),
              onClick: this.handleClick.bind(this)
            },
            this.props.keyName,
            ':'
          ),
          _react2['default'].createElement(
            'span', { style: spanStyle, onClick: this.handleClick.bind(this) },
            _react2['default'].createElement(
              'span', { style: styles.spanType },
              '[]'
            ),
            this.getItemString()
          ),
          _react2['default'].createElement(
            'ol', { style: childListStyle },
            childNodes
          )
        );
      };

      var _JSONArrayNode = JSONArrayNode;
      JSONArrayNode = _reactMixin2['default'].decorate(_mixins.ExpandedStateHandlerMixin)(JSONArrayNode) || JSONArrayNode;
      return JSONArrayNode;
    })(_react2['default'].Component);

    exports['default'] = JSONArrayNode;
    module.exports = exports['default'];

    // flag to see if we still need to render our child nodes

    // cache store for our child nodes

    // cache store for the number of items string we display

    /***/
  }),
  /* 562 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _inherits = __webpack_require__(493)['default'];

    var _classCallCheck = __webpack_require__(511)['default'];

    var _extends = __webpack_require__(512)['default'];

    var _getIterator = __webpack_require__(563)['default'];

    var _Number$isSafeInteger = __webpack_require__(568)['default'];

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _reactMixin = __webpack_require__(553);

    var _reactMixin2 = _interopRequireDefault(_reactMixin);

    var _mixins = __webpack_require__(556);

    var _JSONArrow = __webpack_require__(560);

    var _JSONArrow2 = _interopRequireDefault(_JSONArrow);

    var _grabNode = __webpack_require__(523);

    var _grabNode2 = _interopRequireDefault(_grabNode);

    var styles = {
      base: {
        position: 'relative',
        paddingTop: 3,
        paddingBottom: 3,
        paddingRight: 0,
        marginLeft: 14
      },
      label: {
        margin: 0,
        padding: 0,
        display: 'inline-block'
      },
      span: {
        cursor: 'default'
      },
      spanType: {
        marginLeft: 5,
        marginRight: 5
      }
    };

    var JSONIterableNode = (function(_React$Component) {
      _inherits(JSONIterableNode, _React$Component);

      function JSONIterableNode(props) {
        _classCallCheck(this, _JSONIterableNode);

        _React$Component.call(this, props);
        this.defaultProps = {
          data: [],
          initialExpanded: false
        };
        this.needsChildNodes = true;
        this.renderedChildren = [];
        this.itemString = false;
        this.state = {
          expanded: this.props.initialExpanded,
          createdChildNodes: false
        };
      }

      // Returns the child nodes for each entry in iterable. If we have
      // generated them previously, we return from cache, otherwise we create
      // them.

      JSONIterableNode.prototype.getChildNodes = function getChildNodes() {
        if (this.state.expanded && this.needsChildNodes) {
          var childNodes = [];
          for (var _iterator = this.props.data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var entry = _ref;

            var key = null;
            var value = null;
            if (Array.isArray(entry)) {
              key = entry[0];
              value = entry[1];
            } else {
              key = childNodes.length;
              value = entry;
            }

            var prevData = undefined;
            if (typeof this.props.previousData !== 'undefined' && this.props.previousData !== null) {
              prevData = this.props.previousData[key];
            }
            var node = _grabNode2['default'](key, value, prevData, this.props.theme);
            if (node !== false) {
              childNodes.push(node);
            }
          }
          this.needsChildNodes = false;
          this.renderedChildren = childNodes;
        }
        return this.renderedChildren;
      };

      // Returns the "n entries" string for this node, generating and
      // caching it if it hasn't been created yet.

      JSONIterableNode.prototype.getItemString = function getItemString() {
        if (!this.itemString) {
          var data = this.props.data;

          var count = 0;
          if (_Number$isSafeInteger(data.size)) {
            count = data.size;
          } else {
            for (var _iterator2 = data, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var entry = _ref2;
              // eslint-disable-line no-unused-vars
              count += 1;
            }
          }
          this.itemString = count + ' entr' + (count !== 1 ? 'ies' : 'y');
        }
        return this.itemString;
      };

      JSONIterableNode.prototype.render = function render() {
        var childNodes = this.getChildNodes();
        var childListStyle = {
          padding: 0,
          margin: 0,
          listStyle: 'none',
          display: this.state.expanded ? 'block' : 'none'
        };
        var containerStyle = undefined;
        var spanStyle = _extends({}, styles.span, {
          color: this.props.theme.base0E
        });
        containerStyle = _extends({}, styles.base);
        if (this.state.expanded) {
          spanStyle = _extends({}, spanStyle, {
            color: this.props.theme.base03
          });
        }
        return _react2['default'].createElement(
          'li', { style: containerStyle },
          _react2['default'].createElement(_JSONArrow2['default'], { theme: this.props.theme, open: this.state.expanded, onClick: this.handleClick.bind(this) }),
          _react2['default'].createElement(
            'label', {
              style: _extends({}, styles.label, {
                color: this.props.theme.base0D
              }),
              onClick: this.handleClick.bind(this)
            },
            this.props.keyName,
            ':'
          ),
          _react2['default'].createElement(
            'span', { style: spanStyle, onClick: this.handleClick.bind(this) },
            _react2['default'].createElement(
              'span', { style: styles.spanType },
              '()'
            ),
            this.getItemString()
          ),
          _react2['default'].createElement(
            'ol', { style: childListStyle },
            childNodes
          )
        );
      };

      var _JSONIterableNode = JSONIterableNode;
      JSONIterableNode = _reactMixin2['default'].decorate(_mixins.ExpandedStateHandlerMixin)(JSONIterableNode) || JSONIterableNode;
      return JSONIterableNode;
    })(_react2['default'].Component);

    exports['default'] = JSONIterableNode;
    module.exports = exports['default'];

    // flag to see if we still need to render our child nodes

    // cache store for our child nodes

    // cache store for the number of items string we display

    /***/
  }),
  /* 563 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = { "default": __webpack_require__(564), __esModule: true };

    /***/
  }),
  /* 564 */
  /***/
  (function(module, exports, __webpack_require__) {

    __webpack_require__(543);
    __webpack_require__(527);
    module.exports = __webpack_require__(565);

    /***/
  }),
  /* 565 */
  /***/
  (function(module, exports, __webpack_require__) {

    var anObject = __webpack_require__(507),
      get = __webpack_require__(566);
    module.exports = __webpack_require__(502).getIterator = function(it) {
      var iterFn = get(it);
      if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
      return anObject(iterFn.call(it));
    };

    /***/
  }),
  /* 566 */
  [647, 567, 540, 537, 502],
  /* 567 */
  [638, 520, 540],
  /* 568 */
  /***/
  (function(module, exports, __webpack_require__) {

    module.exports = { "default": __webpack_require__(569), __esModule: true };

    /***/
  }),
  /* 569 */
  /***/
  (function(module, exports, __webpack_require__) {

    __webpack_require__(570);
    module.exports = __webpack_require__(502).Number.isSafeInteger;

    /***/
  }),
  /* 570 */
  [642, 500, 571],
  /* 571 */
  [641, 506],
  /* 572 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _inherits = __webpack_require__(493)['default'];

    var _classCallCheck = __webpack_require__(511)['default'];

    var _extends = __webpack_require__(512)['default'];

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _reactMixin = __webpack_require__(553);

    var _reactMixin2 = _interopRequireDefault(_reactMixin);

    var _mixins = __webpack_require__(556);

    var _utilsHexToRgb = __webpack_require__(573);

    var _utilsHexToRgb2 = _interopRequireDefault(_utilsHexToRgb);

    var styles = {
      base: {
        paddingTop: 3,
        paddingBottom: 3,
        paddingRight: 0,
        marginLeft: 14
      },
      label: {
        display: 'inline-block',
        marginRight: 5
      }
    };

    var JSONStringNode = (function(_React$Component) {
      _inherits(JSONStringNode, _React$Component);

      function JSONStringNode() {
        _classCallCheck(this, _JSONStringNode);

        _React$Component.apply(this, arguments);
      }

      JSONStringNode.prototype.render = function render() {
        var backgroundColor = 'transparent';
        if (this.props.previousValue !== this.props.value) {
          var bgColor = _utilsHexToRgb2['default'](this.props.theme.base06);
          backgroundColor = 'rgba(' + bgColor.r + ', ' + bgColor.g + ', ' + bgColor.b + ', 0.1)';
        }
        return _react2['default'].createElement(
          'li', { style: _extends({}, styles.base, { backgroundColor: backgroundColor }), onClick: this.handleClick.bind(this) },
          _react2['default'].createElement(
            'label', {
              style: _extends({}, styles.label, {
                color: this.props.theme.base0D
              })
            },
            this.props.keyName,
            ':'
          ),
          _react2['default'].createElement(
            'span', { style: { color: this.props.theme.base0B } },
            '"',
            this.props.value,
            '"'
          )
        );
      };

      var _JSONStringNode = JSONStringNode;
      JSONStringNode = _reactMixin2['default'].decorate(_mixins.SquashClickEventMixin)(JSONStringNode) || JSONStringNode;
      return JSONStringNode;
    })(_react2['default'].Component);

    exports['default'] = JSONStringNode;
    module.exports = exports['default'];

    /***/
  }),
  /* 573 */
  /***/
  (function(module, exports) {

    "use strict";

    exports.__esModule = true;

    exports["default"] = function(hex) {
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    };

    module.exports = exports["default"];

    /***/
  }),
  /* 574 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _inherits = __webpack_require__(493)['default'];

    var _classCallCheck = __webpack_require__(511)['default'];

    var _extends = __webpack_require__(512)['default'];

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _reactMixin = __webpack_require__(553);

    var _reactMixin2 = _interopRequireDefault(_reactMixin);

    var _mixins = __webpack_require__(556);

    var _utilsHexToRgb = __webpack_require__(573);

    var _utilsHexToRgb2 = _interopRequireDefault(_utilsHexToRgb);

    var styles = {
      base: {
        paddingTop: 3,
        paddingBottom: 3,
        paddingRight: 0,
        marginLeft: 14
      },
      label: {
        display: 'inline-block',
        marginRight: 5
      }
    };

    var JSONNumberNode = (function(_React$Component) {
      _inherits(JSONNumberNode, _React$Component);

      function JSONNumberNode() {
        _classCallCheck(this, _JSONNumberNode);

        _React$Component.apply(this, arguments);
      }

      JSONNumberNode.prototype.render = function render() {
        var backgroundColor = 'transparent';
        if (this.props.previousValue !== this.props.value) {
          var bgColor = _utilsHexToRgb2['default'](this.props.theme.base06);
          backgroundColor = 'rgba(' + bgColor.r + ', ' + bgColor.g + ', ' + bgColor.b + ', 0.1)';
        }
        return _react2['default'].createElement(
          'li', { style: _extends({}, styles.base, { backgroundColor: backgroundColor }), onClick: this.handleClick.bind(this) },
          _react2['default'].createElement(
            'label', {
              style: _extends({}, styles.label, {
                color: this.props.theme.base0D
              })
            },
            this.props.keyName,
            ':'
          ),
          _react2['default'].createElement(
            'span', { style: { color: this.props.theme.base09 } },
            this.props.value
          )
        );
      };

      var _JSONNumberNode = JSONNumberNode;
      JSONNumberNode = _reactMixin2['default'].decorate(_mixins.SquashClickEventMixin)(JSONNumberNode) || JSONNumberNode;
      return JSONNumberNode;
    })(_react2['default'].Component);

    exports['default'] = JSONNumberNode;
    module.exports = exports['default'];

    /***/
  }),
  /* 575 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _inherits = __webpack_require__(493)['default'];

    var _classCallCheck = __webpack_require__(511)['default'];

    var _extends = __webpack_require__(512)['default'];

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _reactMixin = __webpack_require__(553);

    var _reactMixin2 = _interopRequireDefault(_reactMixin);

    var _mixins = __webpack_require__(556);

    var _utilsHexToRgb = __webpack_require__(573);

    var _utilsHexToRgb2 = _interopRequireDefault(_utilsHexToRgb);

    var styles = {
      base: {
        paddingTop: 3,
        paddingBottom: 3,
        paddingRight: 0,
        marginLeft: 14
      },
      label: {
        display: 'inline-block',
        marginRight: 5
      }
    };

    var JSONBooleanNode = (function(_React$Component) {
      _inherits(JSONBooleanNode, _React$Component);

      function JSONBooleanNode() {
        _classCallCheck(this, _JSONBooleanNode);

        _React$Component.apply(this, arguments);
      }

      JSONBooleanNode.prototype.render = function render() {
        var truthString = this.props.value ? 'true' : 'false';
        var backgroundColor = 'transparent';
        if (this.props.previousValue !== this.props.value) {
          var bgColor = _utilsHexToRgb2['default'](this.props.theme.base06);
          backgroundColor = 'rgba(' + bgColor.r + ', ' + bgColor.g + ', ' + bgColor.b + ', 0.1)';
        }
        return _react2['default'].createElement(
          'li', { style: _extends({}, styles.base, { backgroundColor: backgroundColor }), onClick: this.handleClick.bind(this) },
          _react2['default'].createElement(
            'label', {
              style: _extends({}, styles.label, {
                color: this.props.theme.base0D
              })
            },
            this.props.keyName,
            ':'
          ),
          _react2['default'].createElement(
            'span', { style: { color: this.props.theme.base09 } },
            truthString
          )
        );
      };

      var _JSONBooleanNode = JSONBooleanNode;
      JSONBooleanNode = _reactMixin2['default'].decorate(_mixins.SquashClickEventMixin)(JSONBooleanNode) || JSONBooleanNode;
      return JSONBooleanNode;
    })(_react2['default'].Component);

    exports['default'] = JSONBooleanNode;
    module.exports = exports['default'];

    /***/
  }),
  /* 576 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _inherits = __webpack_require__(493)['default'];

    var _classCallCheck = __webpack_require__(511)['default'];

    var _extends = __webpack_require__(512)['default'];

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _reactMixin = __webpack_require__(553);

    var _reactMixin2 = _interopRequireDefault(_reactMixin);

    var _mixins = __webpack_require__(556);

    var _utilsHexToRgb = __webpack_require__(573);

    var _utilsHexToRgb2 = _interopRequireDefault(_utilsHexToRgb);

    var styles = {
      base: {
        paddingTop: 3,
        paddingBottom: 3,
        paddingRight: 0,
        marginLeft: 14
      },
      label: {
        display: 'inline-block',
        marginRight: 5
      }
    };

    var JSONNullNode = (function(_React$Component) {
      _inherits(JSONNullNode, _React$Component);

      function JSONNullNode() {
        _classCallCheck(this, _JSONNullNode);

        _React$Component.apply(this, arguments);
      }

      JSONNullNode.prototype.render = function render() {
        var backgroundColor = 'transparent';
        if (this.props.previousValue !== this.props.value) {
          var bgColor = _utilsHexToRgb2['default'](this.props.theme.base06);
          backgroundColor = 'rgba(' + bgColor.r + ', ' + bgColor.g + ', ' + bgColor.b + ', 0.1)';
        }
        return _react2['default'].createElement(
          'li', { style: _extends({}, styles.base, { backgroundColor: backgroundColor }), onClick: this.handleClick.bind(this) },
          _react2['default'].createElement(
            'label', {
              style: _extends({}, styles.label, {
                color: this.props.theme.base0D
              })
            },
            this.props.keyName,
            ':'
          ),
          _react2['default'].createElement(
            'span', { style: { color: this.props.theme.base08 } },
            'null'
          )
        );
      };

      var _JSONNullNode = JSONNullNode;
      JSONNullNode = _reactMixin2['default'].decorate(_mixins.SquashClickEventMixin)(JSONNullNode) || JSONNullNode;
      return JSONNullNode;
    })(_react2['default'].Component);

    exports['default'] = JSONNullNode;
    module.exports = exports['default'];

    /***/
  }),
  /* 577 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    var _inherits = __webpack_require__(493)['default'];

    var _classCallCheck = __webpack_require__(511)['default'];

    var _extends = __webpack_require__(512)['default'];

    var _interopRequireDefault = __webpack_require__(522)['default'];

    exports.__esModule = true;

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _reactMixin = __webpack_require__(553);

    var _reactMixin2 = _interopRequireDefault(_reactMixin);

    var _mixins = __webpack_require__(556);

    var _utilsHexToRgb = __webpack_require__(573);

    var _utilsHexToRgb2 = _interopRequireDefault(_utilsHexToRgb);

    var styles = {
      base: {
        paddingTop: 3,
        paddingBottom: 3,
        paddingRight: 0,
        marginLeft: 14
      },
      label: {
        display: 'inline-block',
        marginRight: 5
      }
    };

    var JSONDateNode = (function(_React$Component) {
      _inherits(JSONDateNode, _React$Component);

      function JSONDateNode() {
        _classCallCheck(this, _JSONDateNode);

        _React$Component.apply(this, arguments);
      }

      JSONDateNode.prototype.render = function render() {
        var backgroundColor = 'transparent';
        if (this.props.previousValue !== this.props.value) {
          var bgColor = _utilsHexToRgb2['default'](this.props.theme.base06);
          backgroundColor = 'rgba(' + bgColor.r + ', ' + bgColor.g + ', ' + bgColor.b + ', 0.1)';
        }
        return _react2['default'].createElement(
          'li', { style: _extends({}, styles.base, { backgroundColor: backgroundColor }), onClick: this.handleClick.bind(this) },
          _react2['default'].createElement(
            'label', {
              style: _extends({}, styles.label, {
                color: this.props.theme.base0D
              })
            },
            this.props.keyName,
            ':'
          ),
          _react2['default'].createElement(
            'span', { style: { color: this.props.theme.base0B } },
            this.props.value.toISOString()
          )
        );
      };

      var _JSONDateNode = JSONDateNode;
      JSONDateNode = _reactMixin2['default'].decorate(_mixins.SquashClickEventMixin)(JSONDateNode) || JSONDateNode;
      return JSONDateNode;
    })(_react2['default'].Component);

    exports['default'] = JSONDateNode;
    module.exports = exports['default'];

    /***/
  }),
  /* 578 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'solarized',
      author: 'ethan schoonover (http://ethanschoonover.com/solarized)',
      base00: '#002b36',
      base01: '#073642',
      base02: '#586e75',
      base03: '#657b83',
      base04: '#839496',
      base05: '#93a1a1',
      base06: '#eee8d5',
      base07: '#fdf6e3',
      base08: '#dc322f',
      base09: '#cb4b16',
      base0A: '#b58900',
      base0B: '#859900',
      base0C: '#2aa198',
      base0D: '#268bd2',
      base0E: '#6c71c4',
      base0F: '#d33682'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 579 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
      }
      return target;
    }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _reactJsonTree = __webpack_require__(492);

    var _reactJsonTree2 = _interopRequireDefault(_reactJsonTree);

    var styles = {
      actionBar: {
        paddingTop: 8,
        paddingBottom: 7,
        paddingLeft: 16
      },
      payload: {
        margin: 0,
        overflow: 'auto'
      }
    };

    var LogMonitorAction = (function(_React$Component) {
      _inherits(LogMonitorAction, _React$Component);

      function LogMonitorAction() {
        _classCallCheck(this, LogMonitorAction);

        _React$Component.apply(this, arguments);
      }

      LogMonitorAction.prototype.renderPayload = function renderPayload(payload) {
        return _react2['default'].createElement(
          'div', {
            style: _extends({}, styles.payload, {
              backgroundColor: this.props.theme.base00
            })
          },
          Object.keys(payload).length > 0 ? _react2['default'].createElement(_reactJsonTree2['default'], { theme: this.props.theme, keyName: 'action', data: payload }) : ''
        );
      };

      LogMonitorAction.prototype.render = function render() {
        var _props$action = this.props.action;
        var type = _props$action.type;

        var payload = _objectWithoutProperties(_props$action, ['type']);

        return _react2['default'].createElement(
          'div', {
            style: _extends({
              backgroundColor: this.props.theme.base02,
              color: this.props.theme.base06
            }, this.props.style)
          },
          _react2['default'].createElement(
            'div', {
              style: styles.actionBar,
              onClick: this.props.onClick
            },
            type
          ),
          !this.props.collapsed ? this.renderPayload(payload) : ''
        );
      };

      return LogMonitorAction;
    })(_react2['default'].Component);

    exports['default'] = LogMonitorAction;
    module.exports = exports['default'];

    /***/
  }),
  /* 580 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    var _utilsBrighten = __webpack_require__(581);

    var _utilsBrighten2 = _interopRequireDefault(_utilsBrighten);

    var styles = {
      base: {
        cursor: 'pointer',
        fontWeight: 'bold',
        borderRadius: 3,
        padding: 4,
        marginLeft: 3,
        marginRight: 3,
        marginTop: 5,
        marginBottom: 5,
        flexGrow: 1,
        display: 'inline-block',
        fontSize: '0.8em',
        color: 'white',
        textDecoration: 'none'
      }
    };

    var LogMonitorButton = (function(_React$Component) {
      _inherits(LogMonitorButton, _React$Component);

      function LogMonitorButton(props) {
        _classCallCheck(this, LogMonitorButton);

        _React$Component.call(this, props);
        this.state = {
          hovered: false,
          active: false
        };
      }

      LogMonitorButton.prototype.handleMouseEnter = function handleMouseEnter() {
        this.setState({ hovered: true });
      };

      LogMonitorButton.prototype.handleMouseLeave = function handleMouseLeave() {
        this.setState({ hovered: false });
      };

      LogMonitorButton.prototype.handleMouseDown = function handleMouseDown() {
        this.setState({ active: true });
      };

      LogMonitorButton.prototype.handleMouseUp = function handleMouseUp() {
        this.setState({ active: false });
      };

      LogMonitorButton.prototype.onClick = function onClick() {
        if (!this.props.enabled) {
          return;
        }
        if (this.props.onClick) {
          this.props.onClick();
        }
      };

      LogMonitorButton.prototype.render = function render() {
        var style = _extends({}, styles.base, {
          backgroundColor: this.props.theme.base02
        });
        if (this.props.enabled && this.state.hovered) {
          style = _extends({}, style, {
            backgroundColor: _utilsBrighten2['default'](this.props.theme.base02, 0.2)
          });
        }
        if (!this.props.enabled) {
          style = _extends({}, style, {
            opacity: 0.2,
            cursor: 'text',
            backgroundColor: 'transparent'
          });
        }
        return _react2['default'].createElement(
          'a', {
            onMouseEnter: this.handleMouseEnter.bind(this),
            onMouseLeave: this.handleMouseLeave.bind(this),
            onMouseDown: this.handleMouseDown.bind(this),
            onMouseUp: this.handleMouseUp.bind(this),
            style: style,
            onClick: this.onClick.bind(this)
          },
          this.props.children
        );
      };

      return LogMonitorButton;
    })(_react2['default'].Component);

    exports['default'] = LogMonitorButton;
    module.exports = exports['default'];

    /***/
  }),
  /* 581 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;

    exports['default'] = function(hexColor, lightness) {
      var hex = String(hexColor).replace(/[^0-9a-f]/gi, '');
      if (hex.length < 6) {
        hex = hex.replace(/(.)/g, '$1$1');
      }
      var lum = lightness || 0;

      var rgb = '#';
      var c = undefined;
      for (var i = 0; i < 3; ++i) {
        c = parseInt(hex.substr(i * 2, 2), 16);
        c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);
        rgb += ('00' + c).substr(c.length);
      }
      return rgb;
    };

    module.exports = exports['default'];

    /***/
  }),
  /* 582 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

    var _threezerotwofour = __webpack_require__(583);

    exports.threezerotwofour = _interopRequire(_threezerotwofour);

    var _apathy = __webpack_require__(584);

    exports.apathy = _interopRequire(_apathy);

    var _ashes = __webpack_require__(585);

    exports.ashes = _interopRequire(_ashes);

    var _atelierDune = __webpack_require__(586);

    exports.atelierDune = _interopRequire(_atelierDune);

    var _atelierForest = __webpack_require__(587);

    exports.atelierForest = _interopRequire(_atelierForest);

    var _atelierHeath = __webpack_require__(588);

    exports.atelierHeath = _interopRequire(_atelierHeath);

    var _atelierLakeside = __webpack_require__(589);

    exports.atelierLakeside = _interopRequire(_atelierLakeside);

    var _atelierSeaside = __webpack_require__(590);

    exports.atelierSeaside = _interopRequire(_atelierSeaside);

    var _bespin = __webpack_require__(591);

    exports.bespin = _interopRequire(_bespin);

    var _brewer = __webpack_require__(592);

    exports.brewer = _interopRequire(_brewer);

    var _bright = __webpack_require__(593);

    exports.bright = _interopRequire(_bright);

    var _chalk = __webpack_require__(594);

    exports.chalk = _interopRequire(_chalk);

    var _codeschool = __webpack_require__(595);

    exports.codeschool = _interopRequire(_codeschool);

    var _colors = __webpack_require__(596);

    exports.colors = _interopRequire(_colors);

    var _default = __webpack_require__(597);

    exports['default'] = _interopRequire(_default);

    var _eighties = __webpack_require__(598);

    exports.eighties = _interopRequire(_eighties);

    var _embers = __webpack_require__(599);

    exports.embers = _interopRequire(_embers);

    var _flat = __webpack_require__(600);

    exports.flat = _interopRequire(_flat);

    var _google = __webpack_require__(601);

    exports.google = _interopRequire(_google);

    var _grayscale = __webpack_require__(602);

    exports.grayscale = _interopRequire(_grayscale);

    var _greenscreen = __webpack_require__(603);

    exports.greenscreen = _interopRequire(_greenscreen);

    var _harmonic = __webpack_require__(604);

    exports.harmonic = _interopRequire(_harmonic);

    var _hopscotch = __webpack_require__(605);

    exports.hopscotch = _interopRequire(_hopscotch);

    var _isotope = __webpack_require__(606);

    exports.isotope = _interopRequire(_isotope);

    var _marrakesh = __webpack_require__(607);

    exports.marrakesh = _interopRequire(_marrakesh);

    var _mocha = __webpack_require__(608);

    exports.mocha = _interopRequire(_mocha);

    var _monokai = __webpack_require__(609);

    exports.monokai = _interopRequire(_monokai);

    var _ocean = __webpack_require__(610);

    exports.ocean = _interopRequire(_ocean);

    var _paraiso = __webpack_require__(611);

    exports.paraiso = _interopRequire(_paraiso);

    var _pop = __webpack_require__(612);

    exports.pop = _interopRequire(_pop);

    var _railscasts = __webpack_require__(613);

    exports.railscasts = _interopRequire(_railscasts);

    var _shapeshifter = __webpack_require__(614);

    exports.shapeshifter = _interopRequire(_shapeshifter);

    var _solarized = __webpack_require__(615);

    exports.solarized = _interopRequire(_solarized);

    var _summerfruit = __webpack_require__(616);

    exports.summerfruit = _interopRequire(_summerfruit);

    var _tomorrow = __webpack_require__(617);

    exports.tomorrow = _interopRequire(_tomorrow);

    var _tube = __webpack_require__(618);

    exports.tube = _interopRequire(_tube);

    var _twilight = __webpack_require__(619);

    exports.twilight = _interopRequire(_twilight);

    var _nicinabox = __webpack_require__(620);

    exports.nicinabox = _interopRequire(_nicinabox);

    /***/
  }),
  /* 583 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'threezerotwofour',
      author: 'jan t. sott (http://github.com/idleberg)',
      base00: '#090300',
      base01: '#3a3432',
      base02: '#4a4543',
      base03: '#5c5855',
      base04: '#807d7c',
      base05: '#a5a2a2',
      base06: '#d6d5d4',
      base07: '#f7f7f7',
      base08: '#db2d20',
      base09: '#e8bbd0',
      base0A: '#fded02',
      base0B: '#01a252',
      base0C: '#b5e4f4',
      base0D: '#01a0e4',
      base0E: '#a16a94',
      base0F: '#cdab53'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 584 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'apathy',
      author: 'jannik siebert (https://github.com/janniks)',
      base00: '#031A16',
      base01: '#0B342D',
      base02: '#184E45',
      base03: '#2B685E',
      base04: '#5F9C92',
      base05: '#81B5AC',
      base06: '#A7CEC8',
      base07: '#D2E7E4',
      base08: '#3E9688',
      base09: '#3E7996',
      base0A: '#3E4C96',
      base0B: '#883E96',
      base0C: '#963E4C',
      base0D: '#96883E',
      base0E: '#4C963E',
      base0F: '#3E965B'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 585 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'ashes',
      author: 'jannik siebert (https://github.com/janniks)',
      base00: '#1C2023',
      base01: '#393F45',
      base02: '#565E65',
      base03: '#747C84',
      base04: '#ADB3BA',
      base05: '#C7CCD1',
      base06: '#DFE2E5',
      base07: '#F3F4F5',
      base08: '#C7AE95',
      base09: '#C7C795',
      base0A: '#AEC795',
      base0B: '#95C7AE',
      base0C: '#95AEC7',
      base0D: '#AE95C7',
      base0E: '#C795AE',
      base0F: '#C79595'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 586 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'atelier dune',
      author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/dune)',
      base00: '#20201d',
      base01: '#292824',
      base02: '#6e6b5e',
      base03: '#7d7a68',
      base04: '#999580',
      base05: '#a6a28c',
      base06: '#e8e4cf',
      base07: '#fefbec',
      base08: '#d73737',
      base09: '#b65611',
      base0A: '#cfb017',
      base0B: '#60ac39',
      base0C: '#1fad83',
      base0D: '#6684e1',
      base0E: '#b854d4',
      base0F: '#d43552'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 587 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'atelier forest',
      author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/forest)',
      base00: '#1b1918',
      base01: '#2c2421',
      base02: '#68615e',
      base03: '#766e6b',
      base04: '#9c9491',
      base05: '#a8a19f',
      base06: '#e6e2e0',
      base07: '#f1efee',
      base08: '#f22c40',
      base09: '#df5320',
      base0A: '#d5911a',
      base0B: '#5ab738',
      base0C: '#00ad9c',
      base0D: '#407ee7',
      base0E: '#6666ea',
      base0F: '#c33ff3'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 588 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'atelier heath',
      author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/heath)',
      base00: '#1b181b',
      base01: '#292329',
      base02: '#695d69',
      base03: '#776977',
      base04: '#9e8f9e',
      base05: '#ab9bab',
      base06: '#d8cad8',
      base07: '#f7f3f7',
      base08: '#ca402b',
      base09: '#a65926',
      base0A: '#bb8a35',
      base0B: '#379a37',
      base0C: '#159393',
      base0D: '#516aec',
      base0E: '#7b59c0',
      base0F: '#cc33cc'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 589 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'atelier lakeside',
      author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/lakeside/)',
      base00: '#161b1d',
      base01: '#1f292e',
      base02: '#516d7b',
      base03: '#5a7b8c',
      base04: '#7195a8',
      base05: '#7ea2b4',
      base06: '#c1e4f6',
      base07: '#ebf8ff',
      base08: '#d22d72',
      base09: '#935c25',
      base0A: '#8a8a0f',
      base0B: '#568c3b',
      base0C: '#2d8f6f',
      base0D: '#257fad',
      base0E: '#5d5db1',
      base0F: '#b72dd2'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 590 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'atelier seaside',
      author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/seaside/)',
      base00: '#131513',
      base01: '#242924',
      base02: '#5e6e5e',
      base03: '#687d68',
      base04: '#809980',
      base05: '#8ca68c',
      base06: '#cfe8cf',
      base07: '#f0fff0',
      base08: '#e6193c',
      base09: '#87711d',
      base0A: '#c3c322',
      base0B: '#29a329',
      base0C: '#1999b3',
      base0D: '#3d62f5',
      base0E: '#ad2bee',
      base0F: '#e619c3'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 591 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'bespin',
      author: 'jan t. sott',
      base00: '#28211c',
      base01: '#36312e',
      base02: '#5e5d5c',
      base03: '#666666',
      base04: '#797977',
      base05: '#8a8986',
      base06: '#9d9b97',
      base07: '#baae9e',
      base08: '#cf6a4c',
      base09: '#cf7d34',
      base0A: '#f9ee98',
      base0B: '#54be0d',
      base0C: '#afc4db',
      base0D: '#5ea6ea',
      base0E: '#9b859d',
      base0F: '#937121'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 592 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'brewer',
      author: 'timothée poisot (http://github.com/tpoisot)',
      base00: '#0c0d0e',
      base01: '#2e2f30',
      base02: '#515253',
      base03: '#737475',
      base04: '#959697',
      base05: '#b7b8b9',
      base06: '#dadbdc',
      base07: '#fcfdfe',
      base08: '#e31a1c',
      base09: '#e6550d',
      base0A: '#dca060',
      base0B: '#31a354',
      base0C: '#80b1d3',
      base0D: '#3182bd',
      base0E: '#756bb1',
      base0F: '#b15928'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 593 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'bright',
      author: 'chris kempson (http://chriskempson.com)',
      base00: '#000000',
      base01: '#303030',
      base02: '#505050',
      base03: '#b0b0b0',
      base04: '#d0d0d0',
      base05: '#e0e0e0',
      base06: '#f5f5f5',
      base07: '#ffffff',
      base08: '#fb0120',
      base09: '#fc6d24',
      base0A: '#fda331',
      base0B: '#a1c659',
      base0C: '#76c7b7',
      base0D: '#6fb3d2',
      base0E: '#d381c3',
      base0F: '#be643c'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 594 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'chalk',
      author: 'chris kempson (http://chriskempson.com)',
      base00: '#151515',
      base01: '#202020',
      base02: '#303030',
      base03: '#505050',
      base04: '#b0b0b0',
      base05: '#d0d0d0',
      base06: '#e0e0e0',
      base07: '#f5f5f5',
      base08: '#fb9fb1',
      base09: '#eda987',
      base0A: '#ddb26f',
      base0B: '#acc267',
      base0C: '#12cfc0',
      base0D: '#6fc2ef',
      base0E: '#e1a3ee',
      base0F: '#deaf8f'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 595 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'codeschool',
      author: 'brettof86',
      base00: '#232c31',
      base01: '#1c3657',
      base02: '#2a343a',
      base03: '#3f4944',
      base04: '#84898c',
      base05: '#9ea7a6',
      base06: '#a7cfa3',
      base07: '#b5d8f6',
      base08: '#2a5491',
      base09: '#43820d',
      base0A: '#a03b1e',
      base0B: '#237986',
      base0C: '#b02f30',
      base0D: '#484d79',
      base0E: '#c59820',
      base0F: '#c98344'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 596 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'colors',
      author: 'mrmrs (http://clrs.cc)',
      base00: '#111111',
      base01: '#333333',
      base02: '#555555',
      base03: '#777777',
      base04: '#999999',
      base05: '#bbbbbb',
      base06: '#dddddd',
      base07: '#ffffff',
      base08: '#ff4136',
      base09: '#ff851b',
      base0A: '#ffdc00',
      base0B: '#2ecc40',
      base0C: '#7fdbff',
      base0D: '#0074d9',
      base0E: '#b10dc9',
      base0F: '#85144b'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 597 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'default',
      author: 'chris kempson (http://chriskempson.com)',
      base00: '#181818',
      base01: '#282828',
      base02: '#383838',
      base03: '#585858',
      base04: '#b8b8b8',
      base05: '#d8d8d8',
      base06: '#e8e8e8',
      base07: '#f8f8f8',
      base08: '#ab4642',
      base09: '#dc9656',
      base0A: '#f7ca88',
      base0B: '#a1b56c',
      base0C: '#86c1b9',
      base0D: '#7cafc2',
      base0E: '#ba8baf',
      base0F: '#a16946'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 598 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'eighties',
      author: 'chris kempson (http://chriskempson.com)',
      base00: '#2d2d2d',
      base01: '#393939',
      base02: '#515151',
      base03: '#747369',
      base04: '#a09f93',
      base05: '#d3d0c8',
      base06: '#e8e6df',
      base07: '#f2f0ec',
      base08: '#f2777a',
      base09: '#f99157',
      base0A: '#ffcc66',
      base0B: '#99cc99',
      base0C: '#66cccc',
      base0D: '#6699cc',
      base0E: '#cc99cc',
      base0F: '#d27b53'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 599 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'embers',
      author: 'jannik siebert (https://github.com/janniks)',
      base00: '#16130F',
      base01: '#2C2620',
      base02: '#433B32',
      base03: '#5A5047',
      base04: '#8A8075',
      base05: '#A39A90',
      base06: '#BEB6AE',
      base07: '#DBD6D1',
      base08: '#826D57',
      base09: '#828257',
      base0A: '#6D8257',
      base0B: '#57826D',
      base0C: '#576D82',
      base0D: '#6D5782',
      base0E: '#82576D',
      base0F: '#825757'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 600 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'flat',
      author: 'chris kempson (http://chriskempson.com)',
      base00: '#2C3E50',
      base01: '#34495E',
      base02: '#7F8C8D',
      base03: '#95A5A6',
      base04: '#BDC3C7',
      base05: '#e0e0e0',
      base06: '#f5f5f5',
      base07: '#ECF0F1',
      base08: '#E74C3C',
      base09: '#E67E22',
      base0A: '#F1C40F',
      base0B: '#2ECC71',
      base0C: '#1ABC9C',
      base0D: '#3498DB',
      base0E: '#9B59B6',
      base0F: '#be643c'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 601 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'google',
      author: 'seth wright (http://sethawright.com)',
      base00: '#1d1f21',
      base01: '#282a2e',
      base02: '#373b41',
      base03: '#969896',
      base04: '#b4b7b4',
      base05: '#c5c8c6',
      base06: '#e0e0e0',
      base07: '#ffffff',
      base08: '#CC342B',
      base09: '#F96A38',
      base0A: '#FBA922',
      base0B: '#198844',
      base0C: '#3971ED',
      base0D: '#3971ED',
      base0E: '#A36AC7',
      base0F: '#3971ED'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 602 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'grayscale',
      author: 'alexandre gavioli (https://github.com/alexx2/)',
      base00: '#101010',
      base01: '#252525',
      base02: '#464646',
      base03: '#525252',
      base04: '#ababab',
      base05: '#b9b9b9',
      base06: '#e3e3e3',
      base07: '#f7f7f7',
      base08: '#7c7c7c',
      base09: '#999999',
      base0A: '#a0a0a0',
      base0B: '#8e8e8e',
      base0C: '#868686',
      base0D: '#686868',
      base0E: '#747474',
      base0F: '#5e5e5e'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 603 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'green screen',
      author: 'chris kempson (http://chriskempson.com)',
      base00: '#001100',
      base01: '#003300',
      base02: '#005500',
      base03: '#007700',
      base04: '#009900',
      base05: '#00bb00',
      base06: '#00dd00',
      base07: '#00ff00',
      base08: '#007700',
      base09: '#009900',
      base0A: '#007700',
      base0B: '#00bb00',
      base0C: '#005500',
      base0D: '#009900',
      base0E: '#00bb00',
      base0F: '#005500'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 604 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'harmonic16',
      author: 'jannik siebert (https://github.com/janniks)',
      base00: '#0b1c2c',
      base01: '#223b54',
      base02: '#405c79',
      base03: '#627e99',
      base04: '#aabcce',
      base05: '#cbd6e2',
      base06: '#e5ebf1',
      base07: '#f7f9fb',
      base08: '#bf8b56',
      base09: '#bfbf56',
      base0A: '#8bbf56',
      base0B: '#56bf8b',
      base0C: '#568bbf',
      base0D: '#8b56bf',
      base0E: '#bf568b',
      base0F: '#bf5656'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 605 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'hopscotch',
      author: 'jan t. sott',
      base00: '#322931',
      base01: '#433b42',
      base02: '#5c545b',
      base03: '#797379',
      base04: '#989498',
      base05: '#b9b5b8',
      base06: '#d5d3d5',
      base07: '#ffffff',
      base08: '#dd464c',
      base09: '#fd8b19',
      base0A: '#fdcc59',
      base0B: '#8fc13e',
      base0C: '#149b93',
      base0D: '#1290bf',
      base0E: '#c85e7c',
      base0F: '#b33508'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 606 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'isotope',
      author: 'jan t. sott',
      base00: '#000000',
      base01: '#404040',
      base02: '#606060',
      base03: '#808080',
      base04: '#c0c0c0',
      base05: '#d0d0d0',
      base06: '#e0e0e0',
      base07: '#ffffff',
      base08: '#ff0000',
      base09: '#ff9900',
      base0A: '#ff0099',
      base0B: '#33ff00',
      base0C: '#00ffff',
      base0D: '#0066ff',
      base0E: '#cc00ff',
      base0F: '#3300ff'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 607 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'marrakesh',
      author: 'alexandre gavioli (http://github.com/alexx2/)',
      base00: '#201602',
      base01: '#302e00',
      base02: '#5f5b17',
      base03: '#6c6823',
      base04: '#86813b',
      base05: '#948e48',
      base06: '#ccc37a',
      base07: '#faf0a5',
      base08: '#c35359',
      base09: '#b36144',
      base0A: '#a88339',
      base0B: '#18974e',
      base0C: '#75a738',
      base0D: '#477ca1',
      base0E: '#8868b3',
      base0F: '#b3588e'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 608 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'mocha',
      author: 'chris kempson (http://chriskempson.com)',
      base00: '#3B3228',
      base01: '#534636',
      base02: '#645240',
      base03: '#7e705a',
      base04: '#b8afad',
      base05: '#d0c8c6',
      base06: '#e9e1dd',
      base07: '#f5eeeb',
      base08: '#cb6077',
      base09: '#d28b71',
      base0A: '#f4bc87',
      base0B: '#beb55b',
      base0C: '#7bbda4',
      base0D: '#8ab3b5',
      base0E: '#a89bb9',
      base0F: '#bb9584'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 609 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'monokai',
      author: 'wimer hazenberg (http://www.monokai.nl)',
      base00: '#272822',
      base01: '#383830',
      base02: '#49483e',
      base03: '#75715e',
      base04: '#a59f85',
      base05: '#f8f8f2',
      base06: '#f5f4f1',
      base07: '#f9f8f5',
      base08: '#f92672',
      base09: '#fd971f',
      base0A: '#f4bf75',
      base0B: '#a6e22e',
      base0C: '#a1efe4',
      base0D: '#66d9ef',
      base0E: '#ae81ff',
      base0F: '#cc6633'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 610 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'ocean',
      author: 'chris kempson (http://chriskempson.com)',
      base00: '#2b303b',
      base01: '#343d46',
      base02: '#4f5b66',
      base03: '#65737e',
      base04: '#a7adba',
      base05: '#c0c5ce',
      base06: '#dfe1e8',
      base07: '#eff1f5',
      base08: '#bf616a',
      base09: '#d08770',
      base0A: '#ebcb8b',
      base0B: '#a3be8c',
      base0C: '#96b5b4',
      base0D: '#8fa1b3',
      base0E: '#b48ead',
      base0F: '#ab7967'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 611 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'paraiso',
      author: 'jan t. sott',
      base00: '#2f1e2e',
      base01: '#41323f',
      base02: '#4f424c',
      base03: '#776e71',
      base04: '#8d8687',
      base05: '#a39e9b',
      base06: '#b9b6b0',
      base07: '#e7e9db',
      base08: '#ef6155',
      base09: '#f99b15',
      base0A: '#fec418',
      base0B: '#48b685',
      base0C: '#5bc4bf',
      base0D: '#06b6ef',
      base0E: '#815ba4',
      base0F: '#e96ba8'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 612 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'pop',
      author: 'chris kempson (http://chriskempson.com)',
      base00: '#000000',
      base01: '#202020',
      base02: '#303030',
      base03: '#505050',
      base04: '#b0b0b0',
      base05: '#d0d0d0',
      base06: '#e0e0e0',
      base07: '#ffffff',
      base08: '#eb008a',
      base09: '#f29333',
      base0A: '#f8ca12',
      base0B: '#37b349',
      base0C: '#00aabb',
      base0D: '#0e5a94',
      base0E: '#b31e8d',
      base0F: '#7a2d00'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 613 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'railscasts',
      author: 'ryan bates (http://railscasts.com)',
      base00: '#2b2b2b',
      base01: '#272935',
      base02: '#3a4055',
      base03: '#5a647e',
      base04: '#d4cfc9',
      base05: '#e6e1dc',
      base06: '#f4f1ed',
      base07: '#f9f7f3',
      base08: '#da4939',
      base09: '#cc7833',
      base0A: '#ffc66d',
      base0B: '#a5c261',
      base0C: '#519f50',
      base0D: '#6d9cbe',
      base0E: '#b6b3eb',
      base0F: '#bc9458'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 614 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'shapeshifter',
      author: 'tyler benziger (http://tybenz.com)',
      base00: '#000000',
      base01: '#040404',
      base02: '#102015',
      base03: '#343434',
      base04: '#555555',
      base05: '#ababab',
      base06: '#e0e0e0',
      base07: '#f9f9f9',
      base08: '#e92f2f',
      base09: '#e09448',
      base0A: '#dddd13',
      base0B: '#0ed839',
      base0C: '#23edda',
      base0D: '#3b48e3',
      base0E: '#f996e2',
      base0F: '#69542d'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 615 */
  578,
  /* 616 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'summerfruit',
      author: 'christopher corley (http://cscorley.github.io/)',
      base00: '#151515',
      base01: '#202020',
      base02: '#303030',
      base03: '#505050',
      base04: '#B0B0B0',
      base05: '#D0D0D0',
      base06: '#E0E0E0',
      base07: '#FFFFFF',
      base08: '#FF0086',
      base09: '#FD8900',
      base0A: '#ABA800',
      base0B: '#00C918',
      base0C: '#1faaaa',
      base0D: '#3777E6',
      base0E: '#AD00A1',
      base0F: '#cc6633'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 617 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'tomorrow',
      author: 'chris kempson (http://chriskempson.com)',
      base00: '#1d1f21',
      base01: '#282a2e',
      base02: '#373b41',
      base03: '#969896',
      base04: '#b4b7b4',
      base05: '#c5c8c6',
      base06: '#e0e0e0',
      base07: '#ffffff',
      base08: '#cc6666',
      base09: '#de935f',
      base0A: '#f0c674',
      base0B: '#b5bd68',
      base0C: '#8abeb7',
      base0D: '#81a2be',
      base0E: '#b294bb',
      base0F: '#a3685a'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 618 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'london tube',
      author: 'jan t. sott',
      base00: '#231f20',
      base01: '#1c3f95',
      base02: '#5a5758',
      base03: '#737171',
      base04: '#959ca1',
      base05: '#d9d8d8',
      base06: '#e7e7e8',
      base07: '#ffffff',
      base08: '#ee2e24',
      base09: '#f386a1',
      base0A: '#ffd204',
      base0B: '#00853e',
      base0C: '#85cebc',
      base0D: '#009ddc',
      base0E: '#98005d',
      base0F: '#b06110'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 619 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'twilight',
      author: 'david hart (http://hart-dev.com)',
      base00: '#1e1e1e',
      base01: '#323537',
      base02: '#464b50',
      base03: '#5f5a60',
      base04: '#838184',
      base05: '#a7a7a7',
      base06: '#c3c3c3',
      base07: '#ffffff',
      base08: '#cf6a4c',
      base09: '#cda869',
      base0A: '#f9ee98',
      base0B: '#8f9d6a',
      base0C: '#afc4db',
      base0D: '#7587a6',
      base0E: '#9b859d',
      base0F: '#9b703f'
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 620 */
  /***/
  (function(module, exports) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = {
      scheme: 'nicinabox',
      author: 'nicinabox (http://github.com/nicinabox)',
      base00: '#2A2F3A',
      base01: '#3C444F',
      base02: '#4F5A65',
      base03: '#BEBEBE',
      base04: '#b0b0b0', // unmodified
      base05: '#d0d0d0', // unmodified
      base06: '#FFFFFF',
      base07: '#f5f5f5', // unmodified
      base08: '#fb9fb1', // unmodified
      base09: '#FC6D24',
      base0A: '#ddb26f', // unmodified
      base0B: '#A1C659',
      base0C: '#12cfc0', // unmodified
      base0D: '#6FB3D2',
      base0E: '#D381C3',
      base0F: '#deaf8f' // unmodified
    };
    module.exports = exports['default'];

    /***/
  }),
  /* 621 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    exports.__esModule = true;

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
    })();

    exports.getDefaultStyle = getDefaultStyle;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var _react = __webpack_require__(223);

    var _react2 = _interopRequireDefault(_react);

    function getDefaultStyle(props) {
      var left = props.left;
      var right = props.right;
      var bottom = props.bottom;
      var top = props.top;

      if (typeof left === 'undefined' && typeof right === 'undefined') {
        right = true;
      }
      if (typeof top === 'undefined' && typeof bottom === 'undefined') {
        bottom = true;
      }

      return {
        position: 'fixed',
        zIndex: 10000,
        fontSize: 17,
        overflow: 'hidden',
        opacity: 1,
        color: 'white',
        left: left ? 0 : undefined,
        right: right ? 0 : undefined,
        top: top ? 0 : undefined,
        bottom: bottom ? 0 : undefined,
        maxHeight: bottom && top ? '100%' : '30%',
        maxWidth: left && right ? '100%' : '30%',
        wordWrap: 'break-word',
        boxSizing: 'border-box',
        boxShadow: '-2px 0 7px 0 rgba(0, 0, 0, 0.5)'
      };
    }

    var DebugPanel = (function() {
      function DebugPanel() {
        _classCallCheck(this, DebugPanel);
      }

      DebugPanel.prototype.render = function render() {
        return _react2['default'].createElement(
          'div', { style: _extends({}, this.props.getStyle(this.props), this.props.style) },
          this.props.children
        );
      };

      _createClass(DebugPanel, null, [{
        key: 'propTypes',
        value: {
          left: _react.PropTypes.bool,
          right: _react.PropTypes.bool,
          bottom: _react.PropTypes.bool,
          top: _react.PropTypes.bool,
          getStyle: _react.PropTypes.func.isRequired
        },
        enumerable: true
      }, {
        key: 'defaultProps',
        value: {
          getStyle: getDefaultStyle
        },
        enumerable: true
      }]);

      return DebugPanel;
    })();

    exports['default'] = DebugPanel;

    /***/
  }),
  /* 622 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

    var _visual = __webpack_require__(623);

    exports.visualApp = _interopRequire(_visual);

    /***/
  }),
  /* 623 */
  /***/
  (function(module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _actionsMap;

    var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    exports['default'] = visual;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var _constantsActionTypes = __webpack_require__(476);

    var ActionTypes = _interopRequireWildcard(_constantsActionTypes);

    var _constantsAppConstants = __webpack_require__(208);

    var AppConstants = _interopRequireWildcard(_constantsAppConstants);

    var _formattersPageMonitorToJob = __webpack_require__(220);

    var _formattersPageMonitorToJob2 = _interopRequireDefault(_formattersPageMonitorToJob);

    var _formattersBase64Image = __webpack_require__(199);

    // THIS IS ESSENTIALLY WHAT THE GLOBAL STATE IS COMPOSED OF
    // Some values set dynamically in popup.js
    var initialState = {
      page: 'capture',
      tab: 'server-tab',
      currentCapture: {
        captureDidSave: false,
        checkInterval: '0',
        checkIntervalType: 'Day',
        trigger: 'Tiny Change',
        email: '',
        crop: {},
        active: true,
        selection: true // Just for UI
      },
      settings: {
        sound_enabled: 'Enabled',
        sound_clip: 'Ping',
        trigger_notificaitons: 'Enabled',
        tab_preference: 'Server'
      },
      browserJobs: [],
      browserUpdates: [],
      survey_data: {
        completed: false,
        page: 'satisfied',
        satisfied: null,
        will_give_feedback: null,
        will_fill_survey: null
      },
      pm_user: false
    };

    var PM = new _formattersPageMonitorToJob2['default']();

    // Reducer Map
    var actionsMap = (_actionsMap = {}, _defineProperty(_actionsMap, ActionTypes.VIEW_JOBS, function(state, action) {
      var newPage = 'jobs';
      var newState = _extends({}, state);
      newState.page = newPage;
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.VIEW_UPDATES, function(state, action) {
      var newPage = 'updates';
      var newState = _extends({}, state);
      newState.page = newPage;
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.VIEW_CAPTURE, function(state, action) {
      var newPage = 'capture';
      var newState = _extends({}, state);
      newState.page = newPage;
      // Reset captureDidSave if clicked
      newState.currentCapture = _extends({}, state.currentCapture, { captureDidSave: false });
      // Handle difference required of interval input
      if (newState.tab === 'browser-tab') {
        newState.currentCapture.checkInterval = '1';
        newState.currentCapture.checkIntervalType = AppConstants.BROWSER_INTERVAL_OPTIONS[1];
      } else if (newState.tab === 'server-tab') {
        newState.currentCapture.checkIntervalType = AppConstants.SERVER_INTERVAL_OPTIONS[1];
      }

      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.VIEW_OPTIONS, function(state, action) {
      var newState = _extends({}, state);
      var newPage = 'settings';
      newState.page = newPage;
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.LOAD_BROWSER_JOBS, function(state, action) {
      var newState = _extends({}, state);
      if (action.res) {
        newState.browserJobs = action.res;
        // Set crop object for each
        newState.browserJobs.map(function(job, i) {
          var crop = {
            scroll_top: job.crop_scroll_top,
            orig_width: job.crop_orig_width,
            orig_height: job.crop_orig_height,
            width: job.crop_width,
            height: job.crop_height,
            x: job.crop_x,
            y: job.crop_y
          };
          newState.browserJobs[i].crop = crop;
        });
      }
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.LOAD_BROWSER_UPDATES, function(state, action) {
      var newState = _extends({}, state);
      newState.browserUpdates = action.res;
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.LOAD_LATEST_CAPTURES, function(state, action) {
      var newState = _extends({}, state);
      if (action.res && action.res.length > 0) {
        (function() {
          var jobID = action.res[0].job_id;
          var jobIndex = Array.findIndex(newState.browserJobs, function(job) {
            return job.job_id === jobID;
          });
          if (newState.browserJobs[jobIndex]) {
            newState.browserJobs[jobIndex].captures = action.res;
            var img = (0, _formattersBase64Image.joinBase64Image)(action.res[0].image_mime, action.res[0].img_data);
            newState.browserJobs[jobIndex].currentScreenshot = img;
          }
        })();
      }
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.LOAD_CAPTURES_FOR_UPDATE, function(state, action) {
      var newState = _extends({}, state);
      var jobID = action.res.update.job_id;
      if (jobID === 'undefined' || !(action.res.captures.length === 2)) {
        console.log('Could not load captures for update');
        return newState;
      }
      var updateIndex = Array.findIndex(newState.browserUpdates, function(update) {
        return update.job_id === jobID;
      });

      if (!(updateIndex === -1)) {
        // Set screenshots
        newState.browserUpdates[updateIndex].lastScreenshot = (0, _formattersBase64Image.joinBase64Image)(action.res.captures[1].image_mime, action.res.captures[1].img_data);
        newState.browserUpdates[updateIndex].currentScreenshot = (0, _formattersBase64Image.joinBase64Image)(action.res.captures[0].image_mime, action.res.captures[0].img_data);
      }

      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.LOAD_JOB_FOR_UPDATE, function(state, action) {
      var newState = _extends({}, state);
      var jobID = action.res.job_id;
      if (jobID === 'undefined') {
        console.log('Could not load job for update');
        return newState;
      }
      var updateIndex = Array.findIndex(newState.browserUpdates, function(update) {
        return update.job_id === jobID;
      });
      if (!(updateIndex === -1)) {
        // Append necessary job data to update (will be used in diff/updates view)
        newState.browserUpdates[updateIndex].url = action.res.url;
      }

      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.MARK_UPDATE_AS_READ, function(state, action) {
      var newState = _extends({}, state);
      var jobID = action.job_id;
      if (!jobID) {
        console.log('Could not load job for update');
        return newState;
      }
      var updateIndex = Array.findIndex(newState.browserUpdates, function(update) {
        return update.job_id === jobID;
      });
      newState.browserUpdates.splice(updateIndex, 1);
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.TAKE_SCREENSHOT, function(state, action) {
      var newState = _extends({}, state);
      newState.currentCapture.img = action.res.url;
      // For UI tip
      if (newState.currentCapture.crop.x === 0 && newState.currentCapture.crop.y === 0) {
        newState.currentCapture.selection = false;
      }

      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.SET_CURRENT_SELECTOR, function(state, action) {
      var newState = _extends({}, state);
      var selector = action.res;
      if (!(selector === 'body') && !(selector === '')) {
        // Set selector and mode
        newState.currentCapture.selector = selector;
        newState.currentCapture.mode = 'selector';
      } else {
        // Reset if not a good ID
        newState.currentCapture.selector = '';
        newState.currentCapture.mode = 'text';
      }
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.SET_CURRENT_CROP, function(state, action) {
      var newState = _extends({}, state);
      newState.currentCapture.crop = action.crop;
      // For UI tip
      if (action.crop.x > 0 && action.crop.y > 0) {
        newState.currentCapture.selection = true;
      }
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.SET_CROPPED_PREVIEW, function(state, action) {
      var newState = _extends({}, state);
      newState.currentCapture.cropped_img = action.res.url;
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.SET_CURRENT_CAPTURE_INFO, function(state, action) {
      var newState = _extends({}, state);
      newState.currentCapture = _extends({}, state.currentCapture, action.info);
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.SAVE_JOB, function(state, action) {
      var newState = _extends({}, state);
      if (action.res.id) {
        if (action.res.display_survey === true) {
          newState.page = 'survey';
        } else {
          newState.currentCapture = _extends({}, state.currentCapture, action.res, { captureDidSave: true });
        }
      } else if (action.res.success === false) {
        newState.currentCapture = _extends({}, state.currentCapture, { error: action.res.error });
      }
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.SERVER_JOB_SAVED, function(state, action) {
      var newState = _extends({}, state);
      if (action.res.id) {
        if (action.res.display_survey === true) {
          newState.page = 'survey';
        } else {
          newState.currentCapture = _extends({}, state.currentCapture, { captureDidSave: true });
        }
      } else if (action.res.success === false) {
        newState.currentCapture.error = action.res.error;
      }
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.UPDATE_JOB, function(state, action) {
      // Select job and update state
      var job = action.job;
      var jobID = job.job_id;
      var newState = _extends({}, state);
      var jobIndex = Array.findIndex(newState.browserJobs, function(j) {
        return j.job_id === jobID;
      });
      newState.browserJobs[jobIndex] = _extends({}, newState.browserJobs[jobIndex], job);
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.DELETE_JOB, function(state, action) {
      var newState = _extends({}, state);
      var jobID = action.res;
      var jobIndex = Array.findIndex(newState.browserJobs, function(job) {
        return job.job_id === jobID;
      });
      if (!(jobIndex === -1)) {
        newState.browserJobs.splice(jobIndex, 1); // Remove job
      }
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.SELECT_TAB, function(state, action) {
      var newTab = action.tab;
      var newState = _extends({}, state, { tab: newTab });
      // Set to capture whenever tab switched
      newState.page = 'capture';
      // Reset captureDidSave if clicked
      newState.currentCapture = _extends({}, state.currentCapture, { captureDidSave: false });
      // Handle difference required of interval input
      if (newTab === 'browser-tab') {
        newState.currentCapture.checkInterval = '1';
        newState.currentCapture.checkIntervalType = AppConstants.BROWSER_INTERVAL_OPTIONS[1];
      } else if (newTab === 'server-tab') {
        newState.currentCapture.checkIntervalType = AppConstants.SERVER_INTERVAL_OPTIONS[1];
      }

      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.CLEAR_LAST_ERROR, function(state, action) {
      var newState = _extends({}, state);
      delete newState.currentCapture.error;
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.UPDATE_SETTINGS, function(state, action) {
      var newState = _extends({}, state);
      var key = Object.keys(action.option)[0];
      newState.settings[key] = action.option[key];
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.MUTE, function(state, action) {
      var newState = _extends({}, state);
      newState.settings.sound_enabled = 'Disabled';
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.UNMUTE, function(state, action) {
      var newState = _extends({}, state);
      newState.settings.sound_enabled = 'Enabled';
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.SURVEY_ANSWER_SATISFIED, function(state, action) {
      var newState = _extends({}, state);
      newState.survey_data.satisfied = action.value;
      newState.survey_data.completed = true;
      if (action.value === true) {
        newState.survey_data.page = 'will_give_feedback';
      } else {
        newState.survey_data.page = 'will_fill_survey';
      }
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.SURVEY_ANSWER_FEEDBACK, function(state, action) {
      var newState = _extends({}, state);
      newState.survey_data.will_give_feedback = action.value;
      return newState;
    }), _defineProperty(_actionsMap, ActionTypes.SURVEY_ANSWER_SURVEY, function(state, action) {
      var newState = _extends({}, state);
      newState.survey_data.will_fill_survey = action.value;
      return newState;
    }), _actionsMap);

    // Important export that seems to be called from dispatch.
    // Not sure how important the function name mapping to file is.

    function visual(state, action) {
      if (state === undefined) state = initialState;

      // Construct with hydrated params if first call
      if (state.hydrated === true) {
        var _newState = _extends({}, initialState);
        _newState.tab = state.tab;
        _newState.page = state.page;
        _newState.currentCapture = _extends({}, initialState.currentCapture, state.currentCapture);
        _newState.settings = _extends({}, initialState.settings, state.settings);
        _newState.survey_data = _extends({}, initialState.survey_data, state.survey_data);
        _newState.pm_user = state.pm_user;
        delete _newState.hydrated;
        return _newState;
      }

      var reduceFn = actionsMap[action.type];
      if (!reduceFn) return state;

      var newState = reduceFn(state, action);
      return newState;
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 624 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

    var $ = __webpack_require__(__webpack_module_template_argument_0__),
      createDesc = __webpack_require__(__webpack_module_template_argument_1__);
    module.exports = __webpack_require__(__webpack_module_template_argument_2__) ? function(object, key, value) {
      return $.setDesc(object, key, createDesc(1, value));
    } : function(object, key, value) {
      object[key] = value;
      return object;
    };

    /***/
  }),
  /* 625 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

    // Thank's IE8 for his funny defineProperty
    module.exports = !__webpack_require__(__webpack_module_template_argument_0__)(function() {
      return Object.defineProperty({}, 'a', { get: function() { return 7; } }).a != 7;
    });

    /***/
  }),
  /* 626 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

    // optional / simple context binding
    var aFunction = __webpack_require__(__webpack_module_template_argument_0__);
    module.exports = function(fn, that, length) {
      aFunction(fn);
      if (that === undefined) return fn;
      switch (length) {
        case 1:
          return function(a) {
            return fn.call(that, a);
          };
        case 2:
          return function(a, b) {
            return fn.call(that, a, b);
          };
        case 3:
          return function(a, b, c) {
            return fn.call(that, a, b, c);
          };
      }
      return function( /* ...args */ ) {
        return fn.apply(that, arguments);
      };
    };

    /***/
  }),
  /* 627 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

    var isObject = __webpack_require__(__webpack_module_template_argument_0__);
    module.exports = function(it) {
      if (!isObject(it)) throw TypeError(it + ' is not an object!');
      return it;
    };

    /***/
  }),
  /* 628 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

    // 7.1.13 ToObject(argument)
    var defined = __webpack_require__(__webpack_module_template_argument_0__);
    module.exports = function(it) {
      return Object(defined(it));
    };

    /***/
  }),
  /* 629 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

    // to indexed object, toObject with fallback for non-array-like ES3 strings
    var IObject = __webpack_require__(__webpack_module_template_argument_0__),
      defined = __webpack_require__(__webpack_module_template_argument_1__);
    module.exports = function(it) {
      return IObject(defined(it));
    };

    /***/
  }),
  /* 630 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

    // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var cof = __webpack_require__(__webpack_module_template_argument_0__);
    module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it) {
      return cof(it) == 'String' ? it.split('') : Object(it);
    };

    /***/
  }),
  /* 631 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

    var store = __webpack_require__(__webpack_module_template_argument_0__)('wks'),
      uid = __webpack_require__(__webpack_module_template_argument_1__),
      Symbol = __webpack_require__(__webpack_module_template_argument_2__).Symbol;
    module.exports = function(name) {
      return store[name] || (store[name] =
        Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
    };

    /***/
  }),
  /* 632 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

    var global = __webpack_require__(__webpack_module_template_argument_0__),
      SHARED = '__core-js_shared__',
      store = global[SHARED] || (global[SHARED] = {});
    module.exports = function(key) {
      return store[key] || (store[key] = {});
    };

    /***/
  }),
  /* 633 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

    var def = __webpack_require__(__webpack_module_template_argument_0__).setDesc,
      has = __webpack_require__(__webpack_module_template_argument_1__),
      TAG = __webpack_require__(__webpack_module_template_argument_2__)('toStringTag');

    module.exports = function(it, tag, stat) {
      if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
    };

    /***/
  }),
  /* 634 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

    // 19.1.3.1 Object.assign(target, source)
    var $export = __webpack_require__(__webpack_module_template_argument_0__);

    $export($export.S + $export.F, 'Object', { assign: __webpack_require__(__webpack_module_template_argument_1__) });

    /***/
  }),
  /* 635 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

    // 19.1.2.1 Object.assign(target, source, ...)
    var $ = __webpack_require__(__webpack_module_template_argument_0__),
      toObject = __webpack_require__(__webpack_module_template_argument_1__),
      IObject = __webpack_require__(__webpack_module_template_argument_2__);

    // should work with symbols and should have deterministic property order (V8 bug)
    module.exports = __webpack_require__(__webpack_module_template_argument_3__)(function() {
      var a = Object.assign,
        A = {},
        B = {},
        S = Symbol(),
        K = 'abcdefghijklmnopqrst';
      A[S] = 7;
      K.split('').forEach(function(k) { B[k] = k; });
      return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
    }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
      var T = toObject(target),
        $$ = arguments,
        $$len = $$.length,
        index = 1,
        getKeys = $.getKeys,
        getSymbols = $.getSymbols,
        isEnum = $.isEnum;
      while ($$len > index) {
        var S = IObject($$[index++]),
          keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
          length = keys.length,
          j = 0,
          key;
        while (length > j)
          if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
      }
      return T;
    } : Object.assign;

    /***/
  }),
  /* 636 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

    // 19.1.3.19 Object.setPrototypeOf(O, proto)
    var $export = __webpack_require__(__webpack_module_template_argument_0__);
    $export($export.S, 'Object', { setPrototypeOf: __webpack_require__(__webpack_module_template_argument_1__).set });

    /***/
  }),
  /* 637 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

    // Works with __proto__ only. Old v8 can't work with null proto objects.
    /* eslint-disable no-proto */
    var getDesc = __webpack_require__(__webpack_module_template_argument_0__).getDesc,
      isObject = __webpack_require__(__webpack_module_template_argument_1__),
      anObject = __webpack_require__(__webpack_module_template_argument_2__);
    var check = function(O, proto) {
      anObject(O);
      if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
    };
    module.exports = {
      set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
        function(test, buggy, set) {
          try {
            set = __webpack_require__(__webpack_module_template_argument_3__)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
            set(test, []);
            buggy = !(test instanceof Array);
          } catch (e) { buggy = true; }
          return function setPrototypeOf(O, proto) {
            check(O, proto);
            if (buggy) O.__proto__ = proto;
            else set(O, proto);
            return O;
          };
        }({}, false) : undefined),
      check: check
    };

    /***/
  }),
  /* 638 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

    // getting tag from 19.1.3.6 Object.prototype.toString()
    var cof = __webpack_require__(__webpack_module_template_argument_0__),
      TAG = __webpack_require__(__webpack_module_template_argument_1__)('toStringTag')
      // ES3 wrong here
      ,
      ARG = cof(function() { return arguments; }()) == 'Arguments';

    module.exports = function(it) {
      var O, T, B;
      return it === undefined ? 'Undefined' : it === null ? 'Null'
        // @@toStringTag case
        :
        typeof(T = (O = Object(it))[TAG]) == 'string' ? T
        // builtinTag case
        :
        ARG ? cof(O)
        // ES3 arguments fallback
        :
        (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
    };

    /***/
  }),
  /* 639 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

    // most Object methods by ES6 should accept primitives
    var $export = __webpack_require__(__webpack_module_template_argument_0__),
      core = __webpack_require__(__webpack_module_template_argument_1__),
      fails = __webpack_require__(__webpack_module_template_argument_2__);
    module.exports = function(KEY, exec) {
      var fn = (core.Object || {})[KEY] || Object[KEY],
        exp = {};
      exp[KEY] = exec(fn);
      $export($export.S + $export.F * fails(function() { fn(1); }), 'Object', exp);
    };

    /***/
  }),
  /* 640 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

    // 19.1.2.14 Object.keys(O)
    var toObject = __webpack_require__(__webpack_module_template_argument_0__);

    __webpack_require__(__webpack_module_template_argument_1__)('keys', function($keys) {
      return function keys(it) {
        return $keys(toObject(it));
      };
    });

    /***/
  }),
  /* 641 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

    // 20.1.2.3 Number.isInteger(number)
    var isObject = __webpack_require__(__webpack_module_template_argument_0__),
      floor = Math.floor;
    module.exports = function isInteger(it) {
      return !isObject(it) && isFinite(it) && floor(it) === it;
    };

    /***/
  }),
  /* 642 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

    // 20.1.2.5 Number.isSafeInteger(number)
    var $export = __webpack_require__(__webpack_module_template_argument_0__),
      isInteger = __webpack_require__(__webpack_module_template_argument_1__),
      abs = Math.abs;

    $export($export.S, 'Number', {
      isSafeInteger: function isSafeInteger(number) {
        return isInteger(number) && abs(number) <= 0x1fffffffffffff;
      }
    });

    /***/
  }),
  /* 643 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

    'use strict';
    var $at = __webpack_require__(__webpack_module_template_argument_0__)(true);

    // 21.1.3.27 String.prototype[@@iterator]()
    __webpack_require__(__webpack_module_template_argument_1__)(String, 'String', function(iterated) {
      this._t = String(iterated); // target
      this._i = 0; // next index
      // 21.1.5.2.1 %StringIteratorPrototype%.next()
    }, function() {
      var O = this._t,
        index = this._i,
        point;
      if (index >= O.length) return { value: undefined, done: true };
      point = $at(O, index);
      this._i += point.length;
      return { value: point, done: false };
    });

    /***/
  }),
  /* 644 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

    var toInteger = __webpack_require__(__webpack_module_template_argument_0__),
      defined = __webpack_require__(__webpack_module_template_argument_1__);
    // true  -> String#at
    // false -> String#codePointAt
    module.exports = function(TO_STRING) {
      return function(that, pos) {
        var s = String(defined(that)),
          i = toInteger(pos),
          l = s.length,
          a, b;
        if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
        a = s.charCodeAt(i);
        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ?
          TO_STRING ? s.charAt(i) : a :
          TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
      };
    };

    /***/
  }),
  /* 645 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__) {

    'use strict';
    var LIBRARY = __webpack_require__(__webpack_module_template_argument_0__),
      $export = __webpack_require__(__webpack_module_template_argument_1__),
      redefine = __webpack_require__(__webpack_module_template_argument_2__),
      hide = __webpack_require__(__webpack_module_template_argument_3__),
      has = __webpack_require__(__webpack_module_template_argument_4__),
      Iterators = __webpack_require__(__webpack_module_template_argument_5__),
      $iterCreate = __webpack_require__(__webpack_module_template_argument_6__),
      setToStringTag = __webpack_require__(__webpack_module_template_argument_7__),
      getProto = __webpack_require__(__webpack_module_template_argument_8__).getProto,
      ITERATOR = __webpack_require__(__webpack_module_template_argument_9__)('iterator'),
      BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
      ,
      FF_ITERATOR = '@@iterator',
      KEYS = 'keys',
      VALUES = 'values';

    var returnThis = function() { return this; };

    module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
      $iterCreate(Constructor, NAME, next);
      var getMethod = function(kind) {
        if (!BUGGY && kind in proto) return proto[kind];
        switch (kind) {
          case KEYS:
            return function keys() { return new Constructor(this, kind); };
          case VALUES:
            return function values() { return new Constructor(this, kind); };
        }
        return function entries() { return new Constructor(this, kind); };
      };
      var TAG = NAME + ' Iterator',
        DEF_VALUES = DEFAULT == VALUES,
        VALUES_BUG = false,
        proto = Base.prototype,
        $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
        $default = $native || getMethod(DEFAULT),
        methods, key;
      // Fix native
      if ($native) {
        var IteratorPrototype = getProto($default.call(new Base));
        // Set @@toStringTag to native iterators
        setToStringTag(IteratorPrototype, TAG, true);
        // FF fix
        if (!LIBRARY && has(proto, FF_ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
        // fix Array#{values, @@iterator}.name in V8 / FF
        if (DEF_VALUES && $native.name !== VALUES) {
          VALUES_BUG = true;
          $default = function values() { return $native.call(this); };
        }
      }
      // Define iterator
      if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
        hide(proto, ITERATOR, $default);
      }
      // Plug for library
      Iterators[NAME] = $default;
      Iterators[TAG] = returnThis;
      if (DEFAULT) {
        methods = {
          values: DEF_VALUES ? $default : getMethod(VALUES),
          keys: IS_SET ? $default : getMethod(KEYS),
          entries: !DEF_VALUES ? $default : getMethod('entries')
        };
        if (FORCED)
          for (key in methods) {
            if (!(key in proto)) redefine(proto, key, methods[key]);
          } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
      }
      return methods;
    };

    /***/
  }),
  /* 646 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

    'use strict';
    var $ = __webpack_require__(__webpack_module_template_argument_0__),
      descriptor = __webpack_require__(__webpack_module_template_argument_1__),
      setToStringTag = __webpack_require__(__webpack_module_template_argument_2__),
      IteratorPrototype = {};

    // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
    __webpack_require__(__webpack_module_template_argument_3__)(IteratorPrototype, __webpack_require__(__webpack_module_template_argument_4__)('iterator'), function() { return this; });

    module.exports = function(Constructor, NAME, next) {
      Constructor.prototype = $.create(IteratorPrototype, { next: descriptor(1, next) });
      setToStringTag(Constructor, NAME + ' Iterator');
    };

    /***/
  }),
  /* 647 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

    var classof = __webpack_require__(__webpack_module_template_argument_0__),
      ITERATOR = __webpack_require__(__webpack_module_template_argument_1__)('iterator'),
      Iterators = __webpack_require__(__webpack_module_template_argument_2__);
    module.exports = __webpack_require__(__webpack_module_template_argument_3__).getIteratorMethod = function(it) {
      if (it != undefined) return it[ITERATOR] ||
        it['@@iterator'] ||
        Iterators[classof(it)];
    };

    /***/
  }),
  /* 648 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

    'use strict';
    var addToUnscopables = __webpack_require__(__webpack_module_template_argument_0__),
      step = __webpack_require__(__webpack_module_template_argument_1__),
      Iterators = __webpack_require__(__webpack_module_template_argument_2__),
      toIObject = __webpack_require__(__webpack_module_template_argument_3__);

    // 22.1.3.4 Array.prototype.entries()
    // 22.1.3.13 Array.prototype.keys()
    // 22.1.3.29 Array.prototype.values()
    // 22.1.3.30 Array.prototype[@@iterator]()
    module.exports = __webpack_require__(__webpack_module_template_argument_4__)(Array, 'Array', function(iterated, kind) {
      this._t = toIObject(iterated); // target
      this._i = 0; // next index
      this._k = kind; // kind
      // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
    }, function() {
      var O = this._t,
        kind = this._k,
        index = this._i++;
      if (!O || index >= O.length) {
        this._t = undefined;
        return step(1);
      }
      if (kind == 'keys') return step(0, index);
      if (kind == 'values') return step(0, O[index]);
      return step(0, [index, O[index]]);
    }, 'values');

    // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
    Iterators.Arguments = Iterators.Array;

    addToUnscopables('keys');
    addToUnscopables('values');
    addToUnscopables('entries');

    /***/
  }),
  /* 649 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

    'use strict';

    exports.__esModule = true;
    exports['default'] = createAll;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _createProvider = __webpack_require__(__webpack_module_template_argument_0__);

    var _createProvider2 = _interopRequireDefault(_createProvider);

    var _createConnect = __webpack_require__(__webpack_module_template_argument_1__);

    var _createConnect2 = _interopRequireDefault(_createConnect);

    function createAll(React) {
      var Provider = _createProvider2['default'](React);
      var connect = _createConnect2['default'](React);

      return { Provider: Provider, connect: connect };
    }

    module.exports = exports['default'];

    /***/
  }),
  /* 650 */
  /***/
  (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

    /* WEBPACK VAR INJECTION */
    (function(process) {
      'use strict';

      exports.__esModule = true;

      var _createClass = (function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
      })();

      var _extends = Object.assign || function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

      exports['default'] = createConnect;

      function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

      function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

      function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

      var _utilsCreateStoreShape = __webpack_require__(__webpack_module_template_argument_0__);

      var _utilsCreateStoreShape2 = _interopRequireDefault(_utilsCreateStoreShape);

      var _utilsShallowEqual = __webpack_require__(__webpack_module_template_argument_1__);

      var _utilsShallowEqual2 = _interopRequireDefault(_utilsShallowEqual);

      var _utilsIsPlainObject = __webpack_require__(__webpack_module_template_argument_2__);

      var _utilsIsPlainObject2 = _interopRequireDefault(_utilsIsPlainObject);

      var _utilsWrapActionCreators = __webpack_require__(__webpack_module_template_argument_3__);

      var _utilsWrapActionCreators2 = _interopRequireDefault(_utilsWrapActionCreators);

      var _invariant = __webpack_require__(392);

      var _invariant2 = _interopRequireDefault(_invariant);

      var defaultMapStateToProps = function defaultMapStateToProps() {
        return {};
      };
      var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
        return { dispatch: dispatch };
      };
      var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
        return _extends({}, parentProps, stateProps, dispatchProps);
      };

      function getDisplayName(Component) {
        return Component.displayName || Component.name || 'Component';
      }

      // Helps track hot reloading.
      var nextVersion = 0;

      function createConnect(React) {
        var Component = React.Component;
        var PropTypes = React.PropTypes;

        var storeShape = _utilsCreateStoreShape2['default'](PropTypes);

        return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
          var shouldSubscribe = Boolean(mapStateToProps);
          var finalMapStateToProps = mapStateToProps || defaultMapStateToProps;
          var finalMapDispatchToProps = _utilsIsPlainObject2['default'](mapDispatchToProps) ? _utilsWrapActionCreators2['default'](mapDispatchToProps) : mapDispatchToProps || defaultMapDispatchToProps;
          var finalMergeProps = mergeProps || defaultMergeProps;
          var shouldUpdateStateProps = finalMapStateToProps.length > 1;
          var shouldUpdateDispatchProps = finalMapDispatchToProps.length > 1;

          // Helps track hot reloading.
          var version = nextVersion++;

          function computeStateProps(store, props) {
            var state = store.getState();
            var stateProps = shouldUpdateStateProps ? finalMapStateToProps(state, props) : finalMapStateToProps(state);

            _invariant2['default'](_utilsIsPlainObject2['default'](stateProps), '`mapStateToProps` must return an object. Instead received %s.', stateProps);
            return stateProps;
          }

          function computeDispatchProps(store, props) {
            var dispatch = store.dispatch;

            var dispatchProps = shouldUpdateDispatchProps ? finalMapDispatchToProps(dispatch, props) : finalMapDispatchToProps(dispatch);

            _invariant2['default'](_utilsIsPlainObject2['default'](dispatchProps), '`mapDispatchToProps` must return an object. Instead received %s.', dispatchProps);
            return dispatchProps;
          }

          function _computeNextState(stateProps, dispatchProps, parentProps) {
            var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
            _invariant2['default'](_utilsIsPlainObject2['default'](mergedProps), '`mergeProps` must return an object. Instead received %s.', mergedProps);
            return mergedProps;
          }

          return function wrapWithConnect(WrappedComponent) {
            var Connect = (function(_Component) {
              _inherits(Connect, _Component);

              Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
                return !_utilsShallowEqual2['default'](this.state.props, nextState.props);
              };

              _createClass(Connect, null, [{
                key: 'displayName',
                value: 'Connect(' + getDisplayName(WrappedComponent) + ')',
                enumerable: true
              }, {
                key: 'WrappedComponent',
                value: WrappedComponent,
                enumerable: true
              }, {
                key: 'contextTypes',
                value: {
                  store: storeShape
                },
                enumerable: true
              }, {
                key: 'propTypes',
                value: {
                  store: storeShape
                },
                enumerable: true
              }]);

              function Connect(props, context) {
                _classCallCheck(this, Connect);

                _Component.call(this, props, context);
                this.version = version;
                this.store = props.store || context.store;

                _invariant2['default'](this.store, 'Could not find "store" in either the context or ' + ('props of "' + this.constructor.displayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + this.constructor.displayName + '".'));

                this.stateProps = computeStateProps(this.store, props);
                this.dispatchProps = computeDispatchProps(this.store, props);
                this.state = {
                  props: this.computeNextState()
                };
              }

              Connect.prototype.computeNextState = function computeNextState() {
                var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

                return _computeNextState(this.stateProps, this.dispatchProps, props);
              };

              Connect.prototype.updateStateProps = function updateStateProps() {
                var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

                var nextStateProps = computeStateProps(this.store, props);
                if (_utilsShallowEqual2['default'](nextStateProps, this.stateProps)) {
                  return false;
                }

                this.stateProps = nextStateProps;
                return true;
              };

              Connect.prototype.updateDispatchProps = function updateDispatchProps() {
                var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

                var nextDispatchProps = computeDispatchProps(this.store, props);
                if (_utilsShallowEqual2['default'](nextDispatchProps, this.dispatchProps)) {
                  return false;
                }

                this.dispatchProps = nextDispatchProps;
                return true;
              };

              Connect.prototype.updateState = function updateState() {
                var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

                var nextState = this.computeNextState(props);
                if (!_utilsShallowEqual2['default'](nextState, this.state.props)) {
                  this.setState({
                    props: nextState
                  });
                }
              };

              Connect.prototype.isSubscribed = function isSubscribed() {
                return typeof this.unsubscribe === 'function';
              };

              Connect.prototype.trySubscribe = function trySubscribe() {
                if (shouldSubscribe && !this.unsubscribe) {
                  this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
                  this.handleChange();
                }
              };

              Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
                if (this.unsubscribe) {
                  this.unsubscribe();
                  this.unsubscribe = null;
                }
              };

              Connect.prototype.componentDidMount = function componentDidMount() {
                this.trySubscribe();
              };

              Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
                if (!_utilsShallowEqual2['default'](nextProps, this.props)) {
                  if (shouldUpdateStateProps) {
                    this.updateStateProps(nextProps);
                  }

                  if (shouldUpdateDispatchProps) {
                    this.updateDispatchProps(nextProps);
                  }

                  this.updateState(nextProps);
                }
              };

              Connect.prototype.componentWillUnmount = function componentWillUnmount() {
                this.tryUnsubscribe();
              };

              Connect.prototype.handleChange = function handleChange() {
                if (this.updateStateProps()) {
                  this.updateState();
                }
              };

              Connect.prototype.getWrappedInstance = function getWrappedInstance() {
                return this.refs.wrappedInstance;
              };

              Connect.prototype.render = function render() {
                return React.createElement(WrappedComponent, _extends({
                  ref: 'wrappedInstance'
                }, this.state.props));
              };

              return Connect;
            })(Component);

            if (
              // Node-like CommonJS environments (Browserify, Webpack)
              typeof process !== 'undefined' && "object" !== 'undefined' && ("production") !== 'production' ||
              // React Native
              typeof __DEV__ !== 'undefined' && __DEV__ //eslint-disable-line no-undef
            ) {
              Connect.prototype.componentWillUpdate = function componentWillUpdate() {
                if (this.version === version) {
                  return;
                }

                // We are hot reloading!
                this.version = version;

                // Update the state and bindings.
                this.trySubscribe();
                this.updateStateProps();
                this.updateDispatchProps();
                this.updateState();
              };
            }

            return Connect;
          };
        };
      }

      module.exports = exports['default'];
      /* WEBPACK VAR INJECTION */
    }.call(exports, __webpack_require__(194)))

    /***/
  })
  /******/
])));